{"version":3,"file":"js/TemplateDetail.c759061872d9d90a87b5.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/WithHistory.js","webpack:///./src/SmartComponents/Modals/DeleteSetModal.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./src/SmartComponents/PatchSetDetail/PatchSetDetail.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nimport WithHistory from './WithHistory';\nvar BaseInvTable = function (props) {\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: props.history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\" }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n    history: PropTypes.object,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nvar CompatiblityWrapper = function (props, ref) { return _jsx(WithHistory, __assign({ innerRef: ref, Component: InvTable }, props)); };\nexport default React.forwardRef(CompatiblityWrapper);\n//# sourceMappingURL=InventoryTable.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useMemo } from 'react';\nimport * as reactRouter from 'react-router-dom';\nimport useChrome from '../useChrome';\nvar WithReactRouterHistory = function (_a) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var history = reactRouter.useHistory();\n    return _jsx(Component, __assign({ history: history }, props));\n};\nvar WithChromeHistory = function (_a) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var chromeHistory = useChrome().chromeHistory;\n    return _jsx(Component, __assign({ history: chromeHistory }, props));\n};\nvar WithHistory = function (_a, ref) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var HistoryComponent = useMemo(function () { return (typeof reactRouter.useHistory === 'function' ? WithReactRouterHistory : WithChromeHistory); }, [Component, props]);\n    return _jsx(HistoryComponent, __assign({ innerRef: ref, Component: Component }, props));\n};\nexport default React.forwardRef(WithHistory);\n//# sourceMappingURL=WithHistory.js.map","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Checkbox, Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst DeleteSetModal = ({ isModalOpen, setModalOpen, templateName, onConfirm }) => {\n    const [isCheckboxChecked, setCheckboxChecked] = useState(false);\n\n    const onClose = () => {\n        setModalOpen(false);\n        setCheckboxChecked(false);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.titlesTemplateDeleteModalTitle)}\n            titleIconVariant=\"warning\"\n            isOpen={isModalOpen}\n            onClose={onClose}\n            variant=\"small\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={() => {onClose(); onConfirm();}} isDisabled={!isCheckboxChecked}>\n                    {intl.formatMessage(messages.labelsDelete)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {intl.formatMessage(messages.titlesTemplateDeleteModalText, { templateName, b: (...chunks) => <b>{chunks}</b> })}\n            <Checkbox\n                className=\"pf-u-mt-md\"\n                isChecked={isCheckboxChecked}\n                checked={isCheckboxChecked}\n                onChange={(value) => setCheckboxChecked(value)}\n                label={intl.formatMessage(messages.titlesTemplateDeleteModalCheckbox)}\n                id=\"template-delete-modal-checkbox\"\n            />\n        </Modal>\n    );\n};\n\nDeleteSetModal.propTypes = {\n    isModalOpen: propTypes.bool,\n    setModalOpen: propTypes.func,\n    templateName: propTypes.string,\n    onConfirm: propTypes.func\n};\n\nexport default DeleteSetModal;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchIDs, fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data?.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const filterSatelliteManagedSystems = (systemsIDs) =>  {\n    return fetchIDs('/ids/systems', {\n        limit: -1, 'filter[satellite_managed]': 'false',\n        filter: { stale: [true, false] }\n    }).then((systemsNotManagedBySatellite) => {\n        return systemsIDs.filter(systemID =>\n            systemsNotManagedBySatellite?.data?.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length === 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsNoAssignedSystems', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithPatchSet.length > 0 && systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../PatchSet/PatchSetAssets';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n        handleModalToggle(true);\n\n        if (result.status === 200) {\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n        else {\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications().failure\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect, useState, Fragment, useRef } from 'react';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { NoAppliedSystems } from '../../PresentationalComponents/Snippets/EmptyStates';\nimport { useBulkSelectConfig, useDeepCompareEffect, useGetEntities, useRemoveFilter } from '../../Utilities/Hooks';\nimport {\n    changePatchSetDetailsSystemsMetadata,\n    changePatchSetDetailsSystemsParams,\n    changeTags,\n    clearInventoryReducer,\n    clearTemplateDetail,\n    fetchPatchSetSystemsNoFiltersAction,\n    fetchTemplateDetail\n} from '../../store/Actions/Actions';\nimport {\n    Bullseye,\n    Dropdown,\n    DropdownItem,\n    DropdownPosition,\n    DropdownToggle,\n    Skeleton,\n    Spinner,\n    Text,\n    TextContent\n} from '@patternfly/react-core';\nimport DeleteSetModal from '../Modals/DeleteSetModal';\nimport { deletePatchSet, fetchPatchSetSystems } from '../../Utilities/api';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { DEFAULT_PATCH_TITLE, patchSetDeleteNotifications } from '../../Utilities/constants';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport {\n    arrayFromObj,\n    decodeQueryparams,\n    encodeURLParams,\n    filterSelectedActiveSystemIDs,\n    persistantParams\n} from '../../Utilities/Helpers';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport { patchSetDetailRowActions } from '../PatchSet/PatchSetAssets';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport UnassignSystemsModal from '../Modals/UnassignSystemsModal';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport {\n    buildActiveFiltersConfig,\n    buildTemplateFilterConfig,\n    templateSystemsColumnsMerger\n} from '../../Utilities/SystemsHelpers';\nimport { combineReducers } from 'redux';\nimport { defaultReducers } from '../../store';\nimport { inventoryEntitiesReducer, modifyTemplateDetailSystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { systemsListColumns } from '../Systems/SystemsListAssets';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { ID_API_ENDPOINTS, useOnSelect } from '../../Utilities/useOnSelect';\nimport { systemSelectAction } from '../../store/Actions/Actions';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst PatchSetDetail = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const chrome = useChrome();\n    const [searchParams, setSearchParams] = useSearchParams();\n    const navigate = useNavigate();\n\n    const store = useStore();\n    const inventory = useRef(null);\n\n    const { templateName: patchSetId } = useParams();\n\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [isHeaderDropdownOpen, setHeaderDropdownOpen] = useState(false);\n    const [isDeleteConfirmModalOpen, setDeleteConfirmModalOpen] = useState(false);\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        systemsIDs: [],\n        shouldRefresh: false\n    });\n\n    const templateDetails = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore\n    );\n\n    const isHeaderLoading = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore?.status?.isLoading ?? true\n    );\n\n    const detailStatus = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore.status\n    );\n\n    const systems = useSelector(\n        ({ entities }) => entities?.rows || [], shallowEqual\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n\n    const systemStatus = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.queryParams || {}\n    );\n\n    const templateHasSystemsLoading = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.templateHasSystemsLoading\n    );\n\n    const templateHasSystems = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.templateHasSystems\n    );\n\n    const { hasAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n\n    const patchSetName = templateDetails.data.attributes.name;\n\n    useEffect(()=>{\n        patchSetName && chrome.updateDocumentTitle(`${patchSetName} - ${intl.formatMessage(messages.titlesTemplate)}\n        ${DEFAULT_PATCH_TITLE}`);\n    }, [chrome, patchSetName]);\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.templateSystems(patchSetId),\n            queryParams,\n            selectionDispatcher: systemSelectAction\n        }\n    );\n\n    const apply = (params) => {\n        dispatch(changePatchSetDetailsSystemsParams(params));\n    };\n\n    const openPatchSetAssignWizard = () => {\n        setPatchSetState({\n            ...patchSetState,\n            isPatchSetWizardOpen: true\n        });\n    };\n\n    const refreshTable = () => {\n        // timestamp is used to force inventory to refresh\n        // if it wasn't there inventory might ignore request to refresh because parameters are the same\n        inventory?.current?.onRefreshData({ timestamp: Date.now() });\n\n        onSelect('none');\n\n        dispatch(fetchTemplateDetail(patchSetId));\n    };\n\n    useEffect(() => {\n        dispatch(fetchPatchSetSystemsNoFiltersAction({ id: patchSetId, limit: 1 }));\n\n        return () => {\n            dispatch(clearTemplateDetail());\n            dispatch(clearInventoryReducer());\n        };\n    }, []);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh === true) {\n            refreshTable();\n            setPatchSetState({ ...patchSetState, shouldRefresh: false });\n            dispatch(fetchPatchSetSystemsNoFiltersAction({ id: patchSetId, limit: 1 }));\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams('?' + searchParams.toString()));\n\n            dispatch(fetchTemplateDetail(patchSetId));\n\n            setFirstMount(false);\n        } else {\n            setSearchParams(encodeURLParams(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const openSystemUnassignModal = ids => {\n        setPatchSetState({ ...patchSetState, isUnassignSystemsModalOpen: true, systemsIDs: ids });\n    };\n\n    const deleteSet = () => {\n        deletePatchSet(patchSetId).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).success));\n            navigate('../templates');\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).error));\n        });\n    };\n\n    const applyMetadata = (metadata) => {\n        dispatch(changePatchSetDetailsSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const getEntities = useGetEntities(\n        fetchPatchSetSystems,\n        apply,\n        { id: patchSetId },\n        setSearchParams,\n        applyMetadata,\n        applyGlobalFilter\n    );\n\n    const dropdownItems = [\n        <DropdownItem\n            key=\"edit-patch-set\"\n            component=\"button\"\n            onClick={() => openPatchSetAssignWizard()}\n        >\n            {intl.formatMessage(messages.labelsButtonEditTemplate)}\n        </DropdownItem>,\n        <DropdownItem\n            key=\"delete-patch-set\"\n            component=\"button\"\n            onClick={() => setDeleteConfirmModalOpen(true)}\n        >\n            {intl.formatMessage(messages.labelsButtonRemoveTemplate)}\n        </DropdownItem>\n    ];\n\n    const decodedParams = decodeQueryparams('?' + searchParams.toString());\n\n    const { systemProfile, selectedTags, filter, search, page, perPage, sort } = queryParams;\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems);\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply);\n\n    const filterConfig = buildTemplateFilterConfig(search, apply);\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    return (\n        detailStatus?.hasError\n            ? <ErrorHandler code={detailStatus?.code} />\n            : <Fragment>\n                <DeleteSetModal\n                    templateName={patchSetName}\n                    isModalOpen={isDeleteConfirmModalOpen}\n                    setModalOpen={setDeleteConfirmModalOpen}\n                    onConfirm={deleteSet}\n                />\n                {patchSetState.isPatchSetWizardOpen &&\n                    <PatchSetWizard\n                        systemsIDs={patchSetState.systemsIDs}\n                        setBaselineState={setPatchSetState}\n                        patchSetID={patchSetId}\n                    />}\n                <UnassignSystemsModal\n                    unassignSystemsModalState={patchSetState}\n                    setUnassignSystemsModalOpen={setPatchSetState}\n                />\n                <Header\n                    title={isHeaderLoading ? <Skeleton style={{ width: 300 }} /> : patchSetName}\n                    headerOUIA={'template-details'}\n                    breadcrumbs={[\n                        {\n                            title: intl.formatMessage(messages.templateDetailHeaderBreadcrumb),\n                            to: '/templates',\n                            isActive: false\n                        },\n                        {\n                            title: isHeaderLoading ? <Skeleton style={{ width: 150 }} /> : patchSetName,\n                            isActive: true\n                        }\n                    ]}\n                    actions={\n                        <Dropdown\n                            position={DropdownPosition.right}\n                            onSelect={() => {\n                                setHeaderDropdownOpen(false);\n                                document.getElementById('patch-set-detail-header-kebab').focus();\n                            }}\n                            toggle={\n                                <DropdownToggle\n                                    id=\"patch-set-detail-header-kebab\"\n                                    className=\"pf-u-mr-xl\"\n                                    onToggle={(isOpen) => setHeaderDropdownOpen(isOpen)}\n                                    style={{ minWidth: 150 }}\n                                >\n                                    {intl.formatMessage(messages.labelsActions)}\n                                </DropdownToggle>\n                            }\n                            isOpen={isHeaderDropdownOpen}\n                            dropdownItems={dropdownItems}\n                        />\n                    }\n                >\n                    <table border=\"0\" style={{ marginTop: 8 }}>\n                        <tbody>\n                            <tr>\n                                <td style={{ width: 300 }}>{intl.formatMessage(messages.templateDetailTableDescription)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 300 }} />\n                                        : templateDetails.data.attributes.description\n                                        || intl.formatMessage(messages.titlesTemplateNoDescription)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableUpToDate)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.config.to_time)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableCreatedBy)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : templateDetails.data.attributes.creator}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTablePublished)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.published)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableLastEdited)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.last_edited)}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </Header>\n                <Main>\n                    <TextContent>\n                        <Text component=\"h2\" className=\"pf-u-mb-md\">\n                            {intl.formatMessage(messages.templateDetailTableTitle)}\n                        </Text>\n                    </TextContent>\n                    {templateHasSystemsLoading\n                        ? (\n                            <Bullseye>\n                                <Spinner size=\"xl\" />\n                            </Bullseye>\n                        ) : templateHasSystems\n                            ? systemStatus.hasError\n                                ? <ErrorHandler code={systemStatus.code} />\n                                : <InventoryTable\n                                    ref={inventory}\n                                    isFullView\n                                    autoRefresh\n                                    initialLoading\n                                    hideFilters={{ all: true, tags: false, operatingSystem: false }}\n                                    columns={(defaultColumns) => templateSystemsColumnsMerger(defaultColumns)}\n                                    showTags\n                                    onLoad={({ mergeWithEntities }) => {\n                                        store.replaceReducer(combineReducers({\n                                            ...defaultReducers,\n                                            ...mergeWithEntities(\n                                                inventoryEntitiesReducer(systemsListColumns(true), modifyTemplateDetailSystems),\n                                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                                            )\n                                        }));\n                                    }}\n                                    customFilters={{\n                                        patchParams: {\n                                            search,\n                                            filter,\n                                            systemProfile,\n                                            selectedTags\n                                        }\n                                    }}\n                                    paginationProps={{\n                                        isDisabled: totalItems === 0\n                                    }}\n                                    getEntities={getEntities}\n                                    bulkSelect={bulkSelectConfig}\n                                    tableProps={{\n                                        canSelectAll: false,\n                                        variant: TableVariant.compact,\n                                        className: 'patchCompactInventory',\n                                        isStickyHeader: true,\n                                        actionResolver: () => hasAccess ? patchSetDetailRowActions(openSystemUnassignModal) : []\n                                    }}\n                                    actionsConfig={{\n                                        actions: [\n                                            '', // intentionally empty, remediation button placeholder\n                                            {\n                                                key: 'remove-multiple-systems',\n                                                label: intl.formatMessage(\n                                                    messages.titlesTemplateRemoveFromSystems,\n                                                    { systemsCount: selectedCount }\n                                                ),\n                                                onClick: () =>\n                                                    openSystemUnassignModal(filterSelectedActiveSystemIDs(selectedRows)),\n                                                props: { isDisabled: selectedCount === 0 }\n                                            }\n                                        ]\n                                    }}\n                                    filterConfig={filterConfig}\n                                    activeFiltersConfig={activeFiltersConfig}\n                                />\n                            : <NoAppliedSystems onButtonClick={() => openPatchSetAssignWizard()} />}\n                </Main>\n            </Fragment>\n    );\n};\n\nexport default PatchSetDetail;\n","import { createAdvisorySystemsRows, createSystemsRows, createPatchSetDetailRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows, fetchRejected } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state, lastAction) => {\n    // this is pretty scuffed, but trust me it cannot be solved more elegantly because\n    // single item select actions are triggered by Inventory and contain only system id\n    // but we also need to match available_evra for each selected system for remediations\n    // this does not happen with bulk select action because they are implemented by Patchman\n    // the id-evra mapping is cached to minimize O(n^2) time complexity of id-evra matching\n    if (lastAction === 'SELECT_ENTITY') {\n        let idToEvraMapping = state.packageEvraCache;\n\n        if (idToEvraMapping === undefined) {\n            idToEvraMapping = {};\n            state.rows.forEach(row => idToEvraMapping[row.id] = row.available_evra);\n            state.packageEvraCache = idToEvraMapping;\n        }\n\n        state.selectedRows = state.selectedRows ? Object.fromEntries(\n            Object.entries(state.selectedRows).map(([id, value]) =>\n                value === true ? [id, idToEvraMapping[id]] : [id, value]\n            )\n        ) : state.selectedRows;\n    }\n\n    if (lastAction === 'LOAD_ENTITIES_FULFILLED') {\n        state.packageEvraCache = undefined;\n    }\n\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyTemplateDetailSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createPatchSetDetailRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyAdvisorySystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createAdvisorySystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState, action.type);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection, action.type);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["_a","component","props","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","error","concat","children","__assign","assign","n","arguments","apply","this","BaseInvTable","store","Cmp","className","Suspense","fallback","ScalprumComponent","history","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","Component","WithReactRouterHistory","WithChromeHistory","chromeHistory","HistoryComponent","useMemo","DeleteSetModal","_ref","isModalOpen","setModalOpen","templateName","onConfirm","_useState","useState","_useState2","_slicedToArray","isCheckboxChecked","setCheckboxChecked","onClose","React","Modal","title","intl","formatMessage","messages","titlesTemplateDeleteModalTitle","titleIconVariant","isOpen","variant","actions","Button","key","onClick","isDisabled","labelsDelete","labelsCancel","titlesTemplateDeleteModalText","b","_len","chunks","Array","_key","Checkbox","isChecked","checked","onChange","value","label","titlesTemplateDeleteModalCheckbox","id","filterSystemsWithoutSets","systemsIDs","fetchSystems","limit","filter","stale","then","allSystemsWithPatchSet","systemID","_allSystemsWithPatchS","data","some","system","filterSatelliteManagedSystems","fetchIDs","systemsNotManagedBySatellite","_systemsNotManagedByS","renderUnassignModalMessages","bodyMessage","systemsCount","GridItem","UnassignSystemsModal","_ref$unassignSystemsM","unassignSystemsModalState","setUnassignSystemsModalOpen","isUnassignSystemsModalOpen","systemsWithPatchSet","setSystemWithPatchSet","_useState3","_useState4","systemsLoading","setSystemsLoading","handleModalToggle","shouldRefresh","handleModalClose","handleUnassignment","dispatch","useDispatch","handleSystemsRemoval","_asyncToGenerator","_regeneratorRuntime","_callee","result","_context","prev","next","unassignSystemFromPatchSet","inventory_ids","sent","status","addNotification","patchSetUnassignSystemsNotifications","success","failure","stop","useUnassignSystemsHook","systemsWithoutPatchSetCount","textUnassignSystemsTitle","labelsRemove","Grid","hasGutter","Skeleton","Fragment","injectIntl","useIntl","chrome","useChrome","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","navigate","useNavigate","useStore","inventory","useRef","patchSetId","useParams","_React$useState","_React$useState2","firstMount","setFirstMount","isHeaderDropdownOpen","setHeaderDropdownOpen","isDeleteConfirmModalOpen","setDeleteConfirmModalOpen","_useState5","isPatchSetWizardOpen","_useState6","patchSetState","setPatchSetState","templateDetails","useSelector","PatchSetDetailStore","isHeaderLoading","_ref2","_PatchSetDetailStore$","_PatchSetDetailStore$2","isLoading","detailStatus","_ref3","systems","_ref4","entities","rows","shallowEqual","selectedRows","_ref5","systemStatus","_ref6","totalItems","_ref7","total","queryParams","_ref8","PatchSetDetailSystemsStore","templateHasSystemsLoading","_ref9","templateHasSystems","_ref10","hasAccess","usePermissionsWithContext","patchSetName","attributes","name","updateDocumentTitle","titlesTemplate","DEFAULT_PATCH_TITLE","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","templateSystems","selectionDispatcher","systemSelectAction","params","changePatchSetDetailsSystemsParams","openPatchSetAssignWizard","_objectSpread","fetchPatchSetSystemsNoFiltersAction","clearTemplateDetail","clearInventoryReducer","_inventory$current","current","onRefreshData","timestamp","Date","now","fetchTemplateDetail","useDeepCompareEffect","decodeQueryparams","toString","encodeURLParams","openSystemUnassignModal","ids","getEntities","useGetEntities","fetchPatchSetSystems","metadata","changePatchSetDetailsSystemsMetadata","tags","changeTags","dropdownItems","DropdownItem","labelsButtonEditTemplate","labelsButtonRemoveTemplate","decodedParams","systemProfile","selectedTags","search","page","perPage","sort","selectedCount","arrayFromObj","bulkSelectConfig","useBulkSelectConfig","total_items","_useRemoveFilter","useRemoveFilter","deleteFilters","filterConfig","buildTemplateFilterConfig","activeFiltersConfig","buildActiveFiltersConfig","hasError","ErrorHandler","code","deletePatchSet","patchSetDeleteNotifications","PatchSetWizard","setBaselineState","patchSetID","Header","style","width","headerOUIA","breadcrumbs","templateDetailHeaderBreadcrumb","to","isActive","Dropdown","position","DropdownPosition","right","document","getElementById","focus","toggle","DropdownToggle","onToggle","minWidth","labelsActions","border","marginTop","templateDetailTableDescription","description","titlesTemplateNoDescription","templateDetailTableUpToDate","processDate","config","to_time","templateDetailTableCreatedBy","creator","templateDetailTablePublished","published","templateDetailTableLastEdited","last_edited","Main","TextContent","Text","templateDetailTableTitle","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","operatingSystem","columns","defaultColumns","templateSystemsColumnsMerger","showTags","onLoad","_ref11","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","systemsListColumns","modifyTemplateDetailSystems","persistantParams","customFilters","patchParams","paginationProps","bulkSelect","tableProps","canSelectAll","TableVariant","compact","isStickyHeader","actionResolver","patchSetDetailRowActions","actionsConfig","titlesTemplateRemoveFromSystems","filterSelectedActiveSystemIDs","NoAppliedSystems","onButtonClick","initialState","offset","modifyInventory","state","loaded","createSystemsRows","modifyPackageSystems","lastAction","idToEvraMapping","packageEvraCache","undefined","forEach","row","available_evra","fromEntries","entries","map","createPackageSystemsRows","createPatchSetDetailRows","modifyAdvisorySystems","createAdvisorySystemsRows","inventoryModifier","action","newState","type","fetchRejected","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}