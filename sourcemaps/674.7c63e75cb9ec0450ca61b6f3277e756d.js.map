{"version":3,"file":"js/674.1666817824307.af6987a14fa002675835.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/Routes.js","webpack:///./src/Utilities/getBaseName.js","webpack:///./src/store/Reducers/SystemDetailStore.js","webpack:///./src/store/Reducers/AdvisoryDetailStore.js","webpack:///./src/store/Reducers/PackageDetailStore.js","webpack:///./src/store/Reducers/PackagesListStore.js","webpack:///./src/store/Reducers/SystemsStore.js","webpack:///./src/store/Reducers/PackageSystemsStore.js","webpack:///./src/store/Reducers/AdvisorySystemsStore.js","webpack:///./src/store/Reducers/GlobalFilterStore.js","webpack:///./src/store/Reducers/PatchSetsReducer.js","webpack:///./src/store/Reducers/SpecificPatchSetReducer.js","webpack:///./src/store/index.js","webpack:///./src/store/Reducers/AdvisoryListStore.js","webpack:///./src/store/Reducers/CvesListStore.js"],"sourcesContent":["import NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport '@redhat-cloud-services/frontend-components-notifications/index.css';\nimport { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory, useLocation, withRouter } from 'react-router-dom';\nimport './App.scss';\nimport { Routes } from './Routes';\nimport { changeGlobalTags, changeProfile, globalFilter } from './store/Actions/Actions';\nimport { mapGlobalFilters } from './Utilities/Helpers';\n\nconst App = () => {\n    const dispatch = useDispatch();\n    const [config, setConfig] = useState({\n        selectedTags: [],\n        systemProfile: false\n    });\n    const location = useLocation();\n    const history = useHistory();\n\n    const listenNavigation = () => {\n        return  insights.chrome.on('APP_NAVIGATION', event => {\n            if (event.domEvent) {\n                history.push(`/${event.navId}`);\n            }\n        });\n    };\n\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp('patch');\n\n        if (insights.chrome?.globalFilterScope) {\n            insights.chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n                const SIDs = insights.chrome?.mapGlobalFilter?.(data, false, true)[1];\n                const TAGs = insights.chrome?.mapGlobalFilter?.(data)\n                ?.filter(item => !item.includes('Workloads'));\n\n                const globalFilterConfig = mapGlobalFilters(TAGs, SIDs, data?.Workloads);\n\n                if (!isEqual(config, globalFilterConfig)) {\n                    dispatch(globalFilter(globalFilterConfig));\n                    setConfig(globalFilterConfig);\n                    dispatch(changeGlobalTags(globalFilterConfig.selectedTags));\n                    dispatch(changeProfile(globalFilterConfig.systemProfile));\n                }\n\n            });\n        }\n\n        const unregister = listenNavigation();\n        return () => unregister();\n    }, []);\n\n    return (\n        <React.Fragment>\n            <NotificationPortal />\n            <Routes childProps={{ location, history }} />\n        </React.Fragment>\n    );\n};\n\nexport default withRouter(App);\n","import some from 'lodash/some';\nimport PropTypes from 'prop-types';\nimport React, { Fragment, lazy, Suspense } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { useFeatureFlag } from './Utilities/Hooks';\nimport { featureFlags } from './Utilities/constants';\n\nconst Advisories = lazy(() =>\n    import(\n        /* webpackChunkName: \"Advisories\" */ './SmartComponents/Advisories/Advisories'\n    )\n);\n\nconst Systems = lazy(() =>\n    import(\n        /* webpackChunkName: \"Systems\" */ './SmartComponents/Systems/Systems'\n    )\n);\n\nconst InventoryDetail = lazy(() =>\n    import(\n        /* webpackChunkName: \"InventoryDetail\" */ './SmartComponents/SystemDetail/InventoryDetail'\n    )\n);\n\nconst AdvisoryPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"AdvisoryyPage\" */ './SmartComponents/AdvisoryDetail/AdvisoryDetail'\n    )\n);\n\nconst PackagsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"Packages\" */ './SmartComponents/Packages/Packages'\n    )\n);\n\nconst PackageDetail = lazy(() =>\n    import(\n        /* webpackChunkName: \"PackageDetail\" */ './SmartComponents/PackageDetail/PackageDetail'\n    )\n);\n\nconst Templates = lazy(() =>\n    import(\n        /* webpackChunkName: \"PackageDetail\" */ './SmartComponents/PatchSet/PatchSet'\n    )\n);\nexport const paths = {\n    advisories: {\n        title: 'Applicable advisories',\n        to: '/advisories'\n    },\n    systems: {\n        title: 'Systems',\n        to: '/systems/'\n    },\n    inventoryDetail: {\n        title: 'Inventory detail',\n        to: '/systems/:inventoryId'\n    },\n    advisoryDetail: {\n        title: 'Advisory detail',\n        to: '/advisories/:advisoryId'\n    },\n    advisoryDetailSystem: {\n        title: '',\n        to: '/advisories/:advisoryId/:inventoryId'\n    },\n    packages: {\n        title: 'Packages',\n        to: '/packages'\n    },\n    packageDetail: {\n        title: 'Package detail',\n        to: '/packages/:packageName'\n    },\n    packageDetailSystem: {\n        title: '',\n        to: '/packages/:packageName/:inventoryId'\n    },\n    templates: {\n        title: 'Templates',\n        to: '/templates'\n    }\n};\n\nexport const Routes = (props) => {\n\n    const path = props.childProps.location.pathname;\n\n    const isPatchSetEnabled = useFeatureFlag(featureFlags.patch_set);\n\n    return (\n        <Suspense fallback={Fragment}>\n            <Switch>\n                <Redirect\n                    from={paths.advisoryDetailSystem.to}\n                    to={paths.inventoryDetail.to}\n                />\n                <Redirect\n                    from={paths.packageDetailSystem.to}\n                    to={paths.inventoryDetail.to}\n                />\n                <Route\n                    path={paths.inventoryDetail.to}\n                    component={InventoryDetail}\n                />\n                <Route exact path={paths.systems.to} component={Systems} />\n                <Route\n                    exact\n                    path={paths.advisoryDetail.to}\n                    component={AdvisoryPage}\n                />\n                <Route\n                    exact\n                    path={paths.advisories.to}\n                    component={Advisories}\n                />\n                <Route\n                    exact\n                    path={paths.packages.to}\n                    component={PackagsPage}\n                />\n                <Route\n                    exact\n                    path={paths.packageDetail.to}\n                    component={PackageDetail}\n                />\n                {isPatchSetEnabled && <Route\n                    exact\n                    path={paths.templates.to}\n                    component={Templates}\n                />}\n\n                <Route\n                    render={() =>\n                        (\n                            (!isPatchSetEnabled || !some(paths, p => p.to === path)) && (\n                                <Redirect to={paths.advisories.to} />\n                            )\n                        )\n                    }\n                />\n            </Switch>\n        </Suspense>\n    );\n};\n\nRoutes.propTypes = {\n    childProps: PropTypes.shape({\n        location: PropTypes.shape({\n            pathname: PropTypes.string\n        }),\n        history: PropTypes.any\n    })\n};\n","function getBaseName(pathname) {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}/${pathName[1] || ''}`;\n}\n\nexport default getBaseName;\n","import React from 'react';\nimport SystemDetail from '../../SmartComponents/SystemDetail/SystemDetail';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const SystemDetailStore = (state = initialState, { type, payload }) => {\n    switch (type) {\n        case 'FETCH_SYSTEM_DETAIL_FULFILLED':\n            state.hasThirdPartyRepo = payload.data?.attributes.third_party;\n            state.patchSetName = payload.data?.attributes.baseline_name;\n            return state;\n        case 'LOAD_ENTITY_PENDING':\n            return {\n                ...state,\n                loaded: false,\n                activeApps: [\n                    {\n                        title: 'Patch',\n                        name: 'patch',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        case 'LOAD_ENTITY_FULFILLED':\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Patch',\n                        name: 'patch',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        case 'LOAD_ENTITY_REJECTED':\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Patch',\n                        name: 'patch',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import { CLEAR_ADVISORY_DETAILS, FETCH_ADVISORY_DETAILS } from '../ActionTypes';\nimport {\n\n    fetchPending,\n    fetchRejected\n} from './HelperReducers';\n\nexport let initialState = {\n    data: { attributes: {} },\n    status: { isLoading: true }\n};\n\n// Reducer\nexport const AdvisoryDetailStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case FETCH_ADVISORY_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                status: { isLoading: false },\n                data: action.payload.data,\n                error: {}\n            };\n\n        case FETCH_ADVISORY_DETAILS + '_PENDING':\n            return fetchPending(newState);\n\n        case FETCH_ADVISORY_DETAILS + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case CLEAR_ADVISORY_DETAILS:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n","import { CLEAR_PACKAGE_DETAILS, FETCH_PACKAGE_DETAILS } from '../ActionTypes';\nimport { fetchPending, fetchRejected } from './HelperReducers';\n\nexport let initialState = {\n    data: { attributes: {} },\n    status: { isLoading: true }\n};\n\n// Reducer\nexport const PackageDetailStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case FETCH_PACKAGE_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                status: { isLoading: false },\n                data: action.payload.data,\n                error: {}\n            };\n\n        case FETCH_PACKAGE_DETAILS + '_PENDING':\n            return fetchPending(newState);\n\n        case FETCH_PACKAGE_DETAILS + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case CLEAR_PACKAGE_DETAILS:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults, packagesListDefaultFilters } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport { changeFilters, fetchFulfilled, fetchPending, fetchRejected } from './HelperReducers';\n\nconst initialStore = { ...storeListDefaults,  queryParams: packagesListDefaultFilters };\n\nexport const PackagesListStore = (state = initialStore, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_PACKAGES_LIST + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_PACKAGES_LIST + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_PACKAGES_LIST + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_PACKAGES_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\nimport { changeFilters } from './HelperReducers';\nimport { changeListParams } from '../../Utilities/Helpers';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    selectedRows: {},\n    queryParams: {\n        page: 1,\n        perPage: 20,\n        filter: {\n            stale: [true, false]\n        }\n    }\n};\n\n// Reducer\nexport const SystemsStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            newState.queryParams = changeListParams(newState.queryParams, action.payload);\n            return newState;\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        case ActionTypes.CHANGE_SYSTEMS_METADATA:\n            newState.metadata = action.payload;\n            return newState;\n\n        case ActionTypes.TOGGLE_ALL_SELECTED:\n            newState.areAllSelected = action.payload;\n            return newState;\n\n        default:\n            return state;\n    }\n};\n\n","import * as ActionTypes from '../ActionTypes';\nimport { changeFilters } from './HelperReducers';\nimport { changeListParams } from '../../Utilities/Helpers';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nexport const initialState = {\n    selectedRows: {},\n    queryParams: {\n        page: 1,\n        perPage: 20\n    }\n};\n\nexport const PackageSystemsStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n\n        case ActionTypes.CHANGE_PACKAGE_SYSTEMS_PARAMS:\n            newState.queryParams = changeListParams(newState.queryParams, action.payload);\n            return newState;\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        case ActionTypes.CLEAR_PACKAGE_SYSTEMS_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\nimport { changeFilters } from './HelperReducers';\nimport { changeListParams } from '../../Utilities/Helpers';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nexport const initialState = {\n    selectedRows: {},\n    queryParams: {\n        page: 1,\n        perPage: 20\n    }\n};\n// Reducer\n\nexport const AdvisorySystemsStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n\n        case ActionTypes.CHANGE_AFFECTED_SYSTEMS_PARAMS:\n            newState.queryParams = changeListParams(newState.queryParams, action.payload);\n            return newState;\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        case ActionTypes.CLEAR_ADVISORY_SYSTEMS_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n\n","import * as ActionTypes from '../ActionTypes';\n\nconst initialState = {\n    selectedGlobalTags: [],\n    selectedTags: [],\n    systemProfile: undefined\n};\n\nexport const GlobalFilterStore = (state = initialState, action) => {\n    switch (action.type) {\n        case ActionTypes.CHANGE_TAGS:\n            return {\n                ...state,\n                selectedTags: action.payload\n            };\n\n        case ActionTypes.CHANGE_GLOBAL_TAGS:\n            return {\n                ...state,\n                selectedGlobalTags: action.payload\n            };\n\n        case ActionTypes.CHANGE_PROFILE:\n            return {\n                ...state,\n                systemProfile: action.payload\n            };\n\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    selectRows,\n    fetchPending,\n    fetchRejected\n} from './HelperReducers';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nexport const initialState = {\n    rows: [],\n    selectedRows: [],\n    queryParams: {\n        page: 1,\n        perPage: 20,\n        offset: 0,\n        filter: {}\n    },\n    status: { isLoading: true },\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    },\n    error: {}\n};\n\nexport const PatchSetsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ActionTypes.FETCH_ALL_PATCH_SETS + '_FULFILLED':\n            return {\n                ...state,\n                rows: action.payload.data?.map(set => ({ ...set.attributes, id: set.id })),\n                metadata: action.payload.meta || {},\n                error: {},\n                status: { code: action.payload.status, isLoading: false, hasError: false }\n            };\n\n        case ActionTypes.FETCH_ALL_PATCH_SETS + '_PENDING':\n            return fetchPending(state);\n\n        case ActionTypes.FETCH_ALL_PATCH_SETS + '_REJECTED':\n            return fetchRejected(state, action);\n\n        case ActionTypes.CHANGE_PATCH_SET_PARAMS:\n            return changeFilters(state, action);\n\n        case ActionTypes.SELECT_PATCH_SET_ROW:\n            return selectRows(state, action);\n\n        case ActionTypes.CLEAR_PATCH_SETS:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\nimport {\n    fetchPending,\n    fetchRejected\n} from './HelperReducers';\n\nexport const initialState = {\n    patchSet: {\n        config: {}\n    },\n    assignedSystems: [],\n    status: {},\n    error: {}\n};\n\nexport const SpecificPatchSetReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ActionTypes.FETCH_PATCH_SET + '_FULFILLED': {\n            const { attributes: { config, name, description }, id } = action.payload?.data || { config: {} };\n\n            return {\n                ...state,\n                patchSet: { name, description, config: config || {}, id },\n                status: { code: action.payload.status, isLoading: false, hasError: false }\n            };\n        }\n\n        case ActionTypes.FETCH_PATCH_SET + '_PENDING':\n            return fetchPending(state);\n\n        case ActionTypes.FETCH_PATCH_SET + '_REJECTED':\n            return fetchRejected(state, action);\n\n        case ActionTypes.FETCH_PATCH_SET_SYSTEMS + `_FULFILLED`: {\n            const systems = action.payload?.data || [];\n\n            return {\n                ...state,\n                assignedSystems: systems.map(system => system?.inventory_id)\n            };\n        }\n\n        case ActionTypes.CLEAR_PATCH_SET:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n","import notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { AdvisoryDetailStore } from './Reducers/AdvisoryDetailStore';\nimport { AdvisoryListStore } from './Reducers/AdvisoryListStore';\nimport { CvesListStore } from './Reducers/CvesListStore';\nimport { PackageDetailStore } from './Reducers/PackageDetailStore';\nimport { PackagesListStore } from './Reducers/PackagesListStore';\nimport { SystemAdvisoryListStore } from './Reducers/SystemAdvisoryListStore';\nimport { SystemDetailStore } from './Reducers/SystemDetailStore';\nimport { SystemPackageListStore } from './Reducers/SystemPackageListStore';\nimport { SystemsStore } from './Reducers/SystemsStore';\nimport { PackageSystemsStore } from './Reducers/PackageSystemsStore';\nimport { AdvisorySystemsStore } from './Reducers/AdvisorySystemsStore';\nimport { GlobalFilterStore } from './Reducers/GlobalFilterStore';\nimport { PatchSetsReducer } from './Reducers/PatchSetsReducer';\nimport { SpecificPatchSetReducer } from './Reducers/SpecificPatchSetReducer';\n\nconst registry = getRegistry({}, [promiseMiddleware, notificationsMiddleware()]);\nregistry.register({\n    AdvisoryListStore,\n    SystemDetailStore,\n    SystemAdvisoryListStore,\n    AdvisoryDetailStore,\n    SystemPackageListStore,\n    PackagesListStore,\n    PackageDetailStore,\n    CvesListStore,\n    SystemsStore,\n    PackageSystemsStore,\n    AdvisorySystemsStore,\n    GlobalFilterStore,\n    PatchSetsStore: PatchSetsReducer,\n    SpecificPatchSetReducer,\n    notifications: notificationsReducer\n});\n\nexport const getStore = () => registry.getStore();\n\nexport const register = newReducers => {\n    registry.register(newReducers);\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    selectRows,\n    expandRows,\n    fetchPending,\n    fetchRejected,\n    fetchFulfilled\n} from './HelperReducers';\n\nexport const AdvisoryListStore = (state = storeListDefaults, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_APPLICABLE_ADVISORIES + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_APPLICABLE_ADVISORIES + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_APPLICABLE_ADVISORIES + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_ADVISORY_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.EXPAND_ADVISORY_ROW:\n            return expandRows(newState, action);\n\n        case ActionTypes.SELECT_ADVISORY_ROW:\n            return selectRows(newState, action);\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        case ActionTypes.TOGGLE_ALL_SELECTED:\n            newState.areAllSelected = action.payload;\n            return newState;\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    fetchPending,\n    fetchRejected,\n    fetchFulfilled\n} from './HelperReducers';\n\nexport const CvesListStore = (state = storeListDefaults, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_CVES_INFO + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_CVES_INFO + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_CVES_INFO + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_CVES_STORE_PARAMS:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n"],"names":["withRouter","dispatch","useDispatch","useState","selectedTags","systemProfile","config","setConfig","location","useLocation","history","useHistory","useEffect","insights","chrome","init","identifyApp","globalFilterScope","on","data","SIDs","mapGlobalFilter","TAGs","filter","item","includes","globalFilterConfig","mapGlobalFilters","Workloads","globalFilter","changeGlobalTags","changeProfile","unregister","event","domEvent","push","navId","childProps","Advisories","lazy","Systems","InventoryDetail","AdvisoryPage","PackagsPage","PackageDetail","Templates","paths","advisories","title","to","systems","inventoryDetail","advisoryDetail","advisoryDetailSystem","packages","packageDetail","packageDetailSystem","templates","Routes","props","path","pathname","isPatchSetEnabled","useFeatureFlag","featureFlags","Suspense","fallback","Fragment","Switch","Redirect","from","Route","component","exact","render","some","p","propTypes","PropTypes","release","pathName","split","shift","initialState","loaded","SystemDetailStore","state","type","payload","hasThirdPartyRepo","attributes","third_party","patchSetName","baseline_name","activeApps","name","status","isLoading","initialStore","storeListDefaults","queryParams","packagesListDefaultFilters","selectedRows","page","perPage","stale","selectedGlobalTags","undefined","rows","offset","metadata","limit","total_items","error","patchSet","assignedSystems","registry","getRegistry","promiseMiddleware","notificationsMiddleware","register","AdvisoryListStore","action","newState","ActionTypes","fetchFulfilled","fetchPending","fetchRejected","changeFilters","expandRows","selectRows","areAllSelected","SystemAdvisoryListStore","AdvisoryDetailStore","FETCH_ADVISORY_DETAILS","CLEAR_ADVISORY_DETAILS","SystemPackageListStore","PackagesListStore","PackageDetailStore","FETCH_PACKAGE_DETAILS","CLEAR_PACKAGE_DETAILS","CvesListStore","SystemsStore","changeListParams","PackageSystemsStore","AdvisorySystemsStore","GlobalFilterStore","PatchSetsStore","map","set","id","meta","code","hasError","SpecificPatchSetReducer","description","system","inventory_id","notifications","notificationsReducer","getStore","newReducers"],"sourceRoot":""}