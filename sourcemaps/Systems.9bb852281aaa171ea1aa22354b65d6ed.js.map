{"version":3,"file":"js/Systems.2a5c5cc5b72985e69d10.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardBody.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/package-icon.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Card/card.mjs","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js","webpack:///./src/PresentationalComponents/StatusReports/SystemsStatusReport.js","webpack:///./src/SmartComponents/Systems/SystemsTable.js","webpack:///./src/SmartComponents/Systems/SystemsMainContent.js","webpack:///./src/SmartComponents/Systems/SystemsPage.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport const CardContext = React.createContext({\n    cardId: '',\n    registerTitleId: () => { },\n    isExpanded: false\n});\nexport const Card = (_a) => {\n    var { children = null, id = '', className = '', component = 'article', isHoverable = false, isCompact = false, isSelectable = false, isSelectableRaised = false, isSelected = false, isDisabledRaised = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true, hasSelectableInput = false, selectableInputAriaLabel, onSelectableInputChange = () => { } } = _a, props = __rest(_a, [\"children\", \"id\", \"className\", \"component\", \"isHoverable\", \"isCompact\", \"isSelectable\", \"isSelectableRaised\", \"isSelected\", \"isDisabledRaised\", \"isFlat\", \"isExpanded\", \"isRounded\", \"isLarge\", \"isFullHeight\", \"isPlain\", \"ouiaId\", \"ouiaSafe\", \"hasSelectableInput\", \"selectableInputAriaLabel\", \"onSelectableInputChange\"]);\n    const Component = component;\n    const ouiaProps = useOUIAProps(Card.displayName, ouiaId, ouiaSafe);\n    const [titleId, setTitleId] = React.useState('');\n    const [ariaProps, setAriaProps] = React.useState();\n    if (isCompact && isLarge) {\n        // eslint-disable-next-line no-console\n        console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n        isLarge = false;\n    }\n    const getSelectableModifiers = () => {\n        if (isDisabledRaised) {\n            return css(styles.modifiers.nonSelectableRaised);\n        }\n        if (isSelectableRaised) {\n            return css(styles.modifiers.selectableRaised, isSelected && styles.modifiers.selectedRaised);\n        }\n        if (isSelectable || isHoverable) {\n            return css(styles.modifiers.selectable, isSelected && styles.modifiers.selected);\n        }\n        return '';\n    };\n    const containsCardTitleChildRef = React.useRef(false);\n    const registerTitleId = (id) => {\n        setTitleId(id);\n        containsCardTitleChildRef.current = !!id;\n    };\n    React.useEffect(() => {\n        if (selectableInputAriaLabel) {\n            setAriaProps({ 'aria-label': selectableInputAriaLabel });\n        }\n        else if (titleId) {\n            setAriaProps({ 'aria-labelledby': titleId });\n        }\n        else if (hasSelectableInput && !containsCardTitleChildRef.current) {\n            setAriaProps({});\n            // eslint-disable-next-line no-console\n            console.warn('If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed');\n        }\n    }, [hasSelectableInput, selectableInputAriaLabel, titleId]);\n    return (React.createElement(CardContext.Provider, { value: {\n            cardId: id,\n            registerTitleId,\n            isExpanded\n        } },\n        hasSelectableInput && (React.createElement(\"input\", Object.assign({ className: \"pf-screen-reader\", id: `${id}-input` }, ariaProps, { type: \"checkbox\", checked: isSelected, onChange: event => onSelectableInputChange(id, event), disabled: isDisabledRaised, tabIndex: -1 }))),\n        React.createElement(Component, Object.assign({ id: id, className: css(styles.card, isCompact && styles.modifiers.compact, isExpanded && styles.modifiers.expanded, isFlat && styles.modifiers.flat, isRounded && styles.modifiers.rounded, isLarge && styles.modifiers.displayLg, isFullHeight && styles.modifiers.fullHeight, isPlain && styles.modifiers.plain, getSelectableModifiers(), className), tabIndex: isSelectable || isSelectableRaised ? '0' : undefined }, props, ouiaProps), children)));\n};\nCard.displayName = 'Card';\n//# sourceMappingURL=Card.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nexport const CardBody = (_a) => {\n    var { children = null, className = '', component = 'div', isFilled = true } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"isFilled\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardBody, !isFilled && styles.modifiers.noFill, className) }, props), children));\n};\nCardBody.displayName = 'CardBody';\n//# sourceMappingURL=CardBody.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nexport const CardTitle = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const { cardId, registerTitleId } = React.useContext(CardContext);\n    const Component = component;\n    const titleId = cardId ? `${cardId}-title` : '';\n    React.useEffect(() => {\n        registerTitleId(titleId);\n        return () => registerTitleId('');\n    }, [registerTitleId, titleId]);\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardTitle, className), id: titleId || undefined }, props), children));\n};\nCardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","import { createIcon } from '../createIcon';\n\nexport const PackageIconConfig = {\n  name: 'PackageIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M567.7,1010.49707 L951.5,818.498238 C994.7,796.698371 1024,752.39864 1024,703.998934 L1024,320.001265 C1024,271.601559 995.6,227.10183 952.2,205.501961 L568.6,13.5031267 C550.8,4.60318072 531.4,0.103208049 512,-0.00152855358 C492.3,-0.0967907365 472.5,4.40318194 454.4,13.5031267 L70.8,205.501961 C27.4,227.10183 0,271.50156 0,319.801267 L0.9,703.998934 C0.9,752.39864 28.3,796.79837 71.6,818.398239 L455.2,1010.39707 C464.3,1014.89705 488.1,1023.99699 511.9,1023.99699 C535.5,1023.99699 558.8,1014.99704 567.7,1010.49707 Z M512.5,630.899377 L672.5,550.899863 L672.5,645.29929 L736.5,613.299484 L736.5,518.900058 L896,438.900543 L896.5,712.698881 L512.5,904.697715 L512.5,630.899377 Z M145.1,304.101362 L294.9,228.60182 C295.3,228.801819 295.6,229.001818 296,229.201817 L661.9,412.300705 L512.5,487.600248 L145.1,304.101362 Z M512.5,118.902487 L881.3,301.701377 L733.1,376.400923 L366,192.702038 L512.5,118.902487 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PackageIcon = createIcon(PackageIconConfig);\n\nexport default PackageIcon;","import './card.css';\nexport default {\n  \"card\": \"pf-c-card\",\n  \"cardActions\": \"pf-c-card__actions\",\n  \"cardBody\": \"pf-c-card__body\",\n  \"cardExpandableContent\": \"pf-c-card__expandable-content\",\n  \"cardFooter\": \"pf-c-card__footer\",\n  \"cardHeader\": \"pf-c-card__header\",\n  \"cardHeaderToggle\": \"pf-c-card__header-toggle\",\n  \"cardHeaderToggleIcon\": \"pf-c-card__header-toggle-icon\",\n  \"cardSrInput\": \"pf-c-card__sr-input\",\n  \"cardTitle\": \"pf-c-card__title\",\n  \"divider\": \"pf-c-divider\",\n  \"modifiers\": {\n    \"hoverable\": \"pf-m-hoverable\",\n    \"selectable\": \"pf-m-selectable\",\n    \"selected\": \"pf-m-selected\",\n    \"hoverableRaised\": \"pf-m-hoverable-raised\",\n    \"selectableRaised\": \"pf-m-selectable-raised\",\n    \"nonSelectableRaised\": \"pf-m-non-selectable-raised\",\n    \"selectedRaised\": \"pf-m-selected-raised\",\n    \"compact\": \"pf-m-compact\",\n    \"displayLg\": \"pf-m-display-lg\",\n    \"flat\": \"pf-m-flat\",\n    \"plain\": \"pf-m-plain\",\n    \"rounded\": \"pf-m-rounded\",\n    \"expanded\": \"pf-m-expanded\",\n    \"fullHeight\": \"pf-m-full-height\",\n    \"toggleRight\": \"pf-m-toggle-right\",\n    \"noOffset\": \"pf-m-no-offset\",\n    \"noFill\": \"pf-m-no-fill\",\n    \"overpassFont\": \"pf-m-overpass-font\"\n  },\n  \"themeDark\": \"pf-theme-dark\"\n};","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nimport WithHistory from './WithHistory';\nvar BaseInvTable = function (props) {\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: props.history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\" }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n    history: PropTypes.object,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nvar CompatiblityWrapper = function (props, ref) { return _jsx(WithHistory, __assign({ innerRef: ref, Component: InvTable }, props)); };\nexport default React.forwardRef(CompatiblityWrapper);\n//# sourceMappingURL=InventoryTable.js.map","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { CheckCircleIcon, PackageIcon, ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Button, Skeleton,\n    Card, Grid, GridItem, CardBody, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { fetchSystems } from '../../Utilities/api';\n\nconst StatusCard = ({ title, color, Icon, value, filter, apply }) => {\n    return (\n        <Card isCompact isFullHeight>\n            <CardTitle style={{ marginTop: '0px' }}>{title}</CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                    <FlexItem\n                        spacer={{ default: 'spacerMd' }}\n                        alignSelf={{ default: 'alignSelfCenter' }}\n                    >\n                        <Icon color={color} size='md'/>\n                    </FlexItem>\n                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                        {\n                            typeof(value) === 'undefined'\n                            &&  <Skeleton width=\"24px\" />\n                                    ||  <Button\n                                        variant=\"link\"\n                                        onClick={() => apply(filter)}\n                                        className='patch-status-report-text'>\n                                        {value}\n                                    </Button>\n                        }\n                    </FlexItem>\n                </Flex>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst SystemsStatusReport = ({ apply, queryParams }) => {\n    const [subtotals, setSubtotals] = React.useState({});\n\n    const { selectedTags, selectedGlobalTags, systemProfile } = useSelector(({ GlobalFilterStore }) => GlobalFilterStore);\n\n    const fetchResource = () => {\n        setSubtotals({});\n\n        let result;\n\n        try {\n            result = fetchSystems({\n                filter: {\n                    os: queryParams?.filter?.os\n                },\n                selectedTags: [...selectedTags, ...selectedGlobalTags],\n                systemProfile,\n                limit: 1,\n                'filter[stale]': 'in:true,false'\n            }).then((result)=> {\n                setSubtotals(result.meta?.subtotals);\n            });\n        }\n        catch {\n            result = [];\n        }\n\n        return result;\n    };\n\n    React.useEffect(() => {\n        fetchResource();\n    }, [\n        queryParams?.filter?.os?.length, queryParams?.filter?.os !== undefined,\n        selectedTags?.length, selectedTags !== undefined,\n        selectedGlobalTags?.length, selectedGlobalTags !== undefined,\n        systemProfile,\n        queryParams?.subtotals !== undefined\n    ]);\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Grid hasGutter span={12} >\n                <GridItem lg={3} md={4}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsUpToDate)}\n                        Icon={CheckCircleIcon}\n                        color={'var(--pf-global--success-color--100)'}\n                        value={subtotals?.patched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'eq:0' } }}\n                    />\n                </GridItem>\n                <GridItem lg={3} md={4}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsWithPatchesAvailable)}\n                        Icon={PackageIcon}\n                        color={'var(--pf-global--primary-color--100)'}\n                        value={subtotals?.unpatched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'gt:0' } }}\n                    />\n                </GridItem>\n                <GridItem lg={3} md={4}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusStaleSystems)}\n                        Icon={ExclamationTriangleIcon}\n                        color={'var(--pf-global--warning-color--100)'}\n                        value={subtotals?.stale}\n                        apply={apply}\n                        filter={{ filter: { stale: true } }}\n                    />\n                </GridItem>\n            </Grid>\n        </Main>\n    );\n};\n\nStatusCard.propTypes = {\n    title: propTypes.string,\n    Icon: propTypes.elementType,\n    value: propTypes.number,\n    color: propTypes.string,\n    apply: propTypes.func,\n    filter: propTypes.object\n};\n\nSystemsStatusReport.propTypes = {\n    apply: propTypes.func,\n    queryParams: propTypes.object\n};\n\nexport default SystemsStatusReport;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport messages from '../../Messages';\nimport { defaultReducers } from '../../store';\nimport { changeSystemsMetadata, changeTags, systemSelectAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchSystems\n} from '../../Utilities/api';\nimport { systemsListDefaultFilters } from '../../Utilities/constants';\nimport {\n    arrayFromObj, persistantParams, filterSelectedActiveSystemIDs\n} from '../../Utilities/Helpers';\nimport { useBulkSelectConfig, useGetEntities, useOnExport,\n    useRemoveFilter, useRemediationDataProvider, useOnSelect, ID_API_ENDPOINTS\n} from '../../Utilities/hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport { buildFilterConfig, buildActiveFiltersConfig } from '../../Utilities/SystemsHelpers';\nimport { combineReducers } from 'redux';\nimport { systemsColumnsMerger } from '../../Utilities/SystemsHelpers';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport propTypes from 'prop-types';\n\nconst SystemsTable = ({\n    apply,\n    patchSetState,\n    openAssignSystemsModal,\n    openUnassignSystemsModal,\n    setSearchParams,\n    activateRemediationModal,\n    decodedParams\n}) => {\n    const store = useStore();\n    const inventory = useRef(null);\n\n    const dispatch = useDispatch();\n    const [isRemediationLoading, setRemediationLoading] = useState(false);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const areAllSelected = useSelector(\n        ({ SystemsStore }) => SystemsStore?.areAllSelected\n    );\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const { hasAccess: hasTemplateAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    const applyMetadata = (metadata) => {\n        dispatch(changeSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const [deleteFilters] = useRemoveFilter(\n        { search, ...filter },\n        apply,\n        systemsListDefaultFilters\n    );\n    const filterConfig = buildFilterConfig(search, filter, apply);\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systems,\n            queryParams,\n            selectionDispatcher: systemSelectAction,\n            totalItems\n        }\n    );\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh) {\n            onSelect('none');\n            // timestamp is used to force inventory to refresh\n            // if it wasn't there inventory might ignore request to refresh because parameters are the same\n            inventory?.current?.onRefreshData({ timestamp: Date.now() });\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    const onExport = useOnExport(\n        'systems',\n        queryParams,\n        {\n            csv: exportSystemsCSV,\n            json: exportSystemsJSON\n        }, dispatch\n    );\n\n    const getEntities = useGetEntities(\n        fetchSystems,\n        apply,\n        {},\n        setSearchParams,\n        applyMetadata,\n        applyGlobalFilter\n    );\n\n    const remediationDataProvider = useRemediationDataProvider(\n        selectedRows,\n        setRemediationLoading,\n        'systems',\n        areAllSelected\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const bulkSelectConfig = useBulkSelectConfig(\n        selectedCount,\n        onSelect,\n        { total_items: totalItems },\n        systems\n    );\n\n    return (\n        <InventoryTable\n            ref={inventory}\n            isFullView\n            autoRefresh\n            initialLoading\n            hideFilters={{ all: true, tags: false, hostGroupFilter: false, operatingSystem: false }}\n            columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, systemsListColumns)}\n            showTags\n            customFilters={{\n                patchParams: {\n                    search,\n                    filter,\n                    systemProfile,\n                    selectedTags\n                }\n            }}\n            paginationProps={{\n                isDisabled: totalItems === 0\n            }}\n            onLoad={({ mergeWithEntities }) => {\n                store.replaceReducer(combineReducers({\n                    ...defaultReducers,\n                    ...mergeWithEntities(\n                        inventoryEntitiesReducer(systemsListColumns(), modifyInventory),\n                        persistantParams({ page, perPage, sort, search }, decodedParams)\n                    )\n                }));\n            }}\n            getEntities={getEntities}\n            tableProps={{\n                actionResolver: (row) =>\n                    systemsRowActions(\n                        activateRemediationModal,\n                        openAssignSystemsModal,\n                        openUnassignSystemsModal,\n                        row,\n                        hasTemplateAccess\n                    ),\n                canSelectAll: false,\n                variant: TableVariant.compact,\n                className: 'patchCompactInventory',\n                isStickyHeader: true\n            }}\n            bulkSelect={bulkSelectConfig}\n            exportConfig={{\n                isDisabled: totalItems === 0,\n                onSelect: onExport\n            }}\n            actionsConfig={{\n                actions: [\n                    <AsyncRemediationButton\n                        key='remediate-multiple-systems'\n                        remediationProvider={remediationDataProvider}\n                        isDisabled={\n                            arrayFromObj(selectedRows).length === 0 || isRemediationLoading\n                        }\n                        isLoading={isRemediationLoading}\n                    />,\n                    {\n                        key: 'assign-multiple-systems',\n                        label: intl.formatMessage(messages.titlesTemplateAssign),\n                        onClick: () => openAssignSystemsModal(selectedRows),\n                        props: { isDisabled: !hasTemplateAccess || selectedCount === 0 }\n                    },\n                    {\n                        key: 'remove-multiple-systems',\n                        label: intl.formatMessage(messages.titlesTemplateRemoveMultipleButton),\n                        onClick: () => openUnassignSystemsModal(filterSelectedActiveSystemIDs(selectedRows)),\n                        props: { isDisabled: !hasTemplateAccess || selectedCount === 0 }\n                    }\n                ]\n            }}\n            filterConfig={filterConfig}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n    );\n};\n\nSystemsTable.propTypes = {\n    apply: propTypes.func.isRequired,\n    patchSetState: propTypes.object.isRequired,\n    openAssignSystemsModal: propTypes.func.isRequired,\n    openUnassignSystemsModal: propTypes.func.isRequired,\n    setSearchParams: propTypes.func.isRequired,\n    activateRemediationModal: propTypes.func.isRequired,\n    decodedParams: propTypes.func.isRequired\n};\nexport default SystemsTable;\n","import React, { useEffect, useState } from 'react';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { changeSystemsParams, clearInventoryReducer } from '../../store/Actions/Actions';\nimport { usePatchSetState } from '../../Utilities/hooks';\nimport { decodeQueryparams } from '../../Utilities/Helpers';\nimport { useActivateRemediationModal } from './SystemsListAssets';\nimport SystemsStatusReport from '../../PresentationalComponents/StatusReports/SystemsStatusReport';\nimport PatchSetWrapper from '../../PresentationalComponents/PatchSetWrapper/PatchSetWrapper';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport SystemsTable from './SystemsTable';\nimport { useSearchParams } from 'react-router-dom';\n\nconst SystemsMainContent = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const dispatch = useDispatch();\n    const [isRemediationOpen, setRemediationOpen] = useState(false);\n    const decodedParams = decodeQueryparams('?' + searchParams.toString());\n    const [remediationIssues, setRemediationIssues] = useState([]);\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const { hasError, code } = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const metadata = useSelector(\n        ({ SystemsStore }) => SystemsStore?.metadata || {}\n    );\n\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const apply = (queryParams) => {\n        dispatch(changeSystemsParams(queryParams));\n    };\n\n    useEffect(() => {\n        apply(decodedParams);\n        return () => dispatch(clearInventoryReducer());\n    }, []);\n\n    const {\n        patchSetState, setPatchSetState, openUnassignSystemsModal, openAssignSystemsModal\n    } = usePatchSetState(selectedRows);\n\n    const activateRemediationModal = useActivateRemediationModal(\n        setRemediationIssues,\n        setRemediationOpen\n    );\n\n    if (hasError || metadata?.has_systems === false) {\n        return <ErrorHandler code={code} metadata={metadata}/>;\n    }\n\n    return (\n        <React.Fragment>\n            <SystemsStatusReport apply={apply} queryParams={queryParams} />\n            <PatchSetWrapper\n                patchSetState={patchSetState}\n                setPatchSetState={setPatchSetState}\n                totalItems={metadata?.total_items}\n            />\n            {isRemediationOpen &&\n                    <RemediationWizard\n                        data={remediationIssues}\n                        isRemediationOpen\n                        setRemediationOpen={setRemediationOpen}\n                    />\n                    || null\n            }\n            <Main>\n                <SystemsTable\n                    apply={apply}\n                    patchSetState={patchSetState}\n                    openAssignSystemsModal={openAssignSystemsModal}\n                    openUnassignSystemsModal={openUnassignSystemsModal}\n                    setSearchParams={setSearchParams}\n                    activateRemediationModal={activateRemediationModal}\n                    decodedParams={decodeQueryparams}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default SystemsMainContent;\n","import React, { useEffect } from 'react';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { DEFAULT_PATCH_TITLE } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport SystemsMainContent from './SystemsMainContent';\n\nconst SystemsPage = () => {\n    const chrome = useChrome();\n    useEffect(()=>{\n        chrome.updateDocumentTitle(`${intl.formatMessage(messages.titlesSystems)}${DEFAULT_PATCH_TITLE}`);\n    }, [chrome, intl]);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'} />\n            <SystemsMainContent />\n        </React.Fragment>\n    );\n};\n\nexport default SystemsPage;\n","import { createAdvisorySystemsRows, createSystemsRows, createPatchSetDetailRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows, fetchRejected } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state, lastAction) => {\n    // this is pretty scuffed, but trust me it cannot be solved more elegantly because\n    // single item select actions are triggered by Inventory and contain only system id\n    // but we also need to match available_evra for each selected system for remediations\n    // this does not happen with bulk select action because they are implemented by Patchman\n    // the id-evra mapping is cached to minimize O(n^2) time complexity of id-evra matching\n    if (lastAction === 'SELECT_ENTITY') {\n        let idToEvraMapping = state.packageEvraCache;\n\n        if (idToEvraMapping === undefined) {\n            idToEvraMapping = {};\n            state.rows.forEach(row => idToEvraMapping[row.id] = row.available_evra);\n            state.packageEvraCache = idToEvraMapping;\n        }\n\n        state.selectedRows = state.selectedRows ? Object.fromEntries(\n            Object.entries(state.selectedRows).map(([id, value]) =>\n                value === true ? [id, idToEvraMapping[id]] : [id, value]\n            )\n        ) : state.selectedRows;\n    }\n\n    if (lastAction === 'LOAD_ENTITIES_FULFILLED') {\n        state.packageEvraCache = undefined;\n    }\n\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyTemplateDetailSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createPatchSetDetailRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyAdvisorySystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createAdvisorySystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState, action.type);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection, action.type);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["CardContext","cardId","registerTitleId","isExpanded","Card","_a","children","id","className","component","isHoverable","isCompact","isSelectable","isSelectableRaised","isSelected","isDisabledRaised","isFlat","isRounded","isLarge","isFullHeight","isPlain","ouiaId","ouiaSafe","hasSelectableInput","selectableInputAriaLabel","onSelectableInputChange","props","__rest","Component","ouiaProps","displayName","titleId","setTitleId","ariaProps","setAriaProps","console","warn","containsCardTitleChildRef","current","Provider","value","Object","assign","type","checked","onChange","event","disabled","tabIndex","css","card","modifiers","compact","expanded","flat","rounded","displayLg","fullHeight","plain","nonSelectableRaised","selectableRaised","selectedRaised","selectable","selected","undefined","CardBody","isFilled","cardBody","noFill","CardTitle","cardTitle","PackageIconConfig","name","height","width","svgPath","yOffset","xOffset","PackageIcon","__assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","BaseInvTable","store","Cmp","Suspense","fallback","ScalprumComponent","history","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","RemediationWizard","_ref","data","setRemediationOpen","React","AsyncComponent","setOpen","StatusCard","title","color","Icon","filter","style","marginTop","Flex","flex","default","flexWrap","FlexItem","spacer","alignSelf","Skeleton","Button","variant","onClick","SystemsStatusReport","_ref2","_queryParams$filter2","_queryParams$filter2$","_queryParams$filter3","queryParams","_React$useState","_React$useState2","_slicedToArray","subtotals","setSubtotals","_useSelector","useSelector","_ref3","GlobalFilterStore","selectedTags","selectedGlobalTags","systemProfile","_queryParams$filter","fetchSystems","os","concat","_toConsumableArray","limit","then","result","_result$meta","meta","_unused","fetchResource","Main","paddingBottom","Grid","hasGutter","span","GridItem","lg","md","intl","formatMessage","messages","labelsStatusSystemsUpToDate","CheckCircleIcon","patched","packages_updatable","labelsStatusSystemsWithPatchesAvailable","unpatched","labelsStatusStaleSystems","ExclamationTriangleIcon","stale","SystemsTable","patchSetState","openAssignSystemsModal","openUnassignSystemsModal","setSearchParams","activateRemediationModal","decodedParams","useStore","inventory","useRef","dispatch","useDispatch","_useState","useState","_useState2","isRemediationLoading","setRemediationLoading","systems","entities","rows","shallowEqual","totalItems","total","selectedRows","_ref4","areAllSelected","_ref5","SystemsStore","_ref6","hasTemplateAccess","usePermissionsWithContext","hasAccess","search","page","perPage","sort","_useRemoveFilter","useRemoveFilter","_objectSpread","systemsListDefaultFilters","deleteFilters","filterConfig","buildFilterConfig","activeFiltersConfig","buildActiveFiltersConfig","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","systemSelectAction","useEffect","_inventory$current","shouldRefresh","onRefreshData","timestamp","Date","now","onExport","useOnExport","csv","exportSystemsCSV","json","exportSystemsJSON","getEntities","useGetEntities","metadata","changeSystemsMetadata","tags","changeTags","remediationDataProvider","useRemediationDataProvider","selectedCount","arrayFromObj","bulkSelectConfig","useBulkSelectConfig","total_items","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","hostGroupFilter","operatingSystem","columns","defaultColumns","systemsColumnsMerger","systemsListColumns","showTags","customFilters","patchParams","paginationProps","isDisabled","onLoad","_ref7","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","modifyInventory","persistantParams","tableProps","actionResolver","row","systemsRowActions","canSelectAll","TableVariant","isStickyHeader","bulkSelect","exportConfig","actionsConfig","actions","AsyncRemediationButton","key","remediationProvider","isLoading","label","titlesTemplateAssign","titlesTemplateRemoveMultipleButton","filterSelectedActiveSystemIDs","isRequired","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","isRemediationOpen","decodeQueryparams","toString","_useState3","_useState4","remediationIssues","setRemediationIssues","status","hasError","code","changeSystemsParams","clearInventoryReducer","_usePatchSetState","usePatchSetState","setPatchSetState","useActivateRemediationModal","has_systems","ErrorHandler","PatchSetWrapper","chrome","useChrome","updateDocumentTitle","titlesSystems","DEFAULT_PATCH_TITLE","Header","titlesPatchSystems","headerOUIA","SystemsMainContent","initialState","offset","state","loaded","createSystemsRows","modifyPackageSystems","lastAction","idToEvraMapping","packageEvraCache","forEach","available_evra","fromEntries","entries","map","createPackageSystemsRows","modifyTemplateDetailSystems","createPatchSetDetailRows","modifyAdvisorySystems","createAdvisorySystemsRows","inventoryModifier","action","newState","fetchRejected","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}