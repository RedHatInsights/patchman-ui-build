{"version":3,"file":"js/Templates.7c6dc53217e6d87b01c1.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/SmartComponents/Modals/DeleteSetModal.js","webpack:///./src/PresentationalComponents/Filters/CreatorFilter.js","webpack:///./src/SmartComponents/PatchSet/PatchSet.js","webpack:///./src/SmartComponents/PatchSet/PatchSetAssets.js","webpack:///./src/Utilities/usePatchSetState.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Checkbox, Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst DeleteSetModal = ({ isModalOpen, setModalOpen, templateName, onConfirm }) => {\n    const [isCheckboxChecked, setCheckboxChecked] = useState(false);\n\n    const onClose = () => {\n        setModalOpen(false);\n        setCheckboxChecked(false);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.titlesTemplateDeleteModalTitle)}\n            titleIconVariant=\"warning\"\n            isOpen={isModalOpen}\n            onClose={onClose}\n            variant=\"small\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={() => {onClose(); onConfirm();}} isDisabled={!isCheckboxChecked}>\n                    {intl.formatMessage(messages.labelsDelete)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {intl.formatMessage(messages.titlesTemplateDeleteModalText, { templateName, b: (...chunks) => <b>{chunks}</b> })}\n            <Checkbox\n                className=\"pf-u-mt-md\"\n                isChecked={isCheckboxChecked}\n                checked={isCheckboxChecked}\n                onChange={(value) => setCheckboxChecked(value)}\n                label={intl.formatMessage(messages.titlesTemplateDeleteModalCheckbox)}\n                id=\"template-delete-modal-checkbox\"\n            />\n        </Modal>\n    );\n};\n\nDeleteSetModal.propTypes = {\n    isModalOpen: propTypes.bool,\n    setModalOpen: propTypes.func,\n    templateName: propTypes.string,\n    onConfirm: propTypes.func\n};\n\nexport default DeleteSetModal;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst creatorFilter = (apply, currentFilter = {}, items) => {\n    const filterByCreator = value => {\n        value.length === 0\n            ? apply({ filter: { creator: undefined } })\n            : apply({ filter: { creator: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersCreator),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCreator(value);\n            },\n            items: items?.filter(item => item !== null).map(item => ({ value: item, label: item })) ?? [],\n            value: !currentFilter.creator || Array.isArray(currentFilter.creator)\n                ? currentFilter.creator\n                : [currentFilter.creator],\n            placeholder: intl.formatMessage(messages.labelsFiltersCreatorPlaceholder)\n        }\n    };\n};\n\nexport default creatorFilter;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport creatorFilter from '../../PresentationalComponents/Filters/CreatorFilter';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport {\n    fetchPatchSetsAction, changePatchSetsParams,\n    selectPatchSetRow, clearPatchSetsAction\n} from '../../store/Actions/Actions';\nimport { deletePatchSet } from '../../Utilities/api';\nimport { createPatchSetRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams } from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useDeepCompareEffect, useEntitlements, usePerPageSelect, useSetPage, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications, addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n    patchSetColumns, CreatePatchSetButton as createPatchSetButton,\n    patchSetRowActions, CustomActionsToggle\n} from './PatchSetAssets';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport { patchSetDeleteNotifications } from '../../Utilities/constants';\nimport usePatchSetState from '../../Utilities/usePatchSetState';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport DeleteSetModal from '../Modals/DeleteSetModal';\nimport { NoPatchSetList, NoSmartManagement } from '../../PresentationalComponents/Snippets/EmptyStates';\n\nconst PatchSet = () => {\n    const pageTitle = intl.formatMessage(messages.titlesTemplate);\n\n    const IS_SELECTION_ENABLED = false;\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [hasSmartManagement, setSmartManagement] = React.useState(true);\n    const [isDeleteConfirmModalOpen, setDeleteConfirmModalOpen] = React.useState(false);\n    const [patchSetToDelete, setPatchSetToDelete] = React.useState(null);\n\n    const patchSets = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.rows\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.metadata\n    );\n    const status = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.status\n    );\n\n    const rows = useMemo(\n        () => createPatchSetRows(patchSets, selectedRows, queryParams),\n        [patchSets, selectedRows]\n    );\n\n    const getEntitlements = useEntitlements();\n\n    function apply(params) {\n        dispatch(changePatchSetsParams(params));\n    }\n\n    const refreshTable = () => {\n        dispatch(fetchPatchSetsAction({ ...queryParams, page: 1, offset: 0 }));\n    };\n\n    useEffect(() => {\n        getEntitlements().then((entitelements) => {\n            setSmartManagement(\n                entitelements?.smart_management?.is_entitled\n            );\n        });\n\n        return () => {\n            dispatch(clearPatchSetsAction());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const { patchSetState, setPatchSetState, openPatchSetEditModal } = usePatchSetState(selectedRows);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh === true) {\n            refreshTable();\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchPatchSetsAction(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const onSelect = useOnSelect(\n        rows,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.templates,\n            queryParams,\n            selectionDispatcher: selectPatchSetRow\n        }\n    );\n\n    const onSort = useSortColumn(patchSetColumns, apply, 0);\n    const sortBy = React.useMemo(\n        () => createSortBy(patchSetColumns, metadata.sort, 0),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const openPatchDeleteModal = (rowData) => {\n        setDeleteConfirmModalOpen(true);\n        setPatchSetToDelete(rowData);\n    };\n\n    const handlePatchSetDelete = () => {\n        deletePatchSet(patchSetToDelete.id).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetToDelete.displayName).success));\n            refreshTable();\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetToDelete.displayName).error));\n        });\n    };\n\n    const { hasAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n    const CreatePatchSetButton = createPatchSetButton(setPatchSetState, hasAccess);\n    const actionsConfig = patchSetRowActions(openPatchSetEditModal, openPatchDeleteModal);\n\n    //TODO: refactor search filter to be able to wrap this into useMemo\n    const filterConfig = {\n        items: [\n            searchFilter(apply, queryParams.search,\n                intl.formatMessage(messages.labelsFiltersSearchTemplateTitle),\n                intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)\n            ),\n            creatorFilter(apply, queryParams.filter, metadata.creators)\n        ]\n    };\n\n    return (\n        <React.Fragment>\n            <DeleteSetModal\n                templateName={patchSetToDelete?.displayName}\n                isModalOpen={isDeleteConfirmModalOpen}\n                setModalOpen={setDeleteConfirmModalOpen}\n                onConfirm={handlePatchSetDelete}\n            />\n            <Header\n                headerOUIA={'advisories'}\n                title={<span>\n                    {intl.formatMessage(messages.titlesTemplate)}\n                    <Popover\n                        id=\"template-header-title-popover\"\n                        aria-describedby=\"template-header-title-popover\"\n                        aria-labelledby=\"template-header-title-popover\"\n                        hasAutoWidth\n                        maxWidth=\"320px\"\n                        position=\"right\"\n                        enableFlip\n                        headerContent={\n                            intl.formatMessage(messages.templatePopoverHeader)\n                        }\n                        bodyContent={\n                            intl.formatMessage(messages.templatePopoverBody)\n                        }\n                        /*\n                        footerContent={\n                            <a href={TEMPLATES_DOCS_LINK} target=\"__blank\" rel=\"noopener noreferrer\">\n                                {intl.formatMessage(messages.linksLearnMore)} <ExternalLinkAltIcon />\n                            </a>\n                        }\n                        */\n                    >\n                        <OutlinedQuestionCircleIcon\n                            color=\"var(--pf-global--secondary-color--100)\"\n                            className=\"pf-u-ml-sm\"\n                            style={{ verticalAlign: '0', fontSize: 16, cursor: 'pointer' }}\n                        />\n                    </Popover>\n                </span>}\n            />\n            {patchSetState.isPatchSetWizardOpen &&\n                <PatchSetWizard\n                    systemsIDs={patchSetState.systemsIDs}\n                    setBaselineState={setPatchSetState}\n                    patchSetID={patchSetState.patchSetID}\n                />}\n            <Main>\n                {hasSmartManagement\n                    ? (rows.length === 0 && !status.isLoading)\n                        ? <NoPatchSetList Button={CreatePatchSetButton}/>\n                        : <TableView\n                            columns={patchSetColumns}\n                            compact\n                            onSetPage={onSetPage}\n                            onPerPageSelect={onPerPageSelect}\n                            onSort={onSort}\n                            selectedRows={IS_SELECTION_ENABLED ? selectedRows : undefined}\n                            onSelect={IS_SELECTION_ENABLED ? onSelect : undefined}\n                            sortBy={sortBy}\n                            apply={apply}\n                            tableOUIA={'patch-set-table'}\n                            paginationOUIA={'patch-set-pagination'}\n                            store={{ rows, metadata, status, queryParams }}\n                            actionsConfig={actionsConfig}\n                            filterConfig={filterConfig}\n                            searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchTemplateTitle)}\n                            ToolbarButton={CreatePatchSetButton}\n                            actionsToggle={!hasAccess ? CustomActionsToggle : null}\n                        />\n                    : <NoSmartManagement />}\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default PatchSet;\n","import React from 'react';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport {\n    EllipsisVIcon\n} from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const CreatePatchSetButton = (setPatchSetState, hasAccess) => () =>\n    !hasAccess ?\n        <Tooltip content='For editing access, contact your administrator.'>\n            <Button key='createButton' isAriaDisabled >\n                {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n            </Button>\n        </Tooltip>\n        :\n        (<Button key='createButton' onClick={() => setPatchSetState({ isPatchSetWizardOpen: true })}>\n            {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n        </Button>);\n\nexport const patchSetColumns = [\n    {\n        key: 'name',\n        title: 'Name',\n        transforms: [sortable]\n    },\n    {\n        key: 'systems',\n        title: 'Systems applied',\n        transforms: [sortable]\n    },\n    {\n        key: 'last_edited',\n        title: 'Last edited',\n        transforms: [sortable]\n    },\n    {\n        key: 'published',\n        title: 'Published',\n        transforms: [sortable]\n    },\n    {\n        key: 'creator',\n        title: 'Created by',\n        transforms: [sortable]\n    }\n];\n\nexport const patchSetRowActions = (openPatchSetEditModal, handlePatchSetDelete) => [\n    {\n        title: intl.formatMessage(messages.labelsButtonEditTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            openPatchSetEditModal(rowData?.id);\n        }\n    },\n    {\n        title: intl.formatMessage(messages.labelsButtonRemoveTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            handlePatchSetDelete(rowData);\n        }\n    }\n];\n\nexport const patchSetDetailRowActions = (handleSystemUnassign) => [\n    {\n        title: intl.formatMessage(messages.textUnassignSystemsShortTitle),\n        onClick: (_event, _rowId, rowData) => {\n            handleSystemUnassign(rowData);\n        }\n    }\n\n];\n\nexport const CustomActionsToggle = () => <Tooltip content='For editing access, contact your administrator.'>\n    <Button\n        isAriaDisabled\n        variant=\"plain\"\n        aria-label=\"plain kebab\"\n    >\n        <EllipsisVIcon />\n    </Button>\n</Tooltip>;\n","import { useState } from 'react';\nimport {\n    filterSelectedActiveSystemIDs\n} from './Helpers';\n\n/**\n* Manages unified state for patch set wizard and unassign modal.\n* @param {Object} [selectedRows] selected rows object to be removed.\n* @returns {patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal}\n*/\nconst usePatchSetState = (selectedRows) => {\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const openPatchSetAssignWizard = (systemID) => {\n        setPatchSetState({\n            isPatchSetWizardOpen: true,\n            systemsIDs: typeof systemID === 'string' && systemID !== ''\n                ? [systemID]\n                : filterSelectedActiveSystemIDs(selectedRows),\n            shouldRefresh: false\n        }\n        );\n    };\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openPatchSetEditModal = (patchSetID) => {\n        setPatchSetState({ isPatchSetWizardOpen: true, patchSetID });\n    };\n\n    return { patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal };\n};\n\nexport default usePatchSetState;\n"],"names":["OutlinedQuestionCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","OutlinedQuestionCircleIcon","DeleteSetModal","isModalOpen","setModalOpen","templateName","onConfirm","useState","isCheckboxChecked","setCheckboxChecked","onClose","title","intl","messages","titleIconVariant","isOpen","variant","actions","key","onClick","isDisabled","b","chunks","className","isChecked","checked","onChange","value","label","id","propTypes","apply","currentFilter","items","filterByCreator","length","filter","creator","undefined","type","conditionalFilterType","filterValues","event","item","map","Array","isArray","placeholder","pageTitle","setPageTitle","dispatch","useDispatch","history","useHistory","React","firstMount","setFirstMount","hasSmartManagement","setSmartManagement","isDeleteConfirmModalOpen","setDeleteConfirmModalOpen","patchSetToDelete","setPatchSetToDelete","patchSets","useSelector","PatchSetsStore","rows","queryParams","selectedRows","metadata","status","useMemo","createPatchSetRows","getEntitlements","useEntitlements","params","changePatchSetsParams","refreshTable","fetchPatchSetsAction","page","offset","useEffect","then","entitelements","smart_management","is_entitled","clearPatchSetsAction","clearNotifications","usePatchSetState","patchSetState","setPatchSetState","openPatchSetEditModal","shouldRefresh","useDeepCompareEffect","decodeQueryparams","location","search","push","encodeURLParams","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","selectPatchSetRow","onSort","useSortColumn","patchSetColumns","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","hasAccess","usePermissionsWithContext","CreatePatchSetButton","createPatchSetButton","actionsConfig","patchSetRowActions","rowData","filterConfig","searchFilter","creatorFilter","creators","displayName","deletePatchSet","addNotification","patchSetDeleteNotifications","success","error","Header","headerOUIA","Popover","hasAutoWidth","maxWidth","position","enableFlip","headerContent","bodyContent","color","style","verticalAlign","fontSize","cursor","isPatchSetWizardOpen","PatchSetWizard","systemsIDs","setBaselineState","patchSetID","Main","isLoading","TableView","columns","compact","onSelect","tableOUIA","paginationOUIA","store","searchChipLabel","ToolbarButton","actionsToggle","CustomActionsToggle","Button","content","isAriaDisabled","transforms","sortable","handlePatchSetDelete","_event","_rowId","patchSetDetailRowActions","handleSystemUnassign","isUnassignSystemsModalOpen","openPatchSetAssignWizard","systemID","filterSelectedActiveSystemIDs","openUnassignSystemsModal"],"sourceRoot":""}