{"version":3,"file":"js/Systems.1661377215450.3d373e03eadfa09f88f0.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/Card.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/CardBody.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/CardTitle.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Skeleton/Skeleton.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/package-icon.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Card/card.mjs","webpack:///./node_modules/@patternfly/react-styles/css/components/Skeleton/skeleton.mjs","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./src/PresentationalComponents/PatchSetWrapper/PatchSetWrapper.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js","webpack:///./src/PresentationalComponents/StatusReports/SystemsStatusReport.js","webpack:///./src/SmartComponents/Systems/SystemsHelpers.js","webpack:///./src/SmartComponents/Systems/Systems.js","webpack:///./src/Utilities/useRemediationDataProvider.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Card = exports.CardContext = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst helpers_1 = require(\"../../helpers\");\nexports.CardContext = React.createContext({\n    cardId: '',\n    registerTitleId: () => { },\n    isExpanded: false\n});\nconst Card = (_a) => {\n    var { children = null, id = '', className = '', component = 'article', isHoverable = false, isCompact = false, isSelectable = false, isSelectableRaised = false, isSelected = false, isDisabledRaised = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true, hasSelectableInput = false, selectableInputAriaLabel, onSelectableInputChange = () => { } } = _a, props = tslib_1.__rest(_a, [\"children\", \"id\", \"className\", \"component\", \"isHoverable\", \"isCompact\", \"isSelectable\", \"isSelectableRaised\", \"isSelected\", \"isDisabledRaised\", \"isFlat\", \"isExpanded\", \"isRounded\", \"isLarge\", \"isFullHeight\", \"isPlain\", \"ouiaId\", \"ouiaSafe\", \"hasSelectableInput\", \"selectableInputAriaLabel\", \"onSelectableInputChange\"]);\n    const Component = component;\n    const ouiaProps = helpers_1.useOUIAProps(exports.Card.displayName, ouiaId, ouiaSafe);\n    const [titleId, setTitleId] = React.useState('');\n    const [ariaProps, setAriaProps] = React.useState();\n    if (isCompact && isLarge) {\n        // eslint-disable-next-line no-console\n        console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n        isLarge = false;\n    }\n    const getSelectableModifiers = () => {\n        if (isDisabledRaised) {\n            return react_styles_1.css(card_1.default.modifiers.nonSelectableRaised);\n        }\n        if (isSelectableRaised) {\n            return react_styles_1.css(card_1.default.modifiers.selectableRaised, isSelected && card_1.default.modifiers.selectedRaised);\n        }\n        if (isSelectable || isHoverable) {\n            return react_styles_1.css(card_1.default.modifiers.selectable, isSelected && card_1.default.modifiers.selected);\n        }\n        return '';\n    };\n    const containsCardTitleChildRef = React.useRef(false);\n    const registerTitleId = (id) => {\n        setTitleId(id);\n        containsCardTitleChildRef.current = !!id;\n    };\n    React.useEffect(() => {\n        if (selectableInputAriaLabel) {\n            setAriaProps({ 'aria-label': selectableInputAriaLabel });\n        }\n        else if (titleId) {\n            setAriaProps({ 'aria-labelledby': titleId });\n        }\n        else if (hasSelectableInput && !containsCardTitleChildRef.current) {\n            setAriaProps({});\n            // eslint-disable-next-line no-console\n            console.warn('If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed');\n        }\n    }, [hasSelectableInput, selectableInputAriaLabel, titleId]);\n    return (React.createElement(exports.CardContext.Provider, { value: {\n            cardId: id,\n            registerTitleId,\n            isExpanded\n        } },\n        hasSelectableInput && (React.createElement(\"input\", Object.assign({ className: \"pf-screen-reader\", id: `${id}-input` }, ariaProps, { type: \"checkbox\", checked: isSelected, onChange: event => onSelectableInputChange(id, event), disabled: isDisabledRaised, tabIndex: -1 }))),\n        React.createElement(Component, Object.assign({ id: id, className: react_styles_1.css(card_1.default.card, isCompact && card_1.default.modifiers.compact, isExpanded && card_1.default.modifiers.expanded, isFlat && card_1.default.modifiers.flat, isRounded && card_1.default.modifiers.rounded, isLarge && card_1.default.modifiers.displayLg, isFullHeight && card_1.default.modifiers.fullHeight, isPlain && card_1.default.modifiers.plain, getSelectableModifiers(), className), tabIndex: isSelectable || isSelectableRaised ? '0' : undefined }, props, ouiaProps), children)));\n};\nexports.Card = Card;\nexports.Card.displayName = 'Card';\n//# sourceMappingURL=Card.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CardBody = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst CardBody = (_a) => {\n    var { children = null, className = '', component = 'div', isFilled = true } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\", \"isFilled\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(card_1.default.cardBody, !isFilled && card_1.default.modifiers.noFill, className) }, props), children));\n};\nexports.CardBody = CardBody;\nexports.CardBody.displayName = 'CardBody';\n//# sourceMappingURL=CardBody.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CardTitle = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst Card_1 = require(\"./Card\");\nconst CardTitle = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\"]);\n    const { cardId, registerTitleId } = React.useContext(Card_1.CardContext);\n    const Component = component;\n    const titleId = cardId ? `${cardId}-title` : '';\n    React.useEffect(() => {\n        registerTitleId(titleId);\n        return () => registerTitleId('');\n    }, [registerTitleId, titleId]);\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(card_1.default.cardTitle, className), id: titleId || undefined }, props), children));\n};\nexports.CardTitle = CardTitle;\nexports.CardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Skeleton = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst skeleton_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Skeleton/skeleton\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst Skeleton = (_a) => {\n    var { className, width, height, fontSize, shape, screenreaderText } = _a, props = tslib_1.__rest(_a, [\"className\", \"width\", \"height\", \"fontSize\", \"shape\", \"screenreaderText\"]);\n    const fontHeightClassName = fontSize\n        ? Object.values(skeleton_1.default.modifiers).find(key => key === `pf-m-text-${fontSize}`)\n        : undefined;\n    return (React.createElement(\"div\", Object.assign({}, props, { className: react_styles_1.css(skeleton_1.default.skeleton, fontSize && fontHeightClassName, shape === 'circle' && skeleton_1.default.modifiers.circle, shape === 'square' && skeleton_1.default.modifiers.square, className) }, ((width || height) && {\n        style: Object.assign({ '--pf-c-skeleton--Width': width ? width : undefined, '--pf-c-skeleton--Height': height ? height : undefined }, props.style)\n    })),\n        React.createElement(\"span\", { className: \"pf-u-screen-reader\" }, screenreaderText)));\n};\nexports.Skeleton = Skeleton;\nexports.Skeleton.displayName = 'Skeleton';\n//# sourceMappingURL=Skeleton.js.map","\"use strict\"\nexports.__esModule = true;\nexports.PackageIconConfig = {\n  name: 'PackageIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M567.7,1010.49707 L951.5,818.498238 C994.7,796.698371 1024,752.39864 1024,703.998934 L1024,320.001265 C1024,271.601559 995.6,227.10183 952.2,205.501961 L568.6,13.5031267 C550.8,4.60318072 531.4,0.103208049 512,-0.00152855358 C492.3,-0.0967907365 472.5,4.40318194 454.4,13.5031267 L70.8,205.501961 C27.4,227.10183 0,271.50156 0,319.801267 L0.9,703.998934 C0.9,752.39864 28.3,796.79837 71.6,818.398239 L455.2,1010.39707 C464.3,1014.89705 488.1,1023.99699 511.9,1023.99699 C535.5,1023.99699 558.8,1014.99704 567.7,1010.49707 Z M512.5,630.899377 L672.5,550.899863 L672.5,645.29929 L736.5,613.299484 L736.5,518.900058 L896,438.900543 L896.5,712.698881 L512.5,904.697715 L512.5,630.899377 Z M145.1,304.101362 L294.9,228.60182 C295.3,228.801819 295.6,229.001818 296,229.201817 L661.9,412.300705 L512.5,487.600248 L145.1,304.101362 Z M512.5,118.902487 L881.3,301.701377 L733.1,376.400923 L366,192.702038 L512.5,118.902487 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PackageIcon = require('../createIcon').createIcon(exports.PackageIconConfig);\nexports[\"default\"] = exports.PackageIcon;","import('./card.css');\nexport default {\n  \"card\": \"pf-c-card\",\n  \"cardActions\": \"pf-c-card__actions\",\n  \"cardBody\": \"pf-c-card__body\",\n  \"cardExpandableContent\": \"pf-c-card__expandable-content\",\n  \"cardFooter\": \"pf-c-card__footer\",\n  \"cardHeader\": \"pf-c-card__header\",\n  \"cardHeaderToggle\": \"pf-c-card__header-toggle\",\n  \"cardHeaderToggleIcon\": \"pf-c-card__header-toggle-icon\",\n  \"cardSrInput\": \"pf-c-card__sr-input\",\n  \"cardTitle\": \"pf-c-card__title\",\n  \"divider\": \"pf-c-divider\",\n  \"modifiers\": {\n    \"hoverable\": \"pf-m-hoverable\",\n    \"selectable\": \"pf-m-selectable\",\n    \"selected\": \"pf-m-selected\",\n    \"hoverableRaised\": \"pf-m-hoverable-raised\",\n    \"selectableRaised\": \"pf-m-selectable-raised\",\n    \"nonSelectableRaised\": \"pf-m-non-selectable-raised\",\n    \"selectedRaised\": \"pf-m-selected-raised\",\n    \"compact\": \"pf-m-compact\",\n    \"displayLg\": \"pf-m-display-lg\",\n    \"flat\": \"pf-m-flat\",\n    \"plain\": \"pf-m-plain\",\n    \"rounded\": \"pf-m-rounded\",\n    \"expanded\": \"pf-m-expanded\",\n    \"fullHeight\": \"pf-m-full-height\",\n    \"toggleRight\": \"pf-m-toggle-right\",\n    \"noOffset\": \"pf-m-no-offset\",\n    \"noFill\": \"pf-m-no-fill\",\n    \"overpassFont\": \"pf-m-overpass-font\"\n  },\n  \"themeDark\": \"pf-theme-dark\"\n};","import('./skeleton.css');\nexport default {\n  \"modifiers\": {\n    \"circle\": \"pf-m-circle\",\n    \"square\": \"pf-m-square\",\n    \"widthSm\": \"pf-m-width-sm\",\n    \"widthMd\": \"pf-m-width-md\",\n    \"widthLg\": \"pf-m-width-lg\",\n    \"width_25\": \"pf-m-width-25\",\n    \"width_33\": \"pf-m-width-33\",\n    \"width_50\": \"pf-m-width-50\",\n    \"width_66\": \"pf-m-width-66\",\n    \"width_75\": \"pf-m-width-75\",\n    \"heightSm\": \"pf-m-height-sm\",\n    \"heightMd\": \"pf-m-height-md\",\n    \"heightLg\": \"pf-m-height-lg\",\n    \"height_25\": \"pf-m-height-25\",\n    \"height_33\": \"pf-m-height-33\",\n    \"height_50\": \"pf-m-height-50\",\n    \"height_66\": \"pf-m-height-66\",\n    \"height_75\": \"pf-m-height-75\",\n    \"height_100\": \"pf-m-height-100\",\n    \"text_4xl\": \"pf-m-text-4xl\",\n    \"text_3xl\": \"pf-m-text-3xl\",\n    \"text_2xl\": \"pf-m-text-2xl\",\n    \"textXl\": \"pf-m-text-xl\",\n    \"textLg\": \"pf-m-text-lg\",\n    \"textMd\": \"pf-m-text-md\",\n    \"textSm\": \"pf-m-text-sm\"\n  },\n  \"skeleton\": \"pf-c-skeleton\",\n  \"themeDark\": \"pf-theme-dark\"\n};","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (React.createElement(Cmp, { className: classNames(props.className, 'inventory') },\n        React.createElement(Suspense, { fallback: props.fallback },\n            React.createElement(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: React.createElement(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)))));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return React.createElement(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (React.createElement(Bullseye, { className: \"pf-u-p-lg\" },\n        React.createElement(Spinner, { size: \"xl\" }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({ limit: -1, 'filter[baseline_name]': 'neq:' }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={handleUnassignment} isDisabled={systemsWithPatchSet.length === 0}>\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid container hasGutter>\n                {systemsLoading && <Skeleton />}\n                {(!systemsLoading && systemsWithPatchSet.length !== 0) &&\n                    renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                }\n                {(!systemsLoading && systemsWithoutPatchSetCount > 0) &&\n                    renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { removePatchSetApi } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../../Utilities/constants';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await removePatchSetApi({ inventory_ids: systemsWithPatchSet });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalToggle(true);\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport PatchSetWizard from '../../SmartComponents/PatchSetWizard/PatchSetWizard';\nimport UnassignSystemsModal from '../../SmartComponents/Modals/UnassignSystemsModal';\n\nconst PatchSetWrapper = ({ patchSetState, setPatchSetState }) => {\n    return (<>\n        {(patchSetState.isUnassignSystemsModalOpen) && <UnassignSystemsModal\n            unassignSystemsModalState={patchSetState}\n            setUnassignSystemsModalOpen={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n        />}\n        {(patchSetState.isPatchSetWizardOpen) &&\n        <PatchSetWizard systemsIDs={patchSetState.systemsIDs} setBaselineState={setPatchSetState} />}\n    </>);\n};\n\nPatchSetWrapper.propTypes = {\n    patchSetState: propTypes.object,\n    setPatchSetState: propTypes.func\n};\nexport default PatchSetWrapper;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { CheckCircleIcon, PackageIcon, ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Button, Skeleton,\n    Card, Grid, GridItem, CardBody, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { fetchSystems } from '../../Utilities/api';\n\nconst StatusCard = ({ title, color, Icon, value, filter, apply }) => {\n    return (\n        <Card isCompact isFullHeight>\n            <CardTitle style={{ marginTop: '0px' }}>{title}</CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                    <FlexItem\n                        spacer={{ default: 'spacerMd' }}\n                        alignSelf={{ default: 'alignSelfCenter' }}\n                    >\n                        <Icon color={color} size='md'/>\n                    </FlexItem>\n                    <FlexItem isFilled spacer={{ default: 'spacerNone' }}>\n                        {\n                            typeof(value) === 'undefined'\n                            &&  <Skeleton width=\"24px\" />\n                                    ||  <Button\n                                        variant=\"link\"\n                                        onClick={() => apply(filter)}\n                                        className='patch-status-report-text'>\n                                        {value}\n                                    </Button>\n                        }\n                    </FlexItem>\n                </Flex>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst SystemsStatusreport = ({ apply, queryParams }) => {\n    const [subtotals, setSubtotals] = React.useState({});\n\n    const { selectedTags, selectedGlobalTags, systemProfile } = useSelector(({ GlobalFilterStore }) => GlobalFilterStore);\n\n    const res = useMemo(async () =>{\n        setSubtotals({});\n\n        let result;\n\n        try {\n            result = await fetchSystems({ filter: {\n                os: queryParams?.filter?.os\n            },\n            selectedTags: [...selectedTags, ...selectedGlobalTags],\n            systemProfile,\n            limit: 1\n            });\n        }\n        catch {\n            result = [];\n        }\n\n        return result;\n    }, [\n        queryParams?.filter?.os?.length, queryParams?.filter?.os !== undefined,\n        selectedTags?.length, selectedTags !== undefined,\n        selectedGlobalTags?.length, selectedGlobalTags !== undefined,\n        systemProfile,\n        queryParams?.subtotals !== undefined\n    ]);\n\n    res.then((result)=> {\n        setSubtotals(result.meta?.subtotals);\n    });\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Grid hasGutter span={12} >\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsUpToDate)}\n                        Icon={CheckCircleIcon}\n                        color={'var(--pf-global--success-color--100)'}\n                        value={subtotals?.patched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'eq:0' } }}\n                    />\n                </GridItem>\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsWithPatchesAvailable)}\n                        Icon={PackageIcon}\n                        color={'var(--pf-global--primary-color--100)'}\n                        value={subtotals?.unpatched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'gt:0' } }}\n                    />\n                </GridItem>\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusStaleSystems)}\n                        Icon={ExclamationTriangleIcon}\n                        color={'var(--pf-global--warning-color--100)'}\n                        value={subtotals?.stale}\n                        apply={apply}\n                        filter={{ filter: { stale: true } }}\n                    />\n                </GridItem>\n            </Grid>\n        </Main>\n    );\n};\n\nStatusCard.propTypes = {\n    title: propTypes.string,\n    Icon: propTypes.elementType,\n    value: propTypes.string,\n    color: propTypes.string,\n    apply: propTypes.func,\n    filter: propTypes.object\n};\n\nSystemsStatusreport.propTypes = {\n    apply: propTypes.func,\n    queryParams: propTypes.object\n};\n\nexport default SystemsStatusreport;\n","import searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport staleFilter from '../../PresentationalComponents/Filters/SystemStaleFilter';\nimport osVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport systemsUpdatableFilter from '../../PresentationalComponents/Filters/SystemsUpdatableFilter';\nimport { fetchSystems } from '../../Utilities/api';\nimport {\n    filterRemediatableSystems,\n    buildFilterChips\n} from '../../Utilities/Helpers';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const fetchAllSystemsCallback = (queryParams) => () =>\n    fetchSystems({ ...queryParams, limit: -1 }).then(filterRemediatableSystems);\n\nexport const buildFilterConfig = (search, filter, apply) => ({\n    items: [\n        searchFilter(apply, search,\n            intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n            intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n        ),\n        staleFilter(apply, filter),\n        systemsUpdatableFilter(apply, filter),\n        osVersionFilter(filter, apply)\n    ]\n});\n\nexport const buildActiveFiltersConfig = (filter, search, deleteFilters) => ({\n    filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n    onDelete: deleteFilters,\n    deleteTitle: intl.formatMessage(messages.labelsFiltersReset)\n});\n","import React, { useEffect, useRef } from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Button } from '@patternfly/react-core';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changeSystemsParams, clearInventoryReducer, changeSystemsMetadata, changeTags } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchSystems\n} from '../../Utilities/api';\nimport { systemsListDefaultFilters, featureFlags } from '../../Utilities/constants';\nimport {\n    arrayFromObj, decodeQueryparams, persistantParams,\n    systemsColumnsMerger, filterSelectedActiveSystemIDs\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useBulkSelectConfig, useGetEntities, useOnExport,\n    useOnSelect, useRemoveFilter, useFeatureFlag\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\nimport SystemsStatusReport from '../../PresentationalComponents/StatusReports/SystemsStatusReport';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport { fetchAllSystemsCallback, buildFilterConfig, buildActiveFiltersConfig } from './SystemsHelpers';\nimport useRemediationProvier from '../../Utilities/useRemediationDataProvider';\nimport usePatchSetState from '../../Utilities/usePatchSetState';\nimport PatchSetWrapper from '../../PresentationalComponents/PatchSetWrapper/PatchSetWrapper';\n\nconst Systems = () => {\n    const inventory = useRef(null);\n    const pageTitle = intl.formatMessage(messages.titlesSystems);\n\n    setPageTitle(pageTitle);\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [isRemediationOpen, setRemediationOpen] = React.useState(false);\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n\n    const isPatchSetEnabled = useFeatureFlag(featureFlags.patch_set);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const { hasError, code } = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => dispatch(clearInventoryReducer());\n    }, []);\n\n    async function showRemediationModal(data) {\n        const resolvedData = await data;\n        setRemediationModalCmp(() =>\n            () => <RemediationWizard\n                data={resolvedData}\n                isRemediationOpen\n                setRemediationOpen={setRemediationOpen} />);\n        setRemediationOpen(!isRemediationOpen);\n    }\n\n    function apply(queryParams) {\n        dispatch(changeSystemsParams(queryParams));\n    }\n\n    const applyMetadata = (metadata) => {\n        dispatch(changeSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply, systemsListDefaultFilters);\n\n    const filterConfig = buildFilterConfig(search, filter, apply);\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllSystemsCallback(queryParams), selectRows);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport('systems', queryParams, {\n        csv: exportSystemsCSV,\n        json: exportSystemsJSON\n    }, dispatch);\n\n    const getEntities = useGetEntities(fetchSystems, apply, {}, history, applyMetadata, applyGlobalFilter);\n\n    const {\n        patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal\n    } = usePatchSetState(selectedRows);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh) {\n            onSelect('none');\n            inventory?.current?.onRefreshData();\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    const remediationDataProvider = useRemediationProvier(selectedRows, setRemediationLoading, 'systems');\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'} />\n            {hasError && <ErrorHandler code={code} /> || <React.Fragment>\n                <SystemsStatusReport apply={apply} queryParams={queryParams} />\n                {isPatchSetEnabled && <PatchSetWrapper patchSetState={patchSetState} setPatchSetState={setPatchSetState} />}\n                {isRemediationOpen && <RemediationModalCmp /> || null}\n                <Main>\n                    <InventoryTable\n                        ref={inventory}\n                        isFullView\n                        autoRefresh\n                        initialLoading\n                        hideFilters={{ all: true, tags: false }}\n                        columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, isPatchSetEnabled)}\n                        showTags\n                        customFilters={{\n                            patchParams: {\n                                search,\n                                filter,\n                                systemProfile,\n                                selectedTags\n                            }\n                        }}\n                        paginationProps={{\n                            isDisabled: totalItems === 0\n                        }}\n                        onLoad={({ mergeWithEntities }) => {\n                            register({\n                                ...mergeWithEntities(\n                                    inventoryEntitiesReducer(systemsListColumns(isPatchSetEnabled), modifyInventory),\n                                    persistantParams({ page, perPage, sort, search }, decodedParams)\n                                )\n                            });\n                        }}\n                        getEntities={getEntities}\n                        tableProps={{\n                            actionResolver: (row) =>\n                                systemsRowActions(\n                                    showRemediationModal, openPatchSetAssignWizard,\n                                    isPatchSetEnabled, openUnassignSystemsModal, row\n                                ),\n                            canSelectAll: false,\n                            variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                        }}\n                        bulkSelect={useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                        exportConfig={{\n                            isDisabled: totalItems === 0,\n                            onSelect: onExport\n                        }}\n                        actionsConfig={isPatchSetEnabled && {\n                            actions: [\n                                <Button onClick={openPatchSetAssignWizard}\n                                    key='assign-multiple-systems'\n                                    isDisabled={selectedCount === 0}>\n                                    {intl.formatMessage(messages.titlesTemplateAssign)}\n                                </Button>,\n                                {\n                                    key: 'remove-multiple-systems',\n                                    label: intl.formatMessage(messages.titlesTemplateRemoveMultipleButton),\n                                    onClick: () => openUnassignSystemsModal(filterSelectedActiveSystemIDs(selectedRows)),\n                                    props: { isDisabled: selectedCount === 0 }\n                                }\n                            ] }\n                        }\n                        filterConfig={filterConfig}\n                        activeFiltersConfig={activeFiltersConfig}\n                        dedicatedAction={(\n                            <AsyncRemediationButton\n                                remediationProvider={remediationDataProvider}\n                                isDisabled={\n                                    arrayFromObj(selectedRows).length === 0\n                                }\n                                isLoading={isRemediationLoading}\n                            />\n                        )}\n                    />\n                </Main>\n            </React.Fragment>}\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n","import { remediationIdentifiers } from './constants';\nimport {\n    remediationProviderWithPairs,\n    removeUndefinedObjectKeys,\n    transformPairs\n} from './Helpers';\nimport {\n    fetchViewAdvisoriesSystems\n} from './api';\n\nexport const prepareRemediationPairs = ({ advisories, systems } = {}) => {\n    return fetchViewAdvisoriesSystems({ advisories, systems });\n};\n\n/**\n* Provides remediation data, systems with all of their corresponding issues.\n* @param {Function} [setRemediationLoading] function to toggle remediation loading state\n* @param {Array} [selectedRows] array of systems to calculate\n* @returns {handleSystemsRemoval}\n*/\nconst useRemediationDataProvider = (selectedRows, setRemediationLoading, remediationType) => {\n    const remediationDataProvider = async () => {\n        setRemediationLoading(true);\n\n        const remediationPairs = await prepareRemediationPairs({\n            [remediationType]: removeUndefinedObjectKeys(selectedRows)\n        });\n\n        setRemediationLoading(false);\n\n        return remediationProviderWithPairs(\n            remediationPairs,\n            transformPairs,\n            remediationIdentifiers.advisory\n        );\n    };\n\n    return remediationDataProvider;\n};\n\nexport default useRemediationDataProvider;\n","import { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows, fetchRejected } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["Object","defineProperty","exports","value","Card","CardContext","tslib_1","React","__importStar","card_1","__importDefault","react_styles_1","helpers_1","createContext","cardId","registerTitleId","isExpanded","_a","children","id","className","component","isHoverable","isCompact","isSelectable","isSelectableRaised","isSelected","isDisabledRaised","isFlat","isRounded","isLarge","isFullHeight","isPlain","ouiaId","ouiaSafe","hasSelectableInput","selectableInputAriaLabel","onSelectableInputChange","props","__rest","Component","ouiaProps","useOUIAProps","displayName","titleId","setTitleId","useState","ariaProps","setAriaProps","console","warn","containsCardTitleChildRef","useRef","useEffect","current","createElement","Provider","assign","type","checked","onChange","event","disabled","tabIndex","css","default","card","modifiers","compact","expanded","flat","rounded","displayLg","fullHeight","plain","nonSelectableRaised","selectableRaised","selectedRaised","selectable","selected","undefined","isFilled","cardBody","noFill","Card_1","useContext","cardTitle","skeleton_1","width","height","fontSize","shape","screenreaderText","fontHeightClassName","values","find","key","skeleton","circle","square","style","name","svgPath","yOffset","xOffset","__assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","BaseInvTable","history","useHistory","store","Cmp","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","renderUnassignModalMessages","bodyMessage","systemsCount","intl","GridItem","formatMessage","messages","b","chunks","UnassignSystemsModal","unassignSystemsModalState","setUnassignSystemsModalOpen","systemsIDs","isUnassignSystemsModalOpen","systemsWithPatchSet","setSystemWithPatchSet","systemsLoading","setSystemsLoading","handleModalToggle","shouldRefresh","handleModalClose","handleUnassignment","dispatch","useDispatch","handleSystemsRemoval","removePatchSetApi","inventory_ids","status","addNotification","patchSetUnassignSystemsNotifications","success","useUnassignSystemsHook","fetchSystems","limit","then","allSystemsWithPatchSet","filter","systemID","data","some","system","filterSystemsWithoutSets","result","systemsWithoutPatchSetCount","Modal","variant","isOpen","title","onClose","titleIconVariant","actions","Button","onClick","isDisabled","Grid","container","hasGutter","Skeleton","injectIntl","PatchSetWrapper","patchSetState","setPatchSetState","isPatchSetWizardOpen","PatchSetWizard","setBaselineState","RemediationWizard","setRemediationOpen","setOpen","StatusCard","color","Icon","CardTitle","marginTop","CardBody","Flex","flex","flexWrap","FlexItem","spacer","alignSelf","SystemsStatusreport","queryParams","subtotals","setSubtotals","useSelector","GlobalFilterStore","selectedTags","selectedGlobalTags","systemProfile","useMemo","os","meta","Main","paddingBottom","span","md","CheckCircleIcon","patched","packages_updatable","PackageIcon","unpatched","ExclamationTriangleIcon","stale","inventory","pageTitle","setPageTitle","isRemediationOpen","isRemediationLoading","setRemediationLoading","RemediationModalCmp","setRemediationModalCmp","isPatchSetEnabled","useFeatureFlag","featureFlags","decodedParams","decodeQueryparams","location","search","systems","entities","rows","shallowEqual","totalItems","total","selectedRows","hasError","code","SystemsStore","page","perPage","sort","showRemediationModal","resolvedData","changeSystemsParams","clearInventoryReducer","useRemoveFilter","systemsListDefaultFilters","deleteFilters","filterConfig","items","searchFilter","staleFilter","systemsUpdatableFilter","osVersionFilter","buildFilterConfig","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","buildActiveFiltersConfig","onSelect","useOnSelect","filterRemediatableSystems","fetchAllSystemsCallback","toSelect","payload","selectedCount","arrayFromObj","onExport","useOnExport","csv","exportSystemsCSV","json","exportSystemsJSON","getEntities","useGetEntities","metadata","changeSystemsMetadata","tags","changeTags","usePatchSetState","openPatchSetAssignWizard","openUnassignSystemsModal","onRefreshData","remediationDataProvider","useRemediationProvier","Header","headerOUIA","ErrorHandler","SystemsStatusReport","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","columns","defaultColumns","systemsColumnsMerger","showTags","customFilters","patchParams","paginationProps","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","modifyInventory","persistantParams","tableProps","actionResolver","row","systemsRowActions","canSelectAll","TableVariant","isStickyHeader","bulkSelect","useBulkSelectConfig","total_items","exportConfig","actionsConfig","label","filterSelectedActiveSystemIDs","dedicatedAction","AsyncRemediationButton","remediationProvider","isLoading","prepareRemediationPairs","advisories","fetchViewAdvisoriesSystems","remediationType","removeUndefinedObjectKeys","remediationPairs","remediationProviderWithPairs","transformPairs","remediationIdentifiers","initialState","offset","state","loaded","createSystemsRows","modifyPackageSystems","createPackageSystemsRows","inventoryModifier","action","newState","fetchRejected","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}