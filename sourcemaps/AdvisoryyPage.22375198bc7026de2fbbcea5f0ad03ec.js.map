{"version":3,"file":"js/AdvisoryyPage.4d9deefec19172c9b745.js","mappings":"klBAcMA,EAAY,SAAC,GAAc,IAAZC,EAAY,EAAZA,OACXC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,GAAjC,eAAOK,EAAP,KAAaC,EAAb,KACA,GAA8BN,EAAAA,EAAAA,UAAS,IAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KACA,GAA4BR,EAAAA,EAAAA,eAASS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BX,EAAAA,EAAAA,UAAS,CACjCY,UAAWC,EAAAA,gBAAAA,IACXC,MAAO,IAFX,eAAOC,EAAP,KAAeC,EAAf,KAKMC,GAAOC,EAAAA,EAAAA,KAAY,qBAAGC,cAAkChB,QAExDiB,GAASF,EAAAA,EAAAA,KACX,qBAAGC,cAAkCC,UAGzCC,IAAAA,WAAgB,WACZvB,GAASwB,EAAAA,EAAAA,IAAU,CAAEzB,OAAAA,OACtB,IAEHwB,IAAAA,SAAc,WACVjB,EAAQH,EAAKsB,OAAOlB,EAAO,GAAKE,EAASF,EAAOE,MACjD,CAACN,EAAMI,EAAME,EAASQ,KAEzBS,EAAAA,EAAAA,UAAQ,WACJ,IAAMC,OAAyBhB,IAAXC,GAAmC,KAAXA,GACrCO,EAAKS,QACJ,SAAAC,GACI,IAAsBC,EAAeD,EAA7BE,WAAcD,SACtB,OAAOA,GAAYlB,GAAWkB,EAASE,cAAcC,SAASrB,EAAOoB,mBAExEb,EAETf,GAAQ8B,EAAAA,EAAAA,KAAsC,IAAtBP,EAAWQ,QAAgBvB,IAAWe,GAAcR,MAC7E,CAACP,EAAQO,IAEZ,IAIMiB,EAAe,SAAC,GAAc,IAAZxB,EAAY,EAAZA,OACpBJ,EAAQD,GACRM,EAAUD,IAmBd,OACI,kBAAC,aAAD,KACI,kBAACyB,EAAA,GAAD,CACIC,QAAQ,QACRC,MAAOC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,YAC1BC,OAAQC,QAAQtC,GAChBuC,QA/BQ,WAChBtC,OAAQK,KAgCA,kBAACkC,EAAA,EAAD,CACIC,QAASC,EAAAA,EACTC,UA1BS,SAACC,EAAG1C,GACzBC,EAAQD,IA0BI2C,gBAvBY,SAACD,EAAGxC,GAC5BD,EAAQ,GACRE,EAAWD,IAsBC0C,MAAOf,EACPgB,UAAW,aACXC,eAAgB,kBAChBC,OAtBG,SAACL,EAAGjC,EAAOF,GAC1B,OAA+ByC,EAAAA,EAAAA,IAASpD,EAAMa,EAAOF,GAA7CG,EAAR,EAAQA,OAAQU,EAAhB,EAAgBA,WAEhBT,EAAUD,GACVb,EAAQuB,IAmBIV,OAAQA,EACRuC,MAAO,CACHnD,KAAAA,EACAoD,SAAU,CAAEC,MAAOjD,EAASkD,QAASpD,EAAO,GAAKE,EAASmD,YAAazD,GAAQA,EAAKgC,QACpFb,OAAAA,EAAQuC,YAAa,CAAEjC,OAAQ,GAAIhB,OAAAA,IAEvCkD,aAAc,CACVC,MAAO,EACHC,EAAAA,EAAAA,GAAa5B,EAAcxB,EAAQ,GAC/B4B,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,4CAUnD3C,EAAUmE,UAAY,CAClBlE,OAAQkE,IAAAA,OAGZ,U,yBC5GMC,EAAuB,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SAC5B,OACI,kBAACC,EAAA,EAAD,CAAOC,UAAU,UAAUC,WAAS,GAChC,kBAACC,EAAA,EAAD,CAAWC,UAAQ,GACf,kBAACC,EAAA,EAAD,CAAMC,KAAM,CAAEC,QAAS,WACnB,kBAACC,EAAA,EAAD,CAAUC,OAAQ,CAAEF,QAAS,eACzB,kBAACG,EAAA,GAAD,CAAOC,aAAa,MACfvC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,yBAG5B,kBAACmC,EAAA,EAAD,CAAUC,OAAQ,CAAEF,QAAS,aACzB,kBAACF,EAAA,EAAD,CAAMC,KAAM,CAAEC,QAAS,QACnB,kBAACC,EAAA,EAAD,KACI,kBAAC,KAAD,CAAcI,KAAK,KAAKC,MAAOd,EAASc,SAE5C,kBAACL,EAAA,EAAD,KACKT,EAASe,aAU1ChB,EAAqBD,UAAY,CAC7BE,SAAUF,IAAAA,QAGd,U,0BCrBMkB,EAAiB,SAAC,GAA8B,IAA5BpD,EAA4B,EAA5BA,WAAYqD,EAAgB,EAAhBA,UAClC,GAAsClF,EAAAA,EAAAA,WAAS,kBAAM,kBAAM,SAA3D,eAAOmF,EAAP,KAAsBC,EAAtB,KACA,GAAoCpF,EAAAA,EAAAA,UAAS,KAA7C,eAAOqF,EAAP,KAAmBC,EAAnB,KACMC,GAAiBC,EAAAA,EAAAA,GAAgB3D,EAAWoC,UAC5ChE,EAAO4B,EAAW5B,KAMxB,OACI,kBAACwF,EAAA,EAAD,CAAMrB,WAAS,EAACsB,MAAO,CAAEC,UAAW,MAChC,kBAACC,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAACC,EAAA,GAAD,CACIC,QAASd,EACT9C,QAAS6D,EAAAA,EAAAA,QACTC,UAAQ,GAER,kBAACC,EAAA,EAAD,CAAO/B,WAAS,GACZ,kBAACgC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAWV,MAAO,CAAEW,WAAY,aAExBxE,EAAWyE,cAAeC,EAAAA,EAAAA,IAAoB1E,EAAWyE,YAAajB,EAAYC,IAG1F,kBAACc,EAAA,EAAD,KACKvE,EAAW2E,aACR,kBAAC,aAAD,KACKlE,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,iBAA2B,CAC3CkE,MAAMC,EAAAA,EAAAA,IACF7E,EAAW2E,eAGnB,8BAGP3E,EAAW8E,eACR,kBAAC,aAAD,KACKrE,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,mBAA6B,CAC7CkE,MAAMC,EAAAA,EAAAA,IACF7E,EAAW8E,oBAM9BC,EAAAA,EAAAA,IAAa/E,EAAWgF,KACrB,kBAACT,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,CAAcC,KAAI,2CAAsClF,EAAWgF,IAC/DG,KAAM1E,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,kCAMjD,kBAACqD,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAACvB,EAAA,EAAD,CAAMC,KAAM,CAAEC,QAAS,WAClB5C,EAAWoF,oBAAuB,kBAACvC,EAAA,EAAD,KAC/B,kBAACR,EAAA,EAAD,CAAOC,UAAU,UAAUC,WAAS,GAChC,kBAACC,EAAA,EAAD,CAAWC,UAAQ,GACf,kBAACC,EAAA,EAAD,CAAMC,KAAM,CAAEC,QAAS,WACnB,kBAACC,EAAA,EAAD,CAAUC,OAAQ,CAAEF,QAAS,eACzB,kBAACG,EAAA,GAAD,CAAOC,aAAa,MACfvC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,sBAG5B,kBAACmC,EAAA,EAAD,CAAUC,OAAQ,CAAEF,QAAS,aACzB,kBAACyC,EAAA,EAAD,CACIC,KAAMtF,EAAWoF,0BAQf,IAAzB1B,EAAe6B,OAAgB,kBAAC1C,EAAA,EAAD,KAC5B,kBAAC,EAAD,CAAsBT,SAAUsB,KAGnC1D,EAAWwF,iBAAoB,kBAAC3C,EAAA,EAAD,CAAUC,OAAQ,CAAEF,QAAS,aACzD,kBAAC6C,EAAA,EAAD,SAIXrH,GAAwB,IAAhBA,EAAKgC,QACV,kBAAC2D,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAACyB,EAAA,EAAD,KACI,kBAACC,EAAA,GAAD,CAAMC,UAAWC,EAAAA,GAAAA,IACZpF,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,aAExB,kBAACoF,EAAAA,OAAD,CAAQvF,QAAQ,OAAOsD,MAAO,CAAEkC,QAAS,GAAKC,QArF5C,WAClBzC,GAAa,kBAAM,kBAAM,kBAAC,EAAD,CAAWvF,OAAQI,UAqFvBqC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,iBAA2B,CAAEuF,UAAW7H,EAAKgC,YAKjF,kBAACkD,EAAD,QAKZF,EAAelB,UAAY,CACvBlC,WAAYkC,IAAAA,OACZmB,UAAWnB,IAAAA,MAGf,U,wvBChGA,IAAMgE,GAAkB,SAAC,GAAqB,IAAnBC,EAAmB,EAAnBA,aACjBlI,GAAWC,EAAAA,EAAAA,MACjB,EAGIsB,IAAAA,UAAe,kBAAM,kBAAM,SAH/B,eACI4G,EADJ,KAEIC,EAFJ,KAIMC,GAAUC,EAAAA,EAAAA,cAEVC,GAAgBC,EAAAA,EAAAA,IAAkBH,EAAQI,SAAS7H,QACnD8H,GAAUtH,EAAAA,EAAAA,KAAY,gBAAGuH,EAAH,EAAGA,SAAH,OAAkBA,MAAAA,OAAA,EAAAA,EAAUtI,OAAQ,KAAIuI,EAAAA,IAC9DtH,GAASF,EAAAA,EAAAA,KACX,gBAAGuH,EAAH,EAAGA,SAAH,OAAkBA,MAAAA,OAAA,EAAAA,EAAUrH,SAAU,MAEpCuH,GAAazH,EAAAA,EAAAA,KACf,gBAAGuH,EAAH,EAAGA,SAAH,OAAkBA,MAAAA,OAAA,EAAAA,EAAUG,QAAS,KAEnCjF,GAAczC,EAAAA,EAAAA,KAChB,gBAAG2H,EAAH,EAAGA,qBAAH,OAA8BA,MAAAA,OAAA,EAAAA,EAAsBlF,cAAe,MAEjEmF,GAAe5H,EAAAA,EAAAA,KACjB,gBAAGuH,EAAH,EAAGA,SAAH,OAAkBA,MAAAA,OAAA,EAAAA,EAAUK,eAAgB,MAGxCC,EACoCpF,EADpCoF,cAAeC,EACqBrF,EADrBqF,aACnBtH,EAAwCiC,EAAxCjC,OAAQhB,EAAgCiD,EAAhCjD,OAAQL,EAAwBsD,EAAxBtD,KAAME,EAAkBoD,EAAlBpD,QAAS0I,EAAStF,EAATsF,KAUnC,SAAShG,EAAMiG,GACXpJ,GAASqJ,EAAAA,EAAAA,IAA4BD,IATzC7H,IAAAA,WAAgB,WAEZ,OADA4B,EAAMoF,GACC,WACHvI,GAASsJ,EAAAA,EAAAA,OACTtJ,GAASuJ,EAAAA,EAAAA,UAEd,IAMH,OAAwBC,EAAAA,EAAAA,IAAgB,GAAD,CAAG5I,OAAAA,GAAWgB,GAAUuB,GAAxDsG,GAAP,eAEM3F,EAAe,CACjBC,MAAO,EACHC,EAAAA,EAAAA,GAAab,EAAOvC,EAChB4B,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,iCACnBD,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,yCAEvBiH,EAAAA,EAAAA,GAAgB9H,EAAQuB,KAI1BwG,EAAsB,CACxBC,SAASC,EAAAA,EAAAA,IAAiBjI,EAAQhB,EAAQ4B,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,kCAC7DqH,SAAUL,GAGRM,EAAuB,SAAA5I,GACzBiH,GAAuB,kBAAM,kBAAM,kBAAC4B,GAAA,EAAD,CAAkB7I,KAAMA,SAYzD8I,GAAWC,EAAAA,EAAAA,IAAYxB,EAASM,GAHjB,kBACjBmB,EAAAA,GAAAA,IAAqB,GAAD,MAAMtG,GAAN,IAAmBkD,GAAImB,EAAcxE,OAAQ,KAAK0G,KAAKC,EAAAA,OAP5D,SAACC,GAChBtK,EACI,CAAEqH,KAAM,gBAAiBkD,QAASD,OASpCE,EAAgBxB,IAAgByB,EAAAA,EAAAA,IAAazB,GAAc7G,OAE3DuI,GAAaC,EAAAA,EAAAA,GAAeR,GAAAA,GAAsBhH,EAAO,CAAE4D,GAAImB,GAAgBG,GAE/EuC,GAAWC,EAAAA,EAAAA,IAAY3C,EAAcrE,EAAa,CACpDiH,IAAKC,GAAAA,GACLC,KAAMC,GAAAA,IACPjL,GAEH,OACI,kBAAC,aAAD,KACI,kBAACmI,EAAD,MACC7G,EAAO4J,UAAY,kBAACC,EAAA,EAAD,CAAcC,KAAM9J,EAAO8J,QAC3C,kBAACC,EAAA,EAAD,CACIC,sBAAuB,CAAC,kBACxBC,YAAU,EACVC,aAAW,EACXC,gBAAc,EACdC,eAAa,EACbC,YAAa,CAAEC,KAAK,EAAMC,MAAM,GAChC/I,QAASgJ,GAAAA,GACTC,UAAQ,EACRC,cAAe,CACXC,YAAa,CACTrL,OAAAA,EACAgB,OAAAA,EACAqH,cAAAA,EACAC,aAAAA,IAGRgD,OAAQ,YAA2B,IAAxBC,EAAwB,EAAxBA,mBACPC,EAAAA,GAAAA,GAAS,GAAD,GACDD,GACCE,EAAAA,GAAAA,IAAyBP,GAAAA,GAAoBQ,GAAAA,IAC7CC,EAAAA,EAAAA,IAAiB,CAAEhM,KAAAA,EAAME,QAAAA,EAAS0I,KAAAA,EAAMvI,OAAAA,GAAU2H,OAI9DiE,YAAa9B,EACb+B,SAASC,EAAAA,GAAAA,IAAkB3C,GAC3B4C,WAAY,CACRC,cAAc,EACdtK,QAASuK,EAAAA,aAAAA,QAAsBxI,UAAW,wBAAyByI,gBAAgB,GAEvFhJ,aAAcA,EACd6F,oBAAqBA,EACrBoD,aAAc,CACVC,WAA2B,IAAfnE,EACZoB,SAAUW,GAEdqC,WACIhD,IAAYiD,EAAAA,EAAAA,IAAoB1C,EAAeP,EAAU,CAAErG,YAAaiF,GAAcH,GAE1FyE,gBAAkB,kBAACC,GAAA,EAAD,CACdJ,WAC0C,KAAtCvC,EAAAA,EAAAA,IAAazB,GAAc7G,OAE/B4F,QAAS,kBACLgC,GACIsD,EAAAA,EAAAA,IACInF,GACAoF,EAAAA,EAAAA,IAA0BtE,GAC1BuE,GAAAA,GAAAA,YAIZC,KAAM,6BACNpI,WAAW,GAEX,kBAAC,KAAD,MAhBc,IAgBY5C,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,sBAUrEwF,GAAgBhE,UAAY,CACxBiE,aAAcjE,IAAAA,QAGlB,Y,ylBCnKA,IAAMwJ,GAAiB,SAAC,GAAc,IAAZC,EAAY,EAAZA,MAChB1N,GAAWC,EAAAA,EAAAA,MACjB,EAAuBsB,IAAAA,SAAemM,EAAMtE,OAAOuE,YAA5CzF,GAAP,eAEM0F,EAAY,GAAH,OAAM1F,EAAN,cAAwB1F,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,oBAC1DoL,EAAAA,EAAAA,IAAaD,GAEb,IAAME,GAAkB1M,EAAAA,EAAAA,KACpB,qBAAG2M,uBAEDzM,GAASF,EAAAA,EAAAA,KACX,qBAAG2M,oBAA8CzM,UAGrDC,IAAAA,WAAgB,WACZvB,GAASgO,EAAAA,EAAAA,IAAoB,CAAE9F,aAAAA,OAChC,IAEH3G,IAAAA,WAAgB,WACZ,OAAO,WACHvB,GAASiO,EAAAA,EAAAA,OACTjO,GAASkO,EAAAA,EAAAA,OACTlO,GAASmO,EAAAA,GAAAA,UAEd,IAEH,IAAQpM,EAAe+L,EAAgB3M,KAA/BY,WACR,OACI,kBAAC,aAAD,KACI,kBAACqM,EAAA,EAAD,CACI7L,MAAO2F,EACPmG,WAAY,mBACZC,YAAa,CACT,CACI/L,MAAOC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,uBAC1B8L,GAAIC,EAAAA,EAAAA,WAAAA,GACJC,UAAU,GAEd,CACIlM,MAAO2F,EACPuG,UAAU,KAGpBnN,EAAO4J,SAAW,kBAACwD,EAAA,EAAD,MACZ,kBAAC,EAAD,CACI3M,WAAU,SAAOA,GAAP,IAAmBgF,GAAImB,IACjC9C,UAAW9D,EAAO8D,aAG9B,kBAACuJ,EAAA,EAAD,KACI,kBAACtI,EAAA,EAAD,CAAO/B,WAAS,GACZ,kBAACgC,EAAA,EAAD,KACI,kBAACmB,EAAA,EAAD,KACI,kBAACC,EAAA,GAAD,CAAMC,UAAWC,EAAAA,GAAAA,IAAkBpF,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,0BAG9D,kBAAC6D,EAAA,EAAD,KACKhF,EAAO4J,UACD,kBAAEC,EAAA,EAAF,QACE7J,EAAO8D,WAAa,kBAAC,GAAD,CAAiB8C,aAAcA,SAQpFuF,GAAexJ,UAAY,CACvByJ,MAAOzJ,IAAAA,KAGX,UAAe2K,EAAAA,EAAAA,YAAWnB","sources":["webpack:///./src/SmartComponents/AdvisoryDetail/CvesModal.js","webpack:///./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack:///./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack:///./src/SmartComponents/AdvisorySystems/AdvisorySystems.js","webpack:///./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport { cvesTableColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCves } from '../../store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport { createCvesRows } from '../../Utilities/DataMappers';\nimport { sortCves } from '..//../Utilities/Helpers';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst CvesModal = ({ cveIds }) =>{\n    const dispatch = useDispatch();\n    const [cves, setCves] = useState([]);\n    const [rows, setRows] = useState([]);\n    const [page, setPage] = useState(1);\n    const [perPage, setPerPage] = useState(10);\n    const [search, setSearch] = useState(undefined);\n    const [sortBy, setSortBy] = useState({\n        direction: SortByDirection.asc,\n        index: 0\n    });\n\n    const data = useSelector(({ CvesListStore }) => CvesListStore.rows);\n\n    const status = useSelector(\n        ({ CvesListStore }) => CvesListStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchCves({ cveIds }));\n    }, []);\n\n    React.useMemo(() => {\n        setRows(cves.slice((page - 1) * perPage, page * perPage));\n    }, [cves, page, perPage, sortBy]);\n\n    useMemo(() => {\n        const sortedCves = (search !== undefined && search !== '')\n            && data.filter(\n                cve => {\n                    const { attributes: { synopsis } } = cve;\n                    return synopsis && search && (synopsis.toLowerCase().includes(search.toLowerCase()));\n                }\n            ) || data;\n\n        setCves(createCvesRows((sortedCves.length !== 0 || search) && sortedCves || data));\n    }, [search, data]);\n\n    const handleClose = () => {\n        setRows(undefined);\n    };\n\n    const handleFilter = ({ search }) =>{\n        setPage(page);\n        setSearch(search);\n    };\n\n    const handlePageChange = (_, page) => {\n        setPage(page);\n    };\n\n    const handlePerPageChange = (_, perPage) => {\n        setPage(1);\n        setPerPage(perPage);\n    };\n\n    const handleSort = (_, index, direction) => {\n        const { sortBy, sortedCves } = sortCves(cves, index, direction);\n\n        setSortBy(sortBy);\n        setCves(sortedCves);\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant='small'\n                title={intl.formatMessage(messages.labelsCves)}\n                isOpen={Boolean(rows)}\n                onClose={handleClose}\n            >\n                <TableView\n                    columns={cvesTableColumns}\n                    onSetPage={handlePageChange}\n                    onPerPageSelect={handlePerPageChange}\n                    apply={handleFilter}\n                    tableOUIA={'cves-table'}\n                    paginationOUIA={'cves-pagination'}\n                    onSort={handleSort}\n                    sortBy={sortBy}\n                    store={{\n                        rows,\n                        metadata: { limit: perPage, offset: (page - 1) * perPage, total_items: cves && cves.length },\n                        status, queryParams: { filter: {}, search }\n                    }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(handleFilter, search, '',\n                                intl.formatMessage(messages.labelsFiltersCvesSearchPlaceHolder))\n                        ]\n                    }}\n                />\n            </Modal>\n        </React.Fragment>\n    );\n\n};\n\nCvesModal.propTypes = {\n    cveIds: propTypes.array\n};\n\nexport default CvesModal;\n","import { Split, SplitItem, Title } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Split className='infobox' hasGutter>\n            <SplitItem isFilled>\n                <Flex flex={{ default: 'column' }}>\n                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                        <Title headingLevel='h5'>\n                            {intl.formatMessage(messages.labelsColumnsSeverity)}\n                        </Title>\n                    </FlexItem>\n                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                        <Flex flex={{ default: 'row' }}>\n                            <FlexItem>\n                                <SecurityIcon size='sm' color={severity.color} />\n                            </FlexItem>\n                            <FlexItem>\n                                {severity.label}\n                            </FlexItem>\n                        </Flex>\n                    </FlexItem>\n                </Flex>\n            </SplitItem>\n        </Split>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import {\n    Button, Grid, GridItem, Stack, StackItem, Text, TextContent,\n    FlexItem, TextVariants, Flex, Split, SplitItem, Title\n} from '@patternfly/react-core';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport messages from '../../Messages';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport CvesModal from '../../SmartComponents/AdvisoryDetail/CvesModal';\nimport { getSeverityById, isRHAdvisory, truncateDescription } from '../../Utilities/Helpers';\nimport { intl } from '../../Utilities/IntlProvider';\nimport RebootRequired from '../Snippets/RebootRequired';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\nimport ExternalLink from '../Snippets/ExternalLink';\nimport AdvisoryType from '../AdvisoryType/AdvisoryType';\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const [CvesInfoModal, setCvesModal] = useState(() => () => null);\n    const [wordLength, setWordLength] = useState(1000);\n    const severityObject = getSeverityById(attributes.severity);\n    const cves = attributes.cves;\n\n    const showCvesModal = () => {\n        setCvesModal(() => () => <CvesModal cveIds={cves} />);\n    };\n\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                attributes.description && truncateDescription(attributes.description, wordLength, setWordLength)\n                            }\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsPublicDate, {\n                                        date: processDate(\n                                            attributes.public_date\n                                        )\n                                    })}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsModifiedDate, {\n                                        date: processDate(\n                                            attributes.modified_date\n                                        )\n                                    })}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        {isRHAdvisory(attributes.id) &&\n                            <StackItem>\n                                <ExternalLink link={`https://access.redhat.com/errata/${attributes.id}`}\n                                    text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n                            </StackItem>\n                        }\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                <Flex flex={{ default: 'column' }}>\n                    {attributes.advisory_type_name && (<FlexItem>\n                        <Split className='infobox' hasGutter>\n                            <SplitItem isFilled>\n                                <Flex flex={{ default: 'column' }}>\n                                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                                        <Title headingLevel='h5'>\n                                            {intl.formatMessage(messages.titlesAdvisoryType)}\n                                        </Title>\n                                    </FlexItem>\n                                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                                        <AdvisoryType\n                                            type={attributes.advisory_type_name}\n                                        />\n                                    </FlexItem>\n                                </Flex>\n                            </SplitItem>\n                        </Split>\n                    </FlexItem>\n                    )}\n                    {severityObject.value !== 0 && (<FlexItem>\n                        <AdvisorySeverityInfo severity={severityObject}/>\n                    </FlexItem>\n                    )}\n                    {attributes.reboot_required && (<FlexItem spacer={{ default: 'spacerMd' }}>\n                        <RebootRequired />\n                    </FlexItem>)}\n                </Flex>\n            </GridItem>\n            {cves && cves.length !== 0 && (\n                <GridItem md={4} sm={12}>\n                    <TextContent>\n                        <Text component={TextVariants.h3}>\n                            {intl.formatMessage(messages.labelsCves)}\n                        </Text>\n                        <Button variant='link' style={{ padding: 0 }} onClick={showCvesModal} >\n                            {intl.formatMessage(messages.labelsCvesButton, { cvesCount: cves.length })}\n                        </Button>\n                    </TextContent>\n                </GridItem>\n            )}\n            <CvesInfoModal />\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { AnsibeTowerIcon } from '@patternfly/react-icons';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport osVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changeAffectedSystemsParams, clearAdvisorySystemsReducer, clearInventoryReducer } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { exportAdvisorySystemsCSV, exportAdvisorySystemsJSON, fetchAdvisorySystems } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips, decodeQueryparams, filterRemediatableSystems,\n    persistantParams, remediationProvider, removeUndefinedObjectKeys\n} from '../../Utilities/Helpers';\nimport {\n    useBulkSelectConfig, useGetEntities, useOnExport, useOnSelect, useRemoveFilter\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport PatchRemediationButton from '../Remediation/PatchRemediationButton';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from '../Systems/SystemsListAssets';\n\nconst AdvisorySystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const history = useHistory();\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const queryParams = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore?.queryParams || {}\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => {\n            dispatch(clearInventoryReducer());\n            dispatch(clearAdvisorySystemsReducer());\n        };\n    }, []);\n\n    function apply(params) {\n        dispatch(changeAffectedSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            osVersionFilter(filter, apply)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n        onDelete: deleteFilters\n    };\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const fetchAllData = () =>\n        fetchAdvisorySystems({ ...queryParams, id: advisoryName, limit: -1 }).then(filterRemediatableSystems);\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllData, selectRows);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const getEntites = useGetEntities(fetchAdvisorySystems, apply, { id: advisoryName }, history);\n\n    const onExport = useOnExport(advisoryName, queryParams, {\n        csv: exportAdvisorySystemsCSV,\n        json: exportAdvisorySystemsJSON\n    }, dispatch);\n\n    return (\n        <React.Fragment>\n            <RemediationModalCmp />\n            {status.hasError && <ErrorHandler code={status.code} /> ||\n                <InventoryTable\n                    disableDefaultColumns={['system_profile']}\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    ignoreRefresh\n                    hideFilters={{ all: true, tags: false }}\n                    columns={systemsListColumns}\n                    showTags\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        register({\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(systemsListColumns, modifyInventory),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        });\n                    }}\n                    getEntities={getEntites}\n                    actions={systemsRowActions(showRemediationModal)}\n                    tableProps={{\n                        canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig={activeFiltersConfig}\n                    exportConfig={{\n                        isDisabled: totalItems === 0,\n                        onSelect: onExport\n                    }}\n                    bulkSelect={\n                        onSelect && useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)\n                    }\n                    dedicatedAction={(<PatchRemediationButton\n                        isDisabled={\n                            arrayFromObj(selectedRows).length === 0\n                        }\n                        onClick={() =>\n                            showRemediationModal(\n                                remediationProvider(\n                                    advisoryName,\n                                    removeUndefinedObjectKeys(selectedRows),\n                                    remediationIdentifiers.advisory\n                                )\n                            )\n                        }\n                        ouia={'toolbar-remediation-button'}\n                        isLoading={false}\n                    >\n                        <AnsibeTowerIcon />&nbsp;{intl.formatMessage(messages.labelsRemediate)}\n                    </PatchRemediationButton>\n                    )}\n\n                />\n            }\n        </React.Fragment>\n    );\n};\n\nAdvisorySystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AdvisorySystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { paths } from '../../Routes';\nimport { clearAdvisoryDetailStore, clearEntitiesStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport AdvisorySystems from '../AdvisorySystems/AdvisorySystems';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst AdvisoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [advisoryName] = React.useState(match.params.advisoryId);\n\n    const pageTitle = `${advisoryName} - ${intl.formatMessage(messages.titlesAdvisories)}`;\n    setPageTitle(pageTitle);\n\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearEntitiesStore());\n            dispatch(clearAdvisoryDetailStore());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                headerOUIA={'advisory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchAdvisories),\n                        to: paths.advisories.to,\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable /> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        {status.hasError\n                            && < ErrorHandler />\n                            || (!status.isLoading && <AdvisorySystems advisoryName={advisoryName} />)}\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisoryDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(AdvisoryDetail);\n"],"names":["CvesModal","cveIds","dispatch","useDispatch","useState","cves","setCves","rows","setRows","page","setPage","perPage","setPerPage","undefined","search","setSearch","direction","SortByDirection","index","sortBy","setSortBy","data","useSelector","CvesListStore","status","React","fetchCves","slice","useMemo","sortedCves","filter","cve","synopsis","attributes","toLowerCase","includes","createCvesRows","length","handleFilter","Modal","variant","title","intl","messages","isOpen","Boolean","onClose","TableView","columns","cvesTableColumns","onSetPage","_","onPerPageSelect","apply","tableOUIA","paginationOUIA","onSort","sortCves","store","metadata","limit","offset","total_items","queryParams","filterConfig","items","searchFilter","propTypes","AdvisorySeverityInfo","severity","Split","className","hasGutter","SplitItem","isFilled","Flex","flex","default","FlexItem","spacer","Title","headingLevel","size","color","label","AdvisoryHeader","isLoading","CvesInfoModal","setCvesModal","wordLength","setWordLength","severityObject","getSeverityById","Grid","style","minHeight","GridItem","md","sm","WithLoader","loading","WithLoaderVariants","centered","Stack","StackItem","whiteSpace","description","truncateDescription","public_date","date","processDate","modified_date","isRHAdvisory","id","ExternalLink","link","text","advisory_type_name","AdvisoryType","type","value","reboot_required","RebootRequired","TextContent","Text","component","TextVariants","Button","padding","onClick","cvesCount","AdvisorySystems","advisoryName","RemediationModalCmp","setRemediationModalCmp","history","useHistory","decodedParams","decodeQueryparams","location","systems","entities","shallowEqual","totalItems","total","AdvisorySystemsStore","selectedRows","systemProfile","selectedTags","sort","params","changeAffectedSystemsParams","clearInventoryReducer","clearAdvisorySystemsReducer","useRemoveFilter","deleteFilters","osVersionFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","showRemediationModal","RemediationModal","onSelect","useOnSelect","fetchAdvisorySystems","then","filterRemediatableSystems","toSelect","payload","selectedCount","arrayFromObj","getEntites","useGetEntities","onExport","useOnExport","csv","exportAdvisorySystemsCSV","json","exportAdvisorySystemsJSON","hasError","ErrorHandler","code","InventoryTable","disableDefaultColumns","isFullView","autoRefresh","initialLoading","ignoreRefresh","hideFilters","all","tags","systemsListColumns","showTags","customFilters","patchParams","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","modifyInventory","persistantParams","getEntities","actions","systemsRowActions","tableProps","canSelectAll","TableVariant","isStickyHeader","exportConfig","isDisabled","bulkSelect","useBulkSelectConfig","dedicatedAction","PatchRemediationButton","remediationProvider","removeUndefinedObjectKeys","remediationIdentifiers","ouia","AdvisoryDetail","match","advisoryId","pageTitle","setPageTitle","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearEntitiesStore","clearAdvisoryDetailStore","clearNotifications","Header","headerOUIA","breadcrumbs","to","paths","isActive","Unavailable","Main","withRouter"],"sourceRoot":""}