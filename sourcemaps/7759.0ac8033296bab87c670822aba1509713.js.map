{"version":3,"file":"js/7759.ef567fefa44fb3e95971.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/WithHistory.js","webpack:///./src/SmartComponents/Modals/AssignSystemsModal.js","webpack:///./src/PresentationalComponents/PatchSetWrapper/PatchSetWrapper.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./src/Utilities/usePatchSetState.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useMemo } from 'react';\nimport * as reactRouter from 'react-router-dom';\nimport useChrome from '../useChrome';\nvar WithReactRouterHistory = function (_a) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var history = reactRouter.useHistory();\n    return _jsx(Component, __assign({ history: history }, props));\n};\nvar WithChromeHistory = function (_a) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var chromeHistory = useChrome().chromeHistory;\n    return _jsx(Component, __assign({ history: chromeHistory }, props));\n};\nvar WithHistory = function (_a, ref) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var HistoryComponent = useMemo(function () { return (typeof reactRouter.useHistory === 'function' ? WithReactRouterHistory : WithChromeHistory); }, [Component, props]);\n    return _jsx(HistoryComponent, __assign({ innerRef: ref, Component: Component }, props));\n};\nexport default React.forwardRef(WithHistory);\n//# sourceMappingURL=WithHistory.js.map","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Stack, StackItem, Form, Spinner } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\nimport SelectExistingSets from '../PatchSetWizard/InputFields/SelectExistingSets';\nimport messages from '../../Messages';\nimport { updatePatchSets } from '../../Utilities/api';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { patchSetAssignSystemsNotifications } from '../PatchSet/PatchSetAssets';\nimport { filterSelectedActiveSystemIDs } from '../../Utilities/Helpers';\nimport { filterSatelliteManagedSystems } from './Helpers';\n\nconst AssignSystemsModal = ({ patchSetState = {}, setPatchSetState, intl }) => {\n    const dispatch = useDispatch();\n\n    const { systemsIDs, isAssignSystemsModalOpen } = patchSetState;\n    const [selectedPatchSet, setSelectedPatchSet] = useState([]);\n    const [selectedPatchSetDetails, setSelectedPatchSetDetails] = useState({});\n\n    const [systemsNotManagedBySatellite, setSystemsNotManagedBySatellite] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const closeModal = () => {\n        setPatchSetState({\n            isAssignSystemsModalOpen: !isAssignSystemsModalOpen,\n            systemsIDs: []\n        });\n        setSelectedPatchSet([]);\n        setSelectedPatchSetDetails({});\n    };\n\n    const submitModal = () => {\n        const systems = systemsNotManagedBySatellite.reduce((obj, item) => {\n            obj[item] = true;\n            return obj;\n        }, {});\n\n        updatePatchSets({ inventory_ids: systemsIDs }, selectedPatchSetDetails.id)\n        .then(() => {\n            dispatch(addNotification(patchSetAssignSystemsNotifications(Object.keys(systems).length).success));\n            setPatchSetState({\n                ...patchSetState,\n                shouldRefresh: true,\n                isAssignSystemsModalOpen: false,\n                systemsIDs: []\n            });\n        })\n        .catch(() => {\n            dispatch(addNotification(patchSetAssignSystemsNotifications().failure));\n        });\n\n        closeModal();\n    };\n\n    const openWizard = () => {\n        setPatchSetState({\n            ...patchSetState,\n            isPatchSetWizardOpen: true,\n            systemsIDs: filterSelectedActiveSystemIDs(systemsIDs),\n            shouldRefresh: false\n        });\n        setSelectedPatchSet([]);\n        setSelectedPatchSetDetails({});\n        setSystemsLoading(true);\n    };\n\n    useEffect(() => {\n        if (systemsIDs) {\n            setSystemsLoading(true);\n\n            filterSatelliteManagedSystems(Object.keys(systemsIDs)).then(result => {\n                setSystemsNotManagedBySatellite(result);\n                setSystemsLoading(false);\n            });\n        }\n    }, [systemsIDs]);\n\n    const systemsManagedBySatelliteCount = Object.keys(systemsIDs).length - systemsNotManagedBySatellite.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={patchSetState.isAssignSystemsModalOpen}\n            title={intl.formatMessage(messages.templateApply)}\n            onClose={closeModal}\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    isDisabled={!selectedPatchSetDetails?.id}\n                    onClick={submitModal}\n                >\n                    {intl.formatMessage(messages.templateApply)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeModal}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {systemsLoading\n                ? <Spinner />\n                : systemsNotManagedBySatellite.length === 0\n                    ? systemsNotManagedBySatellite.length === 1\n                        ? 'Template cannot be applied to the selected system.'\n                        : 'Template cannot be applied to any of the selected systems.'\n                    : <Stack hasGutter>\n                        <StackItem>\n                            {intl.formatMessage(messages.templateSelect, {\n                                systemCount: systemsNotManagedBySatellite.length,\n                                b: (...chunks) => <b>{chunks}</b>\n                            })}\n                        </StackItem>\n                        {systemsManagedBySatelliteCount > 0 && <StackItem>{\n                            intl.formatMessage(messages.templateSelectSatellite, {\n                                systemCount: systemsManagedBySatelliteCount,\n                                b: (...chunks) => <b>{chunks}</b>\n                            })}\n                        </StackItem>\n                        }\n                        <StackItem>\n                            <Form>\n                                <SelectExistingSets\n                                    setSelectedPatchSet={setSelectedPatchSet}\n                                    selectedSets={selectedPatchSet}\n                                    selectCallback={setSelectedPatchSetDetails}\n                                />\n                            </Form>\n                        </StackItem>\n                        <StackItem>\n                            {intl.formatMessage(messages.templateOr)}\n                        </StackItem>\n                        <StackItem>\n                            <Button variant=\"secondary\" onClick={openWizard}>\n                                {intl.formatMessage(messages.templateCreate)}\n                            </Button>\n                        </StackItem>\n                    </Stack>\n            }\n        </Modal>\n    );\n};\n\nAssignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setPatchSetState: propTypes.func,\n    patchSetState: propTypes.object\n};\n\nexport default injectIntl(AssignSystemsModal);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport PatchSetWizard from '../../SmartComponents/PatchSetWizard/PatchSetWizard';\nimport UnassignSystemsModal from '../../SmartComponents/Modals/UnassignSystemsModal';\nimport AssignSystemsModal from '../../SmartComponents/Modals/AssignSystemsModal';\n\nconst PatchSetWrapper = ({ patchSetState, setPatchSetState }) => {\n    return (<>\n        {(patchSetState.isUnassignSystemsModalOpen) && <UnassignSystemsModal\n            unassignSystemsModalState={patchSetState}\n            setUnassignSystemsModalOpen={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n        />}\n        <AssignSystemsModal\n            patchSetState={patchSetState}\n            setPatchSetState={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n        />\n        {(patchSetState.isPatchSetWizardOpen) &&\n        <PatchSetWizard systemsIDs={patchSetState.systemsIDs} setBaselineState={setPatchSetState} />}\n    </>);\n};\n\nPatchSetWrapper.propTypes = {\n    patchSetState: propTypes.object,\n    setPatchSetState: propTypes.func\n};\nexport default PatchSetWrapper;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchIDs, fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data?.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const filterSatelliteManagedSystems = (systemsIDs) =>  {\n    return fetchIDs('/ids/systems', {\n        limit: -1, 'filter[satellite_managed]': 'false',\n        filter: { stale: [true, false] }\n    }).then((systemsNotManagedBySatellite) => {\n        return systemsIDs.filter(systemID =>\n            systemsNotManagedBySatellite?.data?.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length === 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsNoAssignedSystems', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithPatchSet.length > 0 && systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../PatchSet/PatchSetAssets';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n        handleModalToggle(true);\n\n        if (result.status === 200) {\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n        else {\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications().failure\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","import { useState } from 'react';\nimport {\n    filterSelectedActiveSystemIDs\n} from './Helpers';\n\n/**\n* Manages unified state for patch set wizard and unassign modal.\n* @param {Object} [selectedRows] selected rows object to be removed.\n* @returns {patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal}\n*/\nconst usePatchSetState = (selectedRows) => {\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        isAssignSystemsModalOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const openPatchSetAssignWizard = (systemID) => {\n        setPatchSetState({\n            isPatchSetWizardOpen: true,\n            systemsIDs: typeof systemID === 'string' && systemID !== ''\n                ? [systemID]\n                : filterSelectedActiveSystemIDs(selectedRows),\n            shouldRefresh: false\n        }\n        );\n    };\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openAssignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isAssignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openPatchSetEditModal = (patchSetID) => {\n        setPatchSetState({ isPatchSetWizardOpen: true, patchSetID });\n    };\n\n    return {\n        patchSetState,\n        setPatchSetState,\n        openPatchSetAssignWizard,\n        openUnassignSystemsModal,\n        openAssignSystemsModal,\n        openPatchSetEditModal\n    };\n};\n\nexport default usePatchSetState;\n"],"names":["_a","component","props","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","error","concat","children","__assign","assign","n","arguments","apply","this","WithReactRouterHistory","Component","history","WithChromeHistory","chromeHistory","ref","HistoryComponent","useMemo","innerRef","AssignSystemsModal","_ref","_ref$patchSetState","patchSetState","setPatchSetState","intl","dispatch","useDispatch","systemsIDs","isAssignSystemsModalOpen","_useState","useState","_useState2","_slicedToArray","selectedPatchSet","setSelectedPatchSet","_useState3","_useState4","selectedPatchSetDetails","setSelectedPatchSetDetails","_useState5","_useState6","systemsNotManagedBySatellite","setSystemsNotManagedBySatellite","_useState7","_useState8","systemsLoading","setSystemsLoading","closeModal","filterSatelliteManagedSystems","keys","then","result","systemsManagedBySatelliteCount","React","Modal","variant","isOpen","title","formatMessage","messages","templateApply","onClose","actions","Button","key","isDisabled","id","onClick","systems","reduce","obj","item","updatePatchSets","inventory_ids","addNotification","patchSetAssignSystemsNotifications","success","_objectSpread","shouldRefresh","failure","labelsCancel","Spinner","Stack","hasGutter","StackItem","templateSelect","systemCount","b","_len","chunks","Array","_key","templateSelectSatellite","_len2","_key2","Form","SelectExistingSets","selectedSets","selectCallback","templateOr","isPatchSetWizardOpen","filterSelectedActiveSystemIDs","templateCreate","propTypes","injectIntl","PatchSetWrapper","isUnassignSystemsModalOpen","UnassignSystemsModal","unassignSystemsModalState","setUnassignSystemsModalOpen","PatchSetWizard","setBaselineState","filterSystemsWithoutSets","fetchSystems","limit","filter","stale","allSystemsWithPatchSet","systemID","_allSystemsWithPatchS","data","some","system","fetchIDs","_systemsNotManagedByS","renderUnassignModalMessages","bodyMessage","systemsCount","GridItem","_ref$unassignSystemsM","systemsWithPatchSet","setSystemWithPatchSet","handleModalToggle","handleModalClose","handleUnassignment","handleSystemsRemoval","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","unassignSystemFromPatchSet","sent","status","patchSetUnassignSystemsNotifications","stop","useUnassignSystemsHook","systemsWithoutPatchSetCount","textUnassignSystemsTitle","titleIconVariant","labelsRemove","Grid","Skeleton","Fragment","selectedRows","openPatchSetAssignWizard","openUnassignSystemsModal","openAssignSystemsModal","openPatchSetEditModal","patchSetID"],"sourceRoot":""}