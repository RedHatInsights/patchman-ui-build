{"version":3,"file":"js/PackageDetail.1646740806650.87907a6fc115feb4e2cc.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Spinner/Spinner.js","webpack:///./src/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/PresentationalComponents/PackageHeader/PackageHeader.js","webpack:///./src/PresentationalComponents/Filters/VersionFilter.js","webpack:///./src/SmartComponents/PackageSystems/PackageSystems.js","webpack:///./src/SmartComponents/PackageDetail/PackageDetail.js","webpack:///./src/SmartComponents/PatchSet/PatchSetAssets.js","webpack:///./src/SmartComponents/PatchSet/PatchSet.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}\n                        data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                        data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                    >{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { paths } from '../../Routes';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history, headerOUIA }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={paths.advisories.to}\n                title={paths.advisories.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.advisories.title}`}\n            />\n            <Tab\n                eventKey={paths.systems.to}\n                title={paths.systems.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.systems.title}`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object,\n    headerOUIA: propTypes.string\n};\n\nexport default withRouter(HeaderTabs);\n","import {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <PageHeaderTitle title={title} />\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA = {headerOUIA}/>}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string\n};\n\nexport default Header;\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport \"../../Spinner/./spinner.css\";\n\nvar Spinner = function Spinner(_ref) {\n  var centered = _ref.centered,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, [\"centered\", \"className\"]);\n\n  var spinnerClasses = classNames('ins-c-spinner', _defineProperty({}, \"ins-m-center\", centered), className);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"status\",\n    className: spinnerClasses\n  }, props), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"pf-u-screen-reader\"\n  }, \"Loading...\"));\n};\n\nSpinner.propTypes = {\n  centered: PropTypes.bool,\n  className: PropTypes.string\n};\nexport default Spinner;","/* eslint-disable react/prop-types */\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nexport const WithLoaderVariants = {\n    spinner: 'spinner',\n    skeleton: 'skeleton'\n};\n\nconst loaderMap = {\n    [WithLoaderVariants.skeleton]: ({ size, isDark }) => (\n        <Skeleton size={size} isDark={isDark} />\n    ),\n    [WithLoaderVariants.spinner]: ({ centered }) => (\n        <Spinner centered={centered} />\n    )\n};\n\nexport const WithLoader = ({ loading, variant, children, ...props }) => {\n    if (loading !== false) {\n        return loaderMap[variant](props);\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    loading: propTypes.bool,\n    variant: propTypes.string,\n    children: propTypes.any\n};\n\nexport default WithLoader;\n","import { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Fragment } from 'react';\nimport { truncateDescription } from '../../Utilities/Helpers';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\n\nconst PackageHeader = ({ attributes: { description }, isLoading }) => {\n    const [wordLength, setWordLength] = React.useState(1000);\n\n    return description && (<Grid hasGutter style={{ minHeight: 50 }}>\n        <GridItem md={8} sm={12}>\n            <WithLoader\n                loading={isLoading}\n                variant={WithLoaderVariants.spinner}\n                centered\n            >\n                <Stack hasGutter>\n                    <StackItem />\n                    <StackItem style={{ whiteSpace: 'pre-line' }}>\n                        {\n                            description && truncateDescription(description, wordLength, setWordLength)\n                        }\n                    </StackItem>\n                </Stack>\n            </WithLoader>\n        </GridItem>\n    </Grid>) || <Fragment/>;\n};\n\nPackageHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default PackageHeader;\n","import React from 'react';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst VersionFilter = (apply, filter, packageVersions) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n\n    const isSet = filter && filter.installed_evra;\n    const installedEvra = isSet &&\n        (typeof(filter.installed_evra) === 'string' && filter.installed_evra.split(',')\n        || filter.installed_evra);\n    const versionList = packageVersions.data && packageVersions.data.sort().map(version => ({ value: version.evra }))\n        || [{ value: intl.formatMessage(messages.textNoVersionAvailable), disabled: true }];\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onSelect = (_, selection) => {\n        const config = { filter: {} };\n        if (!installedEvra || (installedEvra && !installedEvra.includes(selection))) {\n            const existingVersions = isSet && filter.installed_evra !== '' && filter.installed_evra.concat(',') || '';\n\n            config.filter = { installed_evra: `${existingVersions}${selection}` };\n        } else {\n            const filteredOutEvras = installedEvra.length !== 1\n                && installedEvra.filter(evra => !evra.includes(selection)).join(',') || undefined;\n\n            config.filter = { installed_evra: filteredOutEvras };\n        }\n\n        apply(config);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionList.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: intl.formatMessage(messages.labelsFiltersPackageVersionTitle),\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={versionList.length > 0 && SelectVariant.checkbox || SelectVariant.typeaheadMulti}\n                        typeAheadAriaLabel={intl.formatMessage(messages.labelsFiltersPackageVersionPlaceholder)}\n                        onToggle={onToggle}\n                        onSelect={onSelect}\n                        selections={installedEvra}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-version-filter'}\n                        placeholderText={intl.formatMessage(messages.labelsFiltersPackageVersionPlaceholder)}\n                        {...(numOptions < versionList.lengt\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionList.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                isDisabled={option.disabled}\n                                key={index}\n                                value={option.value}\n                                {...(option.description && { description: option.description })}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n\n};\n\nexport default VersionFilter;\n","import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport versionFilter from '../../PresentationalComponents/Filters/VersionFilter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changePackageSystemsParams, clearInventoryReducer, clearPackageSystemsReducer } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyPackageSystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportPackageSystemsCSV,\n    exportPackageSystemsJSON, fetchPackageSystems,\n    fetchPackageVersions\n} from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips, decodeQueryparams, filterRemediatablePackageSystems,\n    persistantParams, remediationProviderWithPairs, removeUndefinedObjectKeys, transformPairs\n} from '../../Utilities/Helpers';\nimport { useBulkSelectConfig, useGetEntities, useOnExport, useOnSelect, useRemoveFilter } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport PatchRemediationButton from '../Remediation/PatchRemediationButton';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { packageSystemsColumns } from '../Systems/SystemsListAssets';\n\nconst PackageSystems = ({ packageName }) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const [packageVersions, setPackageVersions] = React.useState([]);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const queryParams = useSelector(\n        ({ PackageSystemsStore }) => PackageSystemsStore?.queryParams || {}\n    );\n\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const { systemProfile, selectedTags,\n        filter, search, sort, page, perPage } = queryParams;\n\n    React.useEffect(async () => {\n        apply(decodedParams);\n        try {\n            setPackageVersions(await fetchPackageVersions({ package_name: packageName }));\n        } catch {\n            console.log('there were error');\n        }\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearInventoryReducer());\n            dispatch(clearPackageSystemsReducer());\n        };\n    }, []);\n\n    function apply(params) {\n        dispatch(changePackageSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ ...filter, search }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            statusFilter(apply, filter),\n            versionFilter(apply, filter, packageVersions)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n        onDelete: deleteFilters\n    };\n\n    async function showRemediationModal(data) {\n        setRemediationLoading(true);\n        const resolvedData = await data;\n        setRemediationModalCmp(() => () => <RemediationModal data={resolvedData} />);\n        setRemediationLoading(false);\n    }\n\n    ;\n\n    const constructFilename = (system) => {\n        return `${packageName}-${system.available_evra}`;\n    };\n\n    const fetchAllData = () => {\n        return fetchPackageSystems({\n            ...queryParams,\n            package_name: packageName,\n            limit: -1\n        })\n        .then(filterRemediatablePackageSystems);\n    };\n\n    const selectRows = (toSelect) => {\n        dispatch({ type: 'SELECT_ENTITY', payload: toSelect });\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows,\n        fetchAllData, selectRows, constructFilename);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport(packageName, queryParams, {\n        csv: exportPackageSystemsCSV,\n        json: exportPackageSystemsJSON\n    }, dispatch);\n\n    const prepareRemediationPairs = () => {\n        let pairs = {};\n        removeUndefinedObjectKeys(selectedRows).forEach(system => {\n            if (pairs[selectedRows[system]]) {\n                pairs[selectedRows[system]].push(system);\n            }\n            else {\n                pairs[selectedRows[system]] = [system];\n            }\n        });\n        return { data: pairs };\n    };\n\n    const getEntites = useGetEntities(fetchPackageSystems, apply, { packageName }, history);\n    return (\n        <React.Fragment>\n            <RemediationModalCmp/>\n            {status.hasError && <ErrorHandler code={status.code} /> || (\n                <InventoryTable\n                    disableDefaultColumns={['system_profile', 'updated']}\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    hideFilters={{ all: true, tags: false }}\n                    columns={packageSystemsColumns}\n                    showTags\n                    getEntities={getEntites}\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    paginationProps={{\n                        isDisabled: totalItems === 0\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        register({\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(packageSystemsColumns, modifyPackageSystems),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        });\n\n                    }}\n                    tableProps={{\n                        canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig={activeFiltersConfig}\n                    bulkSelect={useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                    exportConfig={{\n                        isDisabled: totalItems === 0,\n                        onSelect: onExport\n                    }}\n                    dedicatedAction={(\n                        <PatchRemediationButton\n                            onClick={() =>\n                                showRemediationModal(\n                                    remediationProviderWithPairs(\n                                        removeUndefinedObjectKeys(selectedRows),\n                                        prepareRemediationPairs,\n                                        transformPairs,\n                                        remediationIdentifiers.package)\n\n                                )}\n                            isDisabled={arrayFromObj(selectedRows).length === 0 || isRemediationLoading}\n                            isLoading={isRemediationLoading}\n                            ouia={'toolbar-remediation-button'}\n                        />)}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nPackageSystems.propTypes = {\n    packageName: propTypes.string\n};\n\nexport default PackageSystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport PackageHeader from '../../PresentationalComponents/PackageHeader/PackageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { paths } from '../../Routes';\nimport PackageSystems from '../../SmartComponents/PackageSystems/PackageSystems';\nimport { clearPackageDetailStore, fetchPackageDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\n\nconst PackageDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [packageName] = React.useState(match.params.packageName);\n    const pageTitle = `${packageName} - ${intl.formatMessage(messages.titlesPackages)}`;\n    setPageTitle(pageTitle);\n    const packageDetails = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore\n    );\n    const status = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchPackageDetails({ packageName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n            dispatch(clearPackageDetailStore());\n        };\n    }, []);\n\n    const { attributes } = packageDetails.data;\n\n    return (\n        <React.Fragment>\n            <Header\n                title={packageName}\n                headerOUIA={'package-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchPackages),\n                        to: paths.packages.to,\n                        isActive: false\n                    },\n                    {\n                        title: packageName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable/> :\n                    <PackageHeader\n                        attributes={{ ...attributes, id: packageName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        {status.hasError\n                            && < ErrorHandler />\n                                || (!status.isLoading && <PackageSystems packageName={packageName}></PackageSystems>)\n                        }\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nPackageDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(PackageDetail);\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const CreatePatchSet = () => {\n    return (<Button>\n        {intl.formatMessage(messages.labelsButtonCreatePatchSet)}\n    </Button>);\n};\n\nexport const EditPatchSet = () =>{\n    return (< Button variant=\"secondary\" >\n        {intl.formatMessage(messages.labelsButtonEditPatchSet)}\n    </Button >);\n};\n\nexport const patchSetColumns = [\n    {\n        key: 'name',\n        title: 'Name',\n        props: {\n            width: 50\n        }\n    },\n    {\n        key: 'systems',\n        title: 'Systems',\n        props: {\n            width: 50\n        }\n    }\n];\n\nexport const patchSetRowActions = [\n    {\n        title: 'Edit patch set',\n        // eslint-disable-next-line no-unused-vars\n        onClick: (_event, _rowId, _rowData) => {\n            console.log('edit');\n        }\n    },\n    {\n        title: 'Assign patch set',\n        // eslint-disable-next-line no-unused-vars\n        onClick: (_event, _rowId, _rowData) => {\n            console.log('assign');\n        }\n    },\n    {\n        title: 'Remove patch set',\n        // eslint-disable-next-line no-unused-vars\n        onClick: (_event, _rowId, _rowData) => {\n            console.log('remove');\n        }\n    }\n];\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { fetchPatchSetsAction, changePatchSetParams, selectPatchSetRow } from '../../store/Actions/Actions';\nimport { fetchPatchSets } from '../../Utilities/api';\nimport { createPatchSetRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams } from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useDeepCompareEffect, useOnSelect, usePerPageSelect, useSetPage, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { patchSetColumns, CreatePatchSet, EditPatchSet, patchSetRowActions } from './PatchSetAssets';\n\nconst PatchSet = ({ history }) => {\n    const pageTitle = intl.formatMessage(messages.titlesAdvisories);\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n\n    const patchSet = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.rows\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.metadata\n    );\n    const status = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.status\n    );\n\n    const rows = React.useMemo(\n        () => createPatchSetRows(patchSet, selectedRows, queryParams),\n        [patchSet, selectedRows]\n    );\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchPatchSetsAction(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const fetchAllData = () =>\n        fetchPatchSets({ ...queryParams, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            selectPatchSetRow(toSelect)\n        );\n    };\n\n    const onSelect = useOnSelect(rows, selectedRows, fetchAllData, selectRows, (patchSet) => patchSet.id);\n\n    const onSort = useSortColumn(patchSetColumns, apply, 2);\n    const sortBy = React.useMemo(\n        () => createSortBy(patchSetColumns, metadata.sort, 2),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changePatchSetParams(params));\n    }\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSet)} headerOUIA={'advisories'} />\n            <Main>\n                <TableView\n                    columns={patchSetColumns}\n                    compact\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    selectedRows={selectedRows}\n                    onSelect={onSelect}\n                    sortBy={sortBy}\n                    apply={apply}\n                    tableOUIA={'patch-set-table'}\n                    paginationOUIA={'patch-set-pagination'}\n                    store={{ rows, metadata, status, queryParams }}\n                    actionsConfig={patchSetRowActions}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSearchPatchSetTitle),\n                                intl.formatMessage(messages.labelsFiltersSearchPatchSetPlaceholder)\n                            )\n                        ]\n                    }}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchPatchSetTitle)}\n                    CreatePatchSet={CreatePatchSet}\n                    EditPatchSet={EditPatchSet}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nPatchSet.propTypes = {\n    history: propTypes.object\n};\n\nexport default withRouter(PatchSet);\n","import { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            newState.status = { isLoading: true, hasError: true };\n            return newState;\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["HeaderBreadcrumbs","items","headerOUIA","Breadcrumb","filter","Boolean","map","item","BreadcrumbItem","key","title","isActive","to","Link","propTypes","PropTypes","HeaderTabs","history","Tabs","onSelect","event","tabString","push","activeKey","location","pathname","className","Tab","eventKey","paths","withRouter","Header","showTabs","breadcrumbs","children","PageHeader","PageHeaderTitle","Spinner","_ref","centered","props","spinnerClasses","role","WithLoaderVariants","spinner","skeleton","loaderMap","size","isDark","Skeleton","WithLoader","loading","variant","PackageHeader","description","attributes","isLoading","React","wordLength","setWordLength","Grid","hasGutter","style","minHeight","GridItem","md","sm","Stack","StackItem","whiteSpace","truncateDescription","Fragment","apply","packageVersions","isOpen","setOpen","numOptions","setNumOptions","isSet","installed_evra","installedEvra","split","versionList","data","sort","version","value","evra","intl","messages","disabled","type","conditionalFilterType","label","filterValues","Select","length","SelectVariant","typeAheadAriaLabel","onToggle","_","selection","config","includes","existingVersions","concat","filteredOutEvras","join","undefined","selections","placeholderText","lengt","loadingVariant","text","onClick","maxHeight","overflow","slice","option","index","SelectOption","isDisabled","PackageSystems","packageName","dispatch","useDispatch","useHistory","RemediationModalCmp","setRemediationModalCmp","setPackageVersions","decodedParams","decodeQueryparams","search","systems","useSelector","entities","rows","shallowEqual","status","totalItems","total","selectedRows","queryParams","PackageSystemsStore","isRemediationLoading","setRemediationLoading","systemProfile","selectedTags","page","perPage","params","changePackageSystemsParams","fetchPackageVersions","package_name","console","log","clearInventoryReducer","clearPackageSystemsReducer","useRemoveFilter","deleteFilters","filterConfig","searchFilter","statusFilter","versionFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","resolvedData","RemediationModal","useOnSelect","fetchPackageSystems","limit","then","filterRemediatablePackageSystems","toSelect","payload","system","available_evra","selectedCount","arrayFromObj","onExport","useOnExport","csv","exportPackageSystemsCSV","json","exportPackageSystemsJSON","prepareRemediationPairs","pairs","removeUndefinedObjectKeys","forEach","getEntites","useGetEntities","hasError","ErrorHandler","code","InventoryTable","disableDefaultColumns","isFullView","autoRefresh","initialLoading","hideFilters","all","tags","columns","packageSystemsColumns","showTags","getEntities","customFilters","patchParams","paginationProps","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","modifyPackageSystems","persistantParams","tableProps","canSelectAll","TableVariant","isStickyHeader","bulkSelect","useBulkSelectConfig","total_items","exportConfig","dedicatedAction","PatchRemediationButton","showRemediationModal","remediationProviderWithPairs","transformPairs","remediationIdentifiers","ouia","PackageDetail","match","pageTitle","setPageTitle","packageDetails","PackageDetailStore","fetchPackageDetails","clearNotifications","clearPackageDetailStore","Unavailable","id","Main","TextContent","Text","component","TextVariants","CreatePatchSet","Button","EditPatchSet","patchSetColumns","width","patchSetRowActions","_event","_rowId","_rowData","PatchSet","firstMount","setFirstMount","patchSet","PatchSetsStore","metadata","createPatchSetRows","useDeepCompareEffect","encodeURLParams","fetchPatchSetsAction","fetchPatchSets","selectPatchSetRow","onSort","useSortColumn","sortBy","createSortBy","onSetPage","useSetPage","onPerPageSelect","usePerPageSelect","changePatchSetParams","TableView","compact","tableOUIA","paginationOUIA","store","actionsConfig","searchChipLabel","initialState","offset","modifyInventory","state","loaded","createSystemsRows","createPackageSystemsRows","inventoryModifier","action","newState","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}