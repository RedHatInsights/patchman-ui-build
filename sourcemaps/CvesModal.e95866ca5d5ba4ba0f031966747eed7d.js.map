{"version":3,"file":"js/CvesModal.b84b3cabdd7ad972a2d1.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon.js","webpack:///./src/PresentationalComponents/TableView/TableFooter.js","webpack:///./src/PresentationalComponents/TableView/TableView.js","webpack:///./src/PresentationalComponents/TableView/TableViewAssets.js","webpack:///./src/SmartComponents/AdvisoryDetail/CvesModal.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const ExclamationTriangleIconConfig = {\n  name: 'ExclamationTriangleIcon',\n  height: 512,\n  width: 576,\n  svgPath: 'M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const ExclamationTriangleIcon = createIcon(ExclamationTriangleIconConfig);\n\nexport default ExclamationTriangleIcon;","import { Pagination, PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TableFooter = ({ isLoading, page, perPage, onSetPage, totalItems, onPerPageSelect, paginationOUIA }) => {\n    return (\n        <>\n            {isLoading ? (\n                <div className=\"pf-c-pagination pf-m-bottom\">\n                    <Skeleton fontSize=\"xl\" width=\"350px\" style={{ margin: 10 }} />\n                </div>\n            ) :\n                <Pagination\n                    itemCount={totalItems}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    widgetId={`pagination-options-menu-bottom`}\n                    variant={PaginationVariant.bottom}\n                    ouiaId={paginationOUIA}\n                    isDisabled={totalItems === 0}\n                />\n            }\n        </>\n    );\n};\n\nTableFooter.propTypes = {\n    isLoading: PropTypes.bool,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalItems: PropTypes.number,\n    paginationOUIA: PropTypes.string\n};\n\nexport default TableFooter;\n","import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport AsyncRemediationButton from '../../SmartComponents/Remediation/AsyncRemediationButton';\nimport { arrayFromObj, buildFilterChips, convertLimitOffset } from '../../Utilities/Helpers';\nimport { useRemoveFilter, useBulkSelectConfig } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableFooter from './TableFooter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { Skeleton, ToolbarItem } from '@patternfly/react-core';\n\nconst TableView = ({\n    columns,\n    store: {\n        rows,\n        metadata,\n        status,\n        queryParams: { filter, search }\n    },\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    onExport,\n    filterConfig,\n    sortBy,\n    remediationProvider,\n    selectedRows,\n    compact,\n    apply,\n    tableOUIA,\n    paginationOUIA,\n    errorState,\n    emptyState,\n    defaultFilters,\n    searchChipLabel,\n    ToolbarButton,\n    actionsConfig,\n    isRemediationLoading,\n    actionsToggle\n}) => {\n\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n\n    const [deleteFilters] = useRemoveFilter(filter, apply, defaultFilters);\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n    const { code, hasError, isLoading } = status;\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, metadata, rows, onCollapse);\n\n    return (\n        <React.Fragment>\n            {\n                (<React.Fragment>\n                    {(hasError || metadata.has_systems === false)\n                        ? <ErrorHandler code={code} ErrorState={errorState} EmptyState={emptyState} metadata={metadata} />\n                        : <React.Fragment>\n                            <PrimaryToolbar\n                                pagination={isLoading\n                                    ? <Skeleton fontSize=\"xl\" width=\"200px\" style={{ margin: 10 }} />\n                                    : {\n                                        itemCount: metadata.total_items,\n                                        page,\n                                        perPage,\n                                        isCompact: true,\n                                        onSetPage,\n                                        onPerPageSelect,\n                                        ouiaId: `top-${paginationOUIA}`,\n                                        isDisabled: metadata.total_items === 0\n                                    }}\n                                filterConfig={filterConfig}\n                                activeFiltersConfig={{\n                                    filters: buildFilterChips(filter, search, searchChipLabel),\n                                    onDelete: deleteFilters,\n                                    deleteTitle: intl.formatMessage(defaultFilters\n                                        && messages.labelsFiltersReset || messages.labelsFiltersClear)\n                                }}\n                                actionsConfig={{\n                                    actions: [remediationProvider && (\n                                        <AsyncRemediationButton\n                                            remediationProvider={remediationProvider}\n                                            isDisabled={\n                                                Object.values(selectedRows).filter(isSelected => isSelected).length === 0\n                                                || isRemediationLoading\n                                            }\n                                            isLoading={isRemediationLoading}\n                                        />\n                                    )]\n                                }}\n                                exportConfig={{\n                                    isDisabled: metadata.total_items === 0,\n                                    onSelect: onExport\n                                }}\n                                bulkSelect={onSelect && bulkSelectConfig}\n                            >\n                                {ToolbarButton && <ToolbarItem>\n                                    <ToolbarButton />\n                                </ToolbarItem>}\n                            </PrimaryToolbar>\n                            {isLoading\n                                ? <SkeletonTable\n                                    colSize={columns?.length ?? 5}\n                                    rowSize={20}\n                                    variant={compact && TableVariant.compact}\n                                />\n                                : <Table\n                                    aria-label=\"Patch table view\"\n                                    cells={columns}\n                                    onSelect={metadata.total_items && onSelect}\n                                    rows={rows}\n                                    onCollapse={metadata.total_items && onCollapse}\n                                    canSelectAll={false}\n                                    onSort={metadata.total_items && onSort}\n                                    ouiaId={tableOUIA}\n                                    sortBy={metadata.total_items && sortBy}\n                                    isStickyHeader\n                                    variant={compact && TableVariant.compact}\n                                    actions={actionsConfig}\n                                    actionsToggle={actionsToggle}\n                                >\n                                    <TableHeader />\n                                    <TableBody />\n                                </Table>\n                            }\n                            <TableFooter\n                                isLoading={isLoading}\n                                totalItems={metadata.total_items}\n                                perPage={perPage}\n                                page={page}\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                paginationOUIA={`bottom-${paginationOUIA}`}\n                            />\n                        </React.Fragment>\n                    }\n                </React.Fragment>)\n            }\n        </React.Fragment>\n    );\n};\n\nTableView.propTypes = {\n    columns: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    onExport: PropTypes.func,\n    remediationProvider: PropTypes.func,\n    selectedRows: PropTypes.object,\n    apply: PropTypes.func,\n    sortBy: PropTypes.object,\n    filterConfig: PropTypes.object,\n    store: PropTypes.object,\n    compact: PropTypes.bool,\n    tableOUIA: PropTypes.string,\n    paginationOUIA: PropTypes.string,\n    errorState: PropTypes.element,\n    emptyState: PropTypes.element,\n    defaultFilters: PropTypes.object,\n    searchChipLabel: PropTypes.string,\n    ToolbarButton: PropTypes.elementType,\n    actionsConfig: PropTypes.array,\n    isRemediationLoading: PropTypes.bool,\n    actionsToggle: PropTypes.func\n};\n\nexport default TableView;\n","import { cellWidth, expandable, sortable } from '@patternfly/react-table';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nexport const advisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSynopsis),\n        transforms: [sortable],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsAffectedSystems),\n        transforms: [sortable, cellWidth(15)],\n        key: 'applicable_systems'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(15)],\n        key: 'public_date'\n    }\n];\n\nexport const systemAdvisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: 'Synopsis',\n        transforms: [sortable, cellWidth(35)],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [sortable, cellWidth(10)],\n        key: 'status'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable, cellWidth(10)],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(10)],\n        key: 'public_date'\n    }\n];\n\nexport const systemPackagesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(20)],\n        key: 'name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsInstalledVersion),\n        transforms: [sortable, cellWidth(15)],\n        key: 'evra'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsLatestVersion),\n        transforms: [cellWidth(15)],\n        key: 'latest_update'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [cellWidth(10)],\n        key: 'updatable'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        key: 'summary'\n    }\n];\n\nexport const packagesColumns = [\n    {\n        key: 'name',\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(25)]\n    },\n    {\n        key: 'systems_installed',\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'systems_updatable',\n        title: intl.formatMessage(messages.labelsColumnsUpgradable),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'summary',\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        props: {\n            width: 30\n        }\n    }\n];\n\nexport const cvesTableColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsCveID),\n        transforms: [sortable, cellWidth(40)],\n        key: 'synopsis'\n    },\n    {\n        key: 'impact',\n        title: intl.formatMessage(messages.labelsColumnsSeverity),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    },\n    {\n        key: 'cvss',\n        title: intl.formatMessage(messages.labelsColumnsCVSS),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    }\n];\n","import React, { useState, useMemo } from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport { cvesTableColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCves } from '../../store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport { createCvesRows } from '../../Utilities/DataMappers';\nimport { sortCves } from '..//../Utilities/Helpers';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst CvesModal = ({ cveIds }) =>{\n    const dispatch = useDispatch();\n    const [cves, setCves] = useState([]);\n    const [rows, setRows] = useState([]);\n    const [page, setPage] = useState(1);\n    const [perPage, setPerPage] = useState(10);\n    const [search, setSearch] = useState(undefined);\n    const [sortBy, setSortBy] = useState({\n        direction: SortByDirection.asc,\n        index: 0\n    });\n\n    const data = useSelector(({ CvesListStore }) => CvesListStore.rows);\n\n    const status = useSelector(\n        ({ CvesListStore }) => CvesListStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchCves({ cveIds }));\n    }, []);\n\n    React.useMemo(() => {\n        setRows(cves.slice((page - 1) * perPage, page * perPage));\n    }, [cves, page, perPage, sortBy]);\n\n    useMemo(() => {\n        const sortedCves = (search !== undefined && search !== '')\n            && data.filter(\n                cve => {\n                    const { attributes: { synopsis } } = cve;\n                    return synopsis && search && (synopsis.toLowerCase().includes(search.toLowerCase()));\n                }\n            ) || data;\n\n        setCves(createCvesRows((sortedCves.length !== 0 || search) && sortedCves || data));\n    }, [search, data]);\n\n    const handleClose = () => {\n        setRows(undefined);\n    };\n\n    const handleFilter = ({ search }) =>{\n        setPage(page);\n        setSearch(search);\n    };\n\n    const handlePageChange = (_, page) => {\n        setPage(page);\n    };\n\n    const handlePerPageChange = (_, perPage) => {\n        setPage(1);\n        setPerPage(perPage);\n    };\n\n    const handleSort = (_, index, direction) => {\n        const { sortBy, sortedCves } = sortCves(cves, index, direction);\n\n        setSortBy(sortBy);\n        setCves(sortedCves);\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant='small'\n                title={intl.formatMessage(messages.labelsCves)}\n                isOpen={Boolean(rows)}\n                onClose={handleClose}\n            >\n                <TableView\n                    columns={cvesTableColumns}\n                    onSetPage={handlePageChange}\n                    onPerPageSelect={handlePerPageChange}\n                    apply={handleFilter}\n                    tableOUIA={'cves-table'}\n                    paginationOUIA={'cves-pagination'}\n                    onSort={handleSort}\n                    sortBy={sortBy}\n                    store={{\n                        rows,\n                        metadata: { limit: perPage, offset: (page - 1) * perPage, total_items: cves && cves.length },\n                        status, queryParams: { filter: {}, search }\n                    }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(handleFilter, search, '',\n                                intl.formatMessage(messages.labelsFiltersCvesSearchPlaceHolder))\n                        ]\n                    }}\n                />\n            </Modal>\n        </React.Fragment>\n    );\n\n};\n\nCvesModal.propTypes = {\n    cveIds: propTypes.array\n};\n\nexport default CvesModal;\n"],"names":["ExclamationTriangleIconConfig","name","height","width","svgPath","yOffset","xOffset","ExclamationTriangleIcon","TableFooter","_ref","isLoading","page","perPage","onSetPage","totalItems","onPerPageSelect","paginationOUIA","React","className","Skeleton","fontSize","style","margin","Pagination","itemCount","widgetId","variant","PaginationVariant","ouiaId","isDisabled","propTypes","PropTypes","TableView","_columns$length","columns","_ref$store","store","rows","metadata","status","_ref$store$queryParam","queryParams","filter","search","onCollapse","onSelect","onSort","onExport","filterConfig","sortBy","remediationProvider","selectedRows","compact","apply","tableOUIA","errorState","emptyState","defaultFilters","searchChipLabel","ToolbarButton","actionsConfig","isRemediationLoading","actionsToggle","_React$useMemo","convertLimitOffset","limit","offset","_React$useMemo2","_slicedToArray","_useRemoveFilter","useRemoveFilter","deleteFilters","selectedCount","arrayFromObj","length","code","hasError","bulkSelectConfig","useBulkSelectConfig","has_systems","ErrorHandler","ErrorState","EmptyState","PrimaryToolbar","pagination","total_items","isCompact","concat","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","intl","messages","actions","AsyncRemediationButton","Object","values","isSelected","exportConfig","bulkSelect","ToolbarItem","SkeletonTable","colSize","rowSize","TableVariant","Table","cells","canSelectAll","isStickyHeader","TableHeader","TableBody","advisoriesColumns","title","cellFormatters","expandable","transforms","sortable","cellWidth","key","systemAdvisoriesColumns","systemPackagesColumns","packagesColumns","props","cvesTableColumns","CvesModal","cveIds","dispatch","useDispatch","_useState","useState","_useState2","cves","setCves","_useState3","_useState4","setRows","_useState5","_useState6","setPage","_useState7","_useState8","setPerPage","_useState9","undefined","_useState10","setSearch","_useState11","direction","SortByDirection","index","_useState12","setSortBy","data","useSelector","_ref2","CvesListStore","_ref3","fetchCves","slice","useMemo","sortedCves","cve","synopsis","attributes","toLowerCase","includes","createCvesRows","handleFilter","_ref4","Modal","isOpen","Boolean","onClose","_","_sortCves","sortCves","items","searchFilter"],"sourceRoot":""}