{"version":3,"sources":["webpack:///./src/PresentationalComponents/Filters/RebootFilter.js","webpack:///./src/PresentationalComponents/StatusReports/AdvisoriesStatusReport.js","webpack:///./src/SmartComponents/Advisories/Advisories.js"],"names":["apply","currentFilter","currentValue","reboot_required","rebootMap","React","rebootRequired","value","label","toString","currentValueStringType","Array","isArray","map","filterByReboot","filter","intl","messages","type","conditionalFilterType","filterValues","onChange","event","items","placeholder","StatusCard","advisory","attributes","id","Card","CardTitle","handlePatchLink","entityTypes","CardBody","className","Grid","GridItem","span","AdvisoryType","advisory_type","processDate","public_date","os_name","severity","Flex","flex","default","style","flexWrap","FlexItem","size","color","advisorySeverities","isFilled","systemsCount","applicable_systems","handleLongSynopsis","synopsis","propTypes","advisories","setAdvisories","fetchApplicableAdvisoriesApi","limit","sort","data","length","Main","paddingBottom","paddingTop","Title","headingLevel","hasGutter","key","Advisories","history","pageTitle","setPageTitle","dispatch","useDispatch","firstMount","setFirstMount","useSelector","AdvisoryListStore","rows","expandedRows","queryParams","selectedRows","metadata","status","createAdvisoriesRows","clearNotifications","useDeepCompareEffect","decodeQueryparams","location","search","push","encodeURLParams","fetchApplicableAdvisories","onCollapse","_","rowId","expandAdvisoryRow","getRowIdByIndexExpandable","onSelect","useOnSelect","toSelect","selectAdvisoryRow","onSort","useSortColumn","advisoriesColumns","sortBy","createSortBy","onExport","useOnExport","csv","exportAdvisoriesCSV","json","exportAdvisoriesJSON","onSetPage","useSetPage","onPerPageSelect","usePerPageSelect","params","changeAdvisoryListParams","prepareRemediationPairs","issues","fetchSystems","then","fetchViewAdvisoriesSystems","systems","system","Header","title","headerOUIA","AdvisoriesStatusReport","TableView","columns","compact","remediationProvider","remediationProviderWithPairs","arrayFromObj","transformPairs","remediationIdentifiers","remediationButtonOUIA","tableOUIA","paginationOUIA","store","filterConfig","searchFilter","typeFilter","publishDateFilter","rebootFilter","searchChipLabel","withRouter"],"mappings":"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","file":"js/Advisories.dab572e7cf9066ccc604.js","sourcesContent":["import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { rebootRequired } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst rebootFilter = (apply, currentFilter = {}) => {\n    let { reboot_required: currentValue } = currentFilter;\n\n    const rebootMap = React.useMemo(\n        () =>\n            rebootRequired.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n\n    const currentValueStringType = (\n        currentValue\n        && (\n            Array.isArray(currentValue)\n            && currentValue.map(value => value.toString())\n            || [currentValue.toString()]\n        )\n    );\n\n    const filterByReboot = value => {\n        apply({ filter: { reboot_required: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersReboot),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByReboot(value);\n            },\n            items: rebootMap,\n            value: currentValueStringType,\n            placeholder: intl.formatMessage(messages.labelsFiltersRebootPlaceholder)\n        }\n    };\n};\n\nexport default rebootFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PowerOffIcon, SecurityIcon } from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { fetchApplicableAdvisoriesApi } from '../../Utilities/api';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Card, Grid, GridItem, CardBody, Flex, FlexItem, Title\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { handlePatchLink, handleLongSynopsis } from '../../Utilities/Helpers';\nimport { entityTypes, advisorySeverities } from '../../Utilities/constants';\nimport AdvisoryType from '../AdvisoryType/AdvisoryType';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst StatusCard = ({ advisory: { attributes, id } }) =>\n    (\n        <Card>\n            <CardTitle>\n                {handlePatchLink(entityTypes.advisories, id)}\n            </CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Grid>\n                    <GridItem span={6}>\n                        <Grid>\n                            <GridItem>\n                                <AdvisoryType\n                                    type={attributes.advisory_type}\n                                />\n                            </GridItem>\n                            <GridItem>\n                                {processDate(attributes.public_date)}\n                            </GridItem>\n                            {attributes.os_name && (<GridItem>\n                                {attributes.os_name}\n                            </GridItem>)}\n                        </Grid>\n                    </GridItem>\n                    <GridItem span={6}>\n                        <Grid>\n                            {attributes.severity && (<GridItem>\n                                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                                    <FlexItem>\n                                        <SecurityIcon size=\"sm\" color={advisorySeverities[attributes.severity].color} />\n                                    </FlexItem>\n                                    <FlexItem isFilled>{advisorySeverities[attributes.severity].label}</FlexItem>\n                                </Flex>\n                            </GridItem>)}\n                            {attributes.reboot_required && (<GridItem>\n                                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                                    <FlexItem><PowerOffIcon color='var(--pf-global--palette--red-100)' /></FlexItem>\n                                    <FlexItem isFilled>{intl.formatMessage(messages.textRebootIsRequired)}</FlexItem>\n                                </Flex>\n                            </GridItem>)}\n                        </Grid>\n                    </GridItem>\n                    <GridItem>\n                        {handlePatchLink(\n                            entityTypes.advisories,\n                            id,\n                            intl.formatMessage(\n                                messages.labelsApplicableSystemsCount,\n                                { systemsCount: attributes.applicable_systems }\n                            )\n                        )}\n                    </GridItem>\n                    <GridItem>\n                        {handleLongSynopsis(attributes.synopsis)}\n                    </GridItem>\n                </Grid>\n            </CardBody>\n        </Card>\n    );\n\nconst AdvisoriesStatusBar = () => {\n    const [advisories, setAdvisories] = React.useState([]);\n    React.useEffect(async () => {\n        setAdvisories(\n            await fetchApplicableAdvisoriesApi({ limit: 4, sort: '-advisory_type,-applicable_systems' })\n        );\n    }, []);\n\n    return advisories.data && advisories.data.length  && (\n        <Main style={{ paddingBottom: 0, paddingTop: 0 }}>\n\n            <Title headingLevel=\"h3\" className='pf-u-my-md'>\n                {intl.formatMessage(messages.titlesMostImpactfulAdvisories)}\n            </Title>\n\n            <Grid hasGutter span={3}>\n                {advisories.data.map(advisory =>\n                    (<GridItem key={advisory.id}>\n                        <StatusCard\n                            advisory={advisory}\n                        />\n                    </GridItem>)\n                )\n                }\n            </Grid>\n        </Main>\n    ) || null;\n};\n\nStatusCard.propTypes = {\n    advisory: propTypes.object\n};\nexport default AdvisoriesStatusBar;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport rebootFilter from '../../PresentationalComponents/Filters/RebootFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { advisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport {\n    changeAdvisoryListParams, expandAdvisoryRow,\n    fetchApplicableAdvisories, selectAdvisoryRow\n} from '../../store/Actions/Actions';\nimport {\n    exportAdvisoriesCSV, exportAdvisoriesJSON, fetchApplicableAdvisoriesApi,\n    fetchSystems, fetchViewAdvisoriesSystems\n} from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport { createAdvisoriesRows } from '../../Utilities/DataMappers';\nimport {\n    arrayFromObj, createSortBy, decodeQueryparams,\n    encodeURLParams, getRowIdByIndexExpandable, remediationProviderWithPairs, transformPairs\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useDeepCompareEffect, useOnExport,\n    useOnSelect, usePerPageSelect, useSetPage, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport AdvisoriesStatusReport from '../../PresentationalComponents/StatusReports/AdvisoriesStatusReport';\n\nconst Advisories = ({ history }) => {\n    const pageTitle = intl.formatMessage(messages.titlesAdvisories);\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const advisories = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.rows\n    );\n\n    const expandedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.status\n    );\n\n    const rows = React.useMemo(\n        () => createAdvisoriesRows(advisories, expandedRows, selectedRows),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchApplicableAdvisories(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const fetchAllData = () =>\n        fetchApplicableAdvisoriesApi({ ...queryParams, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            selectAdvisoryRow(toSelect)\n        );\n    };\n\n    const onSelect = useOnSelect(rows, selectedRows, fetchAllData, selectRows, (advisory) => advisory.id);\n\n    const onSort = useSortColumn(advisoriesColumns, apply, 2);\n    const sortBy = React.useMemo(\n        () => createSortBy(advisoriesColumns, metadata.sort, 2),\n        [metadata.sort]\n    );\n\n    const onExport = useOnExport('advisories', queryParams, {\n        csv: exportAdvisoriesCSV,\n        json: exportAdvisoriesJSON\n    }, dispatch);\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeAdvisoryListParams(params));\n    }\n\n    const prepareRemediationPairs = (issues) => {\n        return fetchSystems({ limit: -1 }).then(\n            ({ data }) => fetchViewAdvisoriesSystems(\n                {\n                    advisories: issues,\n                    systems: data.map(system => system.id)\n                }\n            ));\n    };\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchAdvisories)} headerOUIA={'advisories'} />\n            <AdvisoriesStatusReport/>\n            <Main>\n                <TableView\n                    columns={advisoriesColumns}\n                    compact\n                    onCollapse={onCollapse}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    onExport={onExport}\n                    selectedRows={selectedRows}\n                    onSelect={onSelect}\n                    sortBy={sortBy}\n                    remediationProvider={() =>\n                        remediationProviderWithPairs(\n                            arrayFromObj(selectedRows),\n                            prepareRemediationPairs,\n                            transformPairs,\n                            remediationIdentifiers.advisory)\n                    }\n                    apply={apply}\n                    remediationButtonOUIA={'toolbar-remediation-button'}\n                    tableOUIA={'advisories-table'}\n                    paginationOUIA={'advisories-pagination'}\n                    store={{ rows, metadata, status, queryParams }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle),\n                                intl.formatMessage(messages.labelsFiltersSearchAdvisoriesPlaceholder)\n                            ),\n                            typeFilter(apply, queryParams.filter),\n                            publishDateFilter(apply, queryParams.filter),\n                            rebootFilter(apply, queryParams.filter)\n                        ]\n                    }}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle)}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisories.propTypes = {\n    history: propTypes.object\n};\n\nexport default withRouter(Advisories);\n"],"sourceRoot":""}