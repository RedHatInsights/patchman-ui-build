{"version":3,"file":"js/PackageDetail.fc74ebc76628a2c5a879.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/PackageHeader/PackageHeader.js","webpack:///./src/PresentationalComponents/Filters/VersionFilter.js","webpack:///./src/SmartComponents/PackageSystems/PackageSystems.js","webpack:///./src/SmartComponents/PackageDetail/PackageDetail.js"],"sourcesContent":["import { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Fragment } from 'react';\nimport { truncateDescription } from '../../Utilities/Helpers';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\n\nconst PackageHeader = ({ attributes: { description }, isLoading }) => {\n    const [wordLength, setWordLength] = React.useState(1000);\n\n    return description && (<Grid hasGutter style={{ minHeight: 50 }}>\n        <GridItem md={8} sm={12}>\n            <WithLoader\n                loading={isLoading}\n                variant={WithLoaderVariants.spinner}\n                centered\n            >\n                <Stack hasGutter>\n                    <StackItem />\n                    <StackItem style={{ whiteSpace: 'pre-line' }}>\n                        {\n                            description && truncateDescription(description, wordLength, setWordLength)\n                        }\n                    </StackItem>\n                </Stack>\n            </WithLoader>\n        </GridItem>\n    </Grid>) || <Fragment/>;\n};\n\nPackageHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default PackageHeader;\n","import React from 'react';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst VersionFilter = (apply, filter, packageVersions) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n\n    const isSet = filter && filter.installed_evra;\n    const installedEvra = isSet &&\n        (typeof(filter.installed_evra) === 'string' && filter.installed_evra.split(',')\n        || filter.installed_evra);\n    const versionList = packageVersions.data && packageVersions.data.sort().map(version => ({ value: version.evra }))\n        || [{ value: intl.formatMessage(messages.textNoVersionAvailable), disabled: true }];\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onSelect = (_, selection) => {\n        const config = { filter: {} };\n        if (!installedEvra || (installedEvra && !installedEvra.includes(selection))) {\n            const existingVersions = isSet && filter.installed_evra !== '' && filter.installed_evra.concat(',') || '';\n\n            config.filter = { installed_evra: `${existingVersions}${selection}` };\n        } else {\n            const filteredOutEvras = installedEvra.length !== 1\n                && installedEvra.filter(evra => !evra.includes(selection)).join(',') || undefined;\n\n            config.filter = { installed_evra: filteredOutEvras };\n        }\n\n        apply(config);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionList.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: intl.formatMessage(messages.labelsFiltersPackageVersionTitle),\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={versionList.length > 0 && SelectVariant.checkbox || SelectVariant.typeaheadMulti}\n                        typeAheadAriaLabel={intl.formatMessage(messages.labelsFiltersPackageVersionPlaceholder)}\n                        onToggle={onToggle}\n                        onSelect={onSelect}\n                        selections={installedEvra}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-version-filter'}\n                        placeholderText={intl.formatMessage(messages.labelsFiltersPackageVersionPlaceholder)}\n                        {...(numOptions < versionList.lengt\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionList.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                isDisabled={option.disabled}\n                                key={index}\n                                value={option.value}\n                                {...(option.description && { description: option.description })}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n\n};\n\nexport default VersionFilter;\n","import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport versionFilter from '../../PresentationalComponents/Filters/VersionFilter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changePackageSystemsParams, clearInventoryReducer, clearPackageSystemsReducer } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyPackageSystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportPackageSystemsCSV,\n    exportPackageSystemsJSON, fetchPackageSystems,\n    fetchPackageVersions\n} from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips, decodeQueryparams, filterRemediatablePackageSystems,\n    persistantParams, remediationProviderWithPairs, removeUndefinedObjectKeys, transformPairs\n} from '../../Utilities/Helpers';\nimport { useBulkSelectConfig, useGetEntities, useOnExport, useOnSelect, useRemoveFilter } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport PatchRemediationButton from '../Remediation/PatchRemediationButton';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { packageSystemsColumns } from '../Systems/SystemsListAssets';\n\nconst PackageSystems = ({ packageName }) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const [packageVersions, setPackageVersions] = React.useState([]);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const queryParams = useSelector(\n        ({ PackageSystemsStore }) => PackageSystemsStore?.queryParams || {}\n    );\n\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const { systemProfile, selectedTags,\n        filter, search, sort, page, perPage } = queryParams;\n\n    React.useEffect(async () => {\n        apply(decodedParams);\n        setPackageVersions(await fetchPackageVersions({ package_name: packageName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearInventoryReducer());\n            dispatch(clearPackageSystemsReducer());\n        };\n    }, []);\n\n    function apply(params) {\n        dispatch(changePackageSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ ...filter, search }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            statusFilter(apply, filter),\n            versionFilter(apply, filter, packageVersions)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n        onDelete: deleteFilters\n    };\n\n    async function showRemediationModal(data) {\n        setRemediationLoading(true);\n        const resolvedData = await data;\n        setRemediationModalCmp(() => () => <RemediationModal data={resolvedData} />);\n        setRemediationLoading(false);\n    }\n\n    ;\n\n    const constructFilename = (system) => {\n        return `${packageName}-${system.available_evra}`;\n    };\n\n    const fetchAllData = () => {\n        return fetchPackageSystems({\n            ...queryParams,\n            package_name: packageName,\n            limit: -1\n        })\n        .then(filterRemediatablePackageSystems);\n    };\n\n    const selectRows = (toSelect) => {\n        dispatch({ type: 'SELECT_ENTITY', payload: toSelect });\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows,\n        fetchAllData, selectRows, constructFilename);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport(packageName, queryParams, {\n        csv: exportPackageSystemsCSV,\n        json: exportPackageSystemsJSON\n    }, dispatch);\n\n    const prepareRemediationPairs = () => {\n        let pairs = {};\n        removeUndefinedObjectKeys(selectedRows).forEach(system => {\n            if (pairs[selectedRows[system]]) {\n                pairs[selectedRows[system]].push(system);\n            }\n            else {\n                pairs[selectedRows[system]] = [system];\n            }\n        });\n        return { data: pairs };\n    };\n\n    const getEntites = useGetEntities(fetchPackageSystems, apply, { packageName }, history);\n    return (\n        <React.Fragment>\n            <RemediationModalCmp/>\n            {status.hasError && <ErrorHandler code={status.code} /> || (\n                <InventoryTable\n                    disableDefaultColumns={['system_profile', 'updated']}\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    hideFilters={{ all: true, tags: false }}\n                    columns={packageSystemsColumns}\n                    showTags\n                    getEntities={getEntites}\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        register({\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(packageSystemsColumns, modifyPackageSystems),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        });\n\n                    }}\n                    tableProps={{\n                        canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig={activeFiltersConfig}\n                    bulkSelect={useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                    exportConfig={{\n                        isDisabled: totalItems === 0,\n                        onSelect: onExport\n                    }}\n                    dedicatedAction={(\n                        <PatchRemediationButton\n                            onClick={() =>\n                                showRemediationModal(\n                                    remediationProviderWithPairs(\n                                        removeUndefinedObjectKeys(selectedRows),\n                                        prepareRemediationPairs,\n                                        transformPairs,\n                                        remediationIdentifiers.package)\n\n                                )}\n                            isDisabled={arrayFromObj(selectedRows).length === 0 || isRemediationLoading}\n                            isLoading={isRemediationLoading}\n                            ouia={'toolbar-remediation-button'}\n                        />)}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nPackageSystems.propTypes = {\n    packageName: propTypes.string\n};\n\nexport default PackageSystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport PackageHeader from '../../PresentationalComponents/PackageHeader/PackageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { paths } from '../../Routes';\nimport PackageSystems from '../../SmartComponents/PackageSystems/PackageSystems';\nimport { clearPackageDetailStore, fetchPackageDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\n\nconst PackageDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [packageName] = React.useState(match.params.packageName);\n    const pageTitle = `${packageName} - ${intl.formatMessage(messages.titlesPackages)}`;\n    setPageTitle(pageTitle);\n    const packageDetails = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore\n    );\n    const status = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchPackageDetails({ packageName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n            dispatch(clearPackageDetailStore());\n        };\n    }, []);\n\n    const { attributes } = packageDetails.data;\n\n    return (\n        <React.Fragment>\n            <Header\n                title={packageName}\n                headerOUIA={'package-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchPackages),\n                        to: paths.packages.to,\n                        isActive: false\n                    },\n                    {\n                        title: packageName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable/> :\n                    <PackageHeader\n                        attributes={{ ...attributes, id: packageName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        {status.hasError\n                            && < ErrorHandler />\n                                || (!status.isLoading && <PackageSystems packageName={packageName}></PackageSystems>)\n                        }\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nPackageDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(PackageDetail);\n"],"names":["PackageHeader","description","attributes","isLoading","React","wordLength","setWordLength","Grid","hasGutter","style","minHeight","GridItem","md","sm","WithLoader","loading","variant","WithLoaderVariants","centered","Stack","StackItem","whiteSpace","truncateDescription","Fragment","propTypes","apply","filter","packageVersions","isOpen","setOpen","numOptions","setNumOptions","isSet","installed_evra","installedEvra","split","versionList","data","sort","map","version","value","evra","intl","messages","disabled","type","conditionalFilterType","label","filterValues","children","Select","length","SelectVariant","typeAheadAriaLabel","onToggle","onSelect","_","selection","config","includes","existingVersions","concat","filteredOutEvras","join","undefined","selections","placeholderText","lengt","loadingVariant","text","onClick","maxHeight","overflow","slice","option","index","SelectOption","isDisabled","key","PackageSystems","packageName","dispatch","useDispatch","history","useHistory","RemediationModalCmp","setRemediationModalCmp","setPackageVersions","decodedParams","decodeQueryparams","location","search","systems","useSelector","entities","rows","shallowEqual","status","totalItems","total","selectedRows","queryParams","PackageSystemsStore","isRemediationLoading","setRemediationLoading","systemProfile","selectedTags","page","perPage","params","changePackageSystemsParams","fetchPackageVersions","package_name","clearInventoryReducer","clearPackageSystemsReducer","useRemoveFilter","deleteFilters","filterConfig","items","searchFilter","statusFilter","versionFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","resolvedData","RemediationModal","useOnSelect","fetchPackageSystems","limit","then","filterRemediatablePackageSystems","toSelect","payload","system","available_evra","selectedCount","arrayFromObj","onExport","useOnExport","csv","exportPackageSystemsCSV","json","exportPackageSystemsJSON","prepareRemediationPairs","pairs","removeUndefinedObjectKeys","forEach","push","getEntites","useGetEntities","hasError","ErrorHandler","code","InventoryTable","disableDefaultColumns","isFullView","autoRefresh","initialLoading","hideFilters","all","tags","columns","packageSystemsColumns","showTags","getEntities","customFilters","patchParams","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","modifyPackageSystems","persistantParams","tableProps","canSelectAll","TableVariant","className","isStickyHeader","bulkSelect","useBulkSelectConfig","total_items","exportConfig","dedicatedAction","PatchRemediationButton","showRemediationModal","remediationProviderWithPairs","transformPairs","remediationIdentifiers","ouia","PackageDetail","match","pageTitle","setPageTitle","packageDetails","PackageDetailStore","fetchPackageDetails","clearNotifications","clearPackageDetailStore","Header","title","headerOUIA","breadcrumbs","to","paths","isActive","Unavailable","id","Main","TextContent","Text","component","TextVariants","withRouter"],"sourceRoot":""}