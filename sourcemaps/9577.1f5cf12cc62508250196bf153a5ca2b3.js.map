{"version":3,"file":"js/9577.69cdcb56b12174d4f0c6.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Filters/PublishDateFilter.js","webpack:///./src/PresentationalComponents/Filters/RebootFilter.js","webpack:///./src/PresentationalComponents/Filters/StatusFilter.js","webpack:///./src/PresentationalComponents/Filters/TypeFilter.js","webpack:///./src/PresentationalComponents/TableView/TableViewAssets.js","webpack:///./src/SmartComponents/SystemAdvisories/SystemAdvisories.js","webpack:///./src/SmartComponents/SystemPackages/SystemPackages.js","webpack:///./src/SmartComponents/SystemDetail/SystemDetail.js"],"sourcesContent":["import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { publicDateOptions } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { public_date: currentValue } = currentFilter;\n\n    const filterByPublicDate = value => {\n        apply({ filter: { public_date: (value !== 'all' && value) || '' } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersPublishDate),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublicDate(value);\n            },\n            items: publicDateOptions,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersPublishDatePlaceholder)\n        }\n    };\n};\n\nexport default publishDateFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { rebootRequired } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst rebootFilter = (apply, currentFilter = {}) => {\n    let { reboot_required: currentValue } = currentFilter;\n\n    const rebootMap = React.useMemo(\n        () =>\n            rebootRequired.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n\n    const currentValueStringType = (\n        currentValue\n        && (\n            Array.isArray(currentValue)\n            && currentValue.map(value => value.toString())\n            || [currentValue.toString()]\n        )\n    );\n\n    const filterByReboot = value => {\n        apply({ filter: { reboot_required: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersReboot),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByReboot(value);\n            },\n            items: rebootMap,\n            value: currentValueStringType,\n            placeholder: intl.formatMessage(messages.labelsFiltersRebootPlaceholder)\n        }\n    };\n};\n\nexport default rebootFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { updatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { updatable: currentValue } = currentFilter;\n\n    const updatableTypesMap = React.useMemo(\n        () =>\n            updatableTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { updatable: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStatus),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: updatableTypesMap,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsColumnsStatusPlaceholder)\n        }\n    };\n};\n\nexport default statusFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst typeFilter = (apply, currentFilter = {}) => {\n    const advisoryTypesMap = React.useMemo(\n        () =>\n            advisoryTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { advisory_type_name: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersType),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: advisoryTypesMap,\n            value: currentFilter.advisory_type_name,\n            placeholder: intl.formatMessage(messages.labelsFiltersTypePlaceholder)\n        }\n    };\n};\n\nexport default typeFilter;\n","import { cellWidth, expandable, sortable } from '@patternfly/react-table/dist/js';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nexport const advisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSynopsis),\n        transforms: [sortable],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        key: 'applicable_systems'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(15)],\n        key: 'public_date'\n    }\n];\n\nexport const systemAdvisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: 'Synopsis',\n        transforms: [sortable, cellWidth(35)],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(15)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable, cellWidth(20)],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(30)],\n        key: 'public_date'\n    }\n];\n\nexport const systemPackagesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(20)],\n        key: 'name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsInstalledVersion),\n        transforms: [sortable, cellWidth(15)],\n        key: 'evra'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsLatestVersion),\n        transforms: [cellWidth(15)],\n        key: 'latest_update'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [cellWidth(10)],\n        key: 'updatable'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        key: 'summary'\n    }\n];\n\nexport const packagesColumns = [\n    {\n        key: 'name',\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(25)]\n    },\n    {\n        key: 'systems_installed',\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'systems_updatable',\n        title: intl.formatMessage(messages.labelsColumnsUpgradable),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'summary',\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        props: {\n            width: 30\n        }\n    }\n];\n\nexport const cvesTableColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsCveID),\n        transforms: [sortable, cellWidth(40)],\n        key: 'synopsis'\n    },\n    {\n        key: 'impact',\n        title: intl.formatMessage(messages.labelsColumnsSeverity),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    },\n    {\n        key: 'cvss',\n        title: intl.formatMessage(messages.labelsColumnsCVSS),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    }\n];\n","import propTypes from 'prop-types';\nimport React, { useMemo, useCallback, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport rebootFilter from '../../PresentationalComponents/Filters/RebootFilter';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemAdvisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changeSystemAdvisoryListParams, clearSystemAdvisoriesStore, expandSystemAdvisoryRow,\n    fetchApplicableSystemAdvisories, selectSystemAdvisoryRow } from '../../store/Actions/Actions';\nimport { exportSystemAdvisoriesCSV, exportSystemAdvisoriesJSON } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport { createSystemAdvisoriesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, decodeQueryparams,\n    getRowIdByIndexExpandable, remediationProvider } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn, useOnExport, usePushUrlParams } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\n\nconst SystemAdvisories = ({ history, handleNoSystemData, inventoryId }) => {\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = useState(true);\n    const advisories = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.rows\n    );\n\n    const expandedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.status\n    );\n    const rows = useMemo(\n        () =>\n            createSystemAdvisoriesRows(advisories, expandedRows, selectedRows, metadata),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    const historyPusher = usePushUrlParams(queryParams);\n\n    useEffect(() => {\n        return () => dispatch(clearSystemAdvisoriesStore());\n    }, []);\n\n    useEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            historyPusher();\n            dispatch(\n                fetchApplicableSystemAdvisories({ id: inventoryId, ...queryParams })\n            );\n        }\n    }, [queryParams]);\n\n    const onCollapse = useCallback((_, rowId, value) =>\n        dispatch(\n            expandSystemAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        ), [JSON.stringify(advisories)]\n    );\n\n    const constructFilename = (advisory) => advisory?.id || advisory;\n    const onSelect = useOnSelect(\n        rows,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systemAdvisories(inventoryId),\n            queryParams,\n            selectionDispatcher: selectSystemAdvisoryRow,\n            constructFilename\n        }\n    );\n\n    const onSort = useSortColumn(systemAdvisoriesColumns, apply, 2);\n    const sortBy = React.useMemo(\n        () => createSortBy(systemAdvisoriesColumns, metadata.sort, 2),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeSystemAdvisoryListParams({ id: inventoryId, ...params }));\n    }\n\n    const errorState = status.code === 404 ? handleNoSystemData() : <Unavailable/>;\n\n    const onExport = useOnExport(inventoryId, queryParams, {\n        csv: exportSystemAdvisoriesCSV,\n        json: exportSystemAdvisoriesJSON\n    }, dispatch);\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemAdvisoriesColumns}\n                compact\n                onCollapse={onCollapse}\n                onSelect={onSelect}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                onSort={onSort}\n                onExport={onExport}\n                sortBy={sortBy}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        inventoryId,\n                        remediationIdentifiers.advisory\n                    )\n                }\n                selectedRows={selectedRows}\n                systemId={inventoryId}\n                apply={apply}\n                store={{ rows, metadata, status, queryParams }}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-advisories-table'}\n                paginationOUIA={'system-advisories-pagination'}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search,\n                            intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle),\n                            intl.formatMessage(messages.labelsFiltersSearchAdvisoriesPlaceholder)\n                        ),\n                        typeFilter(apply, queryParams.filter),\n                        publishDateFilter(apply, queryParams.filter),\n                        rebootFilter(apply, queryParams.filter)\n                    ]\n                }}\n                errorState={errorState}\n                searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle)}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemAdvisories.propTypes = {\n    history: propTypes.object,\n    handleNoSystemData: propTypes.func,\n    inventoryId: propTypes.string.isRequired\n};\nexport default withRouter(SystemAdvisories);\n","import React, { useMemo, useEffect } from 'react';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport propTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport { SystemUpToDate } from '../../PresentationalComponents/Snippets/SystemUpToDate';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemPackagesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport {\n    changeSystemPackagesParams, clearSystemPackagesStore,\n    fetchApplicableSystemPackages, selectSystemPackagesRow\n} from '../../store/Actions/Actions';\nimport { exportSystemPackagesCSV, exportSystemPackagesJSON } from '../../Utilities/api';\nimport { remediationIdentifiers, systemPackagesDefaultFilters } from '../../Utilities/constants';\nimport { createSystemPackagesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, remediationProvider } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn, useOnExport } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\n\nconst SystemPackages = ({ handleNoSystemData, inventoryId }) => {\n    const dispatch = useDispatch();\n    const packages = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.rows\n    );\n    const queryParams = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.status\n    );\n    const error = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.error\n    );\n    const rows = useMemo(\n        () =>\n            createSystemPackagesRows(packages, selectedRows),\n        [packages,  selectedRows]\n    );\n\n    useEffect(() => {\n        return () => dispatch(clearSystemPackagesStore());\n    }, []);\n\n    useEffect(()=> {\n        dispatch(fetchApplicableSystemPackages({ id: inventoryId, ...queryParams }));\n    }, [queryParams]);\n\n    const constructFilename = (pkg) => {\n        const pkgUpdates = pkg.updates || [];\n        const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n        return latestUpdate && `${pkg.name}-${latestUpdate.evra}`;\n    };\n\n    const transformKey = (row) => {\n        return `${row.name}-${row.evra}`;\n    };\n\n    const onSelect = useOnSelect(\n        packages,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systemPackages(inventoryId),\n            queryParams,\n            selectionDispatcher: selectSystemPackagesRow,\n            constructFilename,\n            transformKey\n        }\n    );\n\n    function apply(params) {\n        dispatch(changeSystemPackagesParams({ id: inventoryId, ...params }));\n    }\n\n    const onSort = useSortColumn(systemPackagesColumns, apply, 1);\n    const sortBy = useMemo(\n        () => createSortBy(systemPackagesColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const errorState = error.status === 404 ?  handleNoSystemData() : <Unavailable/>;\n    const emptyState = (!status.isLoading && !status.hasError && metadata.total_items === 0\n                            && Object.keys(queryParams).length === 0) && <SystemUpToDate/>;\n    const onExport = useOnExport(inventoryId, queryParams, {\n        csv: exportSystemPackagesCSV,\n        json: exportSystemPackagesJSON\n    }, dispatch);\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemPackagesColumns}\n                store={{ rows, metadata, status, queryParams }}\n                onSelect={onSelect}\n                selectedRows={selectedRows}\n                compact\n                onSort={onSort}\n                sortBy={sortBy}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                onExport={onExport}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        inventoryId,\n                        remediationIdentifiers.package\n                    )\n                }\n                apply={apply}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search,\n                            intl.formatMessage(messages.labelsFiltersPackagesSearchTitle),\n                            intl.formatMessage(messages.labelsFiltersPackagesSearchPlaceHolder)\n                        ),\n                        statusFilter(apply, queryParams.filter)\n                    ]\n                }}\n                defaultFilters = {systemPackagesDefaultFilters}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-packages-table'}\n                paginationOUIA={'system-packages-pagination'}\n                errorState={errorState}\n                emptyState={emptyState}\n                searchChipLabel={intl.formatMessage(messages.labelsFiltersPackagesSearchTitle)}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemPackages.propTypes = {\n    handleNoSystemData: propTypes.func,\n    inventoryId: propTypes.string.isRequired\n};\nexport default SystemPackages;\n\n","import React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport SystemAdvisories from '../SystemAdvisories/SystemAdvisories';\nimport SystemPackages from '../SystemPackages/SystemPackages';\nimport './SystemDetail.scss';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport propTypes from 'prop-types';\n\nconst SystemDetail = ({ isInventoryApp, inventoryId }) => {\n    const { state } = useLocation();\n\n    const [activeTabKey, setActiveTabKey] = useState(\n        (state?.tab === 'packages') ? 1 : 0\n    );\n    const [areTabsHidden, setTabsHidden] = useState(false);\n\n    const onTabSelect = (event, id) => {\n        setActiveTabKey(id);\n    };\n\n    const handleNoSystemData = () => {\n        isInventoryApp && setTabsHidden(prevTabsHidden => !prevTabsHidden);\n        return isInventoryApp && null || <NotConnected />;\n    };\n\n    return (!areTabsHidden && (\n        <Tabs activeKey={activeTabKey} onSelect={onTabSelect} className={'patchTabSelect'} isHidden>\n            <Tab eventKey={0} title={<TabTitleText>{intl.formatMessage(messages.titlesAdvisories)}</TabTitleText>}\n                data-ouia-component-type={`system-advisories-tab`}\n                data-ouia-component-id={`system-advisories-tab`}\n            >\n                <SystemAdvisories\n                    handleNoSystemData={handleNoSystemData}\n                    inventoryId={inventoryId}\n                />\n            </Tab>\n            <Tab\n                eventKey={1}\n                title={<TabTitleText>{intl.formatMessage(messages.titlesPackages)}</TabTitleText>}\n                data-ouia-component-type={`system-packages-tab`}\n                data-ouia-component-id={`system-packages-tab`}\n            >\n                <SystemPackages\n                    handleNoSystemData={handleNoSystemData}\n                    inventoryId={inventoryId}\n                />\n            </Tab>\n        </Tabs>\n    ) || <NotConnected/>);\n};\n\nSystemDetail.propTypes = {\n    isInventoryApp: propTypes.bool,\n    inventoryId: propTypes.string.isRequired\n};\nexport default SystemDetail;\n"],"names":["apply","currentFilter","currentValue","public_date","filterByPublicDate","value","filter","label","intl","messages","type","conditionalFilterType","filterValues","onChange","event","items","publicDateOptions","placeholder","reboot_required","rebootMap","React","rebootRequired","toString","currentValueStringType","Array","isArray","map","filterByReboot","updatable","updatableTypesMap","updatableTypes","filterByType","advisoryTypesMap","advisoryTypes","advisory_type_name","advisoriesColumns","title","cellFormatters","expandable","transforms","sortable","cellWidth","key","systemAdvisoriesColumns","systemPackagesColumns","packagesColumns","props","width","cvesTableColumns","SystemAdvisories","history","handleNoSystemData","inventoryId","dispatch","useDispatch","useState","firstMount","setFirstMount","advisories","useSelector","SystemAdvisoryListStore","rows","expandedRows","queryParams","selectedRows","metadata","status","useMemo","createSystemAdvisoriesRows","historyPusher","usePushUrlParams","useEffect","clearSystemAdvisoriesStore","decodeQueryparams","location","search","fetchApplicableSystemAdvisories","id","onCollapse","useCallback","_","rowId","expandSystemAdvisoryRow","getRowIdByIndexExpandable","JSON","stringify","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","selectSystemAdvisoryRow","constructFilename","advisory","onSort","useSortColumn","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","params","changeSystemAdvisoryListParams","errorState","code","Unavailable","onExport","useOnExport","csv","exportSystemAdvisoriesCSV","json","exportSystemAdvisoriesJSON","TableView","columns","compact","remediationProvider","arrayFromObj","remediationIdentifiers","systemId","store","remediationButtonOUIA","tableOUIA","paginationOUIA","filterConfig","searchFilter","typeFilter","publishDateFilter","rebootFilter","searchChipLabel","propTypes","withRouter","SystemPackages","packages","SystemPackageListStore","error","createSystemPackagesRows","clearSystemPackagesStore","fetchApplicableSystemPackages","selectSystemPackagesRow","pkg","pkgUpdates","updates","latestUpdate","length","name","evra","transformKey","row","changeSystemPackagesParams","emptyState","isLoading","hasError","total_items","Object","keys","SystemUpToDate","exportSystemPackagesCSV","exportSystemPackagesJSON","statusFilter","defaultFilters","systemPackagesDefaultFilters","SystemDetail","isInventoryApp","state","useLocation","tab","activeTabKey","setActiveTabKey","areTabsHidden","setTabsHidden","prevTabsHidden","NotConnected","Tabs","activeKey","className","isHidden","Tab","eventKey","TabTitleText"],"sourceRoot":""}