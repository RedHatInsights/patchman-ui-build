{"version":3,"sources":["webpack:///./src/Messages.js","webpack:///./src/PresentationalComponents/Filters/PublishDateFilter.js","webpack:///./src/PresentationalComponents/Filters/SearchFilter.js","webpack:///./src/PresentationalComponents/Filters/StatusFilter.js","webpack:///./src/PresentationalComponents/Filters/TypeFilter.js","webpack:///./src/PresentationalComponents/Snippets/ErrorHandler.js","webpack:///./src/PresentationalComponents/Snippets/ExternalLink.js","webpack:///./src/PresentationalComponents/Snippets/NoSystemData.js","webpack:///./src/PresentationalComponents/TableView/TableFooter.js","webpack:///./src/PresentationalComponents/TableView/TableView.js","webpack:///./src/PresentationalComponents/TableView/TableViewAssets.js","webpack:///./src/SmartComponents/Remediation/PatchRemediationButton.js","webpack:///./src/SmartComponents/Remediation/RemediationModal.js","webpack:///./src/SmartComponents/SystemAdvisories/SystemAdvisories.js","webpack:///./src/SmartComponents/SystemPackages/SystemPackages.js","webpack:///./src/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/PresentationalComponents/AdvisoryType/AdvisoryType.js","webpack:///./src/PresentationalComponents/Snippets/EmptyStates.js","webpack:///./src/PresentationalComponents/Snippets/Label.js","webpack:///./src/PresentationalComponents/Snippets/DescriptionWithLink.js","webpack:///./src/Utilities/DataMappers.js","webpack:///./src/PresentationalComponents/Snippets/AdvisoriesIcon.js","webpack:///./src/Utilities/Helpers.js","webpack:///./src/Utilities/Hooks.js","webpack:///./src/Utilities/IntlProvider.js","webpack:///./src/Utilities/axiosInterceptors.js","webpack:///./src/Utilities/api.js","webpack:///./src/Utilities/constants.js","webpack:///./src/store/ActionTypes.js","webpack:///./src/store/Actions/Actions.js","webpack:///./src/store/Reducers/HelperReducers.js","webpack:///./src/store/Reducers/SystemAdvisoryListStore.js","webpack:///./src/store/Reducers/SystemPackageListStore.js"],"names":["defineMessages","generalAppName","id","description","defaultMessage","labelsBulkSelectAll","labelsBulkSelectNone","labelsBulkSelectPage","labelsColumnsApplicableSystems","labelsColumnsCVSS","labelsColumnsCveID","labelsColumnsInstalledVersion","labelsColumnsLatestVersion","labelsColumnsName","labelsColumnsPublishDate","labelsColumnsSeverity","labelsColumnsStatus","labelsColumnsStatusPlaceholder","labelsColumnsSummary","labelsColumnsSynopsis","labelsColumnsType","labelsColumnsUpgradable","labelsCves","labelsCvesButton","labelsDescription","labelsFiltersClear","labelsFiltersCvesSearchPlaceHolder","labelsFiltersPackagesSearchPlaceHolder","labelsFiltersPackagesSearchTitle","labelsFiltersPublishDate","labelsFiltersPublishDatePlaceholder","labelsFiltersReset","labelsFiltersSearch","labelsFiltersSearchAdvisoriesPlaceholder","labelsFiltersSearchAdvisoriesTitle","labelsFiltersStatus","labelsFiltersSystemsSearchPlaceholder","labelsFiltersSystemsSearchTitle","labelsFiltersType","labelsFiltersTypePlaceholder","labelsModifiedDate","labelsNotAuthorizedDescription","labelsNotAuthorizedTitle","labelsPublicDate","labelsRemediate","labelsReturnToLandingPage","labelsReturnToPreviousPage","labelsSeverity","linksLearnAboutInsights","linksLearnMore","linksReadMore","linksSearchSecurityRatings","linksViewPackagesAndErrata","statesActivateInsights","statesError","statesMinimumPatchPermissionsRequired","statesNoApplicableAdvisories","statesNoMatchingAdvisories","statesNoMatchingCve","statesNoMatchingPackages","statesPatchNotConfigured","statesRequiresPatchPermissions","statesSystemUpToDate","textLockVersionTooltip","textThirdPartyInfo","titlesAdvisories","titlesAffectedSystems","titlesPackages","titlesPatchAdvisories","titlesPatchPackages","titlesPatchSystems","titlesSystems","apply","currentFilter","currentValue","public_date","filterByPublicDate","value","filter","label","intl","messages","type","conditionalFilterType","filterValues","onChange","event","items","publicDateOptions","placeholder","search","title","React","searchValue","setSearchValue","debounce","searchAdvisory","updatable","updatableTypesMap","updatableTypes","toString","filterByType","advisoryTypesMap","advisoryTypes","advisory_type","ErrorHandler","code","ErrorState","EmptyState","icon","LockIcon","prevPageButtonText","toLandingPageText","colSize","rowSize","propTypes","ExternalLink","link","text","href","target","flex","default","spacer","NoSystemData","style","paddingTop","WrenchIcon","Title","headingLevel","size","Button","variant","component","TableFooter","page","perPage","onSetPage","totalItems","onPerPageSelect","paginationOUIA","TableToolbar","Pagination","itemCount","widgetId","PaginationVariant","ouiaId","PropTypes","TableView","columns","store","rows","metadata","status","queryParams","onCollapse","onSelect","onSort","onExport","filterConfig","sortBy","remediationProvider","selectedRows","compact","remediationButtonOUIA","tableOUIA","errorState","emptyState","defaultFilters","RemediationModalCmp","setRemediationModalCmp","convertLimitOffset","limit","offset","isRemediationLoading","setRemediationLoading","data","resolvedData","RemediationModal","useRemoveFilter","deleteFilters","deleteFilterGroup","selectedCount","arrayFromObj","length","hasError","isLoading","PrimaryToolbar","pagination","total_items","isCompact","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","onDeleteGroup","actionsConfig","actions","PatchRemediationButton","isDisabled","onClick","showRemediationModal","ouia","exportConfig","bulkSelect","useBulkSelectConfig","SkeletonTable","Table","aria-label","cells","canSelectAll","isStickyHeader","TableVariant","TableHeader","TableBody","advisoriesColumns","cellFormatters","expandable","transforms","sortable","cellWidth","key","systemAdvisoriesColumns","systemPackagesColumns","packagesColumns","props","width","cvesTableColumns","className","isSmall","alignItems","justifyContent","display","Spinner","isSVG","color","globalPaletteWhite","dispatch","useDispatch","remediations","setRemediations","insights","experimental","loadRemediations","pfReactTable","PfTable","TableGridBreakpoint","SortByDirection","then","handleRemediationSuccess","res","addNotification","getNotification","openWizard","onRemediationCreated","RemediationWizard","defaultProps","f","SystemAdvisories","history","handleNoSystemData","firstMount","setFirstMount","advisories","useSelector","SystemAdvisoryListStore","entity","entityDetails","expandedRows","createSystemAdvisoriesRows","clearSystemAdvisoriesStore","decodeQueryparams","location","push","encodeURLParams","fetchApplicableSystemAdvisories","_","rowId","expandSystemAdvisoryRow","getRowIdByIndexExpandable","useOnSelect","fetchApplicableSystemAdvisoriesApi","toSelect","selectSystemAdvisoryRow","advisory","useSortColumn","createSortBy","sort","useSetPage","usePerPageSelect","params","changeSystemAdvisoryListParams","Unavailable","remediationIdentifiers","systemId","searchFilter","typeFilter","publishDateFilter","withRouter","SystemPackages","packages","SystemPackageListStore","error","createSystemPackagesRows","clearSystemPackagesStore","fetchApplicableSystemPackages","fetchApplicablePackagesApi","selectSystemPackagesRow","pkg","pkgUpdates","updates","latestUpdate","name","evra","row","changeSystemPackagesParams","Object","keys","SystemUpToDate","statusFilter","systemPackagesDefaultFilters","SystemDetail","isInventoryApp","activeTabKey","setActiveTabKey","areTabsHidden","setTabsHidden","prevTabsHidden","Tabs","activeKey","isHidden","Tab","eventKey","TabTitleText","T","data-ouia-component-type","data-ouia-component-id","AdvisoryType","advisoryType","item","Flex","flexWrap","FlexItem","isFilled","EmptyAdvisoryList","EmptyStateVariant","EmptyStateIcon","SearchIcon","EmptyPackagesList","EmptyCvesList","Label","children","DescriptionWithLink","severityObject","getSeverityById","attributes","severity","TextContent","cve_count","TextList","TextListVariants","TextListItem","TextListItemVariants","Text","TextVariants","whiteSpace","truncate","replace","RegExp","handlePatchLink","entityTypes","createAdvisoriesRows","index","isOpen","selected","undefined","synopsis","applicable_systems","processDate","parent","heightAuto","colSpan","createSystemsRows","map","rest","installedPckg","packages_installed","updatablePckg","packages_updatable","rhba","rhba_count","rhsa","rhsa_count","rhea","rhea_count","osName","os_name","osMajor","os_major","osMinor","os_minor","rhsm","Math","random","disableCheckbox","every","count","applicable_advisories","operating_system","createPackageSystemsRows","installed_evra","available_evra","upgradable","pkgNEVRA","createUpgradableColumn","summary","createPackagesRows","systems_installed","systems_updatable","createCvesRows","cve","advisorySeverities","impact","document","baseURI","parseFloat","cvss_score","toFixed","AdvisoriesIcon","tooltipText","Icon","Tooltip","content","transformPairs","input","issues","systems","header","values","column","multiple","join","direction","compoundSortValues","forEach","col","dir","findIndex","createSystemsSortBy","orderBy","orderDirection","toLowerCase","addOrRemoveItemFromSet","targetObj","inputArr","inputObj","reduce","obj","getNewSelectedItems","selectedItems","currentItems","payload","concat","arrayOfObjects","getOffsetFromPageLimit","getLimitFromPageSize","str","max","end","substr","createAdvisoriesIcons","SecurityIcon","BugIcon","EnhancementIcon","marginLeft","body","indexOf","Link","to","remediationIdentifier","remediationProviderWithPairs","createPairs","transformFunc","pairsCreated","encodeParams","parameters","shouldTranslateKeys","allParams","result","entries","category","filterCategory","filterCategories","find","apiValue","getFilterValue","operator","flattenFilters","argKey","encodeURIComponent","argValue","some","includes","encodeApiParams","urlParams","systemProfile","selectedTags","queryString","parsed","qs","startsWith","bracketIndex","objParent","slice","objKey","filterValue","split","categories","chips","match","changeListParams","oldParams","newParams","newState","hasOwnProperty","tags","subtractDate","days","date","Date","setDate","getDate","toISOString","preserveNewlines","sortCves","cves","sortedCves","aCells","bCells","aCell","bCell","stringA","toUpperCase","stringB","localeCompare","reverse","createOSColumn","lockedVersion","filterSelectedRowIDs","prepareEntitiesParams","apiParams","callback","useHandleRefresh","per_page","usePagePerPage","columnName","compoundKey","removeFilter","resetFilters","selectedItem","categoryId","activeFilter","toRemove","Array","isArray","__","currentFilters","rawData","fetchAllData","selectRows","constructFilename","transformKey","constructKey","createSelectedRow","setPageTitle","useDeepCompareEffect","effect","deps","ref","current","isDeepEqualReact","toggleProps","checked","useGetEntities","fetchApi","_items","patchParams","results","total","meta","cache","createIntlCache","locale","navigator","language","createIntl","onError","console","log","axiosInstance","axios","config","chrome","getUserPermissions","userPermissions","inventoryPermissionList","access","permission","interceptors","request","use","authInterceptor","response","ReadOnlyNotification","err","isAxiosError","statusText","detail","createApiCall","endpoint","method","window","auth","getUser","url","withCredentials","fetchApplicableAdvisoriesApi","fetchSystems","fetchSystemDetails","fetchAdvisoryDetailsApi","advisoryName","fetchPackageDetailsApi","packageName","fetchAdvisorySystems","args","fetchPackageSystems","fetchPackagesList","fetchCvesInfo","cveIds","fetch","credentials","headers","Accept","JSON","stringify","cve_list","json","fetchViewAdvisoriesSystems","exportAdvisoriesCSV","Headers","accept","exportAdvisoriesJSON","exportSystemsCSV","exportSystemsJSON","exportPackagesCSV","exportPackagesJSON","STATUS_LOADING","STATUS_RESOLVED","asc","desc","storeListDefaults","isBeta","page_size","packagesListDefaultFilters","packagesListUpdatableTypes","package","FETCH_APPLICABLE_ADVISORIES","EXPAND_ADVISORY_ROW","SELECT_ADVISORY_ROW","CHANGE_ADVISORY_LIST_PARAMS","CHANGE_SYSTEM_ADVISORY_LIST_PARAMS","EXPAND_SYSTEM_ADVISORY_ROW","FETCH_APPLICABLE_SYSTEM_ADVISORIES","SELECT_SYSTEM_ADVISORY_ROW","CLEAR_SYSTEM_ADVISORIES","FETCH_ADVISORY_DETAILS","CLEAR_ADVISORY_DETAILS","CHANGE_SYSTEM_PACKAGES_LIST_PARAMS","FETCH_APPLICABLE_SYSTEM_PACKAGES","SELECT_SYSTEM_PACKAGES_ROW","CLEAR_SYSTEM_PACKAGES","TRIGGER_GLOBAL_FILTER","FETCH_PACKAGES_LIST","FETCH_PACKAGE_DETAILS","CLEAR_PACKAGE_DETAILS","CHANGE_PACKAGES_LIST_PARAMS","FETCH_PACKAGE_SYSTEMS","CLEAR_PACKAGE_SYSTEMS","CHANGE_PACKAGE_SYSTEMS_PARAMS","FETCH_CVES_INFO","CHANGE_CVES_STORE_PARAMS","FETCH_SYSTEM_DETAIL","CLEAR_ENTITIES","CHANGE_ENTITIES_PARAMS","fetchApplicableAdvisories","ActionTypes","Promise","resolve","noError","fetchAvisoryDetails","fetchPackageDetails","changeAdvisoryListParams","expandAdvisoryRow","rowState","selectAdvisoryRow","clearAdvisoryDetailStore","clearPackageDetailStore","fetchPackageSystemsAction","clearPackageSystemsStore","globalFilter","fetchPackagesAction","changePackagesListParams","changePackageSystemsParams","fetchCves","fetchSystemDetailsAction","clearEntitiesStore","changeEntitiesParams","changeFilters","state","action","selectedUpdated","expandRows","expandedUpdated","fetchPending","fetchRejected","fetchFulfilled","initializeState"],"mappings":"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","file":"js/900.46ab02e9a9cf57367877.js","sourcesContent":["\n/* eslint-disable max-len */\n/* eslint sort-keys: [\"error\", \"asc\", {minKeys: 4}] */\n\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n\n    generalAppName: {\n        id: 'generalAppName',\n        description: 'regsiter page title',\n        defaultMessage: 'Patch'\n    },\n    labelsBulkSelectAll: {\n        id: 'labelsBulkSelectAll',\n        description: 'bulk select option',\n        defaultMessage: 'Select all ({count})'\n    },\n    labelsBulkSelectNone: {\n        id: 'labelsBulkSelectNone',\n        description: 'bulk select option',\n        defaultMessage: 'Select none (0)'\n    },\n    labelsBulkSelectPage: {\n        id: 'labelsBulkSelectPage',\n        description: 'bulk select option',\n        defaultMessage: 'Select page ({count})'\n    },\n    labelsColumnsApplicableSystems: {\n        id: 'labelsColumnsApplicableSystems',\n        description: 'shared label',\n        defaultMessage: 'Applicable systems'\n    },\n    labelsColumnsCVSS: {\n        id: 'labelsColumnsCVSS',\n        description: 'shared label',\n        defaultMessage: 'CVSS'\n    },\n    labelsColumnsCveID: {\n        id: 'labelsColumnsCveID',\n        description: 'shared label',\n        defaultMessage: 'CVE ID'\n    },\n    labelsColumnsInstalledVersion: {\n        id: 'labelsColumnsInstalledVersion',\n        description: 'shared label',\n        defaultMessage: 'Installed version'\n    },\n    labelsColumnsLatestVersion: {\n        id: 'labelsColumnsLatestVersion',\n        description: 'shared label',\n        defaultMessage: 'Latest version'\n    },\n    labelsColumnsName: {\n        id: 'labelsColumnsName',\n        description: 'shared label',\n        defaultMessage: 'Name'\n    },\n    labelsColumnsPublishDate: {\n        id: 'labelsColumnsPublishDate',\n        description: 'shared label',\n        defaultMessage: 'Publish date'\n    },\n    labelsColumnsSeverity: {\n        id: 'labelsColumnsSeverity',\n        description: 'shared label',\n        defaultMessage: 'Severity'\n    },\n    labelsColumnsStatus: {\n        id: 'labelsColumnsStatus',\n        description: 'Label for status fitler',\n        defaultMessage: 'Status'\n    },\n    labelsColumnsStatusPlaceholder: {\n        id: 'labelsColumnsStatus',\n        description: 'Label for status fitler placeholder',\n        defaultMessage: 'Filter by status'\n    },\n    labelsColumnsSummary: {\n        id: 'labelsColumnsSummary',\n        description: 'shared label',\n        defaultMessage: 'Summary'\n    },\n    labelsColumnsSynopsis: {\n        id: 'labelsColumnsSynopsis',\n        description: 'shared label',\n        defaultMessage: 'Synopsis'\n    },\n    labelsColumnsType: {\n        id: 'labelsColumnsType',\n        description: 'Label for type fitler placeholder',\n        defaultMessage: 'Type'\n    },\n    labelsColumnsUpgradable: {\n        id: 'labelsColumnsUpgradable',\n        description: 'shared label',\n        defaultMessage: 'Upgradable'\n    },\n    labelsCves: {\n        id: 'labelsCves',\n        description: 'label for cves info link',\n        defaultMessage: 'CVEs'\n    },\n    labelsCvesButton: {\n        id: 'labelsCvesButton',\n        description: 'label for cves button',\n        defaultMessage: '{cvesCount, plural, one {# CVE} other {# CVEs}} associated with this patch'\n    },\n    labelsDescription: {\n        id: 'labelsDescription',\n        description: 'Label',\n        defaultMessage: 'Description'\n    },\n    labelsFiltersClear: {\n        id: 'labelsFiltersClear',\n        description: 'label for remove filter chips',\n        defaultMessage: 'Clear filters'\n    },\n    labelsFiltersCvesSearchPlaceHolder: {\n        id: 'labelsFiltersCvesSearch',\n        description: 'search filter placeholder for packages pages',\n        defaultMessage: 'Filter by CVE ID'\n    },\n    labelsFiltersPackagesSearchPlaceHolder: {\n        id: 'labelsFiltersPackagesSearchPlaceHolder',\n        description: 'search filter placeholder for packages pages',\n        defaultMessage: 'Filter by name or summary'\n    },\n    labelsFiltersPackagesSearchTitle: {\n        id: 'labelsFiltersPackagesSearchTitle',\n        description: 'search filter placeholder for packages pages',\n        defaultMessage: 'Name'\n    },\n    labelsFiltersPublishDate: {\n        id: 'labelsFiltersPublishDate',\n        description: 'shared label',\n        defaultMessage: 'Publish date'\n    },\n    labelsFiltersPublishDatePlaceholder: {\n        id: 'labelsFiltersPublishDate',\n        description: 'shared placeholder label',\n        defaultMessage: 'Filter by publish date'\n    },\n    labelsFiltersReset: {\n        id: 'labelsFiltersReset',\n        description: 'label for remove filter chips',\n        defaultMessage: 'Reset filters'\n    },\n    labelsFiltersSearch: {\n        id: 'labelsFiltersSearch',\n        description: 'Label for search fitler placeholder',\n        defaultMessage: 'Search '\n    },\n    labelsFiltersSearchAdvisoriesPlaceholder: {\n        id: 'labelsFiltersSearchAdvisoriesPlaceholder',\n        description: 'Label for search fitler placeholder',\n        defaultMessage: 'Filter by name or synopsis'\n    },\n    labelsFiltersSearchAdvisoriesTitle: {\n        id: 'labelsFiltersSearchAdvisoriesTitle',\n        description: 'Label for search fitler placeholder',\n        defaultMessage: 'Advisory'\n    },\n    labelsFiltersStatus: {\n        id: 'labelsFiltersStatus',\n        description: 'Label for status fitler placeholder',\n        defaultMessage: 'Status'\n    },\n    labelsFiltersSystemsSearchPlaceholder: {\n        id: 'labelsFiltersSystemsSearch',\n        description: 'search filter placeholder for systems pages',\n        defaultMessage: 'Filter by name'\n    },\n    labelsFiltersSystemsSearchTitle: {\n        id: 'labelsFiltersSystemsSearchTitle',\n        description: 'search filter placeholder for systems pages',\n        defaultMessage: 'System'\n    },\n    labelsFiltersType: {\n        id: 'labelsFiltersType',\n        description: 'Label for type fitler',\n        defaultMessage: 'Type'\n    },\n    labelsFiltersTypePlaceholder: {\n        id: 'labelsFiltersType',\n        description: 'Label for type fitler placeholder',\n        defaultMessage: 'Filter by type'\n    },\n    labelsModifiedDate: {\n        id: 'labelsModifiedDate',\n        description: 'Modified date label',\n        defaultMessage: 'Modified {date}'\n    },\n    labelsNotAuthorizedDescription: {\n        id: 'notAuthorizedDescription',\n        description: 'Description for component which shows up when user doesn\\'t have permission to view content',\n        defaultMessage: 'Contact your organization administrator(s) for more information.'\n    },\n    labelsNotAuthorizedTitle: {\n        id: 'notAuthorizedTitle',\n        description: 'Title for component which shows up when user doesn\\'t have permission to view content',\n        defaultMessage: 'You do not have permissions to view or manage Vulnerability'\n    },\n    labelsPublicDate: {\n        id: 'labelsPublicDate',\n        description: 'Public date label',\n        defaultMessage: 'Issued {date}'\n    },\n    labelsRemediate: {\n        id: 'labelsRemediate',\n        description: 'Button label',\n        defaultMessage: 'Remediate'\n    },\n    labelsReturnToLandingPage: {\n        id: 'returnToLandingPage',\n        description: 'Return to landing page label for general usage',\n        defaultMessage: 'Go to landing page'\n    },\n    labelsReturnToPreviousPage: {\n        id: 'returnPreviousPage',\n        description: 'Return to previous page label for general usage',\n        defaultMessage: 'Return to previous page'\n    },\n    labelsSeverity: {\n        id: 'labelsSeverity',\n        description: 'label for cves info',\n        defaultMessage: 'Severity'\n    },\n    linksLearnAboutInsights: {\n        id: 'linksLearnAboutInsights',\n        description: 'no system data page button label',\n        defaultMessage: 'Learn about the Insights client'\n    },\n    linksLearnMore: {\n        id: 'linksLearnMore',\n        description: 'Learn more',\n        defaultMessage: 'Learn more'\n    },\n    linksReadMore: {\n        id: 'linksReadMore',\n        description: 'Label',\n        defaultMessage: 'Read more'\n    },\n    linksSearchSecurityRatings: {\n        id: 'linksSearchSecurityRatings',\n        description: 'A link label to security ratings page',\n        defaultMessage: 'Learn more about security ratings'\n    },\n    linksViewPackagesAndErrata: {\n        id: 'viewPackagesAndErrata',\n        description: 'A link label to access.redhat.com ',\n        defaultMessage: 'View packages and errata at access.redhat.com'\n    },\n    statesActivateInsights: {\n        id: 'statesActivateInsights',\n        description: 'no system data page body',\n        defaultMessage: 'Activate the Insights client'\n    },\n    statesError: {\n        id: 'statesError',\n        description: 'Label',\n        defaultMessage: 'Error'\n    },\n    statesMinimumPatchPermissionsRequired: {\n        id: 'statesMinimumPatchPermissionsRequired',\n        description: 'No access page body',\n        defaultMessage: 'To view the content of this page, you must be granted a minimum of Patch permissions from your Organisation Administratior'\n    },\n    statesNoApplicableAdvisories: {\n        id: 'statesNoApplicableAdvisories',\n        description: 'system up to date page title',\n        defaultMessage: 'No applicable advisories'\n    },\n    statesNoMatchingAdvisories: {\n        id: 'statesNoMatchingAdvisories',\n        description: 'Label',\n        defaultMessage: 'No matching advisories found'\n    },\n    statesNoMatchingCve: {\n        id: 'statesNoMatchingCve',\n        description: 'Label',\n        defaultMessage: 'No matching CVES found'\n    },\n    statesNoMatchingPackages: {\n        id: 'statesNoMatchingPackages',\n        description: 'Label',\n        defaultMessage: 'No matching packages found'\n    },\n    statesPatchNotConfigured: {\n        id: 'statesPatchNotConfigured',\n        description: 'no system data page title',\n        defaultMessage: 'Patch is not yet configured'\n    },\n    statesRequiresPatchPermissions: {\n        id: 'statesRequiresPatchPermissions',\n        description: 'No access page title',\n        defaultMessage: 'This application requires Patch permissions'\n    },\n    statesSystemUpToDate: {\n        id: 'statesSystemUpToDate',\n        description: 'system up to date page body',\n        defaultMessage: 'This system is up to date, based on package information submitted at the most recent system check-in'\n    },\n    textLockVersionTooltip: {\n        id: 'textLockVersionTooltip',\n        description: 'Tooltip text for vesrion lock column',\n        defaultMessage: `Your RHEL version is locked at version {lockedVersion}`\n    },\n    textThirdPartyInfo: {\n        id: 'textThirdPartyInfo',\n        description: 'text about the third paty managed hosts',\n        defaultMessage: 'This system has content that is managed by repositories other than the Red Hat CDN'\n    },\n    titlesAdvisories: {\n        id: 'titlesAdvisories',\n        description: 'page title with capital letter',\n        defaultMessage: 'Advisories'\n    },\n    titlesAffectedSystems: {\n        id: 'affectedSystems',\n        description: 'page title with capital letter',\n        defaultMessage: 'Affected systems'\n    },\n    titlesPackages: {\n        id: 'titlesPackages',\n        description: 'page title with capital letters',\n        defaultMessage: 'Packages'\n    },\n    titlesPatchAdvisories: {\n        id: 'titlesPatchAdvisories',\n        description: 'title for Advisories page',\n        defaultMessage: 'Patch advisories'\n    },\n    titlesPatchPackages: {\n        id: 'titlesPatchPackages',\n        description: 'title for Packages page',\n        defaultMessage: 'Patch packages'\n    },\n    titlesPatchSystems: {\n        id: 'titlesPatchSystems',\n        description: 'title for Systems page',\n        defaultMessage: 'Patch systems'\n    },\n    titlesSystems: {\n        id: 'titlesSystems',\n        description: 'title with capital letters',\n        defaultMessage: 'Systems'\n    }\n});\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { publicDateOptions } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { public_date: currentValue } = currentFilter;\n\n    const filterByPublicDate = value => {\n        apply({ filter: { public_date: (value !== 'all' && value) || '' } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersPublishDate),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublicDate(value);\n            },\n            items: publicDateOptions,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersPublishDatePlaceholder)\n        }\n    };\n};\n\nexport default publishDateFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst searchFilter = (apply, search, title, placeholder) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [searchAdvisory] = React.useState(() =>\n        debounce(value => apply({ search: value }), 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: title,\n        filterValues: {\n            'aria-label': 'search-field',\n            onChange: (event, value) => {\n                setSearchValue(value);\n                searchAdvisory(value);\n            },\n            placeholder,\n            value: searchValue\n        }\n    };\n};\n\nexport default searchFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { updatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { updatable: currentValue } = currentFilter;\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const updatableTypesMap = React.useMemo(\n        () =>\n            updatableTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { updatable: (value !== '0' && value) || '' } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStatus),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: updatableTypesMap,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsColumnsStatusPlaceholder)\n        }\n    };\n};\n\nexport default statusFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst typeFilter = (apply, currentFilter = {}) => {\n    const advisoryTypesMap = React.useMemo(\n        () =>\n            advisoryTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { advisory_type: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersType),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: advisoryTypesMap,\n            value: currentFilter.advisory_type,\n            placeholder: intl.formatMessage(messages.labelsFiltersTypePlaceholder)\n        }\n    };\n};\n\nexport default typeFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { LockIcon } from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst ErrorHandler = ({ code, ErrorState, EmptyState }) => {\n    switch (code) {\n        case 403:\n            return <NotAuthorized\n                icon={LockIcon}\n                title={intl.formatMessage(messages.labelsNotAuthorizedTitle)}\n                description={intl.formatMessage(messages.labelsNotAuthorizedDescription)}\n                prevPageButtonText={intl.formatMessage(messages.labelsReturnToPreviousPage)}\n                toLandingPageText={intl.formatMessage(messages.labelsReturnToLandingPage)}\n            />;\n\n        case 404:\n            return <InvalidObject />;\n\n        case 500:\n        case 502:\n        case 503:\n            return <Unavailable />;\n\n        default:\n            return ErrorState && <ErrorState />\n                || EmptyState && <EmptyState />\n                || <SkeletonTable colSize={5} rowSize={20} /> ;\n    }\n};\n\nErrorHandler.propTypes = {\n    code: propTypes.number,\n    ErrorState: propTypes.element,\n    EmptyState: propTypes.element\n};\n\nexport default ErrorHandler;\n","import { Flex, FlexItem } from '@patternfly/react-core';\nimport ExternalLinkSquareAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-square-alt-icon';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst ExternalLink = ({ link, text }) => {\n    return (\n        <a\n            href={link}\n            target=\"__blank\"\n        >\n            <Flex flex={{ default: 'inlineFlex' }}>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    <ExternalLinkSquareAltIcon />\n                </FlexItem>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    {text}\n                </FlexItem>\n            </Flex>\n        </a>\n\n    );\n};\n\nExternalLink.propTypes = {\n    link: propTypes.string,\n    text: propTypes.string\n};\n\nexport default ExternalLink;\n","import { Bullseye, Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const NoSystemData = () => (\n    <Bullseye>\n        <EmptyState style={{ paddingTop: 40 }}>\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                {intl.formatMessage(messages.statesPatchNotConfigured)}\n            </Title>\n            <EmptyStateBody>\n                {intl.formatMessage(messages.statesActivateInsights)}\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                {intl.formatMessage(messages.linksLearnAboutInsights)}\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TableFooter = ({ page, perPage, onSetPage, totalItems, onPerPageSelect, paginationOUIA }) => {\n    return (\n        <TableToolbar>\n            <Pagination\n                itemCount={totalItems}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                widgetId={`pagination-options-menu-bottom`}\n                variant={PaginationVariant.bottom}\n                ouiaId={paginationOUIA}\n            />\n        </TableToolbar>\n    );\n};\n\nTableFooter.propTypes = {\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalItems: PropTypes.number,\n    paginationOUIA: PropTypes.string\n};\n\nexport default TableFooter;\n","import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport PatchRemediationButton from '../../SmartComponents/Remediation/PatchRemediationButton';\nimport RemediationModal from '../../SmartComponents/Remediation/RemediationModal';\nimport { arrayFromObj, buildFilterChips, convertLimitOffset } from '../../Utilities/Helpers';\nimport { useRemoveFilter, useBulkSelectConfig } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableFooter from './TableFooter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\n\nconst TableView = ({\n    columns,\n    store: {\n        rows,\n        metadata,\n        status,\n        queryParams: { filter, search }\n    },\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    onExport,\n    filterConfig,\n    sortBy,\n    remediationProvider,\n    selectedRows,\n    compact,\n    apply,\n    remediationButtonOUIA,\n    tableOUIA,\n    paginationOUIA,\n    errorState,\n    emptyState,\n    defaultFilters\n}) => {\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n\n    async function showRemediationModal(data) {\n        setRemediationLoading(true);\n        const resolvedData = await data;\n        setRemediationModalCmp(() => () => <RemediationModal data={resolvedData} />);\n        setRemediationLoading(false);\n    }\n\n    const [deleteFilters, deleteFilterGroup] = useRemoveFilter(filter, apply, defaultFilters);\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n    const { code, hasError, isLoading } = status;\n\n    return (\n        <React.Fragment>\n            {\n                (<React.Fragment>\n                    <PrimaryToolbar\n                        pagination={{\n                            itemCount: metadata.total_items,\n                            page,\n                            perPage,\n                            isCompact: true,\n                            onSetPage,\n                            onPerPageSelect,\n                            ouiaId: `top-${paginationOUIA}`\n                        }}\n                        filterConfig={filterConfig}\n                        activeFiltersConfig={{\n                            filters: buildFilterChips(filter, search),\n                            onDelete: deleteFilters,\n                            deleteTitle: intl.formatMessage(defaultFilters\n                                && messages.labelsFiltersReset || messages.labelsFiltersClear),\n                            onDeleteGroup: deleteFilterGroup\n                        }}\n                        actionsConfig={{\n                            actions: [remediationProvider && (\n                                <React.Fragment>\n                                    <PatchRemediationButton\n                                        isDisabled={selectedCount === 0 || isRemediationLoading}\n                                        onClick={() =>\n                                            showRemediationModal(remediationProvider())\n                                        }\n                                        ouia={remediationButtonOUIA}\n                                        isLoading={isRemediationLoading}\n                                    />\n\n                                    <RemediationModalCmp />\n                                </React.Fragment>\n                            )]\n                        }}\n                        exportConfig={{\n                            isDisabled: metadata.total_items === 0,\n                            onSelect: onExport\n                        }}\n                        bulkSelect={onSelect && useBulkSelectConfig(selectedCount, onSelect, metadata, rows, onCollapse)}\n\n                    />\n\n                    {isLoading && <SkeletonTable colSize={5} rowSize={20} />\n                        || hasError && <ErrorHandler code={code} ErrorState={errorState} EmptyState={emptyState}/>\n                        || <React.Fragment>\n                            <Table\n                                aria-label=\"Patch table view\"\n                                cells={columns}\n                                onSelect={metadata.total_items && onSelect}\n                                rows={rows}\n                                onCollapse={metadata.total_items && onCollapse}\n                                canSelectAll={false}\n                                onSort={metadata.total_items && onSort}\n                                ouiaId={tableOUIA}\n                                sortBy={metadata.total_items && sortBy}\n                                isStickyHeader\n                                variant={compact && TableVariant.compact}\n                            >\n                                <TableHeader />\n                                <TableBody />\n                            </Table>\n                            <TableFooter\n                                totalItems={metadata.total_items}\n                                perPage={perPage}\n                                page={page}\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                paginationOUIA={`bottom-${paginationOUIA}`}\n                            />\n                        </React.Fragment>\n                    }\n                </React.Fragment>)\n            }\n        </React.Fragment>\n    );\n};\n\nTableView.propTypes = {\n    columns: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    onExport: PropTypes.func,\n    remediationProvider: PropTypes.func,\n    selectedRows: PropTypes.object,\n    apply: PropTypes.func,\n    sortBy: PropTypes.object,\n    filterConfig: PropTypes.object,\n    store: PropTypes.object,\n    compact: PropTypes.bool,\n    remediationButtonOUIA: PropTypes.string,\n    tableOUIA: PropTypes.string,\n    paginationOUIA: PropTypes.string,\n    errorState: PropTypes.element,\n    emptyState: PropTypes.element,\n    defaultFilters: PropTypes.object\n};\n\nexport default TableView;\n","import { cellWidth, expandable, sortable } from '@patternfly/react-table/dist/js';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nexport const advisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSynopsis),\n        transforms: [sortable],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        key: 'applicable_systems'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(15)],\n        key: 'public_date'\n    }\n];\n\nexport const systemAdvisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: 'Synopsis',\n        transforms: [sortable, cellWidth(45)],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(15)],\n        key: 'advisory_type'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(25)],\n        key: 'public_date'\n    }\n];\n\nexport const systemPackagesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(20)],\n        key: 'name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsInstalledVersion),\n        transforms: [sortable, cellWidth(15)],\n        key: 'evra'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsLatestVersion),\n        transforms: [cellWidth(15)],\n        key: 'latest_update'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [cellWidth(10)],\n        key: 'updatable'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        key: 'summary'\n    }\n];\n\nexport const packagesColumns = [\n    {\n        key: 'name',\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(25)]\n    },\n    {\n        key: 'systems_installed',\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'systems_updatable',\n        title: intl.formatMessage(messages.labelsColumnsUpgradable),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'summary',\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        props: {\n            width: 30\n        }\n    }\n];\n\nexport const cvesTableColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsCveID),\n        transforms: [sortable, cellWidth(40)],\n        key: 'synopsis'\n    },\n    {\n        key: 'impact',\n        title: intl.formatMessage(messages.labelsColumnsSeverity),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    },\n    {\n        key: 'cvss',\n        title: intl.formatMessage(messages.labelsColumnsCVSS),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    }\n];\n","import { Button, Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport { AnsibleTowerIcon } from '@patternfly/react-icons';\nimport globalPaletteWhite from '@patternfly/react-tokens/dist/js/global_palette_white';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst PatchRemediationButton = ({ onClick, isDisabled, isLoading, ouia }) => {\n    return (\n        <Button\n            isDisabled={isDisabled}\n            className={'remediationButtonPatch'}\n            onClick={onClick}\n            ouiaId={ouia}\n            isSmall\n        ><Flex flex={{ default: 'inlineFlex' }}\n                alignItems={{ default: 'alignItemsCenter' }}\n                justifyContent={{ default: 'justifyContentCenter' }}>\n                <FlexItem spacer={{ default: 'spacerXs' }} style={{ display: 'flex' }}>\n                    {isLoading &&\n                                                <Spinner isSVG size='md'/>\n                                     || <AnsibleTowerIcon color={globalPaletteWhite.value}/>}\n                </FlexItem>\n                <FlexItem spacer={{ default: 'spacerXs' }} style={{ display: 'flex' }}>\n                                     &nbsp;{intl.formatMessage(messages.labelsRemediate)}\n                </FlexItem>\n            </Flex>\n        </Button>\n    );\n};\n\nPatchRemediationButton.propTypes = {\n    onClick: propTypes.object,\n    isDisabled: propTypes.bool,\n    isLoading: propTypes.bool,\n    ouia: propTypes.string\n};\n\nexport default PatchRemediationButton;\n","import {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\n\nfunction getLoader() {\n    return (\n        (insights.experimental && insights.experimental.loadRemediations) ||\n        insights.loadRemediations\n    );\n}\n\nconst RemediationModal = ({ data }) => {\n    const dispatch = useDispatch();\n    const [remediations, setRemediations] = React.useState(false);\n    React.useEffect(() => {\n        getLoader()({\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            }\n        }).then(remediations => setRemediations(remediations));\n        return () => setRemediations(false);\n    }, []);\n\n    const handleRemediationSuccess = res => {\n        dispatch(addNotification(res.getNotification()));\n    };\n\n    React.useEffect(() => {\n        remediations &&\n            remediations\n            .openWizard({ ...data, onRemediationCreated: handleRemediationSuccess });\n    }, [remediations]);\n\n    return (\n        <React.Fragment>\n            {remediations.RemediationWizard && (\n                <remediations.RemediationWizard />\n            )}\n        </React.Fragment>\n    );\n};\n\nRemediationModal.propTypes = {\n    data: propTypes.object\n};\n\nRemediationModal.defaultProps = {\n    onRemediationCreated: f => f\n};\n\nexport default RemediationModal;\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemAdvisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changeSystemAdvisoryListParams, clearSystemAdvisoriesStore, expandSystemAdvisoryRow,\n    fetchApplicableSystemAdvisories, selectSystemAdvisoryRow } from '../../store/Actions/Actions';\nimport { fetchApplicableSystemAdvisoriesApi } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport { createSystemAdvisoriesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, decodeQueryparams, encodeURLParams,\n    getRowIdByIndexExpandable, remediationProvider } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn, useOnSelect } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst SystemAdvisories = ({ history, handleNoSystemData }) => {\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const advisories = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.rows\n    );\n\n    const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n\n    const expandedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.status\n    );\n    const rows = React.useMemo(\n        () =>\n            createSystemAdvisoriesRows(advisories, expandedRows, selectedRows, metadata),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        return () => dispatch(clearSystemAdvisoriesStore());\n    }, []);\n\n    React.useEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(\n                fetchApplicableSystemAdvisories({ id: entity.id, ...queryParams })\n            );\n        }\n    }, [queryParams]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandSystemAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            selectSystemAdvisoryRow(toSelect)\n        );\n    };\n\n    const fetchAllData = () =>\n        fetchApplicableSystemAdvisoriesApi({ id: entity.id, ...queryParams, limit: -1 });\n\n    const onSelect = useOnSelect(rows, selectedRows, fetchAllData, selectRows, (advisory) => advisory.id);\n\n    const onSort = useSortColumn(systemAdvisoriesColumns, apply, 2);\n    const sortBy = React.useMemo(\n        () => createSortBy(systemAdvisoriesColumns, metadata.sort, 2),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeSystemAdvisoryListParams({ id: entity.id, ...params }));\n    }\n\n    const errorState = status.code === 404 ? handleNoSystemData() : <Unavailable/>;\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemAdvisoriesColumns}\n                compact\n                onCollapse={onCollapse}\n                onSelect={onSelect}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                onSort={onSort}\n                sortBy={sortBy}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        entity.id,\n                        remediationIdentifiers.advisory\n                    )\n                }\n                selectedRows={selectedRows}\n                systemId={entity.id}\n                apply={apply}\n                store={{ rows, metadata, status, queryParams }}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-advisories-table'}\n                paginationOUIA={'system-advisories-pagination'}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search,\n                            intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle),\n                            intl.formatMessage(messages.labelsFiltersSearchAdvisoriesPlaceholder)\n                        ),\n                        typeFilter(apply, queryParams.filter),\n                        publishDateFilter(apply, queryParams.filter)\n                    ]\n                }}\n                errorState={errorState}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemAdvisories.propTypes = {\n    history: propTypes.object,\n    handleNoSystemData: propTypes.func\n};\nexport default withRouter(SystemAdvisories);\n","import { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport { SystemUpToDate } from '../../PresentationalComponents/Snippets/SystemUpToDate';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemPackagesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport {\n    changeSystemPackagesParams, clearSystemPackagesStore,\n    fetchApplicableSystemPackages, selectSystemPackagesRow\n} from '../../store/Actions/Actions';\nimport { fetchApplicablePackagesApi } from '../../Utilities/api';\nimport { remediationIdentifiers, systemPackagesDefaultFilters } from '../../Utilities/constants';\nimport { createSystemPackagesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, remediationProvider } from '../../Utilities/Helpers';\nimport { useOnSelect, usePerPageSelect, useSetPage, useSortColumn } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst SystemPackages = ({ handleNoSystemData }) => {\n    const dispatch = useDispatch();\n    const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n    const packages = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.rows\n    );\n    const queryParams = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.status\n    );\n    const error = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.error\n    );\n    const rows = React.useMemo(\n        () =>\n            createSystemPackagesRows(packages, selectedRows),\n        [packages,  selectedRows]\n    );\n\n    React.useEffect(() => {\n        return () => dispatch(clearSystemPackagesStore());\n    }, []);\n\n    React.useEffect(()=> {\n        dispatch(fetchApplicableSystemPackages({ id: entity.id, ...queryParams }));\n    }, [queryParams]);\n\n    const constructFilename = (pkg) => {\n        const pkgUpdates = pkg.updates || [];\n        const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n        return latestUpdate && `${pkg.name}-${latestUpdate.evra}`;\n    };\n\n    const transformKey = (row) => {\n        return `${row.name}-${row.evra}`;\n    };\n\n    const fetchAllData = () =>\n        fetchApplicablePackagesApi({ id: entity.id, ...queryParams, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        dispatch(selectSystemPackagesRow(toSelect));\n    };\n\n    const onSelect = useOnSelect(packages, selectedRows, fetchAllData, selectRows, constructFilename, transformKey);\n\n    function apply(params) {\n        dispatch(changeSystemPackagesParams({ id: entity.id, ...params }));\n    }\n\n    const onSort = useSortColumn(systemPackagesColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(systemPackagesColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const errorState = error.status === 404 ?  handleNoSystemData() : <Unavailable/>;\n    const emptyState = (!status.isLoading && !status.hasError && metadata.total_items === 0\n                            && Object.keys(queryParams).length === 0) && <SystemUpToDate/>;\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemPackagesColumns}\n                store={{ rows, metadata, status, queryParams }}\n                onSelect={onSelect}\n                selectedRows={selectedRows}\n                compact\n                onSort={onSort}\n                sortBy={sortBy}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        entity.id,\n                        remediationIdentifiers.package\n                    )\n                }\n                apply={apply}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search,\n                            intl.formatMessage(messages.labelsFiltersPackagesSearchTitle),\n                            intl.formatMessage(messages.labelsFiltersPackagesSearchPlaceHolder)\n                        ),\n                        statusFilter(apply, queryParams.filter)\n                    ]\n                }}\n                defaultFilters = {systemPackagesDefaultFilters}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-packages-table'}\n                paginationOUIA={'system-packages-pagination'}\n                errorState={errorState}\n                emptyState={emptyState}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemPackages.propTypes = {\n    handleNoSystemData: propTypes.func\n};\nexport default SystemPackages;\n\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport React from 'react';\nimport SystemAdvisories from '../SystemAdvisories/SystemAdvisories';\nimport { useSelector } from 'react-redux';\nimport SystemPackages from '../SystemPackages/SystemPackages';\nimport './SystemDetail.scss';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { NoSystemData } from '../../PresentationalComponents/Snippets/NoSystemData';\nimport propTypes from 'prop-types';\n\nconst SystemDetail = ({ isInventoryApp }) => {\n    const [activeTabKey, setActiveTabKey] = React.useState(0);\n    const [areTabsHidden, setTabsHidden] = React.useState(false);\n\n    const entity = useSelector(({ entityDetails }) => entityDetails.entity || {});\n    const onTabSelect = (event, id) => {\n        setActiveTabKey(id);\n    };\n\n    const handleNoSystemData = () => {\n        isInventoryApp && setTabsHidden(prevTabsHidden => !prevTabsHidden);\n        return isInventoryApp && null || <NoSystemData />;\n    };\n\n    return !entity.id ? null : (!areTabsHidden && (\n        <Tabs activeKey={activeTabKey} onSelect={onTabSelect} className={'patchTabSelect'} isHidden>\n            <Tab eventKey={0} title={<TabTitleText>{intl.formatMessage(messages.titlesAdvisories)}</TabTitleText>}\n                data-ouia-component-type={`system-advisories-tab`}\n                data-ouia-component-id={`system-advisories-tab`}\n            >\n                <SystemAdvisories handleNoSystemData={handleNoSystemData}/>\n            </Tab>\n            <Tab\n                eventKey={1}\n                title={<TabTitleText>{intl.formatMessage(messages.titlesPackages)}</TabTitleText>}\n                data-ouia-component-type={`system-packages-tab`}\n                data-ouia-component-id={`system-packages-tab`}\n            >\n                <SystemPackages handleNoSystemData={handleNoSystemData}/>\n            </Tab>\n        </Tabs>\n    )  || <NoSystemData/>);\n};\n\nSystemDetail.propTypes = {\n    isInventoryApp: propTypes.bool\n};\nexport default SystemDetail;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { Flex, FlexItem } from '@patternfly/react-core';\n\nconst AdvisoryType = ({ type }) => {\n    const advisoryType =\n        advisoryTypes.find(item => item.value === type) || advisoryTypes[2];\n    return (\n        <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n            <FlexItem>{advisoryType.icon}</FlexItem>\n            <FlexItem isFilled>{advisoryType.label}</FlexItem>\n        </Flex>\n    );\n};\n\nAdvisoryType.propTypes = {\n    type: PropTypes.number\n};\n\nexport default AdvisoryType;\n","import {\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const EmptyAdvisoryList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingAdvisories)}\n        </Title>\n    </EmptyState>\n);\n\nexport const EmptyPackagesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingPackages)}\n        </Title>\n    </EmptyState>\n);\n\nexport const EmptyCvesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingCve)}\n        </Title>\n    </EmptyState>\n);\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport './Label.scss';\n\nconst Label = ({ children }) => {\n    return <span className={'patchman-label'}>{children}</span>;\n};\n\nLabel.propTypes = {\n    children: propTypes.any\n};\n\nexport default Label;\n","import React from 'react';\nimport { Text, TextContent, TextVariants, TextList,\n    TextListVariants, TextListItem, TextListItemVariants } from '@patternfly/react-core';\nimport Label from './Label';\nimport { handlePatchLink, truncate, getSeverityById } from '../../Utilities/Helpers';\nimport { entityTypes } from '../../Utilities/constants';\nimport ExternalLink from './ExternalLink';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nexport const DescriptionWithLink = ({ row }) =>  {\n    const severityObject = getSeverityById(row.attributes.severity);\n    return (\n        <TextContent>\n            {\n                row.attributes.cve_count > 0 &&\n                (<TextList component={TextListVariants.dl} style ={{ '--pf-c-content--dl--RowGap': '0.5rem' }}>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsSeverity)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        <SecurityIcon size=\"sm\" color = {severityObject.color}/>  {severityObject.label}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsCves)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        {row.attributes.cve_count}\n                    </TextListItem>\n                </TextList>)}\n            <Label>{intl.formatMessage(messages.labelsDescription)}</Label>\n            <Text component={TextVariants.p} style={{ whiteSpace: 'pre-line' }}>\n                {truncate(row.attributes.description.replace(\n                    new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n                    ''\n                ), 570, handlePatchLink(entityTypes.advisories, row.id, intl.formatMessage(messages.linksReadMore)))}\n            </Text>\n            <ExternalLink link={`https://access.redhat.com/errata/${row.id}`}\n                text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n        </TextContent>);\n};\n\nDescriptionWithLink.propTypes = {\n    row: propTypes.shape({\n        id: propTypes.string,\n        attributes: propTypes.object\n    })\n};\n","import { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport AdvisoryType from '../PresentationalComponents/AdvisoryType/AdvisoryType';\nimport { EmptyAdvisoryList, EmptyPackagesList, EmptyCvesList } from '../PresentationalComponents/Snippets/EmptyStates';\nimport { entityTypes, advisorySeverities } from './constants';\nimport { createUpgradableColumn, handlePatchLink } from './Helpers';\nimport { DescriptionWithLink } from '../PresentationalComponents/Snippets/DescriptionWithLink';\nimport { SystemUpToDate } from '../PresentationalComponents/Snippets/SystemUpToDate';\nimport { TextContent, TextListItem, TextListItemVariants } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nexport const createAdvisoriesRows = (rows, expandedRows, selectedRows) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        row.attributes.synopsis,\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type}\n                                />\n                            )\n                        },\n                        {\n                            title: handlePatchLink(\n                                entityTypes.advisories,\n                                row.id,\n                                row.attributes.applicable_systems\n                            )\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 5 },\n                        title: <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemAdvisoriesRows = (\n    rows,\n    expandedRows,\n    selectedRows,\n    metadata\n) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        row.attributes.synopsis,\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type}\n                                />\n                            )\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 6 },\n                        title: !metadata.search && (metadata.filter && Object.keys(metadata.filter).length === 0)\n                            && <SystemUpToDate />\n                            || <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows.map(({ id, ...rest }) => {\n            const {\n                packages_installed: installedPckg,\n                packages_updatable: updatablePckg,\n                rhba_count: rhba,\n                rhsa_count: rhsa,\n                rhea_count: rhea,\n                os_name: osName,\n                os_major: osMajor,\n                os_minor: osMinor,\n                rhsm\n            } = rest;\n\n            return {\n                id,\n                ...rest,\n                key: Math.random().toString() + id,\n                packages_installed: installedPckg,\n                disableCheckbox: updatablePckg === 0 || [installedPckg, rhba, rhsa, rhea].every(count => count === 0),\n                applicable_advisories: [\n                    rhea || 0,\n                    rhba || 0,\n                    rhsa || 0\n                ],\n                operating_system: {\n                    osName: osName && `${rest.os_name} ${osMajor}.${osMinor}`\n                        || 'No data',\n                    rhsm\n                },\n                selected: selectedRows[id] !== undefined\n            };\n        });\n    return data || [];\n};\n\nexport const createPackageSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows &&\n        rows.map(row => {\n            return {\n                id: row.id,\n                key: Math.random().toString() + row.id,\n                installed_evra: row.installed_evra,\n                available_evra: row.updatable && row.available_evra || row.installed_evra,\n                upgradable: row.updatable,\n                selected: selectedRows[row.id] !== undefined\n            };\n        });\n    return data || [];\n};\n\nexport const createSystemPackagesRows = (rows, selectedRows = {}) => {\n    if (rows.length !== 0) {\n        return rows.map(pkg => {\n            const pkgNEVRA = `${pkg.name}-${pkg.evra}`;\n            const pkgUpdates = pkg.updates || [];\n            const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n\n            return {\n                id: pkgNEVRA,\n                key: pkgNEVRA,\n                selected: selectedRows[pkgNEVRA] !== undefined,\n                disableCheckbox: !latestUpdate,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.evra },\n                    { title: (latestUpdate && latestUpdate.evra) || pkg.evra },\n                    { title: createUpgradableColumn(pkg.updatable) },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createPackagesRows = (rows) => {\n    if (rows && rows.length !== 0) {\n        return rows.map(pkg => {\n            return {\n                id: pkg.name,\n                key: pkg.name,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.systems_installed },\n                    { title: pkg.systems_updatable },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createCvesRows = (rows) => {\n    if (rows.length !== 0) {\n        return rows.map(cve => {\n            const { attributes, id } = cve;\n            const severityObject = advisorySeverities.filter(severity => severity.label === attributes.impact)[0];\n\n            return {\n                id,\n                key: id,\n                cells: [\n                    { title: (\n                        <a href={`${document.baseURI}insights/vulnerability/cves/${attributes.synopsis}`}>\n                            {attributes.synopsis}\n                        </a>) },\n                    {\n                        title: (<TextContent>\n                            <TextListItem component={TextListItemVariants.dd}>\n                                <SecurityIcon size=\"sm\" color={severityObject.color}/>  {severityObject.label}\n                            </TextListItem>\n                        </TextContent>),\n                        value: severityObject.label\n                    },\n                    { title: parseFloat(attributes.cvss_score).toFixed(1) }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 4 },\n                        title: <EmptyCvesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n","import React from 'react';\nimport { Flex, FlexItem, Tooltip } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nconst AdvisoriesIcon = ({ count, tooltipText, Icon }) =>(\n    <Tooltip content={tooltipText}>\n        <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n                <Icon/>\n            </FlexItem>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n                {count && count.toString() || 0}\n            </FlexItem>\n        </Flex>\n    </Tooltip>\n);\n\nAdvisoriesIcon.propTypes = {\n    Icon: propTypes.element,\n    count: propTypes.any,\n    tooltipText: propTypes.string\n};\n\nexport default AdvisoriesIcon;\n","import { CheckIcon, LongArrowAltUpIcon,\n    InfoCircleIcon, BugIcon, EnhancementIcon, SecurityIcon } from '@patternfly/react-icons';\nimport { SortByDirection } from '@patternfly/react-table/dist/js';\nimport findIndex from 'lodash/findIndex';\nimport qs from 'query-string';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport AdvisoriesIcon from '../PresentationalComponents/Snippets/AdvisoriesIcon';\nimport {\n    advisorySeverities,\n    compoundSortValues,\n    filterCategories\n} from './constants';\nimport { Flex, FlexItem, Tooltip } from '@patternfly/react-core';\nimport messages from '../Messages';\nimport { intl } from './IntlProvider';\n\nexport const convertLimitOffset = (limit, offset) => {\n    return [offset / limit + 1, limit];\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const transformPairs = (input) => {\n    return {\n        issues: Object.keys(input.data).map(advisory => {\n            return {\n                id: 'patch-advisory:' + advisory,\n                description: advisory,\n                systems: input.data[advisory]\n            };\n        }\n        )\n    };\n};\n\nexport const createSortBy = (header, values, offset) => {\n    if (values) {\n        let [column] = values;\n        let multiple = values.join();\n        let direction =\n            column[0] === '-' ? SortByDirection.desc : SortByDirection.asc;\n        Object.keys(compoundSortValues).forEach(col => {\n            Object.keys(compoundSortValues[col]).forEach(dir => {\n                if (compoundSortValues[col][dir] === multiple) {\n                    column = col;\n                    direction = dir;\n                }\n            });\n        });\n\n        column = column.replace(/^(-|\\+)/, '');\n        const index = findIndex(header, item => item.key === column);\n        let sort = {\n            index: index + offset,\n            direction\n        };\n        return sort;\n    }\n\n    return {};\n};\n\nexport const createSystemsSortBy = (orderBy, orderDirection) => {\n    orderBy = orderBy === 'updated' && 'last_upload' || orderBy;\n    let sort = `${orderDirection === 'ASC' ? '' : '-'}${orderBy}`;\n\n    //if orderBy is for a compound column reset sort value to relative compound sort value\n    Object.keys(compoundSortValues).forEach(col => {\n        if (col === orderBy) {\n            sort = compoundSortValues[col][orderDirection.toLowerCase()];\n        }\n    });\n\n    return sort;\n};\n\nexport const addOrRemoveItemFromSet = (targetObj, inputArr) => {\n    const inputObj = inputArr.reduce(\n        (obj, item) => ((obj[item.rowId] = item.value || undefined), obj),\n        {}\n    );\n    const result = { ...targetObj, ...inputObj };\n    return result;\n};\n\nexport const getNewSelectedItems = (selectedItems, currentItems) => {\n    let payload = [].concat(selectedItems).map(item=>({ rowId: item.id, value: item.selected }));\n    return addOrRemoveItemFromSet(\n        currentItems,\n        payload\n    );\n};\n\n// for expandable rows only\nexport const getRowIdByIndexExpandable = (arrayOfObjects, index) => {\n    return arrayOfObjects[index / 2].id;\n};\n\nexport const getOffsetFromPageLimit = (page, limit) => {\n    return page * limit - limit;\n};\n\nexport const getLimitFromPageSize = limit => {\n    return limit;\n};\n\nexport function truncate(str, max, end) {\n    return str.length > max ? (\n        <React.Fragment>\n            {str.substr(0, max - 1)}\n            ...&nbsp;{end}\n        </React.Fragment>\n    ) : str;\n}\n\nexport function createAdvisoriesIcons([rhea, rhba, rhsa]) {\n    return (\n        <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n            {[rhea, rhba, rhsa].every(item => item === 0) &&\n                'No applicable advisories'}\n            {rhsa !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Security advisories'} count={rhsa} Icon={SecurityIcon} />\n                </FlexItem>)}\n            {rhba !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Bug fixes'} count={rhba} Icon={BugIcon} />\n                </FlexItem>)}\n            {rhea !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Enhancements'} count={rhea} Icon={EnhancementIcon} />\n                </FlexItem>)}\n        </Flex>\n    );\n}\n\nexport function createUpgradableColumn(value) {\n    return <div style={{\n        display: 'flex',\n        alignItems: 'center'\n    }}>\n        {\n            value && <LongArrowAltUpIcon style={{ color: 'var(--pf-global--palette--blue-400)' }} />\n                || <CheckIcon style={{ color: 'var(--pf-global--success-color--100)' }}/>\n        }\n        {<span style={{ marginLeft: 'var(--pf-global--spacer--sm)' }}>\n            {\n                value && 'Upgradable' || 'Up-to-date'\n            }\n        </span>}\n    </div>;\n}\n\nexport function getSeverityById(id) {\n    return (\n        advisorySeverities.find(item => item.value === id) ||\n        advisorySeverities[0]\n    );\n}\n\nexport function handlePatchLink(type, name, body) {\n    if (location.href.indexOf('inventory') === -1) {\n        return (\n            <Link to={`/${type}/${name}`}>\n                {body === undefined ? name : body}\n            </Link>\n        );\n    } else {\n        return (\n            <a href={`${document.baseURI}insights/patch/${type}/${name}`}>\n                {body || name}\n            </a>\n        );\n    }\n}\n\nexport const arrayFromObj = items =>\n    Object.values(items).filter(value => value);\n\nexport const remediationProvider = (issues, systems, remediationIdentifier) => {\n    issues = [].concat(issues);\n    systems = [].concat(systems);\n    return issues.length && systems.length\n        ? {\n            issues: issues.map(item => ({\n                id: `${remediationIdentifier}:${item}`,\n                description: item\n            })),\n            systems\n        }\n        : false;\n};\n\nexport async function remediationProviderWithPairs(issues, createPairs, transformFunc) {\n    if (issues) {\n        const pairsCreated = await createPairs(issues);\n        const res = transformFunc(pairsCreated);\n        return await res;\n    }\n    else {\n        return false;\n    }\n}\n\n;\n\nexport const getFilterValue = (category, key) => {\n    const filterCategory = filterCategories[category];\n    if (filterCategory) {\n        const filterOption = filterCategory.values.find(\n            item => item.value === key\n        );\n        return filterOption || { apiValue: key };\n    }\n};\n\nexport const encodeParams = (parameters, shouldTranslateKeys) => {\n    const flattenFilters = filter => {\n        let result = {};\n        filter &&\n            Object.entries(filter).forEach(item => {\n                let [key, value] = item;\n                value = shouldTranslateKeys && getFilterValue(key, value).apiValue || value;\n                const operator = [].concat(value).length > 1 ? 'in:' : '';\n                result = {\n                    ...result,\n                    [`filter[${key}]`]: `${operator}${value.toString()}`\n                };\n            });\n        return result;\n    };\n\n    let { filter, ...allParams } = parameters;\n    allParams = { ...allParams, ...flattenFilters(filter) };\n    let params = [];\n    Object.keys(allParams).forEach(key => {\n        const argKey = encodeURIComponent(key);\n        const argValue = encodeURIComponent(allParams[key]);\n\n        if (!['', undefined, null].some(value => [argValue, key].includes(value))) {\n            if (!['selectedTags', 'systemProfile'].includes(key)) {\n                params.push(argKey.concat('=').concat(argValue));\n            } else if (key === 'selectedTags') {\n                params.push.apply(params, allParams[key]);\n            } else {\n                params.push(allParams[key]);\n            }\n        }\n    });\n\n    return '?'.concat(params.join('&'));\n};\n\nexport const encodeApiParams = parameters => {\n    return encodeParams(parameters, true);\n};\n\nexport const encodeURLParams = parameters => {\n    delete parameters.id;\n    let urlParams = { ...parameters };\n    delete urlParams.systemProfile;\n    delete urlParams.selectedTags;\n    return encodeParams(urlParams, false);\n};\n\nexport const decomposeFilterValue = filterValue => {\n    if (filterValue.startsWith('in:')) {\n        const values = filterValue.slice(3);\n        return values.split(',');\n    }\n\n    return filterValue;\n};\n\nexport const decodeQueryparams = queryString => {\n    const parsed = qs.parse(queryString);\n    const res = {};\n    Object.keys(parsed).forEach(key => {\n        if (!key.startsWith('filter[system_profile]')) {\n            const value = parsed[key];\n            const bracketIndex = key.search(/\\[.*\\]/);\n            if (bracketIndex > 0) {\n                const objParent = key.slice(0, bracketIndex);\n                const objKey = key.slice(bracketIndex + 1, -1);\n                res[objParent] = {\n                    ...res[objParent],\n                    [objKey]: decomposeFilterValue(value)\n                };\n            } else {\n                res[key] = value;\n            }\n        }\n    });\n    return res;\n};\n\nexport const buildFilterChips = (filters, search) => {\n\n    let filterConfig = [];\n    const processFilters = () => {\n        let categories = Object.keys(filters).filter(\n            item =>\n                filters[item] !== '' && [].concat(filters[item]).length !== 0\n        );\n        filterConfig = filterConfig.concat(\n            categories.map(category => {\n                const { label, values } = filterCategories[category];\n                return {\n                    category: label,\n                    id: category,\n                    chips: [].concat(filters[category]).map(filterValue => {\n                        const match = values.find(\n                            item =>\n                                item.value.toString() === filterValue.toString()\n                        );\n                        return {\n                            name: match.label,\n                            value: filterValue,\n                            id: match.value\n                        };\n                    })\n                };\n            })\n        );\n    };\n\n    const processSearch = () => {\n        filterConfig = filterConfig.concat([\n            {\n                category: 'Search',\n                id: 'search',\n                chips: [\n                    {\n                        name: search,\n                        value: search\n                    }\n                ]\n            }\n        ]);\n    };\n\n    filters && processFilters();\n    search && processSearch();\n\n    return filterConfig;\n};\n\nexport const changeListParams = (oldParams, newParams) => {\n    const newState = { ...oldParams, ...newParams };\n    const offsetResetParams = ['filter', 'search', 'limit', 'selectedTags'];\n    if (offsetResetParams.some(item => newParams.hasOwnProperty(item))) {\n        newState.offset = 0;\n    }\n\n    if (newParams.hasOwnProperty('filter')) {\n        newState.filter = { ...oldParams.filter, ...newParams.filter };\n    }\n\n    if (newState.hasOwnProperty('tags')) {\n        newState && delete newState.tags;\n    }\n\n    return newState;\n};\n\nexport function subtractDate(days) {\n    const date = new Date();\n    date.setDate(date.getDate() - days);\n    return date.toISOString();\n}\n\nexport function preserveNewlines(input) {\n    return input && input.replace(\n        new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n        ''\n    );\n}\n\nexport function sortCves(cves, index, direction) {\n\n    const sortedCves = cves.sort(\n        ({ cells: aCells }, { cells: bCells }) => {\n            const aCell = aCells[index].value || aCells[index].title;\n            const bCell = bCells[index].value || bCells[index].title;\n\n            const stringA = aCell.toString().toUpperCase();\n            const stringB = bCell.toString().toUpperCase();\n\n            return stringA.localeCompare(stringB);\n        }\n    );\n\n    return {\n        sortBy: { index, direction },\n        sortedCves: direction === SortByDirection.asc ? sortedCves : sortedCves.reverse()\n    };\n\n}\n\nexport const createOSColumn = ({ osName, rhsm }) => (rhsm === '' || rhsm ===  undefined) &&  osName || (\n    <Tooltip\n        content={\n            intl.formatMessage(messages.textLockVersionTooltip, { lockedVersion: rhsm })\n        }\n    >\n        <Flex flex={{ default: 'inlineFlex' }}>\n            <FlexItem spacer={{ default: 'spacerSm' }}>{osName}</FlexItem>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n                <InfoCircleIcon size=\"sm\" color={'var(--pf-global--info-color--100)'} />\n            </FlexItem>\n        </Flex>\n    </Tooltip>\n);\n\nexport const filterSelectedRowIDs = (selectedRows) =>  Object.keys(selectedRows).filter(row => selectedRows[row]);\n\nexport const prepareEntitiesParams = (parameters) => {\n    const offset = parameters.offset || getOffsetFromPageLimit(parameters.page || 1, parameters.perPage || 20);\n    const limit = parameters.limit || getLimitFromPageSize(parameters.perPage || 20);\n\n    const apiParams = { offset, limit, search: parameters.search, sort: parameters.sort };\n\n    //we need explicitly remove 'undefined' parameters for safety\n    Object.keys(apiParams).forEach(key => apiParams[key] === undefined && delete apiParams[key]);\n\n    return apiParams;\n};\n","import { SortByDirection } from '@patternfly/react-table/dist/js';\nimport isDeepEqualReact from 'fast-deep-equal/react';\nimport React from 'react';\nimport messages from '../Messages';\nimport { compoundSortValues } from './constants';\nimport { convertLimitOffset, createSystemsSortBy, getLimitFromPageSize, getOffsetFromPageLimit } from './Helpers';\nimport { intl } from './IntlProvider';\n\nexport const useSetPage = (limit, callback) => {\n    const onSetPage = React.useCallback((_, page) =>\n        callback({ offset: getOffsetFromPageLimit(page, limit) })\n    );\n    return onSetPage;\n};\n\nexport const useHandleRefresh = (metadata, callback) => {\n    const handleRefresh = React.useCallback(({ page, per_page: perPage }) => {\n        const offset = getOffsetFromPageLimit(page, perPage);\n        const limit = getLimitFromPageSize(perPage);\n        (metadata.offset !== offset || metadata.limit !== limit) &&\n            callback({\n                ...(metadata.offset !== offset && { offset }),\n                ...(metadata.limit !== limit && { limit })\n            });\n    });\n    return handleRefresh;\n};\n\nexport const usePagePerPage = (limit, offset) => {\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(limit, offset),\n        [limit, offset]\n    );\n    return [page, perPage];\n};\n\nexport const usePerPageSelect = callback => {\n    const onPerPageSelect = React.useCallback((_, perPage) =>\n        callback({ limit: getLimitFromPageSize(perPage), offset: 0 })\n    );\n    return onPerPageSelect;\n};\n\nexport const useSortColumn = (columns, callback, offset = 0) => {\n    const onSort = React.useCallback((_, index, direction) => {\n        let columnName = columns[index - offset].key;\n        const compoundKey = compoundSortValues[columnName];\n        if (compoundKey) {\n            columnName = compoundKey[direction];\n        }\n        else if (direction === SortByDirection.desc) {\n            columnName = '-' + columnName;\n        }\n\n        callback({ sort: columnName });\n    });\n    return onSort;\n};\n\nexport const useRemoveFilter = (filters, callback, defaultFilters = { filter: {} }) => {\n    const removeFilter = React.useCallback((event, selected, resetFilters) => {\n        let newParams = { filter: {} };\n        selected.forEach(selectedItem => {\n            let { id: categoryId, chips } = selectedItem;\n            if (categoryId !== 'search') {\n                let activeFilter = filters[categoryId];\n                const toRemove = chips.map(item => item.id.toString());\n                if (Array.isArray(activeFilter)) {\n                    newParams.filter[categoryId] = activeFilter.filter(\n                        item => !toRemove.includes(item.toString())\n                    );\n                } else {\n                    newParams.filter[categoryId] = '';\n                }\n            } else {\n                newParams.search = '';\n            }\n\n        });\n\n        if (resetFilters) {\n            newParams = resetFilters(newParams);\n        }\n\n        callback({ ...newParams });\n    });\n\n    const deleteFilterGroup = (__, filters) => {\n        removeFilter(__, filters);\n    };\n\n    const deleteFilters = (__, selected) => {\n        const resetFilters = (currentFilters) => {\n            if (Object.keys(defaultFilters.filter).length > 0) {\n                currentFilters.filter = { ...currentFilters.filter, ...defaultFilters.filter };\n            }\n\n            return currentFilters;\n        };\n\n        removeFilter(__, selected, resetFilters);\n    };\n\n    return [deleteFilters, deleteFilterGroup];\n};\n\nexport const useOnSelect = (rawData, selectedRows, fetchAllData, selectRows,\n    constructFilename = undefined, transformKey = undefined) => {\n    const constructKey = (row) => {\n        if (transformKey) {\n            return transformKey(row);\n        }\n        else {\n            return row.id || row.name;\n        }\n    };\n\n    const onSelect = React.useCallback((event, selected, rowId) => {\n        const createSelectedRow = (rawData, toSelect = []) => {\n            rawData.forEach((row) => {\n                toSelect.push(\n                    {\n                        id: constructKey(row),\n                        selected: constructFilename && constructFilename(row) || row.id\n                    }\n                );\n            });\n\n            return toSelect;\n        };\n\n        switch (event) {\n            case 'none': {\n                const toSelect = [];\n                Object.keys(selectedRows).forEach(id => {\n                    toSelect.push(\n                        {\n                            id,\n                            selected: false\n                        }\n                    );\n                });\n                selectRows(toSelect);\n                break;\n            }\n\n            case 'page': {\n                if (Array.isArray(rawData)) {\n                    rawData = rawData.filter(row => !row.disableCheckbox);\n                }\n\n                selectRows(createSelectedRow(rawData));\n                break;\n            }\n\n            case 'all': {\n                const fetchCallback = ({ data }) => {\n                    selectRows(createSelectedRow(data));\n                };\n\n                fetchAllData().then(fetchCallback);\n\n                break;\n            }\n\n            default: {\n                selectRows([{\n                    id: constructKey(rawData[rowId]),\n                    selected: selected && (constructFilename && constructFilename(rawData[rowId]) || true)\n                }]);\n            }\n\n        }\n    }\n    );\n\n    return onSelect;\n};\n\nexport const setPageTitle = (title) => {\n    React.useEffect(() => {\n        if (title) {\n            document.title = `${title} - Patch | Red Hat Insights`;\n        }\n    }, [title]);\n};\n\nexport const useDeepCompareEffect = (effect, deps) => {\n    const ref = React.useRef(undefined);\n\n    if (!ref.current || !isDeepEqualReact(deps, ref.current)) {\n        ref.current = deps;\n    }\n\n    React.useEffect(effect, ref.current);\n};\n\nexport const useBulkSelectConfig = (selectedCount, onSelect, metadata, rows, onCollapse) => ({\n    count: selectedCount,\n    items: [{\n        title: intl.formatMessage(messages.labelsBulkSelectNone),\n        onClick: () => {\n            onSelect('none');\n        }\n    }, {\n        title: intl.formatMessage(messages.labelsBulkSelectPage,\n            { count: onCollapse && rows.length / 2 || rows.length }\n        ),\n        onClick: () => {\n            onSelect('page');\n        }\n    },\n    {\n        title: intl.formatMessage(messages.labelsBulkSelectAll, { count: metadata.total_items }),\n        onClick: () => {\n            onSelect('all');\n        }\n    }],\n    onSelect: () => {\n        selectedCount === 0 ? onSelect('all') : onSelect('none');\n    },\n    toggleProps: {\n        'data-ouia-component-type': 'bulk-select-toggle-button'\n    },\n    checked: selectedCount === 0 ? false : selectedCount === metadata.total_items ? true : null,\n    isDisabled: metadata.total_items === 0 && selectedCount === 0\n});\n\nexport const useGetEntities = (fetchApi, apply, id) => {\n    const getEntities = async (\n        _items,\n        { orderBy, orderDirection, page, per_page: perPage, patchParams }\n    ) => {\n\n        const sort = createSystemsSortBy(orderBy, orderDirection);\n\n        const items = await fetchApi({\n            page,\n            perPage,\n            ...patchParams,\n            sort,\n            ...id && { id } || {}\n        });\n\n        apply({\n            page,\n            perPage,\n            sort\n        });\n\n        return {\n            results: items.data.map(row => ({ id: row.id, ...row.attributes })),\n            total: items.meta?.total_items\n        };\n    };\n\n    return getEntities;\n};\n","import { createIntl, createIntlCache } from 'react-intl';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\n\nexport const intl = createIntl({\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    locale\n}, cache);\n\nexport const intlSettings = { locale };\n","import {\n    authInterceptor\n} from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport axios from 'axios';\nimport { ReadOnlyNotification } from './constants';\n\nconst axiosInstance = axios.create();\n\nexport async function  accessCheckInterceptor (config)  {\n\n    const userPermissions = await insights.chrome.getUserPermissions();\n    const inventoryPermissionList = ['inventory:*:*', 'inventory:*:read', 'inventory:hosts:read'];\n\n    const hasInventoryAccess = userPermissions.some((access) => inventoryPermissionList.includes(access?.permission));\n\n    if (!hasInventoryAccess) {\n        throw new axios.Cancel('Operation canceled. User does not have access to Inventory');\n    }\n\n    return config;\n}\n\nexport function errorInterceptor(err) {\n\n    if (!axios.isCancel(err)) {\n\n        const { response, isAxiosError } = { ...err };\n\n        if (response && isAxiosError) {\n            const { status, statusText, data } = response;\n\n            if (!status) {\n                throw err;\n            } else {\n                const genericError = {\n                    title:\n                            'There was an error getting data'\n                };\n\n                const result = { ...genericError, detail: data.error || statusText, status };\n\n                throw result;\n            }\n        }\n\n        throw err;\n    }\n}\n\nexport function readOnlyInterceptor(error) {\n    if (error.response && error.response.status === 503) {\n        const data = ReadOnlyNotification;\n        throw data;\n    }\n\n    throw error;\n}\n\nexport function responseDataInterceptor(response) {\n    if (response.data && typeof response.data === 'object') {\n        return { ...response.data, status: response.status };\n    }\n\n    return response;\n}\n\naxiosInstance.interceptors.request.use(accessCheckInterceptor);\naxiosInstance.interceptors.request.use(authInterceptor);\naxiosInstance.interceptors.response.use(responseDataInterceptor);\naxiosInstance.interceptors.response.use(null, readOnlyInterceptor);\naxiosInstance.interceptors.response.use(null, errorInterceptor);\n\nexport default axiosInstance;\n","/* eslint-disable no-unused-vars */\nimport { encodeApiParams } from './Helpers';\nimport axios from './axiosInterceptors';\nimport { prepareEntitiesParams } from './Helpers';\nexport function createApiCall(\n    endpoint,\n    method,\n    parameters = undefined,\n    data = undefined\n) {\n    if (parameters && method === 'get') {\n        endpoint = endpoint.concat(encodeApiParams(parameters));\n    }\n\n    let result = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        axios({\n            method,\n            url: '/api/patch/v1' + endpoint,\n            withCredentials: true,\n            data\n        })\n    );\n\n    return result;\n}\n\nexport const fetchApplicableAdvisoriesApi = params => {\n    return createApiCall('/advisories', 'get', params);\n};\n\nexport const fetchApplicableSystemAdvisoriesApi = params => {\n    let { id, ...allParams } = params;\n    return createApiCall(`/systems/${id}/advisories`, 'get', allParams);\n};\n\nexport const fetchSystems = params => {\n    return createApiCall('/systems', 'get', prepareEntitiesParams(params));\n};\n\nexport const fetchSystemDetails = id => {\n    return createApiCall(`/systems/${id}`, 'get');\n};\n\nexport const fetchAdvisoryDetailsApi = params => {\n    return createApiCall(`/advisories/${params.advisoryName}`, 'get');\n};\n\nexport const fetchPackageDetailsApi = params => {\n    return createApiCall(`/packages/${params.packageName}`, 'get');\n};\n\nexport const fetchApplicablePackagesApi = params => {\n    let { id, ...allParams } = params;\n    return createApiCall(`/systems/${id}/packages`, 'get', allParams);\n};\n\nexport const fetchAdvisorySystems = params => {\n    const { id, ...args } = params;\n    return createApiCall(`/advisories/${id}/systems`, 'get', prepareEntitiesParams(args));\n};\n\nexport const fetchPackageSystems = params => {\n    const { id, ...args } = params;\n    return createApiCall(`/packages/${id}/systems`, 'get', args);\n};\n\nexport const fetchPackagesList = params => {\n    return createApiCall('/packages', 'get', params);\n};\n\nexport const fetchCvesInfo = async ({ cveIds }) => {\n\n    const result = await fetch(`/api/vulnerability/v1/vulnerabilities/cves?limit=${cveIds && cveIds.length}`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ cve_list: cveIds })\n    }).then(res => res.json()).then(data => data);\n\n    return result;\n};\n\nexport const fetchViewAdvisoriesSystems = async (input) => {\n    const result = await fetch(`/api/patch/v1/views/advisories/systems`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(input)\n    }).then(res => res.json()).then(data => data);\n\n    return result;\n};\n\nexport const exportAdvisoriesCSV = params => {\n    let endpoint = '/export/advisories';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'text/csv' })\n    }).then(res => res.text());\n};\n\nexport const exportAdvisoriesJSON = params => {\n    let endpoint = '/export/advisories';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'application/json' })\n    }).then(res => res.json());\n};\n\nexport const exportSystemsCSV = params => {\n    let endpoint = '/export/systems';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'text/csv' })\n    }).then(res => res.text());\n};\n\nexport const exportSystemsJSON = params => {\n    let endpoint = '/export/systems';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'application/json' })\n    }).then(res => res.json());\n};\n\nexport const exportPackagesCSV = params => {\n    let endpoint = '/export/packages';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'text/csv' })\n    }).then(res => res.text());\n};\n\nexport const exportPackagesJSON = params => {\n    let endpoint = '/export/packages';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'application/json' })\n    }).then(res => res.json());\n};\n\n","import BugIcon from '@patternfly/react-icons/dist/js/icons/bug-icon';\nimport EnhancementIcon from '@patternfly/react-icons/dist/js/icons/enhancement-icon';\nimport SecurityIcon from '@patternfly/react-icons/dist/js/icons/security-icon';\nimport React from 'react';\nimport { subtractDate } from './Helpers';\n\nexport const STATUS_REJECTED = 'rejected';\nexport const STATUS_LOADING = 'loading';\nexport const STATUS_RESOLVED = 'resolved';\n\nexport const compoundSortValues = {\n    operating_system: {\n        asc: 'osname,osmajor,osminor',\n        desc: '-osname,-osmajor,-osminor'\n    },\n    applicable_advisories: {\n        asc: 'rhsa_count,rhba_count,rhea_count',\n        desc: '-rhsa_count,-rhba_count,-rhea_count'\n    }\n};\n\n// messy check because of frontend-components tests\nexport const ENABLE_PACKAGES = window?.insights?.chrome?.isBeta && insights?.chrome?.isBeta();\nexport const storeListDefaults = {\n    rows: [],\n    status: {},\n    metadata: {\n        limit: 25,\n        offset: 0,\n        total_items: 0\n    },\n    expandedRows: {},\n    selectedRows: {},\n    queryParams: {\n        page: 1,\n        page_size: 20\n    },\n    error: {}\n};\n\nexport const systemPackagesDefaultFilters = {\n    filter: { updatable: 'true' }\n};\n\nexport const packagesListDefaultFilters = {\n    filter: { systems_updatable: 'gt:0'  }\n};\n\nexport const publicDateOptions = [\n    { apiValue: '', label: 'All', value: 'all' },\n    {\n        apiValue: `gt:${subtractDate(7)}`,\n        label: 'Last 7 days',\n        value: 'last7'\n    },\n    {\n        apiValue: `gt:${subtractDate(30)}`,\n        label: 'Last 30 days',\n        value: 'last30'\n    },\n    {\n        apiValue: `gt:${subtractDate(90)}`,\n        label: 'Last 90 days',\n        value: 'last90'\n    },\n    {\n        apiValue: `gt:${subtractDate(365)}`,\n        label: 'Last year',\n        value: 'lastYear'\n    },\n    {\n        apiValue: `lt:${subtractDate(365)}`,\n        label: 'More than 1 year ago',\n        value: 'moreThanYear'\n    }\n];\n\nexport const advisorySeverities = [\n    {\n        value: 0,\n        label: 'N/A',\n        color: 'var(--pf-global--Color--200)'\n    },\n    {\n        value: 1,\n        label: 'Low',\n        color: 'var(--pf-global--Color--200)',\n        text:\n            'This rating is given to all other issues that have a security impact. These are the types of vulnerabilities' +\n            ' that are believed to require unlikely circumstances to be able to be exploited, or where a successful exploit' +\n            ' would give minimal consequences.'\n    },\n    {\n        value: 2,\n        label: 'Moderate',\n        color: 'var(--pf-global--warning-color--100)',\n        text:\n            'This rating is given to flaws that may be more difficult to exploit but could still lead to some' +\n            ' compromise of the confidentiality, integrity, or availability of resources, under certain circumstances.' +\n            ' These are the types of vulnerabilities that could have had a Critical impact or Important impact' +\n            ' but are less easily exploited based on a technical evaluation of the flaw, or affect unlikely' +\n            ' configurations.'\n    },\n    {\n        value: 3,\n        label: 'Important',\n        color: '#ec7a08',\n        text:\n            'This rating is given to flaws that can easily compromise the confidentiality, integrity, or availability' +\n            ' of resources. These are the types of vulnerabilities that allow local users to gain privileges, allow' +\n            ' unauthenticated remote users to view resources that should otherwise be protected by authentication,' +\n            ' allow authenticated remote users to execute arbitrary code, or allow remote users to cause a denial' +\n            ' of service.'\n    },\n    {\n        value: 4,\n        label: 'Critical',\n        color: 'var(--pf-global--danger-color--100)',\n        text:\n            'This rating is given to flaws that could be easily exploited by a remote unauthenticated attacker' +\n            ' and lead to system compromise (arbitrary code execution) without requiring user interaction.' +\n            ' These are the types of vulnerabilities that can be exploited by worms. Flaws that require an authenticated' +\n            ' remote user, a local user, or an unlikely configuration are not classed as Critical impact.'\n    }\n];\n\nexport const advisoryTypes = [\n    {\n        value: 3,\n        label: 'Security',\n        icon: <SecurityIcon />\n    },\n    {\n        value: 2,\n        label: 'Bugfix',\n        icon: <BugIcon />\n    },\n    {\n        value: 1,\n        label: 'Enhancement',\n        icon: <EnhancementIcon />\n    }\n];\n\nexport const updatableTypes = [\n    {\n        value: '',\n        label: 'All'\n    },\n    {\n        value: true,\n        label: 'Upgradable'\n    }\n];\n\nexport const packagesListUpdatableTypes = [\n    {\n        value: '',\n        label: 'All'\n    },\n    {\n        value: 'gt:0',\n        label: 'Upgradable'\n    }\n];\n\nexport const filterCategories = {\n    advisory_type: {\n        label: 'Advisory type',\n        values: advisoryTypes\n    },\n    public_date: {\n        label: 'Public date',\n        values: publicDateOptions\n    },\n    updatable: {\n        label: 'Status',\n        values: updatableTypes\n    },\n    systems_updatable: {\n        label: 'Status',\n        values: packagesListUpdatableTypes\n    }\n};\n\nexport const entityTypes = {\n    advisories: 'advisories',\n    packages: 'packages'\n};\n\nexport const ReadOnlyNotification = {\n    title: 'title',\n    detail: 'message'\n};\n\nexport const remediationIdentifiers = {\n    package: 'patch-package',\n    advisory: 'patch-advisory'\n};\n","export const FETCH_APPLICABLE_ADVISORIES = 'FETCH_APPLICABLE_ADVISORIES';\nexport const EXPAND_ADVISORY_ROW = 'EXPAND_ADVISORY_ROW';\nexport const SELECT_ADVISORY_ROW = 'SELECT_ADVISORY_ROW';\nexport const CHANGE_ADVISORY_LIST_PARAMS = 'CHANGE_ADVISORY_LIST_PARAMS';\nexport const CHANGE_SYSTEM_ADVISORY_LIST_PARAMS =\n    'CHANGE_SYSTEM_SYSTEMS_LIST_PARAMS';\nexport const EXPAND_SYSTEM_ADVISORY_ROW = 'EXPAND_SYSTEM_ADVISORY_ROW';\nexport const FETCH_APPLICABLE_SYSTEM_ADVISORIES =\n    'FETCH_APPLICABLE_SYSTEM_ADVISORIES';\nexport const SELECT_SYSTEM_ADVISORY_ROW = 'SELECT_SYSTEM_ADVISORY_ROW';\nexport const CLEAR_SYSTEM_ADVISORIES = 'CLEAR_SYSTEM_ADVISORIES';\nexport const FETCH_ADVISORY_DETAILS = 'FETCH_ADVISORY_DETAILS';\nexport const CLEAR_ADVISORY_DETAILS = 'CLEAR_ADVISORY_DETAILS';\nexport const CHANGE_SYSTEM_PACKAGES_LIST_PARAMS =\n    'CHANGE_SYSTEM_PACKAGES_LIST_PARAMS';\nexport const FETCH_APPLICABLE_SYSTEM_PACKAGES =\n    'FETCH_APPLICABLE_SYSTEM_PACKAGES';\nexport const SELECT_SYSTEM_PACKAGES_ROW = 'SELECT_SYSTEM_PACKAGES_ROW';\nexport const CLEAR_SYSTEM_PACKAGES = 'CLEAR_SYSTEM_PACKAGES';\nexport const TRIGGER_GLOBAL_FILTER = 'TRIGGER_GLOBAL_FILTER';\nexport const FETCH_PACKAGES_LIST = 'FETCH_PACKAGES_LIST';\nexport const FETCH_PACKAGE_DETAILS = 'FETCH_PACKAGE_DETAILS';\nexport const CLEAR_PACKAGE_DETAILS = 'CLEAR_PACKAGE_DETAILS';\nexport const CHANGE_PACKAGES_LIST_PARAMS = 'CHANGE_PACKAGES_LIST_PARAMS';\nexport const FETCH_PACKAGE_SYSTEMS = 'FETCH_PACKAGE_SYSTEMS';\nexport const CLEAR_PACKAGE_SYSTEMS = 'CLEAR_PACKAGE_SYSTEMS';\nexport const CHANGE_PACKAGE_SYSTEMS_PARAMS = 'CHANGE_PACKAGE_SYSTEMS_PARAMS';\nexport const FETCH_CVES_INFO = 'FETCH_CVES_INFO';\nexport const CHANGE_CVES_STORE_PARAMS = 'CHANGE_CVES_STORE_PARAMS';\nexport const FETCH_SYSTEM_DETAIL = 'FETCH_SYSTEM_DETAIL';\nexport const CLEAR_ENTITIES = 'CLEAR_ENTITIES';\nexport const CHANGE_ENTITIES_PARAMS = 'CHANGE_ENTITIES_PARAMS';\n","import { fetchAdvisoryDetailsApi, fetchApplicableAdvisoriesApi,\n    fetchApplicablePackagesApi, fetchApplicableSystemAdvisoriesApi, fetchPackageDetailsApi,\n    fetchPackagesList, fetchPackageSystems, fetchSystems, fetchCvesInfo, fetchSystemDetails } from '../../Utilities/api';\nimport * as ActionTypes from '../ActionTypes';\n\nexport const fetchApplicableAdvisories = params => ({\n    type: ActionTypes.FETCH_APPLICABLE_ADVISORIES,\n    payload: new Promise(resolve => {\n        resolve(fetchApplicableAdvisoriesApi(params));\n    }).then(result => result)\n});\n\nexport const fetchApplicableSystemAdvisories = params => ({\n    type: ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES,\n    payload: new Promise(resolve => {\n        resolve(fetchApplicableSystemAdvisoriesApi(params));\n    }).then(result => result),\n    meta: {\n        noError: true // Handle errors manually!\n    }\n});\n\nexport const fetchAvisoryDetails = params => ({\n    type: ActionTypes.FETCH_ADVISORY_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(fetchAdvisoryDetailsApi(params));\n    }).then(result => result)\n});\n\nexport const fetchPackageDetails = params => ({\n    type: ActionTypes.FETCH_PACKAGE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(fetchPackageDetailsApi(params));\n    }).then(result => result)\n});\n\nexport const fetchSystemsAction = params => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(fetchSystems(params));\n    }).then(result => result)\n});\n\nexport const changeAdvisoryListParams = params => ({\n    type: ActionTypes.CHANGE_ADVISORY_LIST_PARAMS,\n    payload: params\n});\n\nexport const changeSystemAdvisoryListParams = params => ({\n    type: ActionTypes.CHANGE_SYSTEM_ADVISORY_LIST_PARAMS,\n    payload: params\n});\n\nexport const changeAdvisorySystemsParams = params => ({\n    type: ActionTypes.CHANGE_AFFECTED_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const expandAdvisoryRow = rowState => ({\n    type: ActionTypes.EXPAND_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const expandSystemAdvisoryRow = rowState => ({\n    type: ActionTypes.EXPAND_SYSTEM_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const selectAdvisoryRow = rowState => ({\n    type: ActionTypes.SELECT_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const selectSystemAdvisoryRow = rowState => ({\n    type: ActionTypes.SELECT_SYSTEM_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const clearSystemAdvisoriesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_ADVISORIES,\n    payload: []\n});\n\nexport const clearSystemPackagesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_PACKAGES,\n    payload: []\n});\n\nexport const clearAdvisoryDetailStore = () => ({\n    type: ActionTypes.CLEAR_ADVISORY_DETAILS,\n    payload: []\n});\n\nexport const clearPackageDetailStore = () => ({\n    type: ActionTypes.CLEAR_ADVISORY_DETAILS,\n    payload: []\n});\n\nexport const fetchPackageSystemsAction = params => ({\n    type: ActionTypes.FETCH_PACKAGE_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(fetchPackageSystems(params));\n    }).then(result => result)\n});\n\nexport const clearPackageSystemsStore = () => ({\n    type: ActionTypes.CLEAR_PACKAGE_SYSTEMS,\n    payload: []\n});\n\nexport const fetchApplicableSystemPackages = params => ({\n    type: ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES,\n    payload: new Promise(resolve => {\n        resolve(fetchApplicablePackagesApi(params));\n    }).then(result => result)\n});\n\nexport const selectSystemPackagesRow = rowState => ({\n    type: ActionTypes.SELECT_SYSTEM_PACKAGES_ROW,\n    payload: rowState\n});\n\nexport const changeSystemPackagesParams = params => ({\n    type: ActionTypes.CHANGE_SYSTEM_PACKAGES_LIST_PARAMS,\n    payload: params\n});\n\nexport const globalFilter = params => ({\n    type: ActionTypes.TRIGGER_GLOBAL_FILTER,\n    payload: params\n});\n\nexport const fetchPackagesAction = params => ({\n    type: ActionTypes.FETCH_PACKAGES_LIST,\n    payload: new Promise(resolve => {\n        resolve(fetchPackagesList(params));\n    }).then(result => result)\n});\n\nexport const changePackagesListParams = params => ({\n    type: ActionTypes.CHANGE_PACKAGES_LIST_PARAMS,\n    payload: params\n});\n\nexport const changePackageSystemsParams = params => ({\n    type: ActionTypes.CHANGE_PACKAGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const fetchCves = (params) => ({\n    type: ActionTypes.FETCH_CVES_INFO,\n    payload: new Promise(resolve => {\n        resolve(fetchCvesInfo(params));\n    }).then(result => result)\n});\n\nexport const changeCvesListParams = params => ({\n    type: ActionTypes.CHANGE_CVES_STORE_PARAMS,\n    payload: params\n});\n\nexport const fetchSystemDetailsAction = params => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAIL,\n    payload: new Promise(resolve => {\n        resolve(fetchSystemDetails(params));\n    }).then(result => result)\n});\n\nexport const clearEntitiesStore = () => ({\n    type: ActionTypes.CLEAR_ENTITIES,\n    payload: []\n});\n\nexport const changeEntitiesParams = params => ({\n    type: ActionTypes.CHANGE_ENTITIES_PARAMS,\n    payload: params\n});\n","import { addOrRemoveItemFromSet, changeListParams, getNewSelectedItems } from '../../Utilities/Helpers';\n\nexport const changeFilters = (state, action) => {\n    state.queryParams = changeListParams(\n        state.queryParams,\n        action.payload\n    );\n\n    return state;\n};\n\nexport const selectRows = (state, action) => {\n    const selectedUpdated = getNewSelectedItems(action.payload, state.selectedRows);\n    state = { ...state, selectedRows: selectedUpdated };\n    return state;\n};\n\nexport const expandRows = (state, action) => {\n    const expandedUpdated = addOrRemoveItemFromSet(\n        state.expandedRows,\n        [].concat(action.payload)\n    );\n    state = { ...state, expandedRows: expandedUpdated };\n    return state;\n};\n\nexport const fetchPending = (state) => {\n    state.error = {};\n    state.status = { isLoading: true, hasError: false, code: undefined };\n    return state;\n};\n\nexport const fetchRejected = (state, action) => {\n    state.metadata = action.payload.meta || {};\n    state.error = action.payload;\n    state.status = { code: action.payload.status, isLoading: false, hasError: true };\n    return state;\n};\n\nexport const fetchFulfilled = (state, action) => {\n    state.rows = action.payload.data;\n    state.metadata = action.payload.meta || {};\n    state.error = {};\n    state.status = { code: action.payload.status, isLoading: false, hasError: false };\n    return state;\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    selectRows,\n    fetchPending,\n    fetchRejected,\n    fetchFulfilled,\n    expandRows\n} from './HelperReducers';\n\nexport const SystemAdvisoryListStore = (state = storeListDefaults, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_SYSTEM_ADVISORY_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.EXPAND_SYSTEM_ADVISORY_ROW:\n            return expandRows(newState, action);\n\n        case ActionTypes.SELECT_SYSTEM_ADVISORY_ROW:\n            return selectRows(newState, action);\n\n        case ActionTypes.CLEAR_SYSTEM_ADVISORIES:\n            return storeListDefaults;\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults, systemPackagesDefaultFilters } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport { changeFilters, fetchFulfilled, fetchPending, fetchRejected, selectRows } from './HelperReducers';\n\nlet initializeState = { queryParams: systemPackagesDefaultFilters };\n\nexport const SystemPackageListStore = (state = { ...storeListDefaults, ...initializeState }, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_SYSTEM_PACKAGES_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.SELECT_SYSTEM_PACKAGES_ROW:\n            return selectRows(newState, action);\n\n        case ActionTypes.CLEAR_SYSTEM_PACKAGES:\n            return { ...storeListDefaults, ...initializeState };\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n"],"sourceRoot":""}