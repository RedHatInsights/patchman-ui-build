{"version":3,"file":"js/CvesModal.0482c9735f5bc4b7451b.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/TableView/TableFooter.js","webpack:///./src/PresentationalComponents/TableView/TableView.js","webpack:///./src/PresentationalComponents/TableView/TableViewAssets.js","webpack:///./src/SmartComponents/AdvisoryDetail/CvesModal.js"],"sourcesContent":["import { Pagination, PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport TableToolbar from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TableFooter = ({ isLoading, page, perPage, onSetPage, totalItems, onPerPageSelect, paginationOUIA }) => {\n    return (\n        <TableToolbar isFooter>\n            {isLoading ? (\n                <div className=\"pf-v5-c-pagination pf-m-bottom\">\n                    <Skeleton fontSize=\"xl\" width=\"350px\" style={{ margin: 10 }} />\n                </div>\n            ) :\n                <Pagination\n                    itemCount={totalItems}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    widgetId={`pagination-options-menu-bottom`}\n                    variant={PaginationVariant.bottom}\n                    ouiaId={paginationOUIA}\n                    isDisabled={totalItems === 0}\n                />\n            }\n        </TableToolbar>\n    );\n};\n\nTableFooter.propTypes = {\n    isLoading: PropTypes.bool,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalItems: PropTypes.number,\n    paginationOUIA: PropTypes.string\n};\n\nexport default TableFooter;\n","import {\n    TableVariant\n} from '@patternfly/react-table';\nimport {\n    Table,\n    TableBody,\n    TableHeader\n} from '@patternfly/react-table/deprecated';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport AsyncRemediationButton from '../../SmartComponents/Remediation/AsyncRemediationButton';\nimport { arrayFromObj, buildFilterChips, convertLimitOffset } from '../../Utilities/Helpers';\nimport { useRemoveFilter, useBulkSelectConfig } from '../../Utilities/hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableFooter from './TableFooter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { Skeleton, ToolbarItem } from '@patternfly/react-core';\n\nconst TableView = ({\n    columns,\n    store: {\n        rows,\n        metadata,\n        status,\n        queryParams: { filter, search }\n    },\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    onExport,\n    filterConfig,\n    sortBy,\n    remediationProvider,\n    selectedRows,\n    compact,\n    apply,\n    tableOUIA,\n    paginationOUIA,\n    errorState,\n    emptyState,\n    defaultFilters,\n    searchChipLabel,\n    ToolbarButton,\n    actionsConfig,\n    isRemediationLoading,\n    actionsToggle\n}) => {\n\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n\n    const [deleteFilters] = useRemoveFilter(filter, apply, defaultFilters);\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n    const { code, hasError, isLoading } = status;\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, metadata, rows, onCollapse);\n\n    return (\n        <React.Fragment>\n            {\n                (<React.Fragment>\n                    {(hasError || metadata.has_systems === false)\n                        ? <ErrorHandler code={code} ErrorState={errorState} EmptyState={emptyState} metadata={metadata} />\n                        : <React.Fragment>\n                            <PrimaryToolbar\n                                pagination={isLoading\n                                    ? <Skeleton fontSize=\"xl\" width=\"200px\" style={{ margin: 10 }} />\n                                    : {\n                                        itemCount: metadata.total_items,\n                                        page,\n                                        perPage,\n                                        isCompact: true,\n                                        onSetPage,\n                                        onPerPageSelect,\n                                        ouiaId: `top-${paginationOUIA}`,\n                                        isDisabled: metadata.total_items === 0\n                                    }}\n                                filterConfig={filterConfig}\n                                activeFiltersConfig={{\n                                    filters: buildFilterChips(filter, search, searchChipLabel),\n                                    onDelete: deleteFilters,\n                                    deleteTitle: intl.formatMessage(defaultFilters\n                                        && messages.labelsFiltersReset || messages.labelsFiltersClear)\n                                }}\n                                actionsConfig={{\n                                    actions: [remediationProvider && (\n                                        <AsyncRemediationButton\n                                            remediationProvider={remediationProvider}\n                                            isDisabled={\n                                                Object.values(selectedRows).filter(isSelected => isSelected).length === 0\n                                                || isRemediationLoading\n                                            }\n                                            isLoading={isRemediationLoading}\n                                        />\n                                    )]\n                                }}\n                                exportConfig={{\n                                    isDisabled: metadata.total_items === 0,\n                                    onSelect: onExport\n                                }}\n                                bulkSelect={onSelect && bulkSelectConfig}\n                            >\n                                {ToolbarButton && <ToolbarItem>\n                                    <ToolbarButton />\n                                </ToolbarItem>}\n                            </PrimaryToolbar>\n                            {isLoading\n                                ? <SkeletonTable\n                                    numberOfColumns={columns?.length ?? 5}\n                                    rows={20}\n                                    variant={compact && TableVariant.compact}\n                                />\n                                : <Table\n                                    aria-label=\"Patch table view\"\n                                    cells={columns}\n                                    onSelect={metadata.total_items && onSelect}\n                                    rows={rows}\n                                    onCollapse={metadata.total_items && onCollapse}\n                                    canSelectAll={false}\n                                    onSort={metadata.total_items && onSort}\n                                    ouiaId={tableOUIA}\n                                    sortBy={metadata.total_items && sortBy}\n                                    isStickyHeader\n                                    variant={compact && TableVariant.compact}\n                                    actions={actionsConfig}\n                                    actionsToggle={actionsToggle}\n                                >\n                                    <TableHeader />\n                                    <TableBody />\n                                </Table>\n                            }\n                            <TableFooter\n                                isLoading={isLoading}\n                                totalItems={metadata.total_items}\n                                perPage={perPage}\n                                page={page}\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                paginationOUIA={`bottom-${paginationOUIA}`}\n                            />\n                        </React.Fragment>\n                    }\n                </React.Fragment>)\n            }\n        </React.Fragment>\n    );\n};\n\nTableView.propTypes = {\n    columns: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    onExport: PropTypes.func,\n    remediationProvider: PropTypes.func,\n    selectedRows: PropTypes.object,\n    apply: PropTypes.func,\n    sortBy: PropTypes.object,\n    filterConfig: PropTypes.object,\n    store: PropTypes.object,\n    compact: PropTypes.bool,\n    tableOUIA: PropTypes.string,\n    paginationOUIA: PropTypes.string,\n    errorState: PropTypes.element,\n    emptyState: PropTypes.element,\n    defaultFilters: PropTypes.object,\n    searchChipLabel: PropTypes.string,\n    ToolbarButton: PropTypes.elementType,\n    actionsConfig: PropTypes.array,\n    isRemediationLoading: PropTypes.bool,\n    actionsToggle: PropTypes.func\n};\n\nexport default TableView;\n","import { cellWidth, expandable, sortable } from '@patternfly/react-table';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nexport const advisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSynopsis),\n        transforms: [sortable],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsAffectedSystems),\n        transforms: [sortable, cellWidth(15)],\n        key: 'applicable_systems'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(15)],\n        key: 'public_date'\n    }\n];\n\nexport const systemAdvisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: 'Synopsis',\n        transforms: [sortable, cellWidth(35)],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [sortable, cellWidth(10)],\n        key: 'status'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable, cellWidth(10)],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(10)],\n        key: 'public_date'\n    }\n];\n\nexport const systemPackagesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(20)],\n        key: 'name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsInstalledVersion),\n        transforms: [sortable, cellWidth(15)],\n        key: 'evra'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsLatestInstallableVersion),\n        transforms: [cellWidth(15)],\n        key: 'latest_installable_version'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsLatestApplicableVersion),\n        transforms: [cellWidth(15)],\n        key: 'latest_applicable_version'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [sortable, cellWidth(10)],\n        key: 'update_status'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        key: 'summary'\n    }\n];\n\nexport const packagesColumns = [\n    {\n        key: 'name',\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(25)]\n    },\n    {\n        key: 'systems_installed',\n        title: intl.formatMessage(messages.labelsColumnsInstalledSystems),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'systems_applicable',\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'systems_installable',\n        title: intl.formatMessage(messages.labelsColumnsInstallableSystems),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'summary',\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        props: {\n            width: 30\n        }\n    }\n];\n\nexport const cvesTableColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsCveID),\n        transforms: [sortable, cellWidth(40)],\n        key: 'synopsis'\n    },\n    {\n        key: 'impact',\n        title: intl.formatMessage(messages.labelsColumnsSeverity),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    },\n    {\n        key: 'cvss',\n        title: intl.formatMessage(messages.labelsColumnsCVSS),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    }\n];\n","import React, { useState, useMemo } from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport { cvesTableColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCves } from '../../store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport { createCvesRows } from '../../Utilities/DataMappers';\nimport { sortCves } from '..//../Utilities/Helpers';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst CvesModal = ({ cveIds }) =>{\n    const dispatch = useDispatch();\n    const [cves, setCves] = useState([]);\n    const [rows, setRows] = useState([]);\n    const [page, setPage] = useState(1);\n    const [perPage, setPerPage] = useState(10);\n    const [search, setSearch] = useState(undefined);\n    const [sortBy, setSortBy] = useState({\n        direction: SortByDirection.asc,\n        index: 0\n    });\n\n    const data = useSelector(({ CvesListStore }) => CvesListStore.rows);\n\n    const status = useSelector(\n        ({ CvesListStore }) => CvesListStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchCves({ cveIds }));\n    }, []);\n\n    React.useMemo(() => {\n        setRows(cves.slice((page - 1) * perPage, page * perPage));\n    }, [cves, page, perPage, sortBy]);\n\n    useMemo(() => {\n        const sortedCves = (search !== undefined && search !== '')\n            && data.filter(\n                cve => {\n                    const { attributes: { synopsis } } = cve;\n                    return synopsis && search && (synopsis.toLowerCase().includes(search.toLowerCase()));\n                }\n            ) || data;\n\n        setCves(createCvesRows((sortedCves.length !== 0 || search) && sortedCves || data));\n    }, [search, data]);\n\n    const handleClose = () => {\n        setRows(undefined);\n    };\n\n    const handleFilter = ({ search }) =>{\n        setPage(page);\n        setSearch(search);\n    };\n\n    const handlePageChange = (_, page) => {\n        setPage(page);\n    };\n\n    const handlePerPageChange = (_, perPage) => {\n        setPage(1);\n        setPerPage(perPage);\n    };\n\n    const handleSort = (_, index, direction) => {\n        const { sortBy, sortedCves } = sortCves(cves, index, direction);\n\n        setSortBy(sortBy);\n        setCves(sortedCves);\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant='small'\n                title={intl.formatMessage(messages.labelsCves)}\n                isOpen={Boolean(rows)}\n                onClose={handleClose}\n            >\n                <TableView\n                    columns={cvesTableColumns}\n                    onSetPage={handlePageChange}\n                    onPerPageSelect={handlePerPageChange}\n                    apply={handleFilter}\n                    tableOUIA={'cves-table'}\n                    paginationOUIA={'cves-pagination'}\n                    onSort={handleSort}\n                    sortBy={sortBy}\n                    store={{\n                        rows,\n                        metadata: { limit: perPage, offset: (page - 1) * perPage, total_items: cves && cves.length },\n                        status, queryParams: { filter: {}, search }\n                    }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(handleFilter, search, '',\n                                intl.formatMessage(messages.labelsFiltersCvesSearchPlaceHolder))\n                        ]\n                    }}\n                />\n            </Modal>\n        </React.Fragment>\n    );\n\n};\n\nCvesModal.propTypes = {\n    cveIds: propTypes.array\n};\n\nexport default CvesModal;\n"],"names":["TableFooter","_ref","isLoading","page","perPage","onSetPage","totalItems","onPerPageSelect","paginationOUIA","React","TableToolbar","isFooter","className","Skeleton","fontSize","width","style","margin","Pagination","itemCount","widgetId","variant","PaginationVariant","bottom","ouiaId","isDisabled","propTypes","PropTypes","TableView","_columns$length","columns","_ref$store","store","rows","metadata","status","_ref$store$queryParam","queryParams","filter","search","onCollapse","onSelect","onSort","onExport","filterConfig","sortBy","remediationProvider","selectedRows","compact","apply","tableOUIA","errorState","emptyState","defaultFilters","searchChipLabel","ToolbarButton","actionsConfig","isRemediationLoading","actionsToggle","_React$useMemo","convertLimitOffset","limit","offset","_React$useMemo2","_slicedToArray","_useRemoveFilter","useRemoveFilter","deleteFilters","selectedCount","arrayFromObj","length","code","hasError","bulkSelectConfig","useBulkSelectConfig","has_systems","ErrorHandler","ErrorState","EmptyState","PrimaryToolbar","pagination","total_items","isCompact","concat","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","intl","formatMessage","messages","labelsFiltersReset","labelsFiltersClear","actions","AsyncRemediationButton","Object","values","isSelected","exportConfig","bulkSelect","ToolbarItem","SkeletonTable","numberOfColumns","TableVariant","Table","cells","canSelectAll","isStickyHeader","TableHeader","TableBody","advisoriesColumns","title","labelsColumnsName","cellFormatters","expandable","transforms","sortable","cellWidth","key","labelsColumnsSynopsis","labelsColumnsType","labelsColumnsAffectedSystems","labelsColumnsReboot","labelsColumnsPublishDate","systemAdvisoriesColumns","labelsColumnsStatus","systemPackagesColumns","labelsColumnsInstalledVersion","labelsColumnsLatestInstallableVersion","labelsColumnsLatestApplicableVersion","labelsColumnsSummary","packagesColumns","labelsColumnsInstalledSystems","props","labelsColumnsApplicableSystems","labelsColumnsInstallableSystems","cvesTableColumns","labelsColumnsCveID","labelsColumnsSeverity","labelsColumnsCVSS","CvesModal","cveIds","dispatch","useDispatch","_useState","useState","_useState2","cves","setCves","_useState3","_useState4","setRows","_useState5","_useState6","setPage","_useState7","_useState8","setPerPage","_useState9","undefined","_useState10","setSearch","_useState11","direction","SortByDirection","asc","index","_useState12","setSortBy","data","useSelector","_ref2","CvesListStore","_ref3","fetchCves","slice","useMemo","sortedCves","cve","synopsis","attributes","toLowerCase","includes","createCvesRows","handleFilter","_ref4","Modal","labelsCves","isOpen","Boolean","onClose","_","_sortCves","sortCves","items","searchFilter","labelsFiltersCvesSearchPlaceHolder"],"sourceRoot":""}