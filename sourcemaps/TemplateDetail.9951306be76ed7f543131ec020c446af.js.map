{"version":3,"file":"js/TemplateDetail.69cdcb56b12174d4f0c6.js","mappings":"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","sources":["webpack:///./src/SmartComponents/Modals/DeleteSetModal.js","webpack:///./src/SmartComponents/PatchSetDetail/PatchSetDetailAssets.js","webpack:///./src/SmartComponents/PatchSetDetail/PatchSetDetail.js"],"sourcesContent":["import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Checkbox, Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst DeleteSetModal = ({ isModalOpen, setModalOpen, templateName, onConfirm }) => {\n    const [isCheckboxChecked, setCheckboxChecked] = useState(false);\n\n    const onClose = () => {\n        setModalOpen(false);\n        setCheckboxChecked(false);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.titlesTemplateDeleteModalTitle)}\n            titleIconVariant=\"warning\"\n            isOpen={isModalOpen}\n            onClose={onClose}\n            variant=\"small\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={() => {onClose(); onConfirm();}} isDisabled={!isCheckboxChecked}>\n                    {intl.formatMessage(messages.labelsDelete)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {intl.formatMessage(messages.titlesTemplateDeleteModalText, { templateName, b: (...chunks) => <b>{chunks}</b> })}\n            <Checkbox\n                className=\"pf-u-mt-md\"\n                isChecked={isCheckboxChecked}\n                checked={isCheckboxChecked}\n                onChange={(value) => setCheckboxChecked(value)}\n                label={intl.formatMessage(messages.titlesTemplateDeleteModalCheckbox)}\n                id=\"template-delete-modal-checkbox\"\n            />\n        </Modal>\n    );\n};\n\nDeleteSetModal.propTypes = {\n    isModalOpen: propTypes.bool,\n    setModalOpen: propTypes.func,\n    templateName: propTypes.string,\n    onConfirm: propTypes.func\n};\n\nexport default DeleteSetModal;\n","import { sortable } from '@patternfly/react-table/dist/js';\n\nexport const patchSetDetailColumns = [\n    {\n        key: 'name',\n        title: 'Name',\n        transforms: [sortable]\n    },\n    {\n        key: 'operating_system',\n        title: 'OS',\n        transforms: [sortable]\n    },\n    {\n        key: 'tags',\n        title: 'Tags',\n        transforms: [sortable]\n    },\n    {\n        key: 'last_seen',\n        title: 'Last seen',\n        transforms: [sortable]\n    }\n];\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect, useState, Fragment, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { NoAppliedSystems, NoSmartManagement } from '../../PresentationalComponents/Snippets/EmptyStates';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { useDeepCompareEffect, useEntitlements, usePerPageSelect, useSetPage, useSortColumn } from '../../Utilities/Hooks';\nimport {\n    changePatchSetDetailsSystemsParams,\n    clearTemplateDetail,\n    fetchPatchSetDetailSystemsAction,\n    fetchTemplateDetail\n} from '../../store/Actions/Actions';\nimport { Dropdown, DropdownItem, DropdownPosition, DropdownToggle, Skeleton, Text, TextContent } from '@patternfly/react-core';\nimport DeleteSetModal from '../Modals/DeleteSetModal';\nimport { deletePatchSet } from '../../Utilities/api';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { patchSetDeleteNotifications } from '../../Utilities/constants';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { patchSetDetailColumns } from './PatchSetDetailAssets';\nimport { createPatchSetDetailRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams } from '../../Utilities/Helpers';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\n\nconst PatchSetDetail = () => {\n    const getEntitlements = useEntitlements();\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const patchSetId = history.location.pathname.split('/')[2];\n\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [isHeaderDropdownOpen, setHeaderDropdownOpen] = useState(false);\n    const [hasSmartManagement, setSmartManagement] = React.useState(true);\n    const [isDeleteConfirmModalOpen, setDeleteConfirmModalOpen] = useState(false);\n    const [wizardState, setWizardState] = useState({\n        isPatchSetWizardOpen: false,\n        systemsIDs: [],\n        shouldRefresh: false\n    });\n\n    const templateDetails = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore\n    );\n\n    const isHeaderLoading = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore?.status?.isLoading ?? true\n    );\n\n    const status = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore.status\n    );\n\n    const assignedSystems = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore.rows\n    );\n\n    const metadata = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore.metadata\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore.queryParams\n    );\n\n    const rows = useMemo(\n        () => createPatchSetDetailRows(assignedSystems),\n        [assignedSystems]\n    );\n\n    const { hasError, code } = status;\n\n    const patchSetName = templateDetails.data.attributes.name;\n\n    const apply = (params) => {\n        dispatch(changePatchSetDetailsSystemsParams(params));\n    };\n\n    const onSetPage = useSetPage(metadata?.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const onSort = useSortColumn(patchSetDetailColumns, apply, 0);\n    const sortBy = useMemo(\n        () => createSortBy(patchSetDetailColumns, metadata?.sort, 0),\n        [metadata?.sort]\n    );\n\n    const openPatchSetAssignWizard = () => {\n        setWizardState({\n            isPatchSetWizardOpen: true\n        });\n    };\n\n    const refreshTable = () => {\n        dispatch(fetchPatchSetDetailSystemsAction(patchSetId, { ...queryParams, page: 1, offset: 0 }));\n        dispatch(fetchTemplateDetail(patchSetId));\n    };\n\n    // const handleSystemRemoval = useUnassignSystemsHook();\n\n    // const actionsConfig = patchSetDetailRowActions(handleSystemRemoval);\n\n    useEffect(() => {\n        getEntitlements().then((entitelements) => {\n            setSmartManagement(\n                entitelements?.smart_management?.is_entitled\n            );\n        });\n\n        return () => {\n            dispatch(changePatchSetDetailsSystemsParams());\n            dispatch(clearTemplateDetail());\n        };\n    }, []);\n\n    useEffect(() => {\n        if (wizardState.shouldRefresh === true) {\n            refreshTable();\n        }\n    }, [wizardState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n\n            dispatch(fetchTemplateDetail(patchSetId));\n\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n\n            dispatch(fetchPatchSetDetailSystemsAction(patchSetId, queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const deleteSet = () => {\n        deletePatchSet(patchSetId).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).success));\n            history.push('/templates');\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).error));\n        });\n    };\n\n    const dropdownItems = [\n        <DropdownItem\n            key=\"edit-patch-set\"\n            component=\"button\"\n            onClick={() => openPatchSetAssignWizard()}\n        >\n            {intl.formatMessage(messages.labelsButtonEditTemplate)}\n        </DropdownItem>,\n        <DropdownItem\n            key=\"delete-patch-set\"\n            component=\"button\"\n            onClick={() => setDeleteConfirmModalOpen(true)}\n        >\n            {intl.formatMessage(messages.labelsButtonRemoveTemplate)}\n        </DropdownItem>\n    ];\n\n    return (\n        (hasError || metadata?.has_systems === false)\n            ? <ErrorHandler code={code} metadata={status.metadata} />\n            : <Fragment>\n                <DeleteSetModal\n                    templateName={patchSetName}\n                    isModalOpen={isDeleteConfirmModalOpen}\n                    setModalOpen={setDeleteConfirmModalOpen}\n                    onConfirm={deleteSet}\n                />\n                {wizardState.isPatchSetWizardOpen &&\n                <PatchSetWizard\n                    systemsIDs={wizardState.systemsIDs}\n                    setBaselineState={setWizardState}\n                    patchSetID={patchSetId}\n                />}\n                <Header\n                    title={isHeaderLoading ? <Skeleton style={{ width: 300 }} /> : patchSetName}\n                    headerOUIA={'template-details'}\n                    breadcrumbs={[\n                        {\n                            title: intl.formatMessage(messages.templateDetailHeaderBreadcrumb),\n                            to: '/templates',\n                            isActive: false\n                        },\n                        {\n                            title: isHeaderLoading ? <Skeleton style={{ width: 150 }} /> : patchSetName,\n                            isActive: true\n                        }\n                    ]}\n                    actions={\n                        <Dropdown\n                            position={DropdownPosition.right}\n                            onSelect={() => {\n                                setHeaderDropdownOpen(false);\n                                document.getElementById('patch-set-detail-header-kebab').focus();\n                            }}\n                            toggle={\n                                <DropdownToggle\n                                    id=\"patch-set-detail-header-kebab\"\n                                    className=\"pf-u-mr-xl\"\n                                    onToggle={(isOpen) => setHeaderDropdownOpen(isOpen)}\n                                    style={{ minWidth: 150 }}\n                                >\n                                    {intl.formatMessage(messages.labelsActions)}\n                                </DropdownToggle>\n                            }\n                            isOpen={isHeaderDropdownOpen}\n                            dropdownItems={dropdownItems}\n                        />\n                    }\n                >\n                    <table border=\"0\" style={{ marginTop: 8 }}>\n                        <tbody>\n                            <tr>\n                                <td style={{ width: 250 }}>Template description:</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 300 }} />\n                                        : templateDetails.data.attributes.description\n                                        || intl.formatMessage(messages.titlesTemplateNoDescription)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Red Hat repositories up to:</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.config.to_time)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Created by:</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : templateDetails.data.attributes.creator}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Published:</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.published)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Last edited:</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.last_edited)}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </Header>\n                <Main>\n                    <TextContent>\n                        <Text component=\"h2\" className=\"pf-u-mb-md\">\n                            {intl.formatMessage(messages.templateDetailTableTitle)}\n                        </Text>\n                    </TextContent>\n                    {hasSmartManagement ? (rows.length === 0 && !status.isLoading) ? <NoAppliedSystems /> : <TableView\n                        columns={patchSetDetailColumns}\n                        compact\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        onSort={onSort}\n                        sortBy={sortBy}\n                        apply={apply}\n                        tableOUIA={'patch-set-detail-table'}\n                        paginationOUIA={'patch-set-detail-pagination'}\n                        store={{ rows, metadata, status, queryParams }}\n                        /* actionsConfig={actionsConfig} */\n                        searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchTemplateTitle)}\n                    /> : <NoSmartManagement />}\n                </Main>\n            </Fragment >);\n};\n\nexport default PatchSetDetail;\n"],"names":["DeleteSetModal","isModalOpen","setModalOpen","templateName","onConfirm","useState","isCheckboxChecked","setCheckboxChecked","onClose","Modal","title","intl","messages","titleIconVariant","isOpen","variant","actions","Button","key","onClick","isDisabled","b","chunks","Checkbox","className","isChecked","checked","onChange","value","label","id","propTypes","patchSetDetailColumns","transforms","sortable","getEntitlements","useEntitlements","useIntl","dispatch","useDispatch","history","useHistory","patchSetId","location","pathname","split","React","firstMount","setFirstMount","isHeaderDropdownOpen","setHeaderDropdownOpen","hasSmartManagement","setSmartManagement","isDeleteConfirmModalOpen","setDeleteConfirmModalOpen","isPatchSetWizardOpen","systemsIDs","shouldRefresh","wizardState","setWizardState","templateDetails","useSelector","PatchSetDetailStore","isHeaderLoading","status","isLoading","PatchSetDetailSystemsStore","assignedSystems","rows","metadata","queryParams","useMemo","createPatchSetDetailRows","hasError","code","patchSetName","data","attributes","name","apply","params","changePatchSetDetailsSystemsParams","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","onSort","useSortColumn","sortBy","createSortBy","sort","useEffect","then","entitelements","smart_management","is_entitled","clearTemplateDetail","fetchPatchSetDetailSystemsAction","page","offset","fetchTemplateDetail","useDeepCompareEffect","decodeQueryparams","search","push","encodeURLParams","dropdownItems","DropdownItem","component","formatMessage","has_systems","ErrorHandler","Fragment","deletePatchSet","addNotification","patchSetDeleteNotifications","success","error","PatchSetWizard","setBaselineState","patchSetID","Header","Skeleton","style","width","headerOUIA","breadcrumbs","to","isActive","Dropdown","position","DropdownPosition","onSelect","document","getElementById","focus","toggle","DropdownToggle","onToggle","minWidth","border","marginTop","description","processDate","config","to_time","creator","published","last_edited","Main","TextContent","Text","length","TableView","columns","compact","tableOUIA","paginationOUIA","store","searchChipLabel"],"sourceRoot":""}