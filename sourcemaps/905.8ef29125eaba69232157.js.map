{"version":3,"sources":["webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js"],"names":["currentFilter","apply","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","osFilterTypes","reverse","currentValue","os","currentOsVersionsArray","split","filterByOsType","_","value","config","filter","includes","join","onToggle","onViewMoreClick","length","type","conditionalFilterType","label","intl","messages","filterValues","children","variant","SelectVariant","typeAheadAriaLabel","onSelect","selections","placeholderText","loadingVariant","text","onClick","style","maxHeight","overflow","slice","map","option","index","SelectOption","key"],"mappings":"0VAwEA,QAjEwB,WAA+B,IAA9BA,EAA8B,uDAAd,GAAIC,EAAU,uCAEnD,EAA0BC,cAAe,GAAzC,eAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCF,aAAe,IAAnD,eAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAA4BC,aAAsBC,UAE9CC,EAAiBV,EAArBW,GACAC,EAAiD,iBAAjBF,GAA6BA,EAAaG,MAAM,MAAQ,GAExFC,EAAiB,SAACC,EAAGC,GACvB,IAAMC,EAAS,CAAEC,OAAQ,IAErBR,IAAiBA,EAAaS,SAASH,GACvCC,EAAOC,OAAS,CAAEP,GAAI,GAAF,OAAKC,EAAuBQ,KAAK,KAAjC,YAAyCJ,IAExDN,GAAgBA,EAAaS,SAASH,GAC3CC,EAAOC,OAAS,CAAEP,GAAI,GAAF,OAAKC,EAAuBM,QAAO,SAAAP,GAAE,OAAIA,IAAQK,KAAOI,KAAK,OAEjFH,EAAOC,OAAS,CAAEP,GAAIK,GAG1Bf,EAAMgB,IAGJI,EAAW,SAAClB,GACdC,EAAQD,IAGNmB,EAAkB,WACpBhB,EAAcC,EAA0BgB,SAG5C,MACI,CACIC,KAAMC,WACNC,MAAOC,kBAAmBC,4BAC1BZ,MAAO,SACPa,aAAc,CACVC,SACI,kBAAC,KAAD,QACIC,QAASC,yBACTC,mBAAoBN,kBAAmBC,uCACvCP,SAAUA,EACVa,SAAUpB,EACVqB,WAAYvB,EACZT,OAAQA,EACR,kBAAiB,0BACjBiC,gBAAiBT,kBAAmBC,wCAC/BvB,EAAaE,EAA0BgB,QACrC,CAAEc,eAAgB,CAAEC,KAAM,YAAaC,QAASjB,IAV3D,CAWIkB,MAAO,CAAEC,UAAW,QAASC,SAAU,UAEtCnC,EAA0BoC,MAAM,EAAGtC,GAAYuC,KAAI,SAACC,EAAQC,GAAT,OAChD,kBAAC,EAAAC,aAAD,CACIC,IAAKF,EACL9B,MAAO6B,EAAO7B","file":"js/905.92055cae051e3e366fbc.js","sourcesContent":["import React from 'react';\nimport { osFilterTypes } from '../../Utilities/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst osVersionFilter = (currentFilter = {}, apply) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = osFilterTypes.slice().reverse();;\n\n    let { os: currentValue } = currentFilter;\n    const currentOsVersionsArray = typeof currentValue === 'string' && currentValue.split(',') || [];\n\n    const filterByOsType = (_, value) => {\n        const config = { filter: {} };\n\n        if (currentValue && !currentValue.includes(value)) {\n            config.filter = { os: `${currentOsVersionsArray.join(',')},${value}` };\n        }\n        else if (currentValue && currentValue.includes(value)) {\n            config.filter = { os: `${currentOsVersionsArray.filter(os => os !==  value).join(',')}` };\n        } else {\n            config.filter = { os: value };\n        }\n\n        apply(config);\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: intl.formatMessage(messages.labelsFiltersOsVersion),\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={SelectVariant.checkbox}\n                        typeAheadAriaLabel={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        onToggle={onToggle}\n                        onSelect={filterByOsType}\n                        selections={currentOsVersionsArray}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-os-version-filter'}\n                        placeholderText={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        {...(numOptions < versionFromNewestToOldest.length\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                key={index}\n                                value={option.value}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n};\n\nexport default osVersionFilter;\n"],"sourceRoot":""}