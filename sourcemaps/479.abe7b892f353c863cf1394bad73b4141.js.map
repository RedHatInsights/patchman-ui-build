{"version":3,"file":"js/479.1651064201485.9f8d9597be5a97c32228.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js","webpack:///./src/PresentationalComponents/Filters/SystemStaleFilter.js","webpack:///./src/PresentationalComponents/Filters/SystemsUpdatableFilter.js","webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/SelectExistingSets.js","webpack:///./src/SmartComponents/PatchSetWizard/WizardAssets.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ConfigurationFields.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ConfigurationStepFields.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/NameField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ToDateField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/DescriptionField.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewSystems.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewPatchSet.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/RequestProgress.js","webpack:///./src/SmartComponents/PatchSetWizard/PatchSetWizard.js"],"sourcesContent":["import React from 'react';\nimport { osFilterTypes } from '../../Utilities/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst osVersionFilter = (currentFilter = {}, apply) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = osFilterTypes.slice().reverse();;\n\n    let { os: currentValue } = currentFilter;\n    const currentOsVersionsArray = typeof currentValue === 'string' && currentValue.split(',') || [];\n\n    const filterByOsType = (_, value) => {\n        if (currentValue && !currentValue.includes(value)) {\n            apply({ filter: { os: `${currentOsVersionsArray.join(',')},${value}` } });\n        }\n        else if (currentValue && currentValue.includes(value)) {\n            const remainingOs = currentOsVersionsArray.filter(os => os !== value);\n\n            apply({ filter: { os: remainingOs.length > 0 && `${remainingOs.join(',')}` || undefined } });\n        } else {\n            apply({ filter: { os: value !== '' && value || undefined  } });\n        }\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: intl.formatMessage(messages.labelsFiltersOsVersion),\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={SelectVariant.checkbox}\n                        typeAheadAriaLabel={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        onToggle={onToggle}\n                        onSelect={filterByOsType}\n                        selections={currentOsVersionsArray}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-os-version-filter'}\n                        placeholderText={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        {...(numOptions < versionFromNewestToOldest.length\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                key={index}\n                                value={option.value}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n};\n\nexport default osVersionFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { staleSystems } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsStaleFilter = (apply, currentFilter = {}) => {\n\n    let { stale: currentValue } = currentFilter;\n\n    const staleMap = React.useMemo(\n        () =>\n            staleSystems.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n\n    const currentValueStringType = (\n        currentValue\n            && (\n                Array.isArray(currentValue)\n                    && currentValue.map(value => value.toString())\n                    || [currentValue.toString()]\n            )\n    );\n\n    const filterByStale = value => {\n        apply({ filter: { stale: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStale),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStale(value);\n            },\n            items: staleMap,\n            value: currentValueStringType,\n            placeholder: intl.formatMessage(messages.labelsFiltersStalePlaceholder)\n        }\n    };\n};\n\nexport default systemsStaleFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { packagesListUpdatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsUpdatableFilter = (apply, currentFilter = {}) => {\n\n    let { packages_updatable: currentValue } = currentFilter;\n\n    const filterByUpdatableSystems = value => {\n        apply({ filter: { packages_updatable: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersUpdatable),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByUpdatableSystems(value);\n            },\n            items: packagesListUpdatableTypes,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersUpdatablePlaceholder)\n        }\n    };\n};\n\nexport default systemsUpdatableFilter;\n","import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}\n                        data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                        data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                    >{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { paths } from '../../Routes';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history, headerOUIA }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={paths.advisories.to}\n                title={paths.advisories.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.advisories.title}`}\n            />\n            <Tab\n                eventKey={paths.systems.to}\n                title={paths.systems.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.systems.title}`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object,\n    headerOUIA: propTypes.string\n};\n\nexport default withRouter(HeaderTabs);\n","import {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <PageHeaderTitle title={title} />\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA = {headerOUIA}/>}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string\n};\n\nexport default Header;\n","import '../../../App.scss';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AngleLeftIcon, AngleRightIcon } from '@patternfly/react-icons';\nimport { Select, SelectOption, SelectVariant, FormGroup, Spinner, Flex, FlexItem, Button } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { fetchPatchSetsAction, changePatchSetsParams, clearPatchSetsAction } from '../../../store/Actions/Actions';\n\nconst SelectPagination = ({ changePage, page, perPage, totalItems }) =>{\n    const openNextPage = () => changePage(page + 1);\n    const openPrevPage = () => changePage(page - 1);\n\n    return (\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n            <FlexItem>\n                <Button variant=\"plain\" aria-label=\"prev\" isDisabled={page === 1} onClick={openPrevPage}>\n                    <AngleLeftIcon />\n                </Button>\n            </FlexItem>\n            <FlexItem>\n                <Button variant=\"plain\" aria-label=\"next\"\n                    isDisabled={totalItems < page * perPage}\n                    onClick={openNextPage}>\n                    <AngleRightIcon />\n                </Button>\n            </FlexItem>\n        </Flex>\n    );\n};\n\nconst SelectExistingSets = ({ setSelectedPatchSet, selectedSets, systems }) => {\n    const dispatch = useDispatch();\n    const formOptions = useFormApi();\n    const [isOpen, setOpen] = useState(true);\n\n    const rows = useSelector(({ PatchSetsStore }) => PatchSetsStore.rows);\n    const queryParams = useSelector(({ PatchSetsStore }) => PatchSetsStore.queryParams);\n    const status = useSelector(({ PatchSetsStore }) => PatchSetsStore.status);\n    const metadata = useSelector(({ PatchSetsStore }) => PatchSetsStore.metadata);\n\n    useEffect(() => () => {\n        dispatch(clearPatchSetsAction());\n    }, []);\n\n    useEffect(() => {\n        dispatch(fetchPatchSetsAction({ ...queryParams, offset:\n            queryParams.offset + ((queryParams.page - 1) * queryParams.perPage) }));\n    }, [queryParams.page, queryParams.search]);\n\n    const patchOptions = useMemo(() =>{\n        if (status.isLoading) {\n            return [<SelectOption key='loading'><Spinner size=\"md\"/></SelectOption>];\n        }\n\n        return rows?.map(set => <SelectOption key={set.id} value={set.name} />);\n    }, [rows, status.isLoading]);\n\n    const apply = (params) => {\n        dispatch(changePatchSetsParams(params));\n    };\n\n    const [searchAdvisory] = useState(() =>\n        debounce(value => apply({ search: value }), 700)\n    );\n\n    const handleOpen = () => {\n        setOpen(!isOpen);\n    };\n\n    const handleSelect = (_, selected) =>{\n        setOpen(false);\n        setSelectedPatchSet(selected);\n\n        const selectedSet = rows.filter(set => set.name === selected);\n        if (selectedSet.length === 1) {\n            formOptions.change('existing_patch_set', { name: selectedSet[0]?.name, systems, id: selectedSet[0]?.id });\n        }\n\n    };\n\n    const changePage = (page) => {\n        dispatch(changePatchSetsParams({ ...queryParams, page }));\n    };\n\n    const onFilter = (props, searchValue) => {\n        searchAdvisory(searchValue);\n    };\n\n    return (\n        <FormGroup fieldId='existing_patch_set' label='Choose a Patch set' isRequired>\n            <Select\n                variant={SelectVariant.single}\n                aria-label='Filter by patch set'\n                onSelect={handleSelect}\n                placeholderText='Filter by patch set'\n                inlineFilterPlaceholderText='Filter by patch set'\n                selections={selectedSets}\n                onToggle={handleOpen}\n                isOpen={isOpen}\n                isDisabled={false}\n                onFilter={onFilter}\n                hasInlineFilter\n                className='patch-existing-sets'\n                footer={\n                    <SelectPagination\n                        changePage={changePage}\n                        page={queryParams.page}\n                        perPage={queryParams.perPage}\n                        totalItems={metadata.total_items}\n                    />\n                }\n            >\n                {patchOptions}\n            </Select>\n        </FormGroup >\n    );\n};\n\nSelectPagination.propTypes = {\n    changePage: propTypes.func,\n    page: propTypes.number,\n    perPage: propTypes.number,\n    totalItems: propTypes.number\n};\n\nSelectExistingSets.propTypes = {\n    setSelectedPatchSet: propTypes.func,\n    selectedSets: propTypes.array,\n    systems: propTypes.array\n};\nexport default SelectExistingSets;\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const reviewSystemColumns = [{\n    key: 'display_name',\n    title: 'Name',\n    props: {\n        width: 50\n    }\n},\n{\n    title: 'OS',\n    key: 'os',\n    props: {\n        width: 25\n    }\n},\n{\n    key: 'baseline_name',\n    title: 'Patch set',\n    props: {\n        width: 25\n    }\n}\n];\n\nexport const configurationFields = [\n    {\n        name: 'configuration-step',\n        component: 'configuration-step'\n    },\n    {\n        name: 'existing_patch_set',\n        component: componentTypes.TEXT_FIELD,\n        hidden: true\n    }\n];\n\nexport const nameComponent = [{\n    name: 'name',\n    component: 'nameField',\n    validate: [{ type: validatorTypes.REQUIRED }]\n}];\n\nexport const descriptionComponent = [{\n    name: 'description',\n    component: 'descriptionField'\n}];\n\nexport const toDateComponent = [{\n    name: 'toDate',\n    component: 'toDateField',\n    validate: [\n        { type: validatorTypes.REQUIRED },\n        { type: validatorTypes.PATTERN,\n            pattern: /^(\\d{4})-(\\d{2})-(\\d{2})$/\n        }\n    ]\n}];\n\nexport const schema = (patchSetID) => ({\n    fields: [\n        {\n            component: componentTypes.WIZARD,\n            name: 'patch-set-wizard',\n            isDynamic: true,\n            inModal: true,\n            showTitles: true,\n            title: intl.formatMessage(messages.patchSetTitle),\n            description: intl.formatMessage(messages.patchSetDescription),\n            fields: [\n                {\n                    name: 'patch-set-config',\n                    title: intl.formatMessage(patchSetID && messages.patchSetEditSet || messages.patchSetNewSet),\n                    fields: configurationFields,\n                    nextStep: 'systems'\n                },\n                {\n                    name: 'systems',\n                    title: intl.formatMessage(messages.patchSetSelectSystems),\n                    fields: [\n                        {\n                            name: 'systems',\n                            component: 'review-systems',\n                            validate: [{ type: 'validate-systems' }]\n                        }\n                    ],\n                    nextStep: 'review'\n                },\n                {\n                    name: 'review',\n                    title: intl.formatMessage(messages.patchSetReviewSet),\n                    fields: [\n                        {\n                            name: 'review',\n                            component: 'review-patch-set'\n                        }\n                    ]\n                }\n\n            ]\n\n        }\n    ]\n});\n\nexport const validatorMapper = {\n    'validate-systems': () => (system) => {\n        if (system === undefined) {\n            return;\n        }\n        else if (Object.keys(system).length > 0) {\n            return;\n        } else {\n            return intl.formatMessage(messages.patchSetNoSystemSelected);\n        }\n    }\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Grid, GridItem, Spinner } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { nameComponent, descriptionComponent, toDateComponent } from '../WizardAssets';\nconst  ConfigurationFields = ({ isLoading }) =>{\n    const { renderForm } = useFormApi();\n\n    return isLoading ? <Spinner size='md' /> : (\n        <Grid hasGutter>\n            <GridItem lg={12} md={12}>\n                {renderForm(nameComponent)}\n            </GridItem>\n            <GridItem lg={12} md={12}>\n                {renderForm(descriptionComponent)}\n            </GridItem>\n            <GridItem lg={6} md={6}>\n                {renderForm(toDateComponent)}\n            </GridItem>\n        </Grid>\n    );\n};\n\nConfigurationFields.propTypes = {\n    isLoading: propTypes.bool\n};\nexport default ConfigurationFields;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    Radio,\n    TextVariants\n} from '@patternfly/react-core';\nimport SelectExistingSets from '../InputFields/SelectExistingSets';\nimport ConfigurationFields from '../InputFields/ConfigurationFields';\n\nimport { convertIsoToDate } from '../../../Utilities/Helpers';\n\nconst ConfigurationStepFields = ({ systemsIDs, patchSetID }) => {\n\n    const formOptions = useFormApi();\n    const shouldShowRadioButtons = (!patchSetID && systemsIDs?.length !== 0) || false;\n\n    const [shouldApplyExisting, setShouldApplyExisting] = useState(false);\n    const [shouldCreateNew, setShouldCreateNew] = useState(true);\n    const [selectedPatchSet, setSelectedPatchSet] = useState([]);\n\n    const { patchSet, status } = useSelector(({ SpecificPatchSetReducer }) => SpecificPatchSetReducer, shallowEqual);\n\n    const handleRadioChange = () => {\n        setShouldCreateNew(!shouldCreateNew);\n        setShouldApplyExisting(!shouldApplyExisting);\n    };\n\n    useEffect(() => {\n        if (patchSetID) {\n            const { name, description, config: { to_time: toDate } } = patchSet;\n\n            formOptions.change('name', name);\n            formOptions.change('description', description);\n            formOptions.change('toDate', convertIsoToDate(toDate));\n        }\n    }, [patchSet]);\n\n    return (\n        <Stack hasGutter>\n            {shouldShowRadioButtons && <TextContent style={{ marginTop: '-15px' }}>\n                <Text component={TextVariants.p}>\n                    You selected <b>{systemsIDs.length} systems</b>\n                </Text>\n            </TextContent>}\n            <StackItem>\n                <Stack hasGutter>\n                    {shouldShowRadioButtons && (<><StackItem>\n                        <Radio\n                            isChecked={shouldApplyExisting}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label=\"Add to existing patch set\"\n                            id=\"existing-set\"\n                            value=\"\"\n                        />\n                    </StackItem>\n                    <StackItem>\n                        {shouldApplyExisting ? <SelectExistingSets\n                            setSelectedPatchSet={setSelectedPatchSet}\n                            selectedSets={selectedPatchSet}\n                            systems={systemsIDs}\n                        /> : null}\n                    </StackItem>\n                    <StackItem>\n                        <Radio\n                            isChecked={shouldCreateNew}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label={'Create new patch set'}\n                            id=\"new-set\"\n                            value=\"\"\n                        />\n                    </StackItem></>) || null}\n                    <StackItem>\n                        {shouldCreateNew ? <ConfigurationFields\n                            isLoading={patchSetID && status.isLoading}\n                        /> : null}\n                    </StackItem>\n                </Stack>\n            </StackItem>\n        </Stack>\n    );\n};\n\nConfigurationStepFields.propTypes = {\n    systemsIDs: propTypes.array,\n    patchSetID: propTypes.string\n};\nexport default ConfigurationStepFields;\n","import React, { useState, useEffect } from 'react';\nimport {\n    FormGroup,\n    TextInput\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nconst NameField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [name, setName] = useState(values?.name);\n\n    useEffect(() => {\n        setName(values.name);\n    }, [values.name]);\n\n    return (\n        <FormGroup fieldId=\"name\" label=\"Name\" isRequired>\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={name}\n                onChange={(val) => {\n                    input.onChange(val);\n                    setName(val);\n                }}\n                aria-label=\"name\"\n                autoFocus\n            />\n        </FormGroup>\n    );\n};\n\nexport default NameField;\n","import React, { useState, useEffect } from 'react';\nimport {\n    FormGroup,\n    DatePicker,\n    Flex,\n    FlexItem\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nconst ToDateField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [toDate, setToDate] = useState(values?.toDate);\n\n    useEffect(() => {\n        setToDate(values.toDate);\n    }, [values.toDate]);\n\n    return (\n        <FormGroup fieldId=\"toDate\" label=\"Patch set date\" isRequired>\n            <Flex>\n                <FlexItem lg={2} md={2}>\n                    Upto\n                </FlexItem>\n                <FlexItem lg={10} md={10}>\n                    <DatePicker\n                        isRequired\n                        value={toDate}\n                        onChange={(val) => {\n                            input.onChange(val);\n                            setToDate(val);\n                        }}\n                        popoverProps={{ position: 'right' }}\n                        aria-label=\"toDate\"\n                    />\n                </FlexItem>\n            </Flex>\n        </FormGroup>\n    );\n};\n\nexport default ToDateField;\n","import React, { useState, useEffect } from 'react';\nimport { FormGroup, TextInput } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nconst DescriptionField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [description, setDescription] = useState(values?.description);\n\n    useEffect(() => {\n        setDescription(values.description);\n    }, [values.description]);\n\n    return (\n        <FormGroup fieldId=\"description\" label=\"Description\">\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={description}\n                onChange={(val) => {\n                    input.onChange(val);\n                    setDescription(val);\n                }}\n                aria-label=\"description\"\n            />\n        </FormGroup>\n    );\n};\n\nexport default DescriptionField;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport searchFilter from '../../../PresentationalComponents/Filters/SearchFilter';\nimport osVersionFilter from '../../../PresentationalComponents/Filters/OsVersionFilter';\nimport { Text, TextContent, Stack, StackItem, TextVariants } from '@patternfly/react-core';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nimport { createSortBy, buildSelectedSystemsObj } from '../../../Utilities/Helpers';\nimport { createSystemsRowsReview } from '../../../Utilities/DataMappers';\nimport { useOnSelect, usePerPageSelect, useSetPage, useSortColumn } from '../../../Utilities/Hooks';\nimport TableView from '../../../PresentationalComponents/TableView/TableView';\nimport staleFilter from '../../../PresentationalComponents/Filters/SystemStaleFilter';\nimport systemsUpdatableFilter from '../../../PresentationalComponents/Filters/SystemsUpdatableFilter';\nimport { fetchSystems } from '../../../Utilities/api';\nimport { reviewSystemColumns } from '../WizardAssets';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { systemsListDefaultFilters } from '../../../Utilities/constants';\n\nexport const ReviewSystems = ({ systemsIDs = [], ...props }) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const { values } = formOptions.getState();\n    const defaultSelectedSystems = buildSelectedSystemsObj([...systemsIDs, ...Object.keys(values?.systems || {})]);\n\n    const [isLoading, setLoading] = useState(true);\n    const [rawData, setRawData] = useState([]);\n    const [systems, setSystems] = useState([]);\n    const [selectedRows, setSelectedRows] = useState(defaultSelectedSystems);\n    const [metadata, setMetada] = useState({\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    });\n\n    const [queryParams, setQueryParams] = useState({\n        page: 1,\n        perPage: 20,\n        filter: {\n            stale: [true, false]\n        }\n    });\n\n    const { assignedSystems } = useSelector(({ SpecificPatchSetReducer }) => SpecificPatchSetReducer, shallowEqual);\n\n    useEffect(() => {\n        fetchSystems({\n            ...queryParams, filter: { ...queryParams.filter,\n                id: systemsIDs.length > 0 ? `in:${systemsIDs.join(',')}` : undefined }\n        }).then(result => {\n            setSystems(\n                createSystemsRowsReview(\n                    result.data,\n                    { ...buildSelectedSystemsObj([...assignedSystems, ...systemsIDs]), ...selectedRows }\n                )\n            );\n            setMetada(result.meta);\n            setRawData(result.data);\n            setLoading(false);\n        });\n    }, [queryParams.filter, queryParams]);\n\n    useEffect(() => {\n        input.onChange(selectedRows);\n\n        setSystems(\n            createSystemsRowsReview(rawData, selectedRows)\n        );\n    }, [selectedRows]);\n\n    useEffect(() => {\n        setSelectedRows({ ...selectedRows, ...buildSelectedSystemsObj(assignedSystems) });\n    }, [assignedSystems]);\n\n    const apply = (params) => {\n        setLoading(true);\n        setQueryParams((prevQueryParams) => ({\n            ...prevQueryParams,\n            ...params,\n            filter: { ...prevQueryParams.filter, ...params.filter }\n        }));\n    };\n\n    const onSort = useSortColumn(reviewSystemColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(reviewSystemColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const fetchAllData = () =>\n        fetchSystems({ ...queryParams,\n            filter: { ...queryParams.filter, ...systemsIDs.length > 0 && { id: `in:${systemsIDs.join(',')}` } }, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        const newSelections = toSelect.reduce((object, system) => {\n            object[system.id] = system.selected ? true : undefined;\n            return object;\n        }, {});\n\n        setSelectedRows({ ...selectedRows, ...newSelections });\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllData, selectRows);\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent style={{ marginTop: '-15px' }}>\n                    <Text component={TextVariants.p}>\n                        You will be able to adjust your selection anytime. A system can have only one patch set,\n                        therefore if you assign a new Patch set to the system, it will be overwritten.\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TableView\n                    columns={reviewSystemColumns}\n                    compact\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    selectedRows={selectedRows}\n                    onSelect={onSelect}\n                    sortBy={sortBy}\n                    apply={apply}\n                    tableOUIA={'patch-set-table'}\n                    paginationOUIA={'patch-set-pagination'}\n                    store={{ rows: systems, metadata, status: { isLoading }, queryParams }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                                intl.formatMessage(messages.labelsFiltersSearch)\n                            ),\n                            staleFilter(apply, queryParams.filter),\n                            systemsUpdatableFilter(apply, queryParams.filter),\n                            osVersionFilter(queryParams.filter, apply)\n                        ]\n                    }}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)}\n                    defaultFilters={systemsListDefaultFilters}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nReviewSystems.propTypes = {\n    systemsIDs: propTypes.array\n};\n\nexport default ReviewSystems;\n","import React from 'react';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    TextVariants,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst ReviewPatchSet = () => {\n    const formOptions = useFormApi();\n    const { values } = formOptions.getState();\n    const { name, description, toDate } = values.existing_patch_set || values;\n    const { systems } = values;\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent style={{ marginTop: '-15px' }}>\n                    <Text component={TextVariants.p}>\n                        Review the information below and click <b>Submit</b> to complete patch set creation\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TextContent>\n                    <TextList component={TextListVariants.dl}>\n                        <TextListItem component={TextListItemVariants.dt}>Name:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{name}</TextListItem>\n                        <TextListItem component={TextListItemVariants.dt}>Description:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{description}</TextListItem>\n                        <TextListItem component={TextListItemVariants.dt}>Date:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{toDate}</TextListItem>\n                        <TextListItem component={TextListItemVariants.dt}>Selected systems:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>\n                            {systems && Object.values(systems).filter(system => system).length}\n                        </TextListItem>\n                    </TextList>\n                </TextContent>\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default ReviewPatchSet;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title,\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateIcon,\n    EmptyStateBody,\n    Grid,\n    GridItem,\n    HelperText,\n    HelperTextItem,\n    Button\n} from '@patternfly/react-core';\nimport {\n    CheckCircleIcon,\n    ExclamationCircleIcon,\n    InProgressIcon\n} from '@patternfly/react-icons';\n\nconst RequestProgress = ({ onClose, state }) => {\n    const { requestPending, failed } = state;\n\n    return (\n        <EmptyState\n            variant={EmptyStateVariant.large}\n            data-component-ouia-id=\"patch-set-progress\"\n        >\n            <EmptyStateIcon\n                color={\n                    failed\n                        ? 'var(--pf-global--danger-color--100)'\n                        : !requestPending\n                            ? 'var(--pf-global--success-color--100)'\n                            : undefined\n                }\n                icon={\n                    failed\n                        ? ExclamationCircleIcon\n                        : requestPending\n                            ? InProgressIcon\n                            : CheckCircleIcon\n                }\n            />\n            <Title headingLevel=\"h1\" size=\"lg\">\n                {failed\n                    ? 'Something went wrong'\n                    : requestPending\n                        ? 'Configuration in progress'\n                        : 'Patch set configuration successful'}\n            </Title>\n            <EmptyStateBody>\n                <Grid hasGutter>\n                    {(requestPending) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    Please allow a few minutes to set up a patch set.\n                                    You will receive a notification when finished</HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"link\" isInline onClick={onClose}>\n                                    Cancel\n                            </Button>{' '}\n                        </GridItem></>\n                    )}\n                    {(!requestPending && !failed) && (\n                        <GridItem>\n                            <Button variant=\"primary\" onClick={onClose}>Return to application</Button>\n                        </GridItem>\n                    )}\n                    {(!requestPending && failed) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    There was a problem processing the patch set. Please try again. If the problem\n                                    persists, contact <a href='https://www.redhat.com/en/services/support'>Red Hat support</a>\n                                </HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"primary\" onClick={onClose}>Return to application</Button>\n                        </GridItem></>\n                    )}\n                </Grid>\n\n            </EmptyStateBody>\n        </EmptyState>\n    );\n};\n\nRequestProgress.propTypes = {\n    onClose: propTypes.func,\n    state: propTypes.object\n};\n\nexport default RequestProgress;\n","\nimport React, { Fragment, useState, memo, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport DatePicker from '@data-driven-forms/pf4-component-mapper/date-picker';\nimport { Modal, Wizard } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\n\nimport ConfigurationStepFields from './steps/ConfigurationStepFields';\nimport NameField from './InputFields/NameField';\nimport ToDateField from './InputFields/ToDateField';\nimport DescriptionField from './InputFields/DescriptionField';\nimport ReviewSystems from './steps/ReviewSystems';\nimport ReviewPatchSet from './steps/ReviewPatchSet';\nimport { schema, validatorMapper } from './WizardAssets';\nimport RequestProgress from './steps/RequestProgress';\nimport { usePatchSetApi } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { fetchPatchSetAction, clearPatchSetAction, fetchPatchSetSystemsAction } from '../../store/Actions/Actions';\n\nexport const PatchSetWizard = ({ systemsIDs, setBaselineState, patchSetID }) => {\n    const [wizardState, setWizardState] = useState({\n        submitted: false,\n        formValues: {},\n        requestPending: true,\n        failed: false,\n        shouldRefresh: false\n    });\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (patchSetID) {\n            dispatch(fetchPatchSetAction(patchSetID));\n            dispatch(fetchPatchSetSystemsAction(patchSetID, { limit: -1 }));\n        }\n\n        return () => dispatch(clearPatchSetAction());\n    }, []);\n\n    const onSubmit = usePatchSetApi(wizardState, setWizardState, patchSetID);\n\n    const handleWizardClose = () => {\n        const shouldRefresh = !wizardState.failed && wizardState.submitted;\n\n        setBaselineState({ isOpen: false, systemsIDs: [], patchSetID: undefined, shouldRefresh });\n        setWizardState({ formValues: {}, submitted: false });\n    };\n\n    const mapperExtensions = {\n        nameField: {\n            component: NameField\n        },\n        descriptionField: {\n            component: DescriptionField\n        },\n        toDateField: {\n            component: ToDateField\n        },\n        'configuration-step': {\n            component: ConfigurationStepFields,\n            systemsIDs: systemsIDs || [],\n            patchSetID\n        },\n        'review-systems': {\n            component: ReviewSystems,\n            systemsIDs: systemsIDs || []\n        },\n        'review-patch-set': {\n            component: ReviewPatchSet,\n            systemsIDs: systemsIDs || []\n        }\n    };\n\n    return (\n        <Fragment>\n            {!wizardState.submitted &&  (\n                <FormRenderer\n                    schema={schema(patchSetID)}\n                    subscription={{ values: true }}\n                    FormTemplate={(props) => (\n                        <Pf4FormTemplate {...props} showFormControls={false} />\n                    )}\n                    componentMapper={{\n                        [componentTypes.WIZARD]: {\n                            component: WizardMapper,\n                            className: 'patch-set',\n                            'data-ouia-component-id': 'patch-set-wizard'\n                        },\n                        [componentTypes.TEXT_FIELD]: TextField,\n                        [componentTypes.DATE_PICKER]: DatePicker,\n                        ...mapperExtensions\n                    }}\n                    validatorMapper={validatorMapper}\n                    onSubmit={onSubmit}\n                    onCancel={handleWizardClose} />\n            ) || (\n                <Modal\n                    isOpen\n                    variant={'large'}\n                    showClose={false}\n                    className=\"patch-set\"\n                    hasNoBodyWrapper\n                    aria-describedby=\"patch-set-description\"\n                    aria-labelledby=\"patch-set-modal-title\"\n                >\n                    <Wizard\n                        className=\"patch-set\"\n                        title={intl.formatMessage(messages.patchSetTitle)}\n                        description={intl.formatMessage(messages.patchSetDescription)}\n                        steps={[\n                            {\n                                name: 'progress',\n                                component: (\n                                    <RequestProgress\n                                        onClose={handleWizardClose}\n                                        state={wizardState}\n                                    />\n                                ),\n                                isFinishedStep: true\n                            }\n                        ]}\n                        onClose={handleWizardClose}\n                    />\n                </Modal>\n            )}\n        </Fragment>\n    );\n};\n\nPatchSetWizard.propTypes = {\n    setBaselineState: propTypes.func,\n    systemsIDs: propTypes.array,\n    patchSetID: propTypes.string\n};\n\nexport default memo(PatchSetWizard, (prevProps, nextProps) => {\n    return JSON.stringify(prevProps) === JSON.stringify(nextProps);\n});\n"],"names":["currentFilter","apply","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","osFilterTypes","reverse","currentValue","os","currentOsVersionsArray","split","filterByOsType","_","value","includes","filter","join","remainingOs","length","undefined","onToggle","onViewMoreClick","type","conditionalFilterType","label","intl","messages","filterValues","children","Select","variant","SelectVariant","typeAheadAriaLabel","onSelect","selections","placeholderText","loadingVariant","text","onClick","style","maxHeight","overflow","slice","map","option","index","SelectOption","key","stale","staleMap","staleSystems","toString","currentValueStringType","Array","isArray","filterByStale","onChange","event","items","placeholder","packages_updatable","filterByUpdatableSystems","packagesListUpdatableTypes","HeaderBreadcrumbs","headerOUIA","Breadcrumb","Boolean","item","BreadcrumbItem","title","isActive","to","Link","propTypes","PropTypes","HeaderTabs","history","Tabs","tabString","push","activeKey","location","pathname","className","Tab","eventKey","paths","withRouter","Header","showTabs","breadcrumbs","PageHeader","PageHeaderTitle","SelectPagination","changePage","page","perPage","totalItems","Flex","justifyContent","default","FlexItem","Button","isDisabled","SelectExistingSets","setSelectedPatchSet","selectedSets","systems","dispatch","useDispatch","formOptions","useFormApi","useState","rows","useSelector","PatchSetsStore","queryParams","status","metadata","useEffect","clearPatchSetsAction","fetchPatchSetsAction","offset","search","patchOptions","useMemo","isLoading","Spinner","size","set","id","name","debounce","params","changePatchSetsParams","searchAdvisory","FormGroup","fieldId","isRequired","selected","selectedSet","change","inlineFilterPlaceholderText","onFilter","props","searchValue","hasInlineFilter","footer","total_items","reviewSystemColumns","width","configurationFields","component","componentTypes","hidden","nameComponent","validate","validatorTypes","descriptionComponent","toDateComponent","pattern","schema","patchSetID","fields","isDynamic","inModal","showTitles","description","nextStep","validatorMapper","system","Object","keys","ConfigurationFields","renderForm","Grid","hasGutter","GridItem","lg","md","ConfigurationStepFields","systemsIDs","shouldShowRadioButtons","shouldApplyExisting","setShouldApplyExisting","shouldCreateNew","setShouldCreateNew","selectedPatchSet","SpecificPatchSetReducer","shallowEqual","patchSet","handleRadioChange","toDate","config","to_time","convertIsoToDate","Stack","TextContent","marginTop","Text","TextVariants","StackItem","Radio","isChecked","input","useFieldApi","values","getState","setName","TextInput","val","autoFocus","setToDate","DatePicker","popoverProps","position","setDescription","ReviewSystems","defaultSelectedSystems","buildSelectedSystemsObj","setLoading","rawData","setRawData","setSystems","selectedRows","setSelectedRows","limit","setMetada","setQueryParams","assignedSystems","fetchSystems","then","result","createSystemsRowsReview","data","meta","prevQueryParams","onSort","useSortColumn","sortBy","createSortBy","sort","onSetPage","useSetPage","onPerPageSelect","usePerPageSelect","useOnSelect","toSelect","newSelections","reduce","object","TableView","columns","compact","tableOUIA","paginationOUIA","store","filterConfig","searchFilter","staleFilter","systemsUpdatableFilter","osVersionFilter","searchChipLabel","defaultFilters","systemsListDefaultFilters","existing_patch_set","TextList","TextListVariants","TextListItem","TextListItemVariants","RequestProgress","onClose","state","requestPending","failed","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","InProgressIcon","CheckCircleIcon","Title","headingLevel","EmptyStateBody","HelperText","HelperTextItem","isInline","href","PatchSetWizard","setBaselineState","submitted","formValues","shouldRefresh","wizardState","setWizardState","fetchPatchSetAction","fetchPatchSetSystemsAction","clearPatchSetAction","onSubmit","usePatchSetApi","handleWizardClose","mapperExtensions","nameField","NameField","descriptionField","DescriptionField","toDateField","ToDateField","ReviewPatchSet","Fragment","subscription","FormTemplate","showFormControls","componentMapper","WizardMapper","TextField","onCancel","Modal","showClose","hasNoBodyWrapper","Wizard","steps","isFinishedStep","memo","prevProps","nextProps","JSON","stringify"],"sourceRoot":""}