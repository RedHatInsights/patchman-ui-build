{"version":3,"file":"js/747.693afbfd671e081ff177.js","mappings":"o2BAMA,IAAMA,EAAe,CACjBC,KAAM,GACNC,SAAU,GACVC,aAAc,GACdC,OAAQ,GACRC,KAAM,EACNC,QAAS,GACTC,SAAU,CACNC,MAAO,GACPC,OAAQ,EACRC,YAAa,IAKRC,EAAkB,SAACC,EAASC,GACrC,OAAIA,EAAMC,OACN,OACOD,GADP,IAEIT,OAAQ,CAAEW,WAAW,EAAOC,UAAU,GACtCf,MAAMgB,EAAAA,EAAAA,IAAkBJ,EAAMZ,KAAMY,EAAMV,gBAI3CU,GAGEK,EAAuB,SAACN,EAASC,GAC1C,OAAIA,EAAMC,OACN,OACOD,GADP,IAEID,QAAAA,EACAX,MAAMkB,EAAAA,EAAAA,IAAyBN,EAAMZ,KAAMY,EAAMV,gBAIlDU,GAGEO,EAA2B,SAACR,EAASS,GAAV,OAAgC,WAAkC,IAAjCR,EAAiC,uDAAzBb,EAAcsB,EAAW,uCAClGC,EAAW,EAAH,GAAQV,GACpB,OAAQS,EAAOE,MACX,IAAK,0BACD,OAAOH,EAAkBT,EAASW,GAEtC,IAAK,wBAED,OADAA,EAASnB,OAAS,CAAEW,WAAW,EAAMC,UAAU,GACxCO,EAEX,IAAK,yBAED,OADAA,EAASnB,OAAS,CAAEW,WAAW,EAAMC,UAAU,GACxCO,EAEX,IAAK,gBACD,IAAME,GAAsBC,EAAAA,EAAAA,IAAWH,EAAUD,GACjD,OAAOD,EAAkBT,EAASa,GAGtC,KAAKE,EAAAA,GACD,OAAO3B,EAEX,QACI,OAAOa","sources":["webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            newState.status = { isLoading: true, hasError: true };\n            return newState;\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["initialState","rows","entities","selectedRows","status","page","perPage","metadata","limit","offset","total_items","modifyInventory","columns","state","loaded","isLoading","hasError","createSystemsRows","modifyPackageSystems","createPackageSystemsRows","inventoryEntitiesReducer","inventoryModifier","action","newState","type","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}