{"version":3,"file":"js/TemplateDetail.8048d9ebb9bab63a4abf.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Dropdown/Dropdown.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/SmartComponents/Modals/DeleteSetModal.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./src/SmartComponents/PatchSet/PatchSetAssets.js","webpack:///./src/SmartComponents/PatchSetDetail/PatchSetDetail.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { DropdownWithContext } from './DropdownWithContext';\nimport { useOUIAId } from '../../helpers';\nexport const Dropdown = (_a) => {\n    var { onSelect, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref, // Types of Ref are different for React.FunctionComponent vs React.Component\n    ouiaId, ouiaSafe, alignments, contextProps, menuAppendTo = 'inline', isFlipEnabled = true, removeFindDomNode = false, zIndex = 9999 } = _a, props = __rest(_a, [\"onSelect\", \"ref\", \"ouiaId\", \"ouiaSafe\", \"alignments\", \"contextProps\", \"menuAppendTo\", \"isFlipEnabled\", \"removeFindDomNode\", \"zIndex\"]);\n    return (React.createElement(DropdownContext.Provider, { value: Object.assign({ onSelect: event => onSelect && onSelect(event), toggleTextClass: styles.dropdownToggleText, toggleIconClass: styles.dropdownToggleImage, toggleIndicatorClass: styles.dropdownToggleIcon, menuClass: styles.dropdownMenu, itemClass: styles.dropdownMenuItem, toggleClass: styles.dropdownToggle, baseClass: styles.dropdown, baseComponent: 'div', sectionClass: styles.dropdownGroup, sectionTitleClass: styles.dropdownGroupTitle, sectionComponent: 'section', disabledClass: styles.modifiers.disabled, plainTextClass: styles.modifiers.text, ouiaId: useOUIAId(Dropdown.displayName, ouiaId), ouiaSafe, ouiaComponentType: Dropdown.displayName, alignments }, contextProps) },\n        React.createElement(DropdownWithContext, Object.assign({ menuAppendTo: menuAppendTo, isFlipEnabled: isFlipEnabled, removeFindDomNode: removeFindDomNode, zIndex: zIndex }, props))));\n};\nDropdown.displayName = 'Dropdown';\n//# sourceMappingURL=Dropdown.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Checkbox, Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst DeleteSetModal = ({ isModalOpen, setModalOpen, templateName, onConfirm }) => {\n    const [isCheckboxChecked, setCheckboxChecked] = useState(false);\n\n    const onClose = () => {\n        setModalOpen(false);\n        setCheckboxChecked(false);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.titlesTemplateDeleteModalTitle)}\n            titleIconVariant=\"warning\"\n            isOpen={isModalOpen}\n            onClose={onClose}\n            variant=\"small\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={() => {onClose(); onConfirm();}} isDisabled={!isCheckboxChecked}>\n                    {intl.formatMessage(messages.labelsDelete)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {intl.formatMessage(messages.titlesTemplateDeleteModalText, { templateName, b: (...chunks) => <b>{chunks}</b> })}\n            <Checkbox\n                className=\"pf-u-mt-md\"\n                isChecked={isCheckboxChecked}\n                checked={isCheckboxChecked}\n                onChange={(value) => setCheckboxChecked(value)}\n                label={intl.formatMessage(messages.titlesTemplateDeleteModalCheckbox)}\n                id=\"template-delete-modal-checkbox\"\n            />\n        </Modal>\n    );\n};\n\nDeleteSetModal.propTypes = {\n    isModalOpen: propTypes.bool,\n    setModalOpen: propTypes.func,\n    templateName: propTypes.string,\n    onConfirm: propTypes.func\n};\n\nexport default DeleteSetModal;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../../Utilities/constants';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalToggle(true);\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","import React from 'react';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport {\n    EllipsisVIcon\n} from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const CreatePatchSetButton = (setPatchSetState, hasAccess) => () =>\n    !hasAccess ?\n        <Tooltip content='For editing access, contact your administrator.'>\n            <Button key='createButton' isAriaDisabled >\n                {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n            </Button>\n        </Tooltip>\n        :\n        (<Button key='createButton' onClick={() => setPatchSetState({ isPatchSetWizardOpen: true })}>\n            {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n        </Button>);\n\nexport const patchSetColumns = [\n    {\n        key: 'name',\n        title: 'Name',\n        transforms: [sortable]\n    },\n    {\n        key: 'systems',\n        title: 'Systems applied',\n        transforms: [sortable]\n    },\n    {\n        key: 'last_edited',\n        title: 'Last edited',\n        transforms: [sortable]\n    },\n    {\n        key: 'published',\n        title: 'Published',\n        transforms: [sortable]\n    },\n    {\n        key: 'creator',\n        title: 'Created by',\n        transforms: [sortable]\n    }\n];\n\nexport const patchSetRowActions = (openPatchSetEditModal, handlePatchSetDelete) => [\n    {\n        title: intl.formatMessage(messages.labelsButtonEditTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            openPatchSetEditModal(rowData?.id);\n        }\n    },\n    {\n        title: intl.formatMessage(messages.labelsButtonRemoveTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            handlePatchSetDelete(rowData);\n        }\n    }\n];\n\nexport const patchSetDetailRowActions = (handleSystemUnassign) => [\n    {\n        title: intl.formatMessage(messages.textUnassignSystemsShortTitle),\n        onClick: (_event, _rowId, rowData) => {\n            handleSystemUnassign(rowData);\n        }\n    }\n\n];\n\nexport const CustomActionsToggle = () => <Tooltip content='For editing access, contact your administrator.'>\n    <Button\n        isAriaDisabled\n        variant=\"plain\"\n        aria-label=\"plain kebab\"\n    >\n        <EllipsisVIcon />\n    </Button>\n</Tooltip>;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect, useState, Fragment, useRef } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { NoAppliedSystems } from '../../PresentationalComponents/Snippets/EmptyStates';\nimport { useDeepCompareEffect, useGetEntities } from '../../Utilities/Hooks';\nimport {\n    changePatchSetDetailsSystemsMetadata,\n    changePatchSetDetailsSystemsParams,\n    changeTags,\n    clearTemplateDetail,\n    fetchPatchSetSystemsNoFiltersAction,\n    fetchTemplateDetail\n} from '../../store/Actions/Actions';\nimport {\n    Bullseye,\n    Dropdown,\n    DropdownItem,\n    DropdownPosition,\n    DropdownToggle,\n    Skeleton,\n    Spinner,\n    Text,\n    TextContent\n} from '@patternfly/react-core';\nimport DeleteSetModal from '../Modals/DeleteSetModal';\nimport { deletePatchSet, fetchPatchSetSystems } from '../../Utilities/api';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { patchSetDeleteNotifications } from '../../Utilities/constants';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { decodeQueryparams, encodeURLParams, persistantParams } from '../../Utilities/Helpers';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport { patchSetDetailRowActions } from '../PatchSet/PatchSetAssets';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport UnassignSystemsModal from '../Modals/UnassignSystemsModal';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { templateSystemsColumnsMerger } from '../../Utilities/SystemsHelpers';\nimport { combineReducers } from 'redux';\nimport { defaultReducers } from '../../store';\nimport { inventoryEntitiesReducer, modifyTemplateDetailSystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { systemsListColumns } from '../Systems/SystemsListAssets';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst PatchSetDetail = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const store = useStore();\n    const inventory = useRef(null);\n\n    const patchSetId = history.location.pathname.split('/')[2];\n\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [isHeaderDropdownOpen, setHeaderDropdownOpen] = useState(false);\n    const [isDeleteConfirmModalOpen, setDeleteConfirmModalOpen] = useState(false);\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        systemsIDs: [],\n        shouldRefresh: false\n    });\n\n    const templateDetails = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore\n    );\n\n    const isHeaderLoading = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore?.status?.isLoading ?? true\n    );\n\n    const detailStatus = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore.status\n    );\n\n    const systemStatus = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.queryParams || {}\n    );\n\n    const templateHasSystemsLoading = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.templateHasSystemsLoading\n    );\n\n    const templateHasSystems = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.templateHasSystems\n    );\n\n    const { hasAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n\n    const patchSetName = templateDetails.data.attributes.name;\n\n    const apply = (params) => {\n        dispatch(changePatchSetDetailsSystemsParams(params));\n    };\n\n    const openPatchSetAssignWizard = () => {\n        setPatchSetState({\n            ...patchSetState,\n            isPatchSetWizardOpen: true\n        });\n    };\n\n    const refreshTable = () => {\n        // timestamp is used to force inventory to refresh\n        // if it wasn't there inventory might ignore request to refresh because parameters are the same\n        inventory?.current?.onRefreshData({ timestamp: Date.now() });\n\n        dispatch(fetchTemplateDetail(patchSetId));\n    };\n\n    useEffect(() => {\n        dispatch(fetchPatchSetSystemsNoFiltersAction({ id: patchSetId, limit: 1 }));\n\n        return () => {\n            dispatch(clearTemplateDetail());\n        };\n    }, []);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh === true) {\n            refreshTable();\n            setPatchSetState({ ...patchSetState, shouldRefresh: false });\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n\n            dispatch(fetchTemplateDetail(patchSetId));\n\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const openSystemUnassignModal = (rowData) => {\n        setPatchSetState({ ...patchSetState, isUnassignSystemsModalOpen: true, systemsIDs: [rowData.id] });\n    };\n\n    const deleteSet = () => {\n        deletePatchSet(patchSetId).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).success));\n            history.push('/templates');\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).error));\n        });\n    };\n\n    const applyMetadata = (metadata) => {\n        dispatch(changePatchSetDetailsSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const getEntities = useGetEntities(\n        fetchPatchSetSystems,\n        apply,\n        { id: patchSetId },\n        history,\n        applyMetadata,\n        applyGlobalFilter\n    );\n\n    const dropdownItems = [\n        <DropdownItem\n            key=\"edit-patch-set\"\n            component=\"button\"\n            onClick={() => openPatchSetAssignWizard()}\n        >\n            {intl.formatMessage(messages.labelsButtonEditTemplate)}\n        </DropdownItem>,\n        <DropdownItem\n            key=\"delete-patch-set\"\n            component=\"button\"\n            onClick={() => setDeleteConfirmModalOpen(true)}\n        >\n            {intl.formatMessage(messages.labelsButtonRemoveTemplate)}\n        </DropdownItem>\n    ];\n\n    const decodedParams = decodeQueryparams(history.location.search);\n\n    const { systemProfile, selectedTags, filter, search, page, perPage, sort } = queryParams;\n\n    return (\n        detailStatus?.hasError\n            ? <ErrorHandler code={detailStatus?.code} />\n            : <Fragment>\n                <DeleteSetModal\n                    templateName={patchSetName}\n                    isModalOpen={isDeleteConfirmModalOpen}\n                    setModalOpen={setDeleteConfirmModalOpen}\n                    onConfirm={deleteSet}\n                />\n                {patchSetState.isPatchSetWizardOpen &&\n                    <PatchSetWizard\n                        systemsIDs={patchSetState.systemsIDs}\n                        setBaselineState={setPatchSetState}\n                        patchSetID={patchSetId}\n                    />}\n                <UnassignSystemsModal\n                    unassignSystemsModalState={patchSetState}\n                    setUnassignSystemsModalOpen={setPatchSetState}\n                />\n                <Header\n                    title={isHeaderLoading ? <Skeleton style={{ width: 300 }} /> : patchSetName}\n                    headerOUIA={'template-details'}\n                    breadcrumbs={[\n                        {\n                            title: intl.formatMessage(messages.templateDetailHeaderBreadcrumb),\n                            to: '/templates',\n                            isActive: false\n                        },\n                        {\n                            title: isHeaderLoading ? <Skeleton style={{ width: 150 }} /> : patchSetName,\n                            isActive: true\n                        }\n                    ]}\n                    actions={\n                        <Dropdown\n                            position={DropdownPosition.right}\n                            onSelect={() => {\n                                setHeaderDropdownOpen(false);\n                                document.getElementById('patch-set-detail-header-kebab').focus();\n                            }}\n                            toggle={\n                                <DropdownToggle\n                                    id=\"patch-set-detail-header-kebab\"\n                                    className=\"pf-u-mr-xl\"\n                                    onToggle={(isOpen) => setHeaderDropdownOpen(isOpen)}\n                                    style={{ minWidth: 150 }}\n                                >\n                                    {intl.formatMessage(messages.labelsActions)}\n                                </DropdownToggle>\n                            }\n                            isOpen={isHeaderDropdownOpen}\n                            dropdownItems={dropdownItems}\n                        />\n                    }\n                >\n                    <table border=\"0\" style={{ marginTop: 8 }}>\n                        <tbody>\n                            <tr>\n                                <td style={{ width: 300 }}>{intl.formatMessage(messages.templateDetailTableDescription)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 300 }} />\n                                        : templateDetails.data.attributes.description\n                                        || intl.formatMessage(messages.titlesTemplateNoDescription)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableUpToDate)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.config.to_time)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableCreatedBy)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : templateDetails.data.attributes.creator}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTablePublished)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.published)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableLastEdited)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.last_edited)}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </Header>\n                <Main>\n                    <TextContent>\n                        <Text component=\"h2\" className=\"pf-u-mb-md\">\n                            {intl.formatMessage(messages.templateDetailTableTitle)}\n                        </Text>\n                    </TextContent>\n                    {templateHasSystemsLoading\n                        ? (\n                            <Bullseye>\n                                <Spinner size=\"xl\" />\n                            </Bullseye>\n                        ) : templateHasSystems\n                            ? systemStatus.hasError\n                                ? <ErrorHandler code={systemStatus.code} />\n                                : <InventoryTable\n                                    ref={inventory}\n                                    isFullView\n                                    autoRefresh\n                                    initialLoading\n                                    hideFilters={{ all: true }}\n                                    columns={(defaultColumns) => templateSystemsColumnsMerger(defaultColumns)}\n                                    showTags\n                                    onLoad={({ mergeWithEntities }) => {\n                                        store.replaceReducer(combineReducers({\n                                            ...defaultReducers,\n                                            ...mergeWithEntities(\n                                                inventoryEntitiesReducer(systemsListColumns(true), modifyTemplateDetailSystems),\n                                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                                            )\n                                        }));\n                                    }}\n                                    customFilters={{\n                                        patchParams: {\n                                            filter,\n                                            systemProfile,\n                                            selectedTags\n                                        }\n                                    }}\n                                    paginationProps={{\n                                        isDisabled: totalItems === 0\n                                    }}\n                                    getEntities={getEntities}\n                                    tableProps={{\n                                        canSelectAll: true,\n                                        variant: TableVariant.compact,\n                                        className: 'patchCompactInventory',\n                                        isStickyHeader: true,\n                                        actionResolver: () => hasAccess ? patchSetDetailRowActions(openSystemUnassignModal) : []\n                                    }}\n                                    hasCheckbox={false} /* TODO: Remove this when implementing bulk actions */\n                                />\n                            : <NoAppliedSystems onButtonClick={() => openPatchSetAssignWizard()} />}\n                </Main>\n            </Fragment>\n    );\n};\n\nexport default PatchSetDetail;\n","import { createAdvisorySystemsRows, createSystemsRows, createPatchSetDetailRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows, fetchRejected } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state, lastAction) => {\n    // this is pretty scuffed, but trust me it cannot be solved more elegantly because\n    // single item select actions are triggered by Inventory and contain only system id\n    // but we also need to match available_evra for each selected system for remediations\n    // this does not happen with bulk select action because they are implemented by Patchman\n    // the id-evra mapping is cached to minimize O(n^2) time complexity of id-evra matching\n    if (lastAction === 'SELECT_ENTITY') {\n        let idToEvraMapping = state.packageEvraCache;\n\n        if (idToEvraMapping === undefined) {\n            idToEvraMapping = {};\n            state.rows.forEach(row => idToEvraMapping[row.id] = row.available_evra);\n            state.packageEvraCache = idToEvraMapping;\n        }\n\n        state.selectedRows = state.selectedRows ? Object.fromEntries(\n            Object.entries(state.selectedRows).map(([id, value]) =>\n                value === true ? [id, idToEvraMapping[id]] : [id, value]\n            )\n        ) : state.selectedRows;\n    }\n\n    if (lastAction === 'LOAD_ENTITIES_FULFILLED') {\n        state.packageEvraCache = undefined;\n    }\n\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyTemplateDetailSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createPatchSetDetailRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyAdvisorySystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createAdvisorySystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState, action.type);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection, action.type);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["Dropdown","_a","onSelect","ref","ouiaId","ouiaSafe","alignments","contextProps","menuAppendTo","isFlipEnabled","removeFindDomNode","zIndex","props","__rest","value","Object","assign","event","toggleTextClass","toggleIconClass","toggleIndicatorClass","menuClass","itemClass","toggleClass","baseClass","baseComponent","sectionClass","sectionTitleClass","sectionComponent","disabledClass","plainTextClass","displayName","ouiaComponentType","component","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","useEffect","console","error","concat","children","__assign","n","arguments","apply","this","BaseInvTable","history","useHistory","store","Cmp","className","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","DeleteSetModal","_ref","isModalOpen","setModalOpen","templateName","onConfirm","_useState","useState","_useState2","_slicedToArray","isCheckboxChecked","setCheckboxChecked","onClose","React","Modal","title","intl","messages","titleIconVariant","isOpen","variant","actions","Button","key","onClick","isDisabled","b","_len","chunks","Array","_key","Checkbox","isChecked","checked","onChange","label","id","renderUnassignModalMessages","bodyMessage","systemsCount","GridItem","formatMessage","UnassignSystemsModal","_ref$unassignSystemsM","unassignSystemsModalState","setUnassignSystemsModalOpen","systemsIDs","isUnassignSystemsModalOpen","systemsWithPatchSet","setSystemWithPatchSet","_useState3","_useState4","systemsLoading","setSystemsLoading","handleModalToggle","shouldRefresh","handleModalClose","handleUnassignment","dispatch","useDispatch","handleSystemsRemoval","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","unassignSystemFromPatchSet","inventory_ids","sent","status","addNotification","patchSetUnassignSystemsNotifications","success","stop","useUnassignSystemsHook","fetchSystems","limit","filter","stale","then","allSystemsWithPatchSet","systemID","data","some","system","filterSystemsWithoutSets","result","systemsWithoutPatchSetCount","Grid","hasGutter","Skeleton","Fragment","injectIntl","CreatePatchSetButton","setPatchSetState","hasAccess","isPatchSetWizardOpen","Tooltip","content","isAriaDisabled","patchSetColumns","transforms","sortable","patchSetRowActions","openPatchSetEditModal","handlePatchSetDelete","_event","_rowId","rowData","patchSetDetailRowActions","handleSystemUnassign","CustomActionsToggle","EllipsisVIcon","useIntl","useStore","inventory","useRef","patchSetId","location","pathname","split","_React$useState","_React$useState2","firstMount","setFirstMount","isHeaderDropdownOpen","setHeaderDropdownOpen","isDeleteConfirmModalOpen","setDeleteConfirmModalOpen","_useState5","_useState6","patchSetState","templateDetails","useSelector","PatchSetDetailStore","isHeaderLoading","_ref2","_PatchSetDetailStore$","_PatchSetDetailStore$2","isLoading","detailStatus","_ref3","systemStatus","_ref4","entities","totalItems","_ref5","total","queryParams","_ref6","PatchSetDetailSystemsStore","templateHasSystemsLoading","_ref7","templateHasSystems","_ref8","usePermissionsWithContext","patchSetName","attributes","name","params","changePatchSetDetailsSystemsParams","openPatchSetAssignWizard","_objectSpread","fetchPatchSetSystemsNoFiltersAction","clearTemplateDetail","_inventory$current","current","onRefreshData","timestamp","Date","now","fetchTemplateDetail","useDeepCompareEffect","decodeQueryparams","search","push","encodeURLParams","openSystemUnassignModal","getEntities","useGetEntities","fetchPatchSetSystems","metadata","changePatchSetDetailsSystemsMetadata","tags","changeTags","dropdownItems","DropdownItem","decodedParams","systemProfile","selectedTags","page","perPage","sort","hasError","ErrorHandler","code","deletePatchSet","patchSetDeleteNotifications","PatchSetWizard","setBaselineState","patchSetID","Header","style","width","headerOUIA","breadcrumbs","to","isActive","position","DropdownPosition","document","getElementById","focus","toggle","DropdownToggle","onToggle","minWidth","border","marginTop","description","processDate","config","to_time","creator","published","last_edited","Main","TextContent","Text","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","columns","defaultColumns","templateSystemsColumnsMerger","showTags","onLoad","_ref9","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","systemsListColumns","modifyTemplateDetailSystems","persistantParams","customFilters","patchParams","paginationProps","tableProps","canSelectAll","TableVariant","isStickyHeader","actionResolver","hasCheckbox","NoAppliedSystems","onButtonClick","initialState","rows","selectedRows","offset","total_items","modifyInventory","state","loaded","createSystemsRows","modifyPackageSystems","lastAction","idToEvraMapping","packageEvraCache","undefined","forEach","row","available_evra","fromEntries","entries","map","createPackageSystemsRows","createPatchSetDetailRows","modifyAdvisorySystems","createAdvisorySystemsRows","inventoryModifier","action","newState","type","fetchRejected","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}