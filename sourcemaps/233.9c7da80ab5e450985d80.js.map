{"version":3,"sources":["webpack:///./src/Messages.js","webpack:///./src/PresentationalComponents/Filters/PublishDateFilter.js","webpack:///./src/PresentationalComponents/Filters/SearchFilter.js","webpack:///./src/PresentationalComponents/Filters/StatusFilter.js","webpack:///./src/PresentationalComponents/Filters/TypeFilter.js","webpack:///./src/PresentationalComponents/Snippets/ErrorHandler.js","webpack:///./src/PresentationalComponents/Snippets/ExternalLink.js","webpack:///./src/PresentationalComponents/TableView/TableFooter.js","webpack:///./src/PresentationalComponents/TableView/TableView.js","webpack:///./src/PresentationalComponents/TableView/TableViewAssets.js","webpack:///./src/SmartComponents/Remediation/PatchRemediationButton.js","webpack:///./src/SmartComponents/Remediation/RemediationModal.js","webpack:///./src/SmartComponents/SystemAdvisories/SystemAdvisories.js","webpack:///./src/SmartComponents/SystemPackages/SystemPackages.js","webpack:///./src/PresentationalComponents/Snippets/NoSystemData.js","webpack:///./src/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.js","webpack:///./src/PresentationalComponents/AdvisoryType/AdvisoryType.js","webpack:///./src/PresentationalComponents/Snippets/Label.js","webpack:///./src/PresentationalComponents/Snippets/DescriptionWithLink.js","webpack:///./src/PresentationalComponents/Snippets/EmptyStates.js","webpack:///./src/Utilities/DataMappers.js","webpack:///./src/PresentationalComponents/Snippets/AdvisoriesIcon.js","webpack:///./src/Utilities/Helpers.js","webpack:///./src/Utilities/Hooks.js","webpack:///./src/Utilities/IntlProvider.js","webpack:///./src/Utilities/axiosInterceptors.js","webpack:///./src/Utilities/api.js","webpack:///./src/Utilities/constants.js","webpack:///./src/store/ActionTypes.js","webpack:///./src/store/Actions/Actions.js","webpack:///./src/store/Reducers/HelperReducers.js","webpack:///./src/store/Reducers/SystemAdvisoryListStore.js","webpack:///./src/store/Reducers/SystemPackageListStore.js"],"names":["defineMessages","generalAppName","id","description","defaultMessage","labelsBulkSelectAll","labelsBulkSelectNone","labelsBulkSelectPage","labelsColumnsApplicableSystems","labelsColumnsCVSS","labelsColumnsCveID","labelsColumnsInstalledVersion","labelsColumnsLatestVersion","labelsColumnsName","labelsColumnsPublishDate","labelsColumnsSeverity","labelsColumnsStatus","labelsColumnsStatusPlaceholder","labelsColumnsSummary","labelsColumnsSynopsis","labelsColumnsType","labelsColumnsUpgradable","labelsCves","labelsCvesButton","labelsDescription","labelsFiltersClear","labelsFiltersCvesSearchPlaceHolder","labelsFiltersPackagesSearchPlaceHolder","labelsFiltersPackagesSearchTitle","labelsFiltersPublishDate","labelsFiltersPublishDatePlaceholder","labelsFiltersReset","labelsFiltersSearch","labelsFiltersSearchAdvisoriesPlaceholder","labelsFiltersSearchAdvisoriesTitle","labelsFiltersStatus","labelsFiltersSystemsSearchPlaceholder","labelsFiltersSystemsSearchTitle","labelsFiltersType","labelsFiltersTypePlaceholder","labelsModifiedDate","labelsNotAuthorizedDescription","labelsNotAuthorizedTitle","labelsPublicDate","labelsRemediate","labelsReturnToLandingPage","labelsReturnToPreviousPage","labelsSeverity","linksLearnAboutInsights","linksLearnMore","linksReadMore","linksSearchSecurityRatings","linksViewPackagesAndErrata","statesActivateInsights","statesError","statesMinimumPatchPermissionsRequired","statesNoApplicableAdvisories","statesNoMatchingAdvisories","statesNoMatchingCve","statesNoMatchingPackages","statesPatchNotConfigured","statesRequiresPatchPermissions","statesSystemUpToDate","textLockVersionTooltip","textThirdPartyInfo","titlesAdvisories","titlesAffectedSystems","titlesPackages","titlesPatchAdvisories","titlesPatchPackages","titlesPatchSystems","titlesSystems","apply","currentFilter","currentValue","public_date","filterByPublicDate","value","filter","label","intl","messages","type","conditionalFilterType","filterValues","onChange","event","items","publicDateOptions","placeholder","search","title","React","searchValue","setSearchValue","debounce","searchAdvisory","updatable","updatableTypesMap","updatableTypes","toString","filterByType","advisoryTypesMap","advisoryTypes","advisory_type","ErrorHandler","code","ErrorState","EmptyState","icon","LockIcon","prevPageButtonText","toLandingPageText","colSize","rowSize","propTypes","ExternalLink","link","text","href","target","flex","default","spacer","TableFooter","page","perPage","onSetPage","totalItems","onPerPageSelect","paginationOUIA","TableToolbar","Pagination","itemCount","widgetId","variant","PaginationVariant","ouiaId","PropTypes","TableView","columns","store","rows","metadata","status","queryParams","onCollapse","onSelect","onSort","onExport","filterConfig","sortBy","remediationProvider","selectedRows","compact","remediationButtonOUIA","tableOUIA","errorState","emptyState","defaultFilters","RemediationModalCmp","setRemediationModalCmp","convertLimitOffset","limit","offset","isRemediationLoading","setRemediationLoading","data","resolvedData","RemediationModal","useRemoveFilter","deleteFilters","deleteFilterGroup","selectedCount","arrayFromObj","length","hasError","isLoading","PrimaryToolbar","pagination","total_items","isCompact","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","onDeleteGroup","actionsConfig","actions","PatchRemediationButton","isDisabled","onClick","showRemediationModal","ouia","exportConfig","bulkSelect","useBulkSelectConfig","SkeletonTable","Table","cells","canSelectAll","isStickyHeader","TableVariant","TableHeader","TableBody","advisoriesColumns","cellFormatters","expandable","transforms","sortable","cellWidth","key","systemAdvisoriesColumns","systemPackagesColumns","packagesColumns","props","width","cvesTableColumns","Button","className","isSmall","alignItems","justifyContent","style","display","Spinner","isSVG","size","color","globalPaletteWhite","dispatch","useDispatch","remediations","setRemediations","insights","experimental","loadRemediations","pfReactTable","PfTable","TableGridBreakpoint","SortByDirection","then","handleRemediationSuccess","res","addNotification","getNotification","openWizard","onRemediationCreated","RemediationWizard","defaultProps","f","SystemAdvisories","history","handleNoSystemData","firstMount","setFirstMount","advisories","useSelector","SystemAdvisoryListStore","entity","entityDetails","expandedRows","createSystemAdvisoriesRows","clearSystemAdvisoriesStore","decodeQueryparams","location","push","encodeURLParams","fetchApplicableSystemAdvisories","_","rowId","expandSystemAdvisoryRow","getRowIdByIndexExpandable","useOnSelect","fetchApplicableSystemAdvisoriesApi","toSelect","selectSystemAdvisoryRow","advisory","useSortColumn","createSortBy","sort","useSetPage","usePerPageSelect","params","changeSystemAdvisoryListParams","Unavailable","useOnExport","csv","exportSystemAdvisoriesCSV","json","exportSystemAdvisoriesJSON","remediationIdentifiers","systemId","searchFilter","typeFilter","publishDateFilter","withRouter","SystemPackages","packages","SystemPackageListStore","error","createSystemPackagesRows","clearSystemPackagesStore","fetchApplicableSystemPackages","fetchApplicablePackagesApi","selectSystemPackagesRow","pkg","pkgUpdates","updates","latestUpdate","name","evra","row","changeSystemPackagesParams","Object","keys","SystemUpToDate","exportSystemPackagesCSV","exportSystemPackagesJSON","statusFilter","systemPackagesDefaultFilters","NoSystemData","Bullseye","paddingTop","EmptyStateIcon","WrenchIcon","Title","headingLevel","EmptyStateBody","component","SystemDetail","isInventoryApp","activeTabKey","setActiveTabKey","areTabsHidden","setTabsHidden","prevTabsHidden","Tabs","activeKey","isHidden","Tab","eventKey","TabTitleText","T","systemsListColumns","composed","renderFunc","createAdvisoriesIcons","createOSColumn","packageSystemsColumns","isStatic","createUpgradableColumn","systemsRowActions","rowData","map","item","AdvisoryType","advisoryType","Flex","flexWrap","FlexItem","isFilled","Label","children","DescriptionWithLink","severityObject","getSeverityById","attributes","severity","TextContent","cve_count","TextList","TextListVariants","TextListItem","TextListItemVariants","Text","TextVariants","whiteSpace","truncate","replace","RegExp","handlePatchLink","entityTypes","EmptyAdvisoryList","EmptyStateVariant","SearchIcon","EmptyPackagesList","EmptyCvesList","createAdvisoriesRows","index","isOpen","selected","undefined","synopsis","applicable_systems","processDate","parent","heightAuto","colSpan","createSystemsRows","rest","installedPckg","packages_installed","updatablePckg","packages_updatable","rhba","rhba_count","rhsa","rhsa_count","rhea","rhea_count","osName","os_name","osMajor","os_major","osMinor","os_minor","rhsm","Math","random","disableCheckbox","every","count","applicable_advisories","operating_system","createPackageSystemsRows","display_name","installed_evra","available_evra","upgradable","pkgNEVRA","summary","createPackagesRows","systems_installed","systems_updatable","createCvesRows","cve","advisorySeverities","impact","document","baseURI","parseFloat","cvss_score","toFixed","AdvisoriesIcon","tooltipText","Icon","Tooltip","content","removeUndefinedObjectItems","originalObject","newObject","JSON","parse","stringify","forEach","transformPairs","input","remediationIdentifier","issues","systems","header","values","column","multiple","join","direction","compoundSortValues","col","dir","findIndex","createSystemsSortBy","orderBy","orderDirection","hasLastUpload","toLowerCase","addOrRemoveItemFromSet","targetObj","inputArr","inputObj","reduce","obj","getNewSelectedItems","selectedItems","currentItems","payload","concat","arrayOfObjects","getOffsetFromPageLimit","getLimitFromPageSize","str","max","end","substr","SecurityIcon","BugIcon","EnhancementIcon","marginLeft","body","indexOf","Link","to","remediationProviderWithPairs","createPairs","transformFunc","pairsCreated","encodeParams","parameters","shouldTranslateKeys","allParams","result","entries","category","filterCategory","filterCategories","find","apiValue","getFilterValue","operator","flattenFilters","argKey","encodeURIComponent","argValue","some","includes","encodeApiParams","urlParams","selectedTags","queryString","parsed","qs","startsWith","bracketIndex","objParent","slice","objKey","filterValue","split","categories","buildChips","version","match","chips","changeListParams","oldParams","newParams","newState","hasOwnProperty","tags","subtractDate","days","date","Date","setDate","getDate","toISOString","preserveNewlines","sortCves","cves","sortedCves","aCells","bCells","aCell","bCell","stringA","toUpperCase","stringB","localeCompare","reverse","lockedVersion","removeUndefinedObjectKeys","prepareEntitiesParams","apiParams","filterRemediatableSystems","system","persistantParams","patchParams","decodedParams","Number","callback","columnName","compoundKey","removeFilter","resetFilters","selectedItem","categoryId","activeFilter","toRemove","Array","isArray","versions","chip","__","currentFilters","rawData","fetchAllData","selectRows","constructFilename","transformKey","constructKey","createSelectedRow","setPageTitle","toggleProps","checked","useGetEntities","fetchApi","config","packageName","_items","per_page","package_name","results","total","meta","prefix","formatHandlers","format","filename","exportNotifications","pending","success","downloadFile","cache","createIntlCache","locale","navigator","language","createIntl","onError","console","log","axiosInstance","axios","chrome","getUserPermissions","userPermissions","inventoryPermissionList","access","permission","interceptors","request","use","authInterceptor","response","ReadOnlyNotification","err","isAxiosError","statusText","detail","createApiCall","endpoint","method","window","auth","getUser","url","withCredentials","fetchApplicableAdvisoriesApi","fetchSystems","fetchSystemDetails","fetchAdvisoryDetailsApi","advisoryName","fetchPackageDetailsApi","fetchAdvisorySystems","args","fetchPackageSystems","fetchPackageVersions","fetchPackagesList","paramsWithoutSystemsUpdatable","fetchCvesInfo","cveIds","fetch","credentials","headers","Accept","cve_list","fetchViewAdvisoriesSystems","fetchFile","Headers","accept","exportAdvisoriesCSV","exportAdvisoriesJSON","exportSystemsCSV","exportSystemsJSON","exportPackagesCSV","exportPackagesJSON","exportAdvisorySystemsCSV","advisoryId","exportAdvisorySystemsJSON","systemName","exportPackageSystemsCSV","exportPackageSystemsJSON","asc","desc","storeListDefaults","isBeta","page_size","packagesListDefaultFilters","packagesListUpdatableTypes","package","FETCH_APPLICABLE_ADVISORIES","EXPAND_ADVISORY_ROW","SELECT_ADVISORY_ROW","CHANGE_ADVISORY_LIST_PARAMS","CHANGE_SYSTEM_ADVISORY_LIST_PARAMS","EXPAND_SYSTEM_ADVISORY_ROW","FETCH_APPLICABLE_SYSTEM_ADVISORIES","SELECT_SYSTEM_ADVISORY_ROW","CLEAR_SYSTEM_ADVISORIES","FETCH_ADVISORY_DETAILS","CLEAR_ADVISORY_DETAILS","CHANGE_SYSTEM_PACKAGES_LIST_PARAMS","FETCH_APPLICABLE_SYSTEM_PACKAGES","SELECT_SYSTEM_PACKAGES_ROW","CLEAR_SYSTEM_PACKAGES","TRIGGER_GLOBAL_FILTER","FETCH_PACKAGES_LIST","FETCH_PACKAGE_DETAILS","CLEAR_PACKAGE_DETAILS","CHANGE_PACKAGES_LIST_PARAMS","FETCH_CVES_INFO","CHANGE_CVES_STORE_PARAMS","FETCH_SYSTEM_DETAIL","CLEAR_ENTITIES","CHANGE_SYSTEMS_PARAMS","CHANGE_AFFECTED_SYSTEMS_PARAMS","CHANGE_PACKAGE_SYSTEMS_PARAMS","CLEAR_INVENTORY_REDUCER","fetchApplicableAdvisories","ActionTypes","Promise","resolve","noError","fetchAvisoryDetails","fetchPackageDetails","changeAdvisoryListParams","expandAdvisoryRow","rowState","selectAdvisoryRow","clearAdvisoryDetailStore","clearPackageDetailStore","globalFilter","fetchPackagesAction","changePackagesListParams","changePackageSystemsParams","fetchCves","fetchSystemDetailsAction","clearEntitiesStore","clearInventoryReducer","changeSystemsParams","changeAffectedSystemsParams","changeFilters","state","action","selectedUpdated","expandRows","expandedUpdated","fetchPending","fetchRejected","fetchFulfilled","initializeState"],"mappings":"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","file":"js/233.0615d6806ee4f72861fc.js","sourcesContent":["\n/* eslint-disable max-len */\n/* eslint sort-keys: [\"error\", \"asc\", {minKeys: 4}] */\n\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n\n    generalAppName: {\n        id: 'generalAppName',\n        description: 'regsiter page title',\n        defaultMessage: 'Patch'\n    },\n    labelsBulkSelectAll: {\n        id: 'labelsBulkSelectAll',\n        description: 'bulk select option',\n        defaultMessage: 'Select all ({count})'\n    },\n    labelsBulkSelectNone: {\n        id: 'labelsBulkSelectNone',\n        description: 'bulk select option',\n        defaultMessage: 'Select none (0)'\n    },\n    labelsBulkSelectPage: {\n        id: 'labelsBulkSelectPage',\n        description: 'bulk select option',\n        defaultMessage: 'Select page ({count})'\n    },\n    labelsColumnsApplicableSystems: {\n        id: 'labelsColumnsApplicableSystems',\n        description: 'shared label',\n        defaultMessage: 'Applicable systems'\n    },\n    labelsColumnsCVSS: {\n        id: 'labelsColumnsCVSS',\n        description: 'shared label',\n        defaultMessage: 'CVSS'\n    },\n    labelsColumnsCveID: {\n        id: 'labelsColumnsCveID',\n        description: 'shared label',\n        defaultMessage: 'CVE ID'\n    },\n    labelsColumnsInstalledVersion: {\n        id: 'labelsColumnsInstalledVersion',\n        description: 'shared label',\n        defaultMessage: 'Installed version'\n    },\n    labelsColumnsLatestVersion: {\n        id: 'labelsColumnsLatestVersion',\n        description: 'shared label',\n        defaultMessage: 'Latest version'\n    },\n    labelsColumnsName: {\n        id: 'labelsColumnsName',\n        description: 'shared label',\n        defaultMessage: 'Name'\n    },\n    labelsColumnsPublishDate: {\n        id: 'labelsColumnsPublishDate',\n        description: 'shared label',\n        defaultMessage: 'Publish date'\n    },\n    labelsColumnsSeverity: {\n        id: 'labelsColumnsSeverity',\n        description: 'shared label',\n        defaultMessage: 'Severity'\n    },\n    labelsColumnsStatus: {\n        id: 'labelsColumnsStatus',\n        description: 'Label for status fitler',\n        defaultMessage: 'Status'\n    },\n    labelsColumnsStatusPlaceholder: {\n        id: 'labelsColumnsStatus',\n        description: 'Label for status fitler placeholder',\n        defaultMessage: 'Filter by status'\n    },\n    labelsColumnsSummary: {\n        id: 'labelsColumnsSummary',\n        description: 'shared label',\n        defaultMessage: 'Summary'\n    },\n    labelsColumnsSynopsis: {\n        id: 'labelsColumnsSynopsis',\n        description: 'shared label',\n        defaultMessage: 'Synopsis'\n    },\n    labelsColumnsType: {\n        id: 'labelsColumnsType',\n        description: 'Label for type fitler placeholder',\n        defaultMessage: 'Type'\n    },\n    labelsColumnsUpgradable: {\n        id: 'labelsColumnsUpgradable',\n        description: 'shared label',\n        defaultMessage: 'Upgradable'\n    },\n    labelsCves: {\n        id: 'labelsCves',\n        description: 'label for cves info link',\n        defaultMessage: 'CVEs'\n    },\n    labelsCvesButton: {\n        id: 'labelsCvesButton',\n        description: 'label for cves button',\n        defaultMessage: '{cvesCount, plural, one {# CVE} other {# CVEs}} associated with this patch'\n    },\n    labelsDescription: {\n        id: 'labelsDescription',\n        description: 'Label',\n        defaultMessage: 'Description'\n    },\n    labelsFiltersClear: {\n        id: 'labelsFiltersClear',\n        description: 'label for remove filter chips',\n        defaultMessage: 'Clear filters'\n    },\n    labelsFiltersCvesSearchPlaceHolder: {\n        id: 'labelsFiltersCvesSearch',\n        description: 'search filter placeholder for packages pages',\n        defaultMessage: 'Filter by CVE ID'\n    },\n    labelsFiltersPackagesSearchPlaceHolder: {\n        id: 'labelsFiltersPackagesSearchPlaceHolder',\n        description: 'search filter placeholder for packages pages',\n        defaultMessage: 'Filter by name or summary'\n    },\n    labelsFiltersPackagesSearchTitle: {\n        id: 'labelsFiltersPackagesSearchTitle',\n        description: 'search filter placeholder for packages pages',\n        defaultMessage: 'Package'\n    },\n    labelsFiltersPublishDate: {\n        id: 'labelsFiltersPublishDate',\n        description: 'shared label',\n        defaultMessage: 'Publish date'\n    },\n    labelsFiltersPublishDatePlaceholder: {\n        id: 'labelsFiltersPublishDate',\n        description: 'shared placeholder label',\n        defaultMessage: 'Filter by publish date'\n    },\n    labelsFiltersReset: {\n        id: 'labelsFiltersReset',\n        description: 'label for remove filter chips',\n        defaultMessage: 'Reset filters'\n    },\n    labelsFiltersSearch: {\n        id: 'labelsFiltersSearch',\n        description: 'Label for search fitler placeholder',\n        defaultMessage: 'Search '\n    },\n    labelsFiltersSearchAdvisoriesPlaceholder: {\n        id: 'labelsFiltersSearchAdvisoriesPlaceholder',\n        description: 'Label for search fitler placeholder',\n        defaultMessage: 'Filter by name or synopsis'\n    },\n    labelsFiltersSearchAdvisoriesTitle: {\n        id: 'labelsFiltersSearchAdvisoriesTitle',\n        description: 'Label for search fitler placeholder',\n        defaultMessage: 'Advisory'\n    },\n    labelsFiltersStatus: {\n        id: 'labelsFiltersStatus',\n        description: 'Label for status fitler placeholder',\n        defaultMessage: 'Status'\n    },\n    labelsFiltersSystemsSearchPlaceholder: {\n        id: 'labelsFiltersSystemsSearch',\n        description: 'search filter placeholder for systems pages',\n        defaultMessage: 'Filter by name'\n    },\n    labelsFiltersSystemsSearchTitle: {\n        id: 'labelsFiltersSystemsSearchTitle',\n        description: 'search filter placeholder for systems pages',\n        defaultMessage: 'System'\n    },\n    labelsFiltersType: {\n        id: 'labelsFiltersType',\n        description: 'Label for type fitler',\n        defaultMessage: 'Type'\n    },\n    labelsFiltersTypePlaceholder: {\n        id: 'labelsFiltersType',\n        description: 'Label for type fitler placeholder',\n        defaultMessage: 'Filter by type'\n    },\n    labelsModifiedDate: {\n        id: 'labelsModifiedDate',\n        description: 'Modified date label',\n        defaultMessage: 'Modified {date}'\n    },\n    labelsNotAuthorizedDescription: {\n        id: 'notAuthorizedDescription',\n        description: 'Description for component which shows up when user doesn\\'t have permission to view content',\n        defaultMessage: 'Contact your organization administrator(s) for more information.'\n    },\n    labelsNotAuthorizedTitle: {\n        id: 'notAuthorizedTitle',\n        description: 'Title for component which shows up when user doesn\\'t have permission to view content',\n        defaultMessage: 'You do not have permissions to view or manage Patch'\n    },\n    labelsPublicDate: {\n        id: 'labelsPublicDate',\n        description: 'Public date label',\n        defaultMessage: 'Issued {date}'\n    },\n    labelsRemediate: {\n        id: 'labelsRemediate',\n        description: 'Button label',\n        defaultMessage: 'Remediate'\n    },\n    labelsReturnToLandingPage: {\n        id: 'returnToLandingPage',\n        description: 'Return to landing page label for general usage',\n        defaultMessage: 'Go to landing page'\n    },\n    labelsReturnToPreviousPage: {\n        id: 'returnPreviousPage',\n        description: 'Return to previous page label for general usage',\n        defaultMessage: 'Return to previous page'\n    },\n    labelsSeverity: {\n        id: 'labelsSeverity',\n        description: 'label for cves info',\n        defaultMessage: 'Severity'\n    },\n    linksLearnAboutInsights: {\n        id: 'linksLearnAboutInsights',\n        description: 'no system data page button label',\n        defaultMessage: 'Learn about the Insights client'\n    },\n    linksLearnMore: {\n        id: 'linksLearnMore',\n        description: 'Learn more',\n        defaultMessage: 'Learn more'\n    },\n    linksReadMore: {\n        id: 'linksReadMore',\n        description: 'Label',\n        defaultMessage: 'Read more'\n    },\n    linksSearchSecurityRatings: {\n        id: 'linksSearchSecurityRatings',\n        description: 'A link label to security ratings page',\n        defaultMessage: 'Learn more about security ratings'\n    },\n    linksViewPackagesAndErrata: {\n        id: 'viewPackagesAndErrata',\n        description: 'A link label to access.redhat.com ',\n        defaultMessage: 'View packages and errata at access.redhat.com'\n    },\n    statesActivateInsights: {\n        id: 'statesActivateInsights',\n        description: 'no system data page body',\n        defaultMessage: 'Activate the Insights client'\n    },\n    statesError: {\n        id: 'statesError',\n        description: 'Label',\n        defaultMessage: 'Error'\n    },\n    statesMinimumPatchPermissionsRequired: {\n        id: 'statesMinimumPatchPermissionsRequired',\n        description: 'No access page body',\n        defaultMessage: 'To view the content of this page, you must be granted a minimum of Patch permissions from your Organisation Administratior'\n    },\n    statesNoApplicableAdvisories: {\n        id: 'statesNoApplicableAdvisories',\n        description: 'system up to date page title',\n        defaultMessage: 'No applicable advisories'\n    },\n    statesNoMatchingAdvisories: {\n        id: 'statesNoMatchingAdvisories',\n        description: 'Label',\n        defaultMessage: 'No matching advisories found'\n    },\n    statesNoMatchingCve: {\n        id: 'statesNoMatchingCve',\n        description: 'Label',\n        defaultMessage: 'No matching CVES found'\n    },\n    statesNoMatchingPackages: {\n        id: 'statesNoMatchingPackages',\n        description: 'Label',\n        defaultMessage: 'No matching packages found'\n    },\n    statesPatchNotConfigured: {\n        id: 'statesPatchNotConfigured',\n        description: 'no system data page title',\n        defaultMessage: 'Patch is not yet configured'\n    },\n    statesRequiresPatchPermissions: {\n        id: 'statesRequiresPatchPermissions',\n        description: 'No access page title',\n        defaultMessage: 'This application requires Patch permissions'\n    },\n    statesSystemUpToDate: {\n        id: 'statesSystemUpToDate',\n        description: 'system up to date page body',\n        defaultMessage: 'This system is up to date, based on package information submitted at the most recent system check-in'\n    },\n    textLockVersionTooltip: {\n        id: 'textLockVersionTooltip',\n        description: 'Tooltip text for vesrion lock column',\n        defaultMessage: `Your RHEL version is locked at version {lockedVersion}`\n    },\n    textThirdPartyInfo: {\n        id: 'textThirdPartyInfo',\n        description: 'text about the third paty managed hosts',\n        defaultMessage: 'This system has content that is managed by repositories other than the Red Hat CDN'\n    },\n    titlesAdvisories: {\n        id: 'titlesAdvisories',\n        description: 'page title with capital letter',\n        defaultMessage: 'Advisories'\n    },\n    titlesAffectedSystems: {\n        id: 'affectedSystems',\n        description: 'page title with capital letter',\n        defaultMessage: 'Affected systems'\n    },\n    titlesPackages: {\n        id: 'titlesPackages',\n        description: 'page title with capital letters',\n        defaultMessage: 'Packages'\n    },\n    titlesPatchAdvisories: {\n        id: 'titlesPatchAdvisories',\n        description: 'title for Advisories page',\n        defaultMessage: 'Patch advisories'\n    },\n    titlesPatchPackages: {\n        id: 'titlesPatchPackages',\n        description: 'title for Packages page',\n        defaultMessage: 'Patch packages'\n    },\n    titlesPatchSystems: {\n        id: 'titlesPatchSystems',\n        description: 'title for Systems page',\n        defaultMessage: 'Patch systems'\n    },\n    titlesSystems: {\n        id: 'titlesSystems',\n        description: 'title with capital letters',\n        defaultMessage: 'Systems'\n    }\n});\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { publicDateOptions } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { public_date: currentValue } = currentFilter;\n\n    const filterByPublicDate = value => {\n        apply({ filter: { public_date: (value !== 'all' && value) || '' } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersPublishDate),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublicDate(value);\n            },\n            items: publicDateOptions,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersPublishDatePlaceholder)\n        }\n    };\n};\n\nexport default publishDateFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst searchFilter = (apply, search, title, placeholder) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [searchAdvisory] = React.useState(() =>\n        debounce(value => apply({ search: value }), 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: title,\n        filterValues: {\n            'aria-label': 'search-field',\n            onChange: (event, value) => {\n                setSearchValue(value);\n                searchAdvisory(value);\n            },\n            placeholder,\n            value: searchValue\n        }\n    };\n};\n\nexport default searchFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { updatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { updatable: currentValue } = currentFilter;\n\n    const updatableTypesMap = React.useMemo(\n        () =>\n            updatableTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { updatable: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStatus),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: updatableTypesMap,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsColumnsStatusPlaceholder)\n        }\n    };\n};\n\nexport default statusFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst typeFilter = (apply, currentFilter = {}) => {\n    const advisoryTypesMap = React.useMemo(\n        () =>\n            advisoryTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { advisory_type: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersType),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: advisoryTypesMap,\n            value: currentFilter.advisory_type,\n            placeholder: intl.formatMessage(messages.labelsFiltersTypePlaceholder)\n        }\n    };\n};\n\nexport default typeFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport { LockIcon } from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst ErrorHandler = ({ code, ErrorState, EmptyState }) => {\n\n    switch (code) {\n        case 204:\n            return <NotConnected />;\n        case 401:\n            return <NotAuthorized\n                icon={LockIcon}\n                title={intl.formatMessage(messages.labelsNotAuthorizedTitle)}\n                description={intl.formatMessage(messages.labelsNotAuthorizedDescription)}\n                prevPageButtonText={intl.formatMessage(messages.labelsReturnToPreviousPage)}\n                toLandingPageText={intl.formatMessage(messages.labelsReturnToLandingPage)}\n            />;\n\n        case 403:\n            return <NotAuthorized\n                icon={LockIcon}\n                title={intl.formatMessage(messages.labelsNotAuthorizedTitle)}\n                description={intl.formatMessage(messages.labelsNotAuthorizedDescription)}\n                prevPageButtonText={intl.formatMessage(messages.labelsReturnToPreviousPage)}\n                toLandingPageText={intl.formatMessage(messages.labelsReturnToLandingPage)}\n            />;\n\n        case 404:\n            return <InvalidObject />;\n\n        case 500:\n        case 502:\n        case 503:\n            return <Unavailable />;\n\n        default:\n            return ErrorState && <ErrorState />\n                || EmptyState && <EmptyState />\n                || <SkeletonTable colSize={5} rowSize={20} /> ;\n    }\n};\n\nErrorHandler.propTypes = {\n    code: propTypes.number,\n    ErrorState: propTypes.element,\n    EmptyState: propTypes.element\n};\n\nexport default ErrorHandler;\n","import { Flex, FlexItem } from '@patternfly/react-core';\nimport ExternalLinkSquareAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-square-alt-icon';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst ExternalLink = ({ link, text }) => {\n    return (\n        <a\n            href={link}\n            target=\"__blank\"\n        >\n            <Flex flex={{ default: 'inlineFlex' }}>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    <ExternalLinkSquareAltIcon />\n                </FlexItem>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    {text}\n                </FlexItem>\n            </Flex>\n        </a>\n\n    );\n};\n\nExternalLink.propTypes = {\n    link: propTypes.string,\n    text: propTypes.string\n};\n\nexport default ExternalLink;\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TableFooter = ({ page, perPage, onSetPage, totalItems, onPerPageSelect, paginationOUIA }) => {\n    return (\n        <TableToolbar>\n            <Pagination\n                itemCount={totalItems}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                widgetId={`pagination-options-menu-bottom`}\n                variant={PaginationVariant.bottom}\n                ouiaId={paginationOUIA}\n            />\n        </TableToolbar>\n    );\n};\n\nTableFooter.propTypes = {\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalItems: PropTypes.number,\n    paginationOUIA: PropTypes.string\n};\n\nexport default TableFooter;\n","import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport PatchRemediationButton from '../../SmartComponents/Remediation/PatchRemediationButton';\nimport RemediationModal from '../../SmartComponents/Remediation/RemediationModal';\nimport { arrayFromObj, buildFilterChips, convertLimitOffset } from '../../Utilities/Helpers';\nimport { useRemoveFilter, useBulkSelectConfig } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableFooter from './TableFooter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\n\nconst TableView = ({\n    columns,\n    store: {\n        rows,\n        metadata,\n        status,\n        queryParams: { filter, search }\n    },\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    onExport,\n    filterConfig,\n    sortBy,\n    remediationProvider,\n    selectedRows,\n    compact,\n    apply,\n    remediationButtonOUIA,\n    tableOUIA,\n    paginationOUIA,\n    errorState,\n    emptyState,\n    defaultFilters\n}) => {\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n\n    async function showRemediationModal(data) {\n        setRemediationLoading(true);\n        const resolvedData = await data;\n        setRemediationModalCmp(() => () => <RemediationModal data={resolvedData} />);\n        setRemediationLoading(false);\n    }\n\n    const [deleteFilters, deleteFilterGroup] = useRemoveFilter(filter, apply, defaultFilters);\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n    const { code, hasError, isLoading } = status;\n\n    return (\n        <React.Fragment>\n            {\n                (<React.Fragment>\n                    <PrimaryToolbar\n                        pagination={{\n                            itemCount: metadata.total_items,\n                            page,\n                            perPage,\n                            isCompact: true,\n                            onSetPage,\n                            onPerPageSelect,\n                            ouiaId: `top-${paginationOUIA}`\n                        }}\n                        filterConfig={filterConfig}\n                        activeFiltersConfig={{\n                            filters: buildFilterChips(filter, search),\n                            onDelete: deleteFilters,\n                            deleteTitle: intl.formatMessage(defaultFilters\n                                && messages.labelsFiltersReset || messages.labelsFiltersClear),\n                            onDeleteGroup: deleteFilterGroup\n                        }}\n                        actionsConfig={{\n                            actions: [remediationProvider && (\n                                <React.Fragment>\n                                    <PatchRemediationButton\n                                        isDisabled={selectedCount === 0 || isRemediationLoading}\n                                        onClick={() =>\n                                            showRemediationModal(remediationProvider())\n                                        }\n                                        ouia={remediationButtonOUIA}\n                                        isLoading={isRemediationLoading}\n                                    />\n\n                                    <RemediationModalCmp />\n                                </React.Fragment>\n                            )]\n                        }}\n                        exportConfig={{\n                            isDisabled: metadata.total_items === 0,\n                            onSelect: onExport\n                        }}\n                        bulkSelect={onSelect && useBulkSelectConfig(selectedCount, onSelect, metadata, rows, onCollapse)}\n\n                    />\n\n                    {isLoading && <SkeletonTable colSize={5} rowSize={20} />\n                        || hasError && <ErrorHandler code={code} ErrorState={errorState} EmptyState={emptyState}/>\n                        || <React.Fragment>\n                            <Table\n                                aria-label=\"Patch table view\"\n                                cells={columns}\n                                onSelect={metadata.total_items && onSelect}\n                                rows={rows}\n                                onCollapse={metadata.total_items && onCollapse}\n                                canSelectAll={false}\n                                onSort={metadata.total_items && onSort}\n                                ouiaId={tableOUIA}\n                                sortBy={metadata.total_items && sortBy}\n                                isStickyHeader\n                                variant={compact && TableVariant.compact}\n                            >\n                                <TableHeader />\n                                <TableBody />\n                            </Table>\n                            <TableFooter\n                                totalItems={metadata.total_items}\n                                perPage={perPage}\n                                page={page}\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                paginationOUIA={`bottom-${paginationOUIA}`}\n                            />\n                        </React.Fragment>\n                    }\n                </React.Fragment>)\n            }\n        </React.Fragment>\n    );\n};\n\nTableView.propTypes = {\n    columns: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    onExport: PropTypes.func,\n    remediationProvider: PropTypes.func,\n    selectedRows: PropTypes.object,\n    apply: PropTypes.func,\n    sortBy: PropTypes.object,\n    filterConfig: PropTypes.object,\n    store: PropTypes.object,\n    compact: PropTypes.bool,\n    remediationButtonOUIA: PropTypes.string,\n    tableOUIA: PropTypes.string,\n    paginationOUIA: PropTypes.string,\n    errorState: PropTypes.element,\n    emptyState: PropTypes.element,\n    defaultFilters: PropTypes.object\n};\n\nexport default TableView;\n","import { cellWidth, expandable, sortable } from '@patternfly/react-table/dist/js';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nexport const advisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSynopsis),\n        transforms: [sortable],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        key: 'applicable_systems'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(15)],\n        key: 'public_date'\n    }\n];\n\nexport const systemAdvisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: 'Synopsis',\n        transforms: [sortable, cellWidth(45)],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(15)],\n        key: 'advisory_type'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(25)],\n        key: 'public_date'\n    }\n];\n\nexport const systemPackagesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(20)],\n        key: 'name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsInstalledVersion),\n        transforms: [sortable, cellWidth(15)],\n        key: 'evra'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsLatestVersion),\n        transforms: [cellWidth(15)],\n        key: 'latest_update'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [cellWidth(10)],\n        key: 'updatable'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        key: 'summary'\n    }\n];\n\nexport const packagesColumns = [\n    {\n        key: 'name',\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(25)]\n    },\n    {\n        key: 'systems_installed',\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'systems_updatable',\n        title: intl.formatMessage(messages.labelsColumnsUpgradable),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'summary',\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        props: {\n            width: 30\n        }\n    }\n];\n\nexport const cvesTableColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsCveID),\n        transforms: [sortable, cellWidth(40)],\n        key: 'synopsis'\n    },\n    {\n        key: 'impact',\n        title: intl.formatMessage(messages.labelsColumnsSeverity),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    },\n    {\n        key: 'cvss',\n        title: intl.formatMessage(messages.labelsColumnsCVSS),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    }\n];\n","import { Button, Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport { AnsibleTowerIcon } from '@patternfly/react-icons';\nimport globalPaletteWhite from '@patternfly/react-tokens/dist/js/global_palette_white';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst PatchRemediationButton = ({ onClick, isDisabled, isLoading, ouia }) => {\n    return (\n        <Button\n            isDisabled={isDisabled}\n            className={'remediationButtonPatch'}\n            onClick={onClick}\n            ouiaId={ouia}\n            isSmall\n        ><Flex flex={{ default: 'inlineFlex' }}\n                alignItems={{ default: 'alignItemsCenter' }}\n                justifyContent={{ default: 'justifyContentCenter' }}>\n                <FlexItem spacer={{ default: 'spacerXs' }} style={{ display: 'flex' }}>\n                    {isLoading &&\n                                                <Spinner isSVG size='md'/>\n                                     || <AnsibleTowerIcon color={globalPaletteWhite.value}/>}\n                </FlexItem>\n                <FlexItem spacer={{ default: 'spacerXs' }} style={{ display: 'flex' }}>\n                                     &nbsp;{intl.formatMessage(messages.labelsRemediate)}\n                </FlexItem>\n            </Flex>\n        </Button>\n    );\n};\n\nPatchRemediationButton.propTypes = {\n    onClick: propTypes.object,\n    isDisabled: propTypes.bool,\n    isLoading: propTypes.bool,\n    ouia: propTypes.string\n};\n\nexport default PatchRemediationButton;\n","import {\n    cellWidth,\n    expandable, sortable,\n    SortByDirection, Table as PfTable,\n    TableBody,\n    TableGridBreakpoint, TableHeader,\n    TableVariant\n} from '@patternfly/react-table';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\n\nfunction getLoader() {\n    return (\n        (insights.experimental && insights.experimental.loadRemediations) ||\n        insights.loadRemediations\n    );\n}\n\nconst RemediationModal = ({ data }) => {\n    const dispatch = useDispatch();\n    const [remediations, setRemediations] = React.useState(false);\n    React.useEffect(() => {\n        getLoader()({\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            }\n        }).then(remediations => setRemediations(remediations));\n        return () => setRemediations(false);\n    }, []);\n\n    const handleRemediationSuccess = res => {\n        dispatch(addNotification(res.getNotification()));\n    };\n\n    React.useEffect(() => {\n        remediations &&\n            remediations\n            .openWizard({ ...data, onRemediationCreated: handleRemediationSuccess });\n    }, [remediations]);\n\n    return (\n        <React.Fragment>\n            {remediations.RemediationWizard && (\n                <remediations.RemediationWizard />\n            )}\n        </React.Fragment>\n    );\n};\n\nRemediationModal.propTypes = {\n    data: propTypes.object\n};\n\nRemediationModal.defaultProps = {\n    onRemediationCreated: f => f\n};\n\nexport default RemediationModal;\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemAdvisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changeSystemAdvisoryListParams, clearSystemAdvisoriesStore, expandSystemAdvisoryRow,\n    fetchApplicableSystemAdvisories, selectSystemAdvisoryRow } from '../../store/Actions/Actions';\nimport { fetchApplicableSystemAdvisoriesApi,\n    exportSystemAdvisoriesCSV, exportSystemAdvisoriesJSON\n} from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport { createSystemAdvisoriesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, decodeQueryparams, encodeURLParams,\n    getRowIdByIndexExpandable, remediationProvider } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn, useOnSelect, useOnExport } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst SystemAdvisories = ({ history, handleNoSystemData }) => {\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const advisories = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.rows\n    );\n\n    const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n\n    const expandedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.status\n    );\n    const rows = React.useMemo(\n        () =>\n            createSystemAdvisoriesRows(advisories, expandedRows, selectedRows, metadata),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        return () => dispatch(clearSystemAdvisoriesStore());\n    }, []);\n\n    React.useEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(\n                fetchApplicableSystemAdvisories({ id: entity.id, ...queryParams })\n            );\n        }\n    }, [queryParams]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandSystemAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            selectSystemAdvisoryRow(toSelect)\n        );\n    };\n\n    const fetchAllData = () =>\n        fetchApplicableSystemAdvisoriesApi({ id: entity.id, ...queryParams, limit: -1 });\n\n    const onSelect = useOnSelect(rows, selectedRows, fetchAllData, selectRows, (advisory) => advisory.id);\n\n    const onSort = useSortColumn(systemAdvisoriesColumns, apply, 2);\n    const sortBy = React.useMemo(\n        () => createSortBy(systemAdvisoriesColumns, metadata.sort, 2),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeSystemAdvisoryListParams({ id: entity.id, ...params }));\n    }\n\n    const errorState = status.code === 404 ? handleNoSystemData() : <Unavailable/>;\n\n    const onExport = useOnExport(entity.id, queryParams, {\n        csv: exportSystemAdvisoriesCSV,\n        json: exportSystemAdvisoriesJSON\n    }, dispatch);\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemAdvisoriesColumns}\n                compact\n                onCollapse={onCollapse}\n                onSelect={onSelect}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                onSort={onSort}\n                onExport={onExport}\n                sortBy={sortBy}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        entity.id,\n                        remediationIdentifiers.advisory\n                    )\n                }\n                selectedRows={selectedRows}\n                systemId={entity.id}\n                apply={apply}\n                store={{ rows, metadata, status, queryParams }}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-advisories-table'}\n                paginationOUIA={'system-advisories-pagination'}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search,\n                            intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle),\n                            intl.formatMessage(messages.labelsFiltersSearchAdvisoriesPlaceholder)\n                        ),\n                        typeFilter(apply, queryParams.filter),\n                        publishDateFilter(apply, queryParams.filter)\n                    ]\n                }}\n                errorState={errorState}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemAdvisories.propTypes = {\n    history: propTypes.object,\n    handleNoSystemData: propTypes.func\n};\nexport default withRouter(SystemAdvisories);\n","import { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport { SystemUpToDate } from '../../PresentationalComponents/Snippets/SystemUpToDate';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemPackagesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport {\n    changeSystemPackagesParams, clearSystemPackagesStore,\n    fetchApplicableSystemPackages, selectSystemPackagesRow\n} from '../../store/Actions/Actions';\nimport { fetchApplicablePackagesApi, exportSystemPackagesCSV, exportSystemPackagesJSON } from '../../Utilities/api';\nimport { remediationIdentifiers, systemPackagesDefaultFilters } from '../../Utilities/constants';\nimport { createSystemPackagesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, remediationProvider } from '../../Utilities/Helpers';\nimport { useOnSelect, usePerPageSelect, useSetPage, useSortColumn, useOnExport } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst SystemPackages = ({ handleNoSystemData }) => {\n    const dispatch = useDispatch();\n    const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n    const packages = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.rows\n    );\n    const queryParams = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.status\n    );\n    const error = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.error\n    );\n    const rows = React.useMemo(\n        () =>\n            createSystemPackagesRows(packages, selectedRows),\n        [packages,  selectedRows]\n    );\n\n    React.useEffect(() => {\n        return () => dispatch(clearSystemPackagesStore());\n    }, []);\n\n    React.useEffect(()=> {\n        dispatch(fetchApplicableSystemPackages({ id: entity.id, ...queryParams }));\n    }, [queryParams]);\n\n    const constructFilename = (pkg) => {\n        const pkgUpdates = pkg.updates || [];\n        const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n        return latestUpdate && `${pkg.name}-${latestUpdate.evra}`;\n    };\n\n    const transformKey = (row) => {\n        return `${row.name}-${row.evra}`;\n    };\n\n    const fetchAllData = () =>\n        fetchApplicablePackagesApi({ id: entity.id, ...queryParams, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        dispatch(selectSystemPackagesRow(toSelect));\n    };\n\n    const onSelect = useOnSelect(packages, selectedRows, fetchAllData, selectRows, constructFilename, transformKey);\n\n    function apply(params) {\n        dispatch(changeSystemPackagesParams({ id: entity.id, ...params }));\n    }\n\n    const onSort = useSortColumn(systemPackagesColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(systemPackagesColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const errorState = error.status === 404 ?  handleNoSystemData() : <Unavailable/>;\n    const emptyState = (!status.isLoading && !status.hasError && metadata.total_items === 0\n                            && Object.keys(queryParams).length === 0) && <SystemUpToDate/>;\n    const onExport = useOnExport(entity.id, queryParams, {\n        csv: exportSystemPackagesCSV,\n        json: exportSystemPackagesJSON\n    }, dispatch);\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemPackagesColumns}\n                store={{ rows, metadata, status, queryParams }}\n                onSelect={onSelect}\n                selectedRows={selectedRows}\n                compact\n                onSort={onSort}\n                sortBy={sortBy}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                onExport={onExport}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        entity.id,\n                        remediationIdentifiers.package\n                    )\n                }\n                apply={apply}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search,\n                            intl.formatMessage(messages.labelsFiltersPackagesSearchTitle),\n                            intl.formatMessage(messages.labelsFiltersPackagesSearchPlaceHolder)\n                        ),\n                        statusFilter(apply, queryParams.filter)\n                    ]\n                }}\n                defaultFilters = {systemPackagesDefaultFilters}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-packages-table'}\n                paginationOUIA={'system-packages-pagination'}\n                errorState={errorState}\n                emptyState={emptyState}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemPackages.propTypes = {\n    handleNoSystemData: propTypes.func\n};\nexport default SystemPackages;\n\n","import { Bullseye, Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const NoSystemData = () => (\n    <Bullseye>\n        <EmptyState style={{ paddingTop: 40 }}>\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                {intl.formatMessage(messages.statesPatchNotConfigured)}\n            </Title>\n            <EmptyStateBody>\n                {intl.formatMessage(messages.statesActivateInsights)}\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                {intl.formatMessage(messages.linksLearnAboutInsights)}\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport React from 'react';\nimport SystemAdvisories from '../SystemAdvisories/SystemAdvisories';\nimport { useSelector } from 'react-redux';\nimport SystemPackages from '../SystemPackages/SystemPackages';\nimport './SystemDetail.scss';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { NoSystemData } from '../../PresentationalComponents/Snippets/NoSystemData';\nimport propTypes from 'prop-types';\n\nconst SystemDetail = ({ isInventoryApp }) => {\n    const [activeTabKey, setActiveTabKey] = React.useState(0);\n    const [areTabsHidden, setTabsHidden] = React.useState(false);\n\n    const entity = useSelector(({ entityDetails }) => entityDetails.entity || {});\n    const onTabSelect = (event, id) => {\n        setActiveTabKey(id);\n    };\n\n    const handleNoSystemData = () => {\n        isInventoryApp && setTabsHidden(prevTabsHidden => !prevTabsHidden);\n        return isInventoryApp && null || <NoSystemData />;\n    };\n\n    return !entity.id ? null : (!areTabsHidden && (\n        <Tabs activeKey={activeTabKey} onSelect={onTabSelect} className={'patchTabSelect'} isHidden>\n            <Tab eventKey={0} title={<TabTitleText>{intl.formatMessage(messages.titlesAdvisories)}</TabTitleText>}\n                data-ouia-component-type={`system-advisories-tab`}\n                data-ouia-component-id={`system-advisories-tab`}\n            >\n                <SystemAdvisories handleNoSystemData={handleNoSystemData}/>\n            </Tab>\n            <Tab\n                eventKey={1}\n                title={<TabTitleText>{intl.formatMessage(messages.titlesPackages)}</TabTitleText>}\n                data-ouia-component-type={`system-packages-tab`}\n                data-ouia-component-id={`system-packages-tab`}\n            >\n                <SystemPackages handleNoSystemData={handleNoSystemData}/>\n            </Tab>\n        </Tabs>\n    )  || <NoSystemData/>);\n};\n\nSystemDetail.propTypes = {\n    isInventoryApp: propTypes.bool\n};\nexport default SystemDetail;\n","import { fetchApplicableSystemAdvisoriesApi } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport { createAdvisoriesIcons, createUpgradableColumn,\n    remediationProvider, createOSColumn } from '../../Utilities/Helpers';\nimport './SystemsListAssets.scss';\n\nexport const systemsListColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        props: {\n            width: 50\n        }\n    },\n    {\n        key: 'packages_installed',\n        title: 'Packages',\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'applicable_advisories',\n        title: 'Applicable advisories',\n        props: {\n            width: 15\n        },\n        renderFunc: value => createAdvisoriesIcons(value)\n    },\n    {\n        key: 'operating_system',\n        title: 'OS',\n        renderFunc: value => createOSColumn(value),\n        props: {\n            width: 10\n        }\n    }\n];\n\nexport const packageSystemsColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        props: {\n            width: 50\n        }\n    },\n    {\n        key: 'installed_evra',\n        title: 'Installed version',\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'available_evra',\n        title: 'Latest version',\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'upgradable',\n        title: 'Status',\n        props: {\n            width: 20,\n            isStatic: true\n        },\n        renderFunc: value => createUpgradableColumn(value)\n    }\n];\n\nexport const systemsRowActions = showRemediationModal => {\n    return [\n        {\n            title: 'Apply all applicable advisories',\n            onClick: (event, rowId, rowData) => {\n                fetchApplicableSystemAdvisoriesApi({\n                    id: rowData.id,\n                    limit: 10000\n                }).then(res =>\n                    showRemediationModal(\n                        remediationProvider(\n                            res.data.map(item => item.id),\n                            rowData.id,\n                            remediationIdentifiers.advisory\n                        )\n                    )\n                );\n            }\n        }\n    ];\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { Flex, FlexItem } from '@patternfly/react-core';\n\nconst AdvisoryType = ({ type }) => {\n    const advisoryType =\n        advisoryTypes.find(item => item.value === type) || advisoryTypes[2];\n    return (\n        <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n            <FlexItem>{advisoryType.icon}</FlexItem>\n            <FlexItem isFilled>{advisoryType.label}</FlexItem>\n        </Flex>\n    );\n};\n\nAdvisoryType.propTypes = {\n    type: PropTypes.number\n};\n\nexport default AdvisoryType;\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport './Label.scss';\n\nconst Label = ({ children }) => {\n    return <span className={'patchman-label'}>{children}</span>;\n};\n\nLabel.propTypes = {\n    children: propTypes.any\n};\n\nexport default Label;\n","import React from 'react';\nimport { Text, TextContent, TextVariants, TextList,\n    TextListVariants, TextListItem, TextListItemVariants } from '@patternfly/react-core';\nimport Label from './Label';\nimport { handlePatchLink, truncate, getSeverityById } from '../../Utilities/Helpers';\nimport { entityTypes } from '../../Utilities/constants';\nimport ExternalLink from './ExternalLink';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nexport const DescriptionWithLink = ({ row }) =>  {\n    const severityObject = getSeverityById(row.attributes.severity);\n    return (\n        <TextContent>\n            {\n                row.attributes.cve_count > 0 &&\n                (<TextList component={TextListVariants.dl} style ={{ '--pf-c-content--dl--RowGap': '0.5rem' }}>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsSeverity)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        <SecurityIcon size=\"sm\" color = {severityObject.color}/>  {severityObject.label}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsCves)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        {row.attributes.cve_count}\n                    </TextListItem>\n                </TextList>)}\n            <Label>{intl.formatMessage(messages.labelsDescription)}</Label>\n            <Text component={TextVariants.p} style={{ whiteSpace: 'pre-line' }}>\n                {truncate(row.attributes.description.replace(\n                    new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n                    ''\n                ), 570, handlePatchLink(entityTypes.advisories, row.id, intl.formatMessage(messages.linksReadMore)))}\n            </Text>\n            <ExternalLink link={`https://access.redhat.com/errata/${row.id}`}\n                text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n        </TextContent>);\n};\n\nDescriptionWithLink.propTypes = {\n    row: propTypes.shape({\n        id: propTypes.string,\n        attributes: propTypes.object\n    })\n};\n","import {\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const EmptyAdvisoryList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingAdvisories)}\n        </Title>\n    </EmptyState>\n);\n\nexport const EmptyPackagesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingPackages)}\n        </Title>\n    </EmptyState>\n);\n\nexport const EmptyCvesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingCve)}\n        </Title>\n    </EmptyState>\n);\n","import { TextContent, TextListItem, TextListItemVariants } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport AdvisoryType from '../PresentationalComponents/AdvisoryType/AdvisoryType';\nimport { DescriptionWithLink } from '../PresentationalComponents/Snippets/DescriptionWithLink';\nimport { EmptyAdvisoryList, EmptyCvesList, EmptyPackagesList } from '../PresentationalComponents/Snippets/EmptyStates';\nimport { SystemUpToDate } from '../PresentationalComponents/Snippets/SystemUpToDate';\nimport { advisorySeverities, entityTypes } from './constants';\nimport { createUpgradableColumn, handlePatchLink } from './Helpers';\n\nexport const createAdvisoriesRows = (rows, expandedRows, selectedRows) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        row.attributes.synopsis,\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type}\n                                />\n                            )\n                        },\n                        {\n                            title: handlePatchLink(\n                                entityTypes.advisories,\n                                row.id,\n                                row.attributes.applicable_systems\n                            )\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 5 },\n                        title: <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemAdvisoriesRows = (\n    rows,\n    expandedRows,\n    selectedRows,\n    metadata\n) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        row.attributes.synopsis,\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type}\n                                />\n                            )\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 6 },\n                        title: !metadata.search && (metadata.filter && Object.keys(metadata.filter).length === 0)\n                            && <SystemUpToDate />\n                            || <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows.map(({ id, ...rest }) => {\n            const {\n                packages_installed: installedPckg,\n                packages_updatable: updatablePckg,\n                rhba_count: rhba,\n                rhsa_count: rhsa,\n                rhea_count: rhea,\n                os_name: osName,\n                os_major: osMajor,\n                os_minor: osMinor,\n                rhsm\n            } = rest;\n\n            return {\n                id,\n                ...rest,\n                key: Math.random().toString() + id,\n                packages_installed: installedPckg,\n                disableCheckbox: updatablePckg === 0 || [installedPckg, rhba, rhsa, rhea].every(count => count === 0),\n                applicable_advisories: [\n                    rhea || 0,\n                    rhba || 0,\n                    rhsa || 0\n                ],\n                operating_system: {\n                    osName: osName && `${rest.os_name} ${osMajor}.${osMinor}`\n                        || 'N/A',\n                    rhsm\n                },\n                selected: selectedRows[id] !== undefined\n            };\n        });\n    return data || [];\n};\n\nexport const createPackageSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows &&\n        rows.map(row => {\n            return {\n                id: row.id,\n                key: Math.random().toString() + row.id,\n                display_name: row.display_name,\n                installed_evra: row.installed_evra,\n                available_evra: row.updatable && row.available_evra || row.installed_evra,\n                disableCheckbox: !row.updatable,\n                updatable: row.updatable,\n                upgradable: row.updatable,\n                selected: selectedRows[row.id] !== undefined\n            };\n        });\n    return data || [];\n};\n\nexport const createSystemPackagesRows = (rows, selectedRows = {}) => {\n    if (rows.length !== 0) {\n        return rows.map(pkg => {\n            const pkgNEVRA = `${pkg.name}-${pkg.evra}`;\n            const pkgUpdates = pkg.updates || [];\n            const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n\n            return {\n                id: pkgNEVRA,\n                key: pkgNEVRA,\n                selected: selectedRows[pkgNEVRA] !== undefined,\n                disableCheckbox: !latestUpdate,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.evra },\n                    { title: (latestUpdate && latestUpdate.evra) || pkg.evra },\n                    { title: createUpgradableColumn(pkg.updatable) },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createPackagesRows = (rows) => {\n    if (rows && rows.length !== 0) {\n        return rows.map(pkg => {\n            return {\n                id: pkg.name,\n                key: pkg.name,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.systems_installed },\n                    { title: pkg.systems_updatable },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createCvesRows = (rows) => {\n    if (rows.length !== 0) {\n        return rows.map(cve => {\n            const { attributes, id } = cve;\n            const severityObject = advisorySeverities.filter(severity => severity.label === attributes.impact)[0];\n\n            return {\n                id,\n                key: id,\n                cells: [\n                    {\n                        title: (\n                            <a href={`${document.baseURI}insights/vulnerability/cves/${attributes.synopsis}`}>\n                                {attributes.synopsis}\n                            </a>)\n                    },\n                    {\n                        title: (<TextContent>\n                            <TextListItem component={TextListItemVariants.dd}>\n                                <SecurityIcon size=\"sm\" color={severityObject.color} />  {severityObject.label}\n                            </TextListItem>\n                        </TextContent>),\n                        value: severityObject.label\n                    },\n                    { title: parseFloat(attributes.cvss_score).toFixed(1) }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 4 },\n                        title: <EmptyCvesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n","import React from 'react';\nimport { Flex, FlexItem, Tooltip } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nconst AdvisoriesIcon = ({ count, tooltipText, Icon }) =>(\n    <Tooltip content={tooltipText}>\n        <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n                <Icon/>\n            </FlexItem>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n                {count && count.toString() || 0}\n            </FlexItem>\n        </Flex>\n    </Tooltip>\n);\n\nAdvisoriesIcon.propTypes = {\n    Icon: propTypes.element,\n    count: propTypes.any,\n    tooltipText: propTypes.string\n};\n\nexport default AdvisoriesIcon;\n","import { Flex, FlexItem, Tooltip } from '@patternfly/react-core';\nimport {\n    BugIcon, CheckIcon,\n    EnhancementIcon, InfoCircleIcon, LongArrowAltUpIcon,\n    SecurityIcon\n} from '@patternfly/react-icons';\nimport { SortByDirection } from '@patternfly/react-table/dist/js';\nimport findIndex from 'lodash/findIndex';\nimport qs from 'query-string';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport messages from '../Messages';\nimport AdvisoriesIcon from '../PresentationalComponents/Snippets/AdvisoriesIcon';\nimport { packageSystemsColumns } from '../SmartComponents/Systems/SystemsListAssets';\nimport {\n    advisorySeverities,\n    compoundSortValues,\n    filterCategories\n} from './constants';\nimport { intl } from './IntlProvider';\n\nexport const removeUndefinedObjectItems = (originalObject) => {\n    const newObject = JSON.parse(JSON.stringify(originalObject));\n    Object.keys(newObject).forEach(key => newObject[key] === undefined && delete newObject[key]);\n\n    return newObject;\n};\n\nexport const convertLimitOffset = (limit, offset) => {\n    return [offset / limit + 1, limit];\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const transformPairs = (input, remediationIdentifier) => {\n    return {\n        issues: Object.keys(input.data).map(advisory => {\n            return {\n                id: `${remediationIdentifier}:${advisory}`,\n                description: advisory,\n                systems: input.data[advisory]\n            };\n        }\n        )\n    };\n};\n\nexport const createSortBy = (header, values, offset) => {\n    if (values) {\n        let [column] = values;\n        let multiple = values.join();\n        let direction =\n            column[0] === '-' ? SortByDirection.desc : SortByDirection.asc;\n        Object.keys(compoundSortValues).forEach(col => {\n            Object.keys(compoundSortValues[col]).forEach(dir => {\n                if (compoundSortValues[col][dir] === multiple) {\n                    column = col;\n                    direction = dir;\n                }\n            });\n        });\n\n        column = column.replace(/^(-|\\+)/, '');\n        const index = findIndex(header, item => item.key === column);\n        let sort = {\n            index: index + offset,\n            direction\n        };\n        return sort;\n    }\n\n    return {};\n};\n\nexport const createSystemsSortBy = (orderBy, orderDirection, hasLastUpload) => {\n    orderBy = (orderBy === 'updated' && !hasLastUpload) && 'last_upload' ||\n        (orderBy === 'updated' && hasLastUpload) && packageSystemsColumns[0].key || orderBy;\n\n    let sort = `${orderDirection === 'ASC' ? '' : '-'}${orderBy}`;\n\n    //if orderBy is for a compound column reset sort value to relative compound sort value\n    Object.keys(compoundSortValues).forEach(col => {\n        if (col === orderBy) {\n            sort = compoundSortValues[col][orderDirection.toLowerCase()];\n        }\n    });\n\n    return sort;\n};\n\nexport const addOrRemoveItemFromSet = (targetObj, inputArr) => {\n    const inputObj = inputArr.reduce(\n        (obj, item) => ((obj[item.rowId] = item.value || undefined), obj),\n        {}\n    );\n    const result = { ...targetObj, ...inputObj };\n    return result;\n};\n\nexport const getNewSelectedItems = (selectedItems, currentItems) => {\n    let payload = [].concat(selectedItems).map(item => ({ rowId: item.id, value: item.selected }));\n    return addOrRemoveItemFromSet(\n        currentItems,\n        payload\n    );\n};\n\n// for expandable rows only\nexport const getRowIdByIndexExpandable = (arrayOfObjects, index) => {\n    return arrayOfObjects[index / 2].id;\n};\n\nexport const getOffsetFromPageLimit = (page, limit) => {\n    return page * limit - limit;\n};\n\nexport const getLimitFromPageSize = limit => {\n    return limit;\n};\n\nexport function truncate(str, max, end) {\n    return str.length > max ? (\n        <React.Fragment>\n            {str.substr(0, max - 1)}\n            ...&nbsp;{end}\n        </React.Fragment>\n    ) : str;\n}\n\nexport function createAdvisoriesIcons([rhea, rhba, rhsa]) {\n    return (\n        <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n            {[rhea, rhba, rhsa].every(item => item === 0) &&\n                'No applicable advisories'}\n            {rhsa !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Security advisories'} count={rhsa} Icon={SecurityIcon} />\n                </FlexItem>)}\n            {rhba !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Bug fixes'} count={rhba} Icon={BugIcon} />\n                </FlexItem>)}\n            {rhea !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Enhancements'} count={rhea} Icon={EnhancementIcon} />\n                </FlexItem>)}\n        </Flex>\n    );\n}\n\nexport function createUpgradableColumn(value) {\n    return <div style={{\n        display: 'flex',\n        alignItems: 'center'\n    }}>\n        {\n            value && <LongArrowAltUpIcon style={{ color: 'var(--pf-global--palette--blue-400)' }} />\n            || <CheckIcon style={{ color: 'var(--pf-global--success-color--100)' }} />\n        }\n        {<span style={{ marginLeft: 'var(--pf-global--spacer--sm)' }}>\n            {\n                value && 'Upgradable' || 'Up-to-date'\n            }\n        </span>}\n    </div>;\n}\n\nexport function getSeverityById(id) {\n    return (\n        advisorySeverities.find(item => item.value === id) ||\n        advisorySeverities[0]\n    );\n}\n\nexport function handlePatchLink(type, name, body) {\n    if (location.href.indexOf('inventory') === -1) {\n        return (\n            <Link to={`/${type}/${name}`}>\n                {body === undefined ? name : body}\n            </Link>\n        );\n    } else {\n        return (\n            <a href={`${document.baseURI}insights/patch/${type}/${name}`}>\n                {body || name}\n            </a>\n        );\n    }\n}\n\nexport const arrayFromObj = items =>\n    Object.values(items).filter(value => value);\n\nexport const remediationProvider = (issues, systems, remediationIdentifier) => {\n    issues = [].concat(issues);\n    systems = [].concat(systems);\n    return issues.length && systems.length\n        ? {\n            issues: issues.map(item => ({\n                id: `${remediationIdentifier}:${item}`,\n                description: item\n            })),\n            systems\n        }\n        : false;\n};\n\nexport async function remediationProviderWithPairs(issues, createPairs, transformFunc, remediationIdentifier) {\n    if (issues) {\n        const pairsCreated = await createPairs(issues);\n        const res = transformFunc(pairsCreated, remediationIdentifier);\n        return await res;\n    }\n    else {\n        return false;\n    }\n}\n\n;\n\nexport const getFilterValue = (category, key) => {\n    const filterCategory = filterCategories[category];\n    if (filterCategory) {\n        const filterOption = filterCategory.values.find(\n            item => item.value === key\n        );\n        return filterOption || { apiValue: key };\n    } else {\n        return { apiValue: key };\n    }\n};\n\nexport const encodeParams = (parameters, shouldTranslateKeys) => {\n    const flattenFilters = filter => {\n        let result = {};\n        filter &&\n            Object.entries(filter).forEach(item => {\n                let [key, value] = item;\n                value = shouldTranslateKeys && getFilterValue(key, value).apiValue || value;\n                const operator = ([].concat(value).length > 1 || key === 'installed_evra') ? 'in:' : '';\n                result = {\n                    ...result,\n                    [`filter[${key}]`]: `${operator}${value.toString()}`\n                };\n            });\n        return result;\n    };\n\n    let { filter, ...allParams } = parameters;\n    allParams = { ...allParams, ...flattenFilters(filter) };\n    let params = [];\n    Object.keys(allParams).forEach(key => {\n        const argKey = encodeURIComponent(key);\n        const argValue = encodeURIComponent(allParams[key]);\n\n        if (!['', undefined, null].some(value => [argValue, key].includes(value))) {\n            if (!['selectedTags', 'systemProfile'].includes(key)) {\n                params.push(argKey.concat('=').concat(argValue));\n            } else if (key === 'selectedTags') {\n                params.push.apply(params, allParams[key]);\n            } else {\n                params.push(allParams[key]);\n            }\n        }\n    });\n\n    return '?'.concat(params.join('&'));\n};\n\nexport const encodeApiParams = parameters => {\n    return encodeParams(parameters, true);\n};\n\nexport const encodeURLParams = parameters => {\n    delete parameters.id;\n    let urlParams = { ...parameters };\n    delete urlParams.selectedTags;\n    return encodeParams(removeUndefinedObjectItems(urlParams), false);\n};\n\nexport const decomposeFilterValue = filterValue => {\n    if (filterValue.startsWith('in:')) {\n        const values = filterValue.slice(3);\n        return values.split(',');\n    }\n\n    return filterValue;\n};\n\nexport const decodeQueryparams = queryString => {\n    const parsed = qs.parse(queryString);\n    const res = {};\n    Object.keys(parsed).forEach(key => {\n        if (!key.startsWith('filter[system_profile]')) {\n            const value = parsed[key];\n            const bracketIndex = key.search(/\\[.*\\]/);\n            if (bracketIndex > 0) {\n                const objParent = key.slice(0, bracketIndex);\n                const objKey = key.slice(bracketIndex + 1, -1);\n                res[objParent] = {\n                    ...res[objParent],\n                    [objKey]: decomposeFilterValue(value)\n                };\n            } else {\n                res[key] = value;\n            }\n        }\n    });\n    return res;\n};\n\nexport const buildFilterChips = (filters, search) => {\n\n    let filterConfig = [];\n    const buildChips = (filters, category) =>{\n        if (category === 'installed_evra') {\n            const versions = filters[category] && filters[category].split(',') || [];\n            return versions.map(version => ({\n                name: version,\n                id: category,\n                value: version\n            }));\n        } else {\n            const { values } = filterCategories[category];\n            return [].concat(filters[category]).map(filterValue => {\n                const match = values.find(\n                    item =>\n                        item.value.toString() === filterValue.toString()\n                );\n                return {\n                    name: match.label,\n                    value: filterValue,\n                    id: match.value\n                };\n            });\n        }\n    };\n\n    const processFilters = () => {\n        let categories = Object.keys(filters).filter(\n            item =>\n                filters[item] !== '' && [].concat(filters[item]).length !== 0\n        );\n        filterConfig = filterConfig.concat(\n            categories.map(category => {\n                const label = category === 'installed_evra' && 'Package version' || filterCategories[category].label;\n                return {\n                    category: label,\n                    id: category,\n                    chips: buildChips(filters, category)\n                };\n            })\n        );\n    };\n\n    const processSearch = () => {\n        filterConfig = filterConfig.concat([\n            {\n                category: 'Search',\n                id: 'search',\n                chips: [\n                    {\n                        name: search,\n                        value: search\n                    }\n                ]\n            }\n        ]);\n    };\n\n    filters && processFilters();\n    search && processSearch();\n\n    return filterConfig;\n};\n\nexport const changeListParams = (oldParams, newParams) => {\n    const newState = { ...oldParams, ...newParams };\n    const offsetResetParams = ['filter', 'search', 'limit', 'selectedTags'];\n    if (offsetResetParams.some(item => newParams.hasOwnProperty(item))) {\n        newState.offset = 0;\n    }\n\n    if (newParams.hasOwnProperty('filter')) {\n        newState.filter = { ...oldParams.filter, ...newParams.filter };\n\n        //we need explicitly remove 'undefined' filters for safety\n        Object.keys(newState.filter).forEach(key => newState.filter[key] === undefined && delete newState.filter[key]);\n    }\n\n    if (newState.hasOwnProperty('tags')) {\n        newState && delete newState.tags;\n    }\n\n    return newState;\n};\n\nexport function subtractDate(days) {\n    const date = new Date();\n    date.setDate(date.getDate() - days);\n    return date.toISOString();\n}\n\nexport function preserveNewlines(input) {\n    return input && input.replace(\n        new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n        ''\n    );\n}\n\nexport function sortCves(cves, index, direction) {\n\n    const sortedCves = cves.sort(\n        ({ cells: aCells }, { cells: bCells }) => {\n            const aCell = aCells[index].value || aCells[index].title;\n            const bCell = bCells[index].value || bCells[index].title;\n\n            const stringA = aCell.toString().toUpperCase();\n            const stringB = bCell.toString().toUpperCase();\n\n            return stringA.localeCompare(stringB);\n        }\n    );\n\n    return {\n        sortBy: { index, direction },\n        sortedCves: direction === SortByDirection.asc ? sortedCves : sortedCves.reverse()\n    };\n\n}\n\nexport const createOSColumn = ({ osName, rhsm }) => (rhsm === '' || rhsm === undefined) && osName || (\n    <Tooltip\n        content={\n            intl.formatMessage(messages.textLockVersionTooltip, { lockedVersion: rhsm })\n        }\n    >\n        <Flex flex={{ default: 'inlineFlex' }}>\n            <FlexItem spacer={{ default: 'spacerSm' }}>{osName}</FlexItem>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n                <InfoCircleIcon size=\"sm\" color={'var(--pf-global--info-color--100)'} />\n            </FlexItem>\n        </Flex>\n    </Tooltip>\n);\n\nexport const removeUndefinedObjectKeys = (selectedRows) => Object.keys(selectedRows).filter(row => selectedRows[row]);\n\nexport const prepareEntitiesParams = (parameters) => {\n    const offset = parameters.offset || getOffsetFromPageLimit(parameters.page || 1, parameters.perPage || 20);\n    const limit = parameters.limit || getLimitFromPageSize(parameters.perPage || 20);\n\n    const apiParams = { ...parameters, offset, limit };\n\n    //we need explicitly remove 'undefined' parameters for safety\n    return removeUndefinedObjectItems(apiParams);\n};\n\nexport const filterRemediatableSystems = result => ({ data: result?.data.filter(system => {\n    const {\n        packages_installed: installedPckg,\n        packages_updatable: updatablePckg,\n        rhba_count: rhba,\n        rhsa_count: rhsa,\n        rhea_count: rhea\n    } = system.attributes || {};\n\n    const isDisabled = updatablePckg === 0 || [installedPckg, rhba, rhsa, rhea].every(count => count === 0);\n\n    return !isDisabled;\n})\n});\n\nexport const persistantParams = (patchParams, decodedParams) => {\n    const persistantParams = { ...patchParams, ...decodedParams };\n    return (\n        {\n            page: Number(persistantParams.page || 1),\n            perPage: Number(persistantParams.perPage || 20),\n            ...(persistantParams.sort && {\n                sortBy: {\n                    key: persistantParams.sort.replace(/^-/, ''),\n                    direction: persistantParams.sort.match(/^-/) ? 'desc' : 'asc'\n                }\n            })\n        }\n    );};\n","import { SortByDirection } from '@patternfly/react-table/dist/js';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport isDeepEqualReact from 'fast-deep-equal/react';\nimport React from 'react';\nimport messages from '../Messages';\nimport { compoundSortValues, exportNotifications } from './constants';\nimport {\n    convertLimitOffset, createSystemsSortBy, getLimitFromPageSize,\n    getOffsetFromPageLimit, encodeURLParams\n} from './Helpers';\nimport { intl } from './IntlProvider';\n\nexport const useSetPage = (limit, callback) => {\n    const onSetPage = React.useCallback((_, page) =>\n        callback({ offset: getOffsetFromPageLimit(page, limit) })\n    );\n    return onSetPage;\n};\n\nexport const useHandleRefresh = (metadata, callback) => {\n    const handleRefresh = React.useCallback(({ page, per_page: perPage }) => {\n        const offset = getOffsetFromPageLimit(page, perPage);\n        const limit = getLimitFromPageSize(perPage);\n        (metadata.offset !== offset || metadata.limit !== limit) &&\n            callback({\n                ...(metadata.offset !== offset && { offset }),\n                ...(metadata.limit !== limit && { limit })\n            });\n    });\n    return handleRefresh;\n};\n\nexport const usePagePerPage = (limit, offset) => {\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(limit, offset),\n        [limit, offset]\n    );\n    return [page, perPage];\n};\n\nexport const usePerPageSelect = callback => {\n    const onPerPageSelect = React.useCallback((_, perPage) =>\n        callback({ limit: getLimitFromPageSize(perPage), offset: 0 })\n    );\n    return onPerPageSelect;\n};\n\nexport const useSortColumn = (columns, callback, offset = 0) => {\n    const onSort = React.useCallback((_, index, direction) => {\n        let columnName = columns[index - offset].key;\n        const compoundKey = compoundSortValues[columnName];\n        if (compoundKey) {\n            columnName = compoundKey[direction];\n        }\n        else if (direction === SortByDirection.desc) {\n            columnName = '-' + columnName;\n        }\n\n        callback({ sort: columnName });\n    });\n    return onSort;\n};\n\nexport const useRemoveFilter = (filters, callback, defaultFilters = { filter: {} }) => {\n    const removeFilter = React.useCallback((event, selected, resetFilters) => {\n        let newParams = { filter: {} };\n        selected.forEach(selectedItem => {\n            let { id: categoryId, chips } = selectedItem;\n            if (categoryId !== 'search' && categoryId !== 'installed_evra') {\n                let activeFilter = filters[categoryId];\n                const toRemove = chips.map(item => item.id.toString());\n                if (Array.isArray(activeFilter)) {\n                    newParams.filter[categoryId] = activeFilter.filter(\n                        item => !toRemove.includes(item.toString())\n                    );\n                } else {\n                    newParams.filter[categoryId] = undefined;\n                }\n            } else if (categoryId === 'installed_evra') {\n                const versions = filters[categoryId].split(',');\n                newParams.filter[categoryId] = (versions.length !== 1) && versions\n                .filter(version => !chips.find(chip => chip.value === version)).join(',') || undefined;\n            }\n            else {\n                newParams.search = '';\n            }\n\n        });\n\n        if (resetFilters) {\n            newParams = resetFilters(newParams);\n        }\n\n        callback({ ...newParams });\n    });\n\n    const deleteFilterGroup = (__, filters) => {\n        removeFilter(__, filters);\n    };\n\n    const deleteFilters = (__, selected) => {\n        const resetFilters = (currentFilters) => {\n            if (Object.keys(defaultFilters.filter).length > 0) {\n                currentFilters.filter = { ...currentFilters.filter, ...defaultFilters.filter };\n            }\n\n            return currentFilters;\n        };\n\n        removeFilter(__, selected, resetFilters);\n    };\n\n    return [deleteFilters, deleteFilterGroup];\n};\n\nexport const useOnSelect = (rawData, selectedRows, fetchAllData, selectRows,\n    constructFilename = undefined, transformKey = undefined) => {\n    const constructKey = (row) => {\n        if (transformKey) {\n            return transformKey(row);\n        }\n        else {\n            return row.id || row.name;\n        }\n    };\n\n    const onSelect = React.useCallback((event, selected, rowId) => {\n        const createSelectedRow = (rawData, toSelect = []) => {\n            rawData.forEach((row) => {\n                toSelect.push(\n                    {\n                        id: constructKey(row),\n                        selected: constructFilename && constructFilename(row) || row.id\n                    }\n                );\n            });\n\n            return toSelect;\n        };\n\n        switch (event) {\n            case 'none': {\n                const toSelect = [];\n                Object.keys(selectedRows).forEach(id => {\n                    toSelect.push(\n                        {\n                            id,\n                            selected: false\n                        }\n                    );\n                });\n                selectRows(toSelect);\n                break;\n            }\n\n            case 'page': {\n                if (Array.isArray(rawData)) {\n                    rawData = rawData.filter(row => !row.disableCheckbox);\n                }\n\n                selectRows(createSelectedRow(rawData));\n                break;\n            }\n\n            case 'all': {\n                const fetchCallback = ({ data }) => {\n                    selectRows(createSelectedRow(data));\n                };\n\n                fetchAllData().then(fetchCallback);\n\n                break;\n            }\n\n            default: {\n                selectRows([{\n                    id: constructKey(rawData[rowId]),\n                    selected: selected && (constructFilename && constructFilename(rawData[rowId]) || true)\n                }]);\n            }\n\n        }\n    }\n    );\n\n    return onSelect;\n};\n\nexport const setPageTitle = (title) => {\n    React.useEffect(() => {\n        if (title) {\n            document.title = `${title} - Patch | Red Hat Insights`;\n        }\n    }, [title]);\n};\n\nexport const useDeepCompareEffect = (effect, deps) => {\n    const ref = React.useRef(undefined);\n\n    if (!ref.current || !isDeepEqualReact(deps, ref.current)) {\n        ref.current = deps;\n    }\n\n    React.useEffect(effect, ref.current);\n};\n\nexport const useBulkSelectConfig = (selectedCount, onSelect, metadata, rows, onCollapse) => ({\n    count: selectedCount,\n    items: [{\n        title: intl.formatMessage(messages.labelsBulkSelectNone),\n        onClick: () => {\n            onSelect('none');\n        }\n    }, {\n        title: intl.formatMessage(messages.labelsBulkSelectPage,\n            { count: onCollapse && rows.length / 2 || rows.length }\n        ),\n        onClick: () => {\n            onSelect('page');\n        }\n    },\n    {\n        title: intl.formatMessage(messages.labelsBulkSelectAll, { count: metadata.total_items }),\n        onClick: () => {\n            onSelect('all');\n        }\n    }],\n    onSelect: () => {\n        selectedCount === 0 ? onSelect('all') : onSelect('none');\n    },\n    toggleProps: {\n        'data-ouia-component-type': 'bulk-select-toggle-button'\n    },\n    checked: selectedCount === 0 ? false : selectedCount === metadata.total_items ? true : null,\n    isDisabled: metadata.total_items === 0 && selectedCount === 0\n});\n\nexport const useGetEntities = (fetchApi, apply, config, history) => {\n    const { id, packageName } = config || {};\n    const getEntities = async (\n        _items,\n        { orderBy, orderDirection, page, per_page: perPage, patchParams }\n    ) => {\n\n        const sort = createSystemsSortBy(orderBy, orderDirection, packageName);\n\n        const items = await fetchApi({\n            page,\n            perPage,\n            ...patchParams,\n            sort,\n            ...id && { id } || {},\n            ...packageName && { package_name: packageName } || {}\n        });\n\n        apply({\n            page,\n            perPage,\n            sort\n        });\n\n        history.push(encodeURLParams({\n            page,\n            perPage,\n            sort,\n            ...patchParams\n        }));\n        return {\n            results: items.data.map(row => ({ ...row, ...row.attributes })),\n            total: items.meta?.total_items\n        };\n    };\n\n    return getEntities;\n};\n\nexport const useOnExport = (prefix, queryParams, formatHandlers, dispatch) => {\n    const onExport = React.useCallback((_, format) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const filename = `${prefix}-${date}`;\n        dispatch(addNotification(exportNotifications().pending));\n        formatHandlers[format](queryParams, prefix).then(data => {\n            dispatch(addNotification(exportNotifications(format).success));\n            downloadFile(data, filename, format);\n        }).catch(() => dispatch(addNotification(exportNotifications().error)));\n    });\n    return onExport;\n};\n","import { createIntl, createIntlCache } from 'react-intl';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\n\nexport const intl = createIntl({\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    locale\n}, cache);\n\nexport const intlSettings = { locale };\n","import {\n    authInterceptor\n} from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport axios from 'axios';\nimport { ReadOnlyNotification } from './constants';\n\nconst axiosInstance = axios.create();\n\nexport async function  accessCheckInterceptor (config)  {\n\n    const userPermissions = await insights.chrome.getUserPermissions();\n    const inventoryPermissionList = ['inventory:*:*', 'inventory:*:read', 'inventory:hosts:read'];\n\n    const hasInventoryAccess = userPermissions.some((access) => inventoryPermissionList.includes(access?.permission));\n\n    if (!hasInventoryAccess) {\n        throw new axios.Cancel('Operation canceled. User does not have access to Inventory');\n    }\n\n    return config;\n}\n\nexport function errorInterceptor(err) {\n\n    if (!axios.isCancel(err)) {\n\n        const { response, isAxiosError } = { ...err };\n\n        if (response && isAxiosError) {\n            const { status, statusText, data } = response;\n\n            if (!status) {\n                throw err;\n            } else {\n                const genericError = {\n                    title:\n                            'There was an error getting data'\n                };\n\n                const result = { ...genericError, detail: data.error || statusText, status };\n\n                throw result;\n            }\n        }\n\n        throw err;\n    }\n}\n\nexport function readOnlyInterceptor(error) {\n    if (error.response && error.response.status === 503) {\n        const data = ReadOnlyNotification;\n        throw data;\n    }\n\n    throw error;\n}\n\nexport function responseDataInterceptor(response) {\n    if (response.data && typeof response.data === 'object') {\n        return { ...response.data, status: response.status };\n    }\n\n    return response;\n}\n\naxiosInstance.interceptors.request.use(accessCheckInterceptor);\naxiosInstance.interceptors.request.use(authInterceptor);\naxiosInstance.interceptors.response.use(responseDataInterceptor);\naxiosInstance.interceptors.response.use(null, readOnlyInterceptor);\naxiosInstance.interceptors.response.use(null, errorInterceptor);\n\nexport default axiosInstance;\n","/* eslint-disable camelcase */\n/* eslint-disable no-unused-vars */\nimport axios from './axiosInterceptors';\nimport { encodeApiParams, prepareEntitiesParams } from './Helpers';\nexport function createApiCall(\n    endpoint,\n    method,\n    parameters = undefined,\n    data = undefined\n) {\n    if (parameters && method === 'get') {\n        endpoint = endpoint.concat(encodeApiParams(parameters));\n    }\n\n    let result = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        axios({\n            method,\n            url: '/api/patch/v1' + endpoint,\n            withCredentials: true,\n            data\n        })\n    );\n\n    return result;\n}\n\nexport const fetchApplicableAdvisoriesApi = params => {\n    return createApiCall('/advisories', 'get', params);\n};\n\nexport const fetchApplicableSystemAdvisoriesApi = params => {\n    let { id, ...allParams } = params;\n    return createApiCall(`/systems/${id}/advisories`, 'get', allParams);\n};\n\nexport const fetchSystems = params => {\n    return createApiCall('/systems', 'get', prepareEntitiesParams(params));\n};\n\nexport const fetchSystemDetails = id => {\n    return createApiCall(`/systems/${id}`, 'get');\n};\n\nexport const fetchAdvisoryDetailsApi = params => {\n    return createApiCall(`/advisories/${params.advisoryName}`, 'get');\n};\n\nexport const fetchPackageDetailsApi = params => {\n    return createApiCall(`/packages/${params.packageName}`, 'get');\n};\n\nexport const fetchApplicablePackagesApi = params => {\n    let { id, ...allParams } = params;\n    return createApiCall(`/systems/${id}/packages`, 'get', allParams);\n};\n\nexport const fetchAdvisorySystems = params => {\n    const { id, ...args } = params;\n    return createApiCall(`/advisories/${id}/systems`, 'get', prepareEntitiesParams(args));\n};\n\nexport const fetchPackageSystems = params => {\n    const { package_name, ...args } = params;\n    return createApiCall(`/packages/${package_name}/systems`, 'get', prepareEntitiesParams(args));\n};\n\nexport const fetchPackageVersions = params => {\n    const { package_name, ...args } = params;\n    return createApiCall(`/packages/${package_name}/versions`, 'get', args);\n};\n\nexport const fetchPackagesList = params => {\n    const { systems_updatable } = params.filter;\n\n    // we have to reset systems_updatable filter to include all filters when we want to show all the data\n    if (Array.isArray(systems_updatable) && systems_updatable.length === 2) {\n        const paramsWithoutSystemsUpdatable = JSON.parse(JSON.stringify(params));\n        delete paramsWithoutSystemsUpdatable.filter.systems_updatable;\n\n        return createApiCall('/packages', 'get', paramsWithoutSystemsUpdatable);\n    }\n\n    return createApiCall('/packages', 'get', params);\n};\n\nexport const fetchCvesInfo = async ({ cveIds }) => {\n\n    const result = await fetch(`/api/vulnerability/v1/vulnerabilities/cves?limit=${cveIds && cveIds.length}`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ cve_list: cveIds })\n    }).then(res => res.json()).then(data => data);\n\n    return result;\n};\n\nexport const fetchViewAdvisoriesSystems = async (input) => {\n    const result = await fetch(`/api/patch/v1/views/advisories/systems`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(input)\n    }).then(res => res.json()).then(data => data);\n\n    return result;\n};\n\nconst fetchFile = (params, endpoint, type) => {\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: type })\n    }).then(res => res.text());\n};\n\nexport const exportAdvisoriesCSV = params => {\n    let endpoint = '/export/advisories';\n    return fetchFile(params, endpoint, 'text/csv');\n};\n\nexport const exportAdvisoriesJSON = params => {\n    let endpoint = '/export/advisories';\n    return fetchFile(params, endpoint, 'application/json');\n};\n\nexport const exportSystemsCSV = params => {\n    let endpoint = '/export/systems';\n    return fetchFile(params, endpoint, 'text/csv');\n};\n\nexport const exportSystemsJSON = params => {\n    let endpoint = '/export/systems';\n    return fetchFile(params, endpoint, 'application/json');\n};\n\nexport const exportPackagesCSV = params => {\n    let endpoint = '/export/packages';\n    return fetchFile(params, endpoint, 'text/csv');\n};\n\nexport const exportPackagesJSON = params => {\n    let endpoint = '/export/packages';\n    return fetchFile(params, endpoint, 'application/json');\n};\n\nexport const exportAdvisorySystemsCSV = (params, advisoryId) => {\n    let endpoint = `/export/advisories/${advisoryId}/systems`;\n    return fetchFile(params, endpoint, 'text/csv');\n};\n\nexport const exportAdvisorySystemsJSON = (params, advisoryId) => {\n    let endpoint = `/export/advisories/${advisoryId}/systems`;\n    return fetchFile(params, endpoint, 'application/json');\n};\n\nexport const exportSystemAdvisoriesCSV = (params, systemName) => {\n    let endpoint = `/export/systems/${systemName}/advisories`;\n    return fetchFile(params, endpoint, 'text/csv');\n};\n\nexport const exportSystemAdvisoriesJSON = (params, systemName) => {\n    let endpoint = `/export/systems/${systemName}/advisories`;\n    return fetchFile(params, endpoint, 'application/json');\n};\n\nexport const exportSystemPackagesCSV = (params, systemName) => {\n    let endpoint = `/export/systems/${systemName}/packages`;\n    return fetchFile(params, endpoint, 'text/csv');\n};\n\nexport const exportSystemPackagesJSON = (params, systemName) => {\n    let endpoint = `/export/systems/${systemName}/packages`;\n    return fetchFile(params, endpoint, 'application/json');\n};\n\nexport const exportPackageSystemsCSV = (params, packageName) => {\n    let endpoint = `/export/packages/${packageName}/systems`;\n    return fetchFile(params, endpoint, 'text/csv');\n};\n\nexport const exportPackageSystemsJSON = (params, packageName) => {\n    let endpoint = `/export/packages/${packageName}/systems`;\n    return fetchFile(params, endpoint, 'application/json');\n};\n","import BugIcon from '@patternfly/react-icons/dist/js/icons/bug-icon';\nimport EnhancementIcon from '@patternfly/react-icons/dist/js/icons/enhancement-icon';\nimport SecurityIcon from '@patternfly/react-icons/dist/js/icons/security-icon';\nimport React from 'react';\nimport { subtractDate } from './Helpers';\n\nexport const STATUS_REJECTED = 'rejected';\nexport const STATUS_LOADING = 'loading';\nexport const STATUS_RESOLVED = 'resolved';\n\nexport const compoundSortValues = {\n    operating_system: {\n        asc: 'osname,osmajor,osminor',\n        desc: '-osname,-osmajor,-osminor'\n    },\n    applicable_advisories: {\n        asc: 'rhsa_count,rhba_count,rhea_count',\n        desc: '-rhsa_count,-rhba_count,-rhea_count'\n    }\n};\n\n// messy check because of frontend-components tests\nexport const ENABLE_PACKAGES = window?.insights?.chrome?.isBeta && insights?.chrome?.isBeta();\nexport const storeListDefaults = {\n    rows: [],\n    status: {},\n    metadata: {\n        limit: 25,\n        offset: 0,\n        total_items: 0\n    },\n    expandedRows: {},\n    selectedRows: {},\n    queryParams: {\n        page: 1,\n        page_size: 20\n    },\n    error: {}\n};\n\nexport const systemPackagesDefaultFilters = {\n    filter: { updatable: ['true'] }\n};\n\nexport const packagesListDefaultFilters = {\n    filter: { systems_updatable: ['gt:0'] }\n};\n\nexport const publicDateOptions = [\n    { apiValue: '', label: 'All', value: 'all' },\n    {\n        apiValue: `gt:${subtractDate(7)}`,\n        label: 'Last 7 days',\n        value: 'last7'\n    },\n    {\n        apiValue: `gt:${subtractDate(30)}`,\n        label: 'Last 30 days',\n        value: 'last30'\n    },\n    {\n        apiValue: `gt:${subtractDate(90)}`,\n        label: 'Last 90 days',\n        value: 'last90'\n    },\n    {\n        apiValue: `gt:${subtractDate(365)}`,\n        label: 'Last year',\n        value: 'lastYear'\n    },\n    {\n        apiValue: `lt:${subtractDate(365)}`,\n        label: 'More than 1 year ago',\n        value: 'moreThanYear'\n    }\n];\n\nexport const advisorySeverities = [\n    {\n        value: 0,\n        label: 'N/A',\n        color: 'var(--pf-global--Color--200)'\n    },\n    {\n        value: 1,\n        label: 'Low',\n        color: 'var(--pf-global--Color--200)',\n        text:\n            'This rating is given to all other issues that have a security impact. These are the types of vulnerabilities' +\n            ' that are believed to require unlikely circumstances to be able to be exploited, or where a successful exploit' +\n            ' would give minimal consequences.'\n    },\n    {\n        value: 2,\n        label: 'Moderate',\n        color: 'var(--pf-global--warning-color--100)',\n        text:\n            'This rating is given to flaws that may be more difficult to exploit but could still lead to some' +\n            ' compromise of the confidentiality, integrity, or availability of resources, under certain circumstances.' +\n            ' These are the types of vulnerabilities that could have had a Critical impact or Important impact' +\n            ' but are less easily exploited based on a technical evaluation of the flaw, or affect unlikely' +\n            ' configurations.'\n    },\n    {\n        value: 3,\n        label: 'Important',\n        color: '#ec7a08',\n        text:\n            'This rating is given to flaws that can easily compromise the confidentiality, integrity, or availability' +\n            ' of resources. These are the types of vulnerabilities that allow local users to gain privileges, allow' +\n            ' unauthenticated remote users to view resources that should otherwise be protected by authentication,' +\n            ' allow authenticated remote users to execute arbitrary code, or allow remote users to cause a denial' +\n            ' of service.'\n    },\n    {\n        value: 4,\n        label: 'Critical',\n        color: 'var(--pf-global--danger-color--100)',\n        text:\n            'This rating is given to flaws that could be easily exploited by a remote unauthenticated attacker' +\n            ' and lead to system compromise (arbitrary code execution) without requiring user interaction.' +\n            ' These are the types of vulnerabilities that can be exploited by worms. Flaws that require an authenticated' +\n            ' remote user, a local user, or an unlikely configuration are not classed as Critical impact.'\n    }\n];\n\nexport const advisoryTypes = [\n    {\n        value: 3,\n        label: 'Security',\n        icon: <SecurityIcon />\n    },\n    {\n        value: 2,\n        label: 'Bugfix',\n        icon: <BugIcon />\n    },\n    {\n        value: 1,\n        label: 'Enhancement',\n        icon: <EnhancementIcon />\n    }\n];\n\nexport const updatableTypes = [\n    {\n        value: false,\n        label: 'Up-to-date '\n    },\n    {\n        value: true,\n        label: 'Upgradable'\n    }\n];\n\nexport const packagesListUpdatableTypes = [\n    {\n        value: 'eq:0',\n        label: 'Up-to-date '\n    },\n    {\n        value: 'gt:0',\n        label: 'Upgradable'\n    }\n];\n\nexport const filterCategories = {\n    advisory_type: {\n        label: 'Advisory type',\n        values: advisoryTypes\n    },\n    public_date: {\n        label: 'Public date',\n        values: publicDateOptions\n    },\n    updatable: {\n        label: 'Status',\n        values: updatableTypes\n    },\n    systems_updatable: {\n        label: 'Status',\n        values: packagesListUpdatableTypes\n    }\n};\n\nexport const entityTypes = {\n    advisories: 'advisories',\n    packages: 'packages'\n};\n\nexport const ReadOnlyNotification = {\n    title: 'title',\n    detail: 'message'\n};\n\nexport const remediationIdentifiers = {\n    package: 'patch-package',\n    advisory: 'patch-advisory'\n};\n\nexport const exportNotifications = (format) => ({\n    pending: {\n        title: 'Preparing export. Once complete, your download will start automatically.',\n        variant: 'info'\n    },\n    success: {\n        title: `The exported ${format?.toUpperCase()} file is being downloaded`,\n        variant: 'success'\n    },\n    error: {\n        title: 'Couldn’t download export. Reinitiate this export to try again.',\n        variant: 'danger'\n    }\n});\n","export const FETCH_APPLICABLE_ADVISORIES = 'FETCH_APPLICABLE_ADVISORIES';\nexport const EXPAND_ADVISORY_ROW = 'EXPAND_ADVISORY_ROW';\nexport const SELECT_ADVISORY_ROW = 'SELECT_ADVISORY_ROW';\nexport const CHANGE_ADVISORY_LIST_PARAMS = 'CHANGE_ADVISORY_LIST_PARAMS';\nexport const CHANGE_SYSTEM_ADVISORY_LIST_PARAMS =\n    'CHANGE_SYSTEM_SYSTEMS_LIST_PARAMS';\nexport const EXPAND_SYSTEM_ADVISORY_ROW = 'EXPAND_SYSTEM_ADVISORY_ROW';\nexport const FETCH_APPLICABLE_SYSTEM_ADVISORIES =\n    'FETCH_APPLICABLE_SYSTEM_ADVISORIES';\nexport const SELECT_SYSTEM_ADVISORY_ROW = 'SELECT_SYSTEM_ADVISORY_ROW';\nexport const CLEAR_SYSTEM_ADVISORIES = 'CLEAR_SYSTEM_ADVISORIES';\nexport const FETCH_ADVISORY_DETAILS = 'FETCH_ADVISORY_DETAILS';\nexport const CLEAR_ADVISORY_DETAILS = 'CLEAR_ADVISORY_DETAILS';\nexport const CHANGE_SYSTEM_PACKAGES_LIST_PARAMS =\n    'CHANGE_SYSTEM_PACKAGES_LIST_PARAMS';\nexport const FETCH_APPLICABLE_SYSTEM_PACKAGES =\n    'FETCH_APPLICABLE_SYSTEM_PACKAGES';\nexport const SELECT_SYSTEM_PACKAGES_ROW = 'SELECT_SYSTEM_PACKAGES_ROW';\nexport const CLEAR_SYSTEM_PACKAGES = 'CLEAR_SYSTEM_PACKAGES';\nexport const TRIGGER_GLOBAL_FILTER = 'TRIGGER_GLOBAL_FILTER';\nexport const FETCH_PACKAGES_LIST = 'FETCH_PACKAGES_LIST';\nexport const FETCH_PACKAGE_DETAILS = 'FETCH_PACKAGE_DETAILS';\nexport const CLEAR_PACKAGE_DETAILS = 'CLEAR_PACKAGE_DETAILS';\nexport const CHANGE_PACKAGES_LIST_PARAMS = 'CHANGE_PACKAGES_LIST_PARAMS';\nexport const FETCH_PACKAGE_SYSTEMS = 'FETCH_PACKAGE_SYSTEMS';\nexport const CLEAR_PACKAGE_SYSTEMS = 'CLEAR_PACKAGE_SYSTEMS';\nexport const FETCH_CVES_INFO = 'FETCH_CVES_INFO';\nexport const CHANGE_CVES_STORE_PARAMS = 'CHANGE_CVES_STORE_PARAMS';\nexport const FETCH_SYSTEM_DETAIL = 'FETCH_SYSTEM_DETAIL';\nexport const CLEAR_ENTITIES = 'CLEAR_ENTITIES';\nexport const CHANGE_ENTITIES_PARAMS = 'CHANGE_ENTITIES_PARAMS';\nexport const CHANGE_SYSTEMS_PARAMS = 'CHANGE_SYSTEMS_PARAMS';\nexport const CHANGE_AFFECTED_SYSTEMS_PARAMS = 'CHANGE_AFFECTED_SYSTEMS_PARAMS';\nexport const CHANGE_PACKAGE_SYSTEMS_PARAMS = 'CHANGE_PACKAGE_SYSTEMS_PARAMS';\n\nexport const CLEAR_INVENTORY_REDUCER = 'CLEAR_INVENTORY_REDUCER';\n","import { fetchAdvisoryDetailsApi, fetchApplicableAdvisoriesApi,\n    fetchApplicablePackagesApi, fetchApplicableSystemAdvisoriesApi, fetchPackageDetailsApi,\n    fetchPackagesList, fetchPackageSystems, fetchSystems, fetchCvesInfo, fetchSystemDetails } from '../../Utilities/api';\nimport * as ActionTypes from '../ActionTypes';\n\nexport const fetchApplicableAdvisories = params => ({\n    type: ActionTypes.FETCH_APPLICABLE_ADVISORIES,\n    payload: new Promise(resolve => {\n        resolve(fetchApplicableAdvisoriesApi(params));\n    }).then(result => result)\n});\n\nexport const fetchApplicableSystemAdvisories = params => ({\n    type: ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES,\n    payload: new Promise(resolve => {\n        resolve(fetchApplicableSystemAdvisoriesApi(params));\n    }).then(result => result),\n    meta: {\n        noError: true // Handle errors manually!\n    }\n});\n\nexport const fetchAvisoryDetails = params => ({\n    type: ActionTypes.FETCH_ADVISORY_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(fetchAdvisoryDetailsApi(params));\n    }).then(result => result)\n});\n\nexport const fetchPackageDetails = params => ({\n    type: ActionTypes.FETCH_PACKAGE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(fetchPackageDetailsApi(params));\n    }).then(result => result)\n});\n\nexport const fetchSystemsAction = params => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(fetchSystems(params));\n    }).then(result => result)\n});\n\nexport const changeAdvisoryListParams = params => ({\n    type: ActionTypes.CHANGE_ADVISORY_LIST_PARAMS,\n    payload: params\n});\n\nexport const changeSystemAdvisoryListParams = params => ({\n    type: ActionTypes.CHANGE_SYSTEM_ADVISORY_LIST_PARAMS,\n    payload: params\n});\n\nexport const changeAdvisorySystemsParams = params => ({\n    type: ActionTypes.CHANGE_AFFECTED_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const expandAdvisoryRow = rowState => ({\n    type: ActionTypes.EXPAND_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const expandSystemAdvisoryRow = rowState => ({\n    type: ActionTypes.EXPAND_SYSTEM_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const selectAdvisoryRow = rowState => ({\n    type: ActionTypes.SELECT_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const selectSystemAdvisoryRow = rowState => ({\n    type: ActionTypes.SELECT_SYSTEM_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const clearSystemAdvisoriesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_ADVISORIES,\n    payload: []\n});\n\nexport const clearSystemPackagesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_PACKAGES,\n    payload: []\n});\n\nexport const clearAdvisoryDetailStore = () => ({\n    type: ActionTypes.CLEAR_ADVISORY_DETAILS,\n    payload: []\n});\n\nexport const clearPackageDetailStore = () => ({\n    type: ActionTypes.CLEAR_ADVISORY_DETAILS,\n    payload: []\n});\n\nexport const fetchPackageSystemsAction = params => ({\n    type: ActionTypes.FETCH_PACKAGE_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(fetchPackageSystems(params));\n    }).then(result => result)\n});\n\nexport const fetchApplicableSystemPackages = params => ({\n    type: ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES,\n    payload: new Promise(resolve => {\n        resolve(fetchApplicablePackagesApi(params));\n    }).then(result => result)\n});\n\nexport const selectSystemPackagesRow = rowState => ({\n    type: ActionTypes.SELECT_SYSTEM_PACKAGES_ROW,\n    payload: rowState\n});\n\nexport const changeSystemPackagesParams = params => ({\n    type: ActionTypes.CHANGE_SYSTEM_PACKAGES_LIST_PARAMS,\n    payload: params\n});\n\nexport const globalFilter = params => ({\n    type: ActionTypes.TRIGGER_GLOBAL_FILTER,\n    payload: params\n});\n\nexport const fetchPackagesAction = params => ({\n    type: ActionTypes.FETCH_PACKAGES_LIST,\n    payload: new Promise(resolve => {\n        resolve(fetchPackagesList(params));\n    }).then(result => result)\n});\n\nexport const changePackagesListParams = params => ({\n    type: ActionTypes.CHANGE_PACKAGES_LIST_PARAMS,\n    payload: params\n});\n\nexport const changePackageSystemsParams = params => ({\n    type: ActionTypes.CHANGE_PACKAGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const fetchCves = (params) => ({\n    type: ActionTypes.FETCH_CVES_INFO,\n    payload: new Promise(resolve => {\n        resolve(fetchCvesInfo(params));\n    }).then(result => result)\n});\n\nexport const changeCvesListParams = params => ({\n    type: ActionTypes.CHANGE_CVES_STORE_PARAMS,\n    payload: params\n});\n\nexport const fetchSystemDetailsAction = params => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAIL,\n    payload: new Promise(resolve => {\n        resolve(fetchSystemDetails(params));\n    }).then(result => result)\n});\n\nexport const clearEntitiesStore = () => ({\n    type: ActionTypes.CLEAR_ENTITIES,\n    payload: []\n});\n\nexport const clearInventoryReducer = () => ({\n    type: ActionTypes.CLEAR_INVENTORY_REDUCER,\n    payload: []\n});\n\nexport const changeEntitiesParams = params => ({\n    type: ActionTypes.CHANGE_ENTITIES_PARAMS,\n    payload: params\n});\n\nexport const changeSystemsParams = params => ({\n    type: ActionTypes.CHANGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const changeAffectedSystemsParams = params => ({\n    type: ActionTypes.CHANGE_AFFECTED_SYSTEMS_PARAMS,\n    payload: params\n});\n\n","import { addOrRemoveItemFromSet, changeListParams, getNewSelectedItems } from '../../Utilities/Helpers';\n\nexport const changeFilters = (state, action) => {\n    state.queryParams = changeListParams(\n        state.queryParams,\n        action.payload\n    );\n\n    return state;\n};\n\nexport const selectRows = (state, action) => {\n    const selectedUpdated = getNewSelectedItems(action.payload, state.selectedRows);\n    state = { ...state, selectedRows: selectedUpdated };\n    return state;\n};\n\nexport const expandRows = (state, action) => {\n    const expandedUpdated = addOrRemoveItemFromSet(\n        state.expandedRows,\n        [].concat(action.payload)\n    );\n    state = { ...state, expandedRows: expandedUpdated };\n    return state;\n};\n\nexport const fetchPending = (state) => {\n    state.error = {};\n    state.status = { isLoading: true, hasError: false, code: undefined };\n    return state;\n};\n\nexport const fetchRejected = (state, action) => {\n    state.metadata = action.payload.meta || {};\n    state.error = action.payload;\n    state.status = { code: action.payload.status, isLoading: false, hasError: true };\n    return state;\n};\n\nexport const fetchFulfilled = (state, action) => {\n    state.rows = action.payload.data;\n    state.metadata = action.payload.meta || {};\n    state.error = {};\n    state.status = { code: action.payload.status, isLoading: false, hasError: false };\n    return state;\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    selectRows,\n    fetchPending,\n    fetchRejected,\n    fetchFulfilled,\n    expandRows\n} from './HelperReducers';\n\nexport const SystemAdvisoryListStore = (state = storeListDefaults, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_SYSTEM_ADVISORY_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.EXPAND_SYSTEM_ADVISORY_ROW:\n            return expandRows(newState, action);\n\n        case ActionTypes.SELECT_SYSTEM_ADVISORY_ROW:\n            return selectRows(newState, action);\n\n        case ActionTypes.CLEAR_SYSTEM_ADVISORIES:\n            return storeListDefaults;\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults, systemPackagesDefaultFilters } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport { changeFilters, fetchFulfilled, fetchPending, fetchRejected, selectRows } from './HelperReducers';\n\nlet initializeState = { queryParams: systemPackagesDefaultFilters };\n\nexport const SystemPackageListStore = (state = { ...storeListDefaults, ...initializeState }, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_SYSTEM_PACKAGES_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.SELECT_SYSTEM_PACKAGES_ROW:\n            return selectRows(newState, action);\n\n        case ActionTypes.CLEAR_SYSTEM_PACKAGES:\n            return { ...storeListDefaults, ...initializeState };\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n"],"sourceRoot":""}