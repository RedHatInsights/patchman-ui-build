{"version":3,"file":"js/AdvisoryyPage.1647601237262.979f5863de6a477c754d.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js","webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Spinner/Spinner.js","webpack:///./src/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/SmartComponents/AdvisoryDetail/CvesModal.js","webpack:///./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack:///./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack:///./src/SmartComponents/AdvisorySystems/AdvisorySystems.js","webpack:///./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import React from 'react';\nimport { osFilterTypes } from '../../Utilities/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst osVersionFilter = (currentFilter = {}, apply) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = osFilterTypes.slice().reverse();;\n\n    let { os: currentValue } = currentFilter;\n    const currentOsVersionsArray = typeof currentValue === 'string' && currentValue.split(',') || [];\n\n    const filterByOsType = (_, value) => {\n        if (currentValue && !currentValue.includes(value)) {\n            apply({ filter: { os: `${currentOsVersionsArray.join(',')},${value}` } });\n        }\n        else if (currentValue && currentValue.includes(value)) {\n            const remainingOs = currentOsVersionsArray.filter(os => os !== value);\n\n            apply({ filter: { os: remainingOs.length > 0 && `${remainingOs.join(',')}` || undefined } });\n        } else {\n            apply({ filter: { os: value !== '' && value || undefined  } });\n        }\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: intl.formatMessage(messages.labelsFiltersOsVersion),\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={SelectVariant.checkbox}\n                        typeAheadAriaLabel={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        onToggle={onToggle}\n                        onSelect={filterByOsType}\n                        selections={currentOsVersionsArray}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-os-version-filter'}\n                        placeholderText={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        {...(numOptions < versionFromNewestToOldest.length\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                key={index}\n                                value={option.value}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n};\n\nexport default osVersionFilter;\n","import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}\n                        data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                        data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                    >{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { paths } from '../../Routes';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history, headerOUIA }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={paths.advisories.to}\n                title={paths.advisories.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.advisories.title}`}\n            />\n            <Tab\n                eventKey={paths.systems.to}\n                title={paths.systems.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.systems.title}`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object,\n    headerOUIA: propTypes.string\n};\n\nexport default withRouter(HeaderTabs);\n","import {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <PageHeaderTitle title={title} />\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA = {headerOUIA}/>}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string\n};\n\nexport default Header;\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport \"../../Spinner/./spinner.css\";\n\nvar Spinner = function Spinner(_ref) {\n  var centered = _ref.centered,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, [\"centered\", \"className\"]);\n\n  var spinnerClasses = classNames('ins-c-spinner', _defineProperty({}, \"ins-m-center\", centered), className);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"status\",\n    className: spinnerClasses\n  }, props), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"pf-u-screen-reader\"\n  }, \"Loading...\"));\n};\n\nSpinner.propTypes = {\n  centered: PropTypes.bool,\n  className: PropTypes.string\n};\nexport default Spinner;","/* eslint-disable react/prop-types */\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nexport const WithLoaderVariants = {\n    spinner: 'spinner',\n    skeleton: 'skeleton'\n};\n\nconst loaderMap = {\n    [WithLoaderVariants.skeleton]: ({ size, isDark }) => (\n        <Skeleton size={size} isDark={isDark} />\n    ),\n    [WithLoaderVariants.spinner]: ({ centered }) => (\n        <Spinner centered={centered} />\n    )\n};\n\nexport const WithLoader = ({ loading, variant, children, ...props }) => {\n    if (loading !== false) {\n        return loaderMap[variant](props);\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    loading: propTypes.bool,\n    variant: propTypes.string,\n    children: propTypes.any\n};\n\nexport default WithLoader;\n","import React, { useState, useMemo } from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport { cvesTableColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCves } from '../../store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport { createCvesRows } from '../../Utilities/DataMappers';\nimport { sortCves } from '..//../Utilities/Helpers';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst CvesModal = ({ cveIds }) =>{\n    const dispatch = useDispatch();\n    const [cves, setCves] = useState([]);\n    const [rows, setRows] = useState([]);\n    const [page, setPage] = useState(1);\n    const [perPage, setPerPage] = useState(10);\n    const [search, setSearch] = useState(undefined);\n    const [sortBy, setSortBy] = useState({\n        direction: SortByDirection.asc,\n        index: 0\n    });\n\n    const data = useSelector(({ CvesListStore }) => CvesListStore.rows);\n\n    const status = useSelector(\n        ({ CvesListStore }) => CvesListStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchCves({ cveIds }));\n    }, []);\n\n    React.useMemo(() => {\n        setRows(cves.slice((page - 1) * perPage, page * perPage));\n    }, [cves, page, perPage, sortBy]);\n\n    useMemo(() => {\n        const sortedCves = (search !== undefined && search !== '')\n            && data.filter(\n                cve => {\n                    const { attributes: { synopsis } } = cve;\n                    return synopsis && search && (synopsis.toLowerCase().includes(search.toLowerCase()));\n                }\n            ) || data;\n\n        setCves(createCvesRows((sortedCves.length !== 0 || search) && sortedCves || data));\n    }, [search, data]);\n\n    const handleClose = () => {\n        setRows(undefined);\n    };\n\n    const handleFilter = ({ search }) =>{\n        setPage(page);\n        setSearch(search);\n    };\n\n    const handlePageChange = (_, page) => {\n        setPage(page);\n    };\n\n    const handlePerPageChange = (_, perPage) => {\n        setPage(1);\n        setPerPage(perPage);\n    };\n\n    const handleSort = (_, index, direction) => {\n        const { sortBy, sortedCves } = sortCves(cves, index, direction);\n\n        setSortBy(sortBy);\n        setCves(sortedCves);\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant='small'\n                title={intl.formatMessage(messages.labelsCves)}\n                isOpen={Boolean(rows)}\n                onClose={handleClose}\n            >\n                <TableView\n                    columns={cvesTableColumns}\n                    onSetPage={handlePageChange}\n                    onPerPageSelect={handlePerPageChange}\n                    apply={handleFilter}\n                    tableOUIA={'cves-table'}\n                    paginationOUIA={'cves-pagination'}\n                    onSort={handleSort}\n                    sortBy={sortBy}\n                    store={{\n                        rows,\n                        metadata: { limit: perPage, offset: (page - 1) * perPage, total_items: cves && cves.length },\n                        status, queryParams: { filter: {}, search }\n                    }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(handleFilter, search, '',\n                                intl.formatMessage(messages.labelsFiltersCvesSearchPlaceHolder))\n                        ]\n                    }}\n                />\n            </Modal>\n        </React.Fragment>\n    );\n\n};\n\nCvesModal.propTypes = {\n    cveIds: propTypes.array\n};\n\nexport default CvesModal;\n","import { Split, SplitItem, Title } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Split className='infobox' hasGutter>\n            <SplitItem isFilled>\n                <Flex flex={{ default: 'column' }}>\n                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                        <Title headingLevel='h5'>\n                            {intl.formatMessage(messages.labelsColumnsSeverity)}\n                        </Title>\n                    </FlexItem>\n                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                        <Flex flex={{ default: 'row' }}>\n                            <FlexItem>\n                                <SecurityIcon size='sm' color={severity.color} />\n                            </FlexItem>\n                            <FlexItem>\n                                {severity.label}\n                            </FlexItem>\n                        </Flex>\n                    </FlexItem>\n                </Flex>\n            </SplitItem>\n        </Split>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import {\n    Button, Grid, GridItem, Stack, StackItem, Text, TextContent,\n    FlexItem, TextVariants, Flex, Split, SplitItem, Title\n} from '@patternfly/react-core';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport messages from '../../Messages';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport CvesModal from '../../SmartComponents/AdvisoryDetail/CvesModal';\nimport { getSeverityById, isRHAdvisory, truncateDescription } from '../../Utilities/Helpers';\nimport { intl } from '../../Utilities/IntlProvider';\nimport RebootRequired from '../Snippets/RebootRequired';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\nimport ExternalLink from '../Snippets/ExternalLink';\nimport AdvisoryType from '../AdvisoryType/AdvisoryType';\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const [CvesInfoModal, setCvesModal] = useState(() => () => null);\n    const [wordLength, setWordLength] = useState(1000);\n    const severityObject = getSeverityById(attributes.severity);\n    const cves = attributes.cves;\n\n    const showCvesModal = () => {\n        setCvesModal(() => () => <CvesModal cveIds={cves} />);\n    };\n\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                attributes.description && truncateDescription(attributes.description, wordLength, setWordLength)\n                            }\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsPublicDate, {\n                                        date: processDate(\n                                            attributes.public_date\n                                        )\n                                    })}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsModifiedDate, {\n                                        date: processDate(\n                                            attributes.modified_date\n                                        )\n                                    })}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        {isRHAdvisory(attributes.id) &&\n                            <StackItem>\n                                <ExternalLink link={`https://access.redhat.com/errata/${attributes.id}`}\n                                    text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n                            </StackItem>\n                        }\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                <Flex flex={{ default: 'column' }}>\n                    {attributes.advisory_type_name && (<FlexItem>\n                        <Split className='infobox' hasGutter>\n                            <SplitItem isFilled>\n                                <Flex flex={{ default: 'column' }}>\n                                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                                        <Title headingLevel='h5'>\n                                            {intl.formatMessage(messages.titlesAdvisoryType)}\n                                        </Title>\n                                    </FlexItem>\n                                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                                        <AdvisoryType\n                                            type={attributes.advisory_type_name}\n                                        />\n                                    </FlexItem>\n                                </Flex>\n                            </SplitItem>\n                        </Split>\n                    </FlexItem>\n                    )}\n                    {severityObject.value !== 0 && (<FlexItem>\n                        <AdvisorySeverityInfo severity={severityObject}/>\n                    </FlexItem>\n                    )}\n                    {attributes.reboot_required && (<FlexItem spacer={{ default: 'spacerMd' }}>\n                        <RebootRequired />\n                    </FlexItem>)}\n                </Flex>\n            </GridItem>\n            {cves && cves.length !== 0 && (\n                <GridItem md={4} sm={12}>\n                    <TextContent>\n                        <Text component={TextVariants.h3}>\n                            {intl.formatMessage(messages.labelsCves)}\n                        </Text>\n                        <Button variant='link' style={{ padding: 0 }} onClick={showCvesModal} >\n                            {intl.formatMessage(messages.labelsCvesButton, { cvesCount: cves.length })}\n                        </Button>\n                    </TextContent>\n                </GridItem>\n            )}\n            <CvesInfoModal />\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport osVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changeAffectedSystemsParams, clearAdvisorySystemsReducer, clearInventoryReducer } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { exportAdvisorySystemsCSV, exportAdvisorySystemsJSON, fetchAdvisorySystems } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips, decodeQueryparams, filterRemediatableSystems,\n    persistantParams, remediationProvider, removeUndefinedObjectKeys, systemsColumnsMerger\n} from '../../Utilities/Helpers';\nimport {\n    useBulkSelectConfig, useGetEntities, useOnExport, useOnSelect, useRemoveFilter\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { systemsListColumns, systemsRowActions } from '../Systems/SystemsListAssets';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\n\nconst AdvisorySystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const [isRemediationOpen, setRemediationOpen] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const history = useHistory();\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const queryParams = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore?.queryParams || {}\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => {\n            dispatch(clearInventoryReducer());\n            dispatch(clearAdvisorySystemsReducer());\n        };\n    }, []);\n\n    function apply(params) {\n        dispatch(changeAffectedSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            osVersionFilter(filter, apply)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n        onDelete: deleteFilters\n    };\n\n    async function showRemediationModal(data) {\n        const resolvedData = await data;\n        setRemediationModalCmp(() =>\n            () => <RemediationWizard\n                data={resolvedData}\n                isRemediationOpen\n                setRemediationOpen={setRemediationOpen} />);\n        setRemediationOpen(!isRemediationOpen);\n    }\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const fetchAllData = () =>\n        fetchAdvisorySystems({ ...queryParams, id: advisoryName, limit: -1 }).then(filterRemediatableSystems);\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllData, selectRows);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const getEntites = useGetEntities(fetchAdvisorySystems, apply, { id: advisoryName }, history);\n\n    const onExport = useOnExport(advisoryName, queryParams, {\n        csv: exportAdvisorySystemsCSV,\n        json: exportAdvisorySystemsJSON\n    }, dispatch);\n\n    const remediationDataProvider = () => remediationProvider(\n        advisoryName,\n        removeUndefinedObjectKeys(selectedRows),\n        remediationIdentifiers.advisory\n    );\n\n    return (\n        <React.Fragment>\n            {isRemediationOpen && <RemediationModalCmp /> || null}\n            {status.hasError && <ErrorHandler code={status.code} /> ||\n                <InventoryTable\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    ignoreRefresh\n                    hideFilters={{ all: true, tags: false }}\n                    columns={systemsColumnsMerger}\n                    showTags\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    paginationProps={{\n                        isDisabled: totalItems === 0\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        register({\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(systemsListColumns, modifyInventory),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        });\n                    }}\n                    getEntities={getEntites}\n                    actions={systemsRowActions(showRemediationModal)}\n                    tableProps={{\n                        canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig={activeFiltersConfig}\n                    exportConfig={{\n                        isDisabled: totalItems === 0,\n                        onSelect: onExport\n                    }}\n                    bulkSelect={\n                        onSelect && useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)\n                    }\n                    dedicatedAction={(\n                        <AsyncRemediationButton\n                            remediationProvider={remediationDataProvider}\n                            isDisabled={\n                                arrayFromObj(selectedRows).length === 0\n                            }\n                        />\n                    )}\n\n                />\n            }\n        </React.Fragment>\n    );\n};\n\nAdvisorySystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AdvisorySystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { paths } from '../../Routes';\nimport { clearAdvisoryDetailStore, clearEntitiesStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport AdvisorySystems from '../AdvisorySystems/AdvisorySystems';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst AdvisoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [advisoryName] = React.useState(match.params.advisoryId);\n\n    const pageTitle = `${advisoryName} - ${intl.formatMessage(messages.titlesAdvisories)}`;\n    setPageTitle(pageTitle);\n\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearEntitiesStore());\n            dispatch(clearAdvisoryDetailStore());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                headerOUIA={'advisory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchAdvisories),\n                        to: paths.advisories.to,\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable /> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        {status.hasError\n                            && < ErrorHandler />\n                            || (!status.isLoading && <AdvisorySystems advisoryName={advisoryName} />)}\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisoryDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(AdvisoryDetail);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n","import { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            newState.status = { isLoading: true, hasError: true };\n            return newState;\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["currentFilter","apply","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","osFilterTypes","reverse","currentValue","os","currentOsVersionsArray","split","filterByOsType","_","value","includes","filter","join","remainingOs","length","undefined","onToggle","onViewMoreClick","type","conditionalFilterType","label","intl","messages","filterValues","children","Select","variant","SelectVariant","typeAheadAriaLabel","onSelect","selections","placeholderText","loadingVariant","text","onClick","style","maxHeight","overflow","slice","map","option","index","SelectOption","key","HeaderBreadcrumbs","items","headerOUIA","Breadcrumb","Boolean","item","BreadcrumbItem","title","isActive","to","Link","propTypes","PropTypes","HeaderTabs","history","Tabs","event","tabString","push","activeKey","location","pathname","className","Tab","eventKey","paths","withRouter","Header","showTabs","breadcrumbs","PageHeader","PageHeaderTitle","Spinner","_ref","centered","props","spinnerClasses","role","WithLoaderVariants","spinner","skeleton","loaderMap","size","isDark","Skeleton","WithLoader","loading","CvesModal","cveIds","dispatch","useDispatch","useState","cves","setCves","rows","setRows","page","setPage","perPage","setPerPage","search","setSearch","direction","SortByDirection","sortBy","setSortBy","data","useSelector","CvesListStore","status","fetchCves","useMemo","sortedCves","cve","synopsis","attributes","toLowerCase","createCvesRows","handleFilter","Modal","onClose","TableView","columns","cvesTableColumns","onSetPage","onPerPageSelect","tableOUIA","paginationOUIA","onSort","sortCves","store","metadata","limit","offset","total_items","queryParams","filterConfig","searchFilter","AdvisorySeverityInfo","severity","Split","hasGutter","SplitItem","isFilled","Flex","flex","default","FlexItem","spacer","Title","headingLevel","color","AdvisoryHeader","isLoading","CvesInfoModal","setCvesModal","wordLength","setWordLength","severityObject","getSeverityById","Grid","minHeight","GridItem","md","sm","Stack","StackItem","whiteSpace","description","truncateDescription","public_date","date","processDate","modified_date","isRHAdvisory","id","ExternalLink","link","advisory_type_name","AdvisoryType","reboot_required","RebootRequired","TextContent","Text","component","TextVariants","Button","padding","cvesCount","AdvisorySystems","advisoryName","isRemediationOpen","setRemediationOpen","RemediationModalCmp","setRemediationModalCmp","useHistory","decodedParams","decodeQueryparams","systems","entities","shallowEqual","totalItems","total","AdvisorySystemsStore","selectedRows","systemProfile","selectedTags","sort","params","changeAffectedSystemsParams","clearInventoryReducer","clearAdvisorySystemsReducer","useRemoveFilter","deleteFilters","osVersionFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","resolvedData","RemediationWizard","useOnSelect","fetchAdvisorySystems","then","filterRemediatableSystems","toSelect","payload","selectedCount","arrayFromObj","getEntites","useGetEntities","onExport","useOnExport","csv","exportAdvisorySystemsCSV","json","exportAdvisorySystemsJSON","hasError","ErrorHandler","code","InventoryTable","isFullView","autoRefresh","initialLoading","ignoreRefresh","hideFilters","all","tags","systemsColumnsMerger","showTags","customFilters","patchParams","paginationProps","isDisabled","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","modifyInventory","persistantParams","getEntities","actions","systemsRowActions","tableProps","canSelectAll","TableVariant","isStickyHeader","exportConfig","bulkSelect","useBulkSelectConfig","dedicatedAction","AsyncRemediationButton","remediationProvider","removeUndefinedObjectKeys","remediationIdentifiers","AdvisoryDetail","match","advisoryId","pageTitle","setPageTitle","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearEntitiesStore","clearAdvisoryDetailStore","clearNotifications","Unavailable","Main","appName","module","fallback","initialState","state","loaded","createSystemsRows","modifyPackageSystems","createPackageSystemsRows","inventoryModifier","action","newState","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}