{"version":3,"file":"js/TemplateDetail.1aded020c892d6571a58.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Dropdown/Dropdown.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/SmartComponents/Modals/DeleteSetModal.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./src/SmartComponents/PatchSetDetail/PatchSetDetail.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { DropdownWithContext } from './DropdownWithContext';\nimport { useOUIAId } from '../../helpers';\nexport const Dropdown = (_a) => {\n    var { onSelect, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref, // Types of Ref are different for React.FunctionComponent vs React.Component\n    ouiaId, ouiaSafe, alignments, contextProps, menuAppendTo = 'inline', isFlipEnabled = true, removeFindDomNode = false, zIndex = 9999 } = _a, props = __rest(_a, [\"onSelect\", \"ref\", \"ouiaId\", \"ouiaSafe\", \"alignments\", \"contextProps\", \"menuAppendTo\", \"isFlipEnabled\", \"removeFindDomNode\", \"zIndex\"]);\n    return (React.createElement(DropdownContext.Provider, { value: Object.assign({ onSelect: event => onSelect && onSelect(event), toggleTextClass: styles.dropdownToggleText, toggleIconClass: styles.dropdownToggleImage, toggleIndicatorClass: styles.dropdownToggleIcon, menuClass: styles.dropdownMenu, itemClass: styles.dropdownMenuItem, toggleClass: styles.dropdownToggle, baseClass: styles.dropdown, baseComponent: 'div', sectionClass: styles.dropdownGroup, sectionTitleClass: styles.dropdownGroupTitle, sectionComponent: 'section', disabledClass: styles.modifiers.disabled, plainTextClass: styles.modifiers.text, ouiaId: useOUIAId(Dropdown.displayName, ouiaId), ouiaSafe, ouiaComponentType: Dropdown.displayName, alignments }, contextProps) },\n        React.createElement(DropdownWithContext, Object.assign({ menuAppendTo: menuAppendTo, isFlipEnabled: isFlipEnabled, removeFindDomNode: removeFindDomNode, zIndex: zIndex }, props))));\n};\nDropdown.displayName = 'Dropdown';\n//# sourceMappingURL=Dropdown.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Checkbox, Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst DeleteSetModal = ({ isModalOpen, setModalOpen, templateName, onConfirm }) => {\n    const [isCheckboxChecked, setCheckboxChecked] = useState(false);\n\n    const onClose = () => {\n        setModalOpen(false);\n        setCheckboxChecked(false);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.titlesTemplateDeleteModalTitle)}\n            titleIconVariant=\"warning\"\n            isOpen={isModalOpen}\n            onClose={onClose}\n            variant=\"small\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={() => {onClose(); onConfirm();}} isDisabled={!isCheckboxChecked}>\n                    {intl.formatMessage(messages.labelsDelete)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {intl.formatMessage(messages.titlesTemplateDeleteModalText, { templateName, b: (...chunks) => <b>{chunks}</b> })}\n            <Checkbox\n                className=\"pf-u-mt-md\"\n                isChecked={isCheckboxChecked}\n                checked={isCheckboxChecked}\n                onChange={(value) => setCheckboxChecked(value)}\n                label={intl.formatMessage(messages.titlesTemplateDeleteModalCheckbox)}\n                id=\"template-delete-modal-checkbox\"\n            />\n        </Modal>\n    );\n};\n\nDeleteSetModal.propTypes = {\n    isModalOpen: propTypes.bool,\n    setModalOpen: propTypes.func,\n    templateName: propTypes.string,\n    onConfirm: propTypes.func\n};\n\nexport default DeleteSetModal;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../PatchSet/PatchSetAssets';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalToggle(true);\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect, useState, Fragment, useRef } from 'react';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { NoAppliedSystems } from '../../PresentationalComponents/Snippets/EmptyStates';\nimport { useBulkSelectConfig, useDeepCompareEffect, useGetEntities, useRemoveFilter } from '../../Utilities/Hooks';\nimport {\n    changePatchSetDetailsSystemsMetadata,\n    changePatchSetDetailsSystemsParams,\n    changeTags,\n    clearInventoryReducer,\n    clearTemplateDetail,\n    fetchPatchSetSystemsNoFiltersAction,\n    fetchTemplateDetail\n} from '../../store/Actions/Actions';\nimport {\n    Bullseye,\n    Dropdown,\n    DropdownItem,\n    DropdownPosition,\n    DropdownToggle,\n    Skeleton,\n    Spinner,\n    Text,\n    TextContent\n} from '@patternfly/react-core';\nimport DeleteSetModal from '../Modals/DeleteSetModal';\nimport { deletePatchSet, fetchPatchSetSystems } from '../../Utilities/api';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { patchSetDeleteNotifications } from '../../Utilities/constants';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport {\n    arrayFromObj,\n    decodeQueryparams,\n    encodeURLParams,\n    filterSelectedActiveSystemIDs,\n    persistantParams\n} from '../../Utilities/Helpers';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport { patchSetDetailRowActions } from '../PatchSet/PatchSetAssets';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport UnassignSystemsModal from '../Modals/UnassignSystemsModal';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport {\n    buildActiveFiltersConfig,\n    buildTemplateFilterConfig,\n    templateSystemsColumnsMerger\n} from '../../Utilities/SystemsHelpers';\nimport { combineReducers } from 'redux';\nimport { defaultReducers } from '../../store';\nimport { inventoryEntitiesReducer, modifyTemplateDetailSystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { systemsListColumns } from '../Systems/SystemsListAssets';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { ID_API_ENDPOINTS, useOnSelect } from '../../Utilities/useOnSelect';\nimport { systemSelectAction } from '../../store/Actions/Actions';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\n\nconst PatchSetDetail = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const store = useStore();\n    const inventory = useRef(null);\n\n    const patchSetId = history.location.pathname.split('/')[2];\n\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [isHeaderDropdownOpen, setHeaderDropdownOpen] = useState(false);\n    const [isDeleteConfirmModalOpen, setDeleteConfirmModalOpen] = useState(false);\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        systemsIDs: [],\n        shouldRefresh: false\n    });\n\n    const templateDetails = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore\n    );\n\n    const isHeaderLoading = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore?.status?.isLoading ?? true\n    );\n\n    const detailStatus = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore.status\n    );\n\n    const systems = useSelector(\n        ({ entities }) => entities?.rows || [], shallowEqual\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n\n    const systemStatus = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.queryParams || {}\n    );\n\n    const templateHasSystemsLoading = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.templateHasSystemsLoading\n    );\n\n    const templateHasSystems = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.templateHasSystems\n    );\n\n    const { hasAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n\n    const patchSetName = templateDetails.data.attributes.name;\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.templateSystems(patchSetId),\n            queryParams,\n            selectionDispatcher: systemSelectAction\n        }\n    );\n\n    const apply = (params) => {\n        dispatch(changePatchSetDetailsSystemsParams(params));\n    };\n\n    const openPatchSetAssignWizard = () => {\n        setPatchSetState({\n            ...patchSetState,\n            isPatchSetWizardOpen: true\n        });\n    };\n\n    const refreshTable = () => {\n        // timestamp is used to force inventory to refresh\n        // if it wasn't there inventory might ignore request to refresh because parameters are the same\n        inventory?.current?.onRefreshData({ timestamp: Date.now() });\n\n        onSelect('none');\n\n        dispatch(fetchTemplateDetail(patchSetId));\n    };\n\n    useEffect(() => {\n        dispatch(fetchPatchSetSystemsNoFiltersAction({ id: patchSetId, limit: 1 }));\n\n        return () => {\n            dispatch(clearTemplateDetail());\n            dispatch(clearInventoryReducer());\n        };\n    }, []);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh === true) {\n            refreshTable();\n            setPatchSetState({ ...patchSetState, shouldRefresh: false });\n            dispatch(fetchPatchSetSystemsNoFiltersAction({ id: patchSetId, limit: 1 }));\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n\n            dispatch(fetchTemplateDetail(patchSetId));\n\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const openSystemUnassignModal = ids => {\n        setPatchSetState({ ...patchSetState, isUnassignSystemsModalOpen: true, systemsIDs: ids });\n    };\n\n    const deleteSet = () => {\n        deletePatchSet(patchSetId).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).success));\n            history.push('/templates');\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).error));\n        });\n    };\n\n    const applyMetadata = (metadata) => {\n        dispatch(changePatchSetDetailsSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const getEntities = useGetEntities(\n        fetchPatchSetSystems,\n        apply,\n        { id: patchSetId },\n        history,\n        applyMetadata,\n        applyGlobalFilter\n    );\n\n    const dropdownItems = [\n        <DropdownItem\n            key=\"edit-patch-set\"\n            component=\"button\"\n            onClick={() => openPatchSetAssignWizard()}\n        >\n            {intl.formatMessage(messages.labelsButtonEditTemplate)}\n        </DropdownItem>,\n        <DropdownItem\n            key=\"delete-patch-set\"\n            component=\"button\"\n            onClick={() => setDeleteConfirmModalOpen(true)}\n        >\n            {intl.formatMessage(messages.labelsButtonRemoveTemplate)}\n        </DropdownItem>\n    ];\n\n    const decodedParams = decodeQueryparams(history.location.search);\n\n    const { systemProfile, selectedTags, filter, search, page, perPage, sort } = queryParams;\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems);\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply);\n\n    const osFilterConfig = useOsVersionFilter(filter?.os, apply);\n    const filterConfig = buildTemplateFilterConfig(search, apply, osFilterConfig);\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    return (\n        detailStatus?.hasError\n            ? <ErrorHandler code={detailStatus?.code} />\n            : <Fragment>\n                <DeleteSetModal\n                    templateName={patchSetName}\n                    isModalOpen={isDeleteConfirmModalOpen}\n                    setModalOpen={setDeleteConfirmModalOpen}\n                    onConfirm={deleteSet}\n                />\n                {patchSetState.isPatchSetWizardOpen &&\n                    <PatchSetWizard\n                        systemsIDs={patchSetState.systemsIDs}\n                        setBaselineState={setPatchSetState}\n                        patchSetID={patchSetId}\n                    />}\n                <UnassignSystemsModal\n                    unassignSystemsModalState={patchSetState}\n                    setUnassignSystemsModalOpen={setPatchSetState}\n                />\n                <Header\n                    title={isHeaderLoading ? <Skeleton style={{ width: 300 }} /> : patchSetName}\n                    headerOUIA={'template-details'}\n                    breadcrumbs={[\n                        {\n                            title: intl.formatMessage(messages.templateDetailHeaderBreadcrumb),\n                            to: '/templates',\n                            isActive: false\n                        },\n                        {\n                            title: isHeaderLoading ? <Skeleton style={{ width: 150 }} /> : patchSetName,\n                            isActive: true\n                        }\n                    ]}\n                    actions={\n                        <Dropdown\n                            position={DropdownPosition.right}\n                            onSelect={() => {\n                                setHeaderDropdownOpen(false);\n                                document.getElementById('patch-set-detail-header-kebab').focus();\n                            }}\n                            toggle={\n                                <DropdownToggle\n                                    id=\"patch-set-detail-header-kebab\"\n                                    className=\"pf-u-mr-xl\"\n                                    onToggle={(isOpen) => setHeaderDropdownOpen(isOpen)}\n                                    style={{ minWidth: 150 }}\n                                >\n                                    {intl.formatMessage(messages.labelsActions)}\n                                </DropdownToggle>\n                            }\n                            isOpen={isHeaderDropdownOpen}\n                            dropdownItems={dropdownItems}\n                        />\n                    }\n                >\n                    <table border=\"0\" style={{ marginTop: 8 }}>\n                        <tbody>\n                            <tr>\n                                <td style={{ width: 300 }}>{intl.formatMessage(messages.templateDetailTableDescription)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 300 }} />\n                                        : templateDetails.data.attributes.description\n                                        || intl.formatMessage(messages.titlesTemplateNoDescription)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableUpToDate)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.config.to_time)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableCreatedBy)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : templateDetails.data.attributes.creator}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTablePublished)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.published)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableLastEdited)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.last_edited)}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </Header>\n                <Main>\n                    <TextContent>\n                        <Text component=\"h2\" className=\"pf-u-mb-md\">\n                            {intl.formatMessage(messages.templateDetailTableTitle)}\n                        </Text>\n                    </TextContent>\n                    {templateHasSystemsLoading\n                        ? (\n                            <Bullseye>\n                                <Spinner size=\"xl\" />\n                            </Bullseye>\n                        ) : templateHasSystems\n                            ? systemStatus.hasError\n                                ? <ErrorHandler code={systemStatus.code} />\n                                : <InventoryTable\n                                    ref={inventory}\n                                    isFullView\n                                    autoRefresh\n                                    initialLoading\n                                    hideFilters={{ all: true, tags: false }}\n                                    columns={(defaultColumns) => templateSystemsColumnsMerger(defaultColumns)}\n                                    showTags\n                                    onLoad={({ mergeWithEntities }) => {\n                                        store.replaceReducer(combineReducers({\n                                            ...defaultReducers,\n                                            ...mergeWithEntities(\n                                                inventoryEntitiesReducer(systemsListColumns(true), modifyTemplateDetailSystems),\n                                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                                            )\n                                        }));\n                                    }}\n                                    customFilters={{\n                                        patchParams: {\n                                            search,\n                                            filter,\n                                            systemProfile,\n                                            selectedTags\n                                        }\n                                    }}\n                                    paginationProps={{\n                                        isDisabled: totalItems === 0\n                                    }}\n                                    getEntities={getEntities}\n                                    bulkSelect={bulkSelectConfig}\n                                    tableProps={{\n                                        canSelectAll: false,\n                                        variant: TableVariant.compact,\n                                        className: 'patchCompactInventory',\n                                        isStickyHeader: true,\n                                        actionResolver: () => hasAccess ? patchSetDetailRowActions(openSystemUnassignModal) : []\n                                    }}\n                                    actionsConfig={{\n                                        actions: [\n                                            '', // intentionally empty, remediation button placeholder\n                                            {\n                                                key: 'remove-multiple-systems',\n                                                label: intl.formatMessage(\n                                                    messages.titlesTemplateRemoveFromSystems,\n                                                    { systemsCount: selectedCount }\n                                                ),\n                                                onClick: () =>\n                                                    openSystemUnassignModal(filterSelectedActiveSystemIDs(selectedRows)),\n                                                props: { isDisabled: selectedCount === 0 }\n                                            }\n                                        ]\n                                    }}\n                                    filterConfig={filterConfig}\n                                    activeFiltersConfig={activeFiltersConfig}\n                                />\n                            : <NoAppliedSystems onButtonClick={() => openPatchSetAssignWizard()} />}\n                </Main>\n            </Fragment>\n    );\n};\n\nexport default PatchSetDetail;\n","import { createAdvisorySystemsRows, createSystemsRows, createPatchSetDetailRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows, fetchRejected } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state, lastAction) => {\n    // this is pretty scuffed, but trust me it cannot be solved more elegantly because\n    // single item select actions are triggered by Inventory and contain only system id\n    // but we also need to match available_evra for each selected system for remediations\n    // this does not happen with bulk select action because they are implemented by Patchman\n    // the id-evra mapping is cached to minimize O(n^2) time complexity of id-evra matching\n    if (lastAction === 'SELECT_ENTITY') {\n        let idToEvraMapping = state.packageEvraCache;\n\n        if (idToEvraMapping === undefined) {\n            idToEvraMapping = {};\n            state.rows.forEach(row => idToEvraMapping[row.id] = row.available_evra);\n            state.packageEvraCache = idToEvraMapping;\n        }\n\n        state.selectedRows = state.selectedRows ? Object.fromEntries(\n            Object.entries(state.selectedRows).map(([id, value]) =>\n                value === true ? [id, idToEvraMapping[id]] : [id, value]\n            )\n        ) : state.selectedRows;\n    }\n\n    if (lastAction === 'LOAD_ENTITIES_FULFILLED') {\n        state.packageEvraCache = undefined;\n    }\n\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyTemplateDetailSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createPatchSetDetailRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyAdvisorySystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createAdvisorySystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState, action.type);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection, action.type);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["Dropdown","_a","onSelect","ref","ouiaId","ouiaSafe","alignments","contextProps","menuAppendTo","isFlipEnabled","removeFindDomNode","zIndex","props","__rest","Provider","value","Object","assign","event","toggleTextClass","dropdownToggleText","toggleIconClass","dropdownToggleImage","toggleIndicatorClass","dropdownToggleIcon","menuClass","dropdownMenu","itemClass","dropdownMenuItem","toggleClass","dropdownToggle","baseClass","dropdown","baseComponent","sectionClass","dropdownGroup","sectionTitleClass","dropdownGroupTitle","sectionComponent","disabledClass","modifiers","disabled","plainTextClass","text","displayName","ouiaComponentType","component","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","useEffect","console","error","concat","children","__assign","n","arguments","apply","this","BaseInvTable","history","useHistory","store","Cmp","className","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","DeleteSetModal","_ref","isModalOpen","setModalOpen","templateName","onConfirm","_useState","useState","_useState2","_slicedToArray","isCheckboxChecked","setCheckboxChecked","onClose","React","Modal","title","intl","formatMessage","messages","titlesTemplateDeleteModalTitle","titleIconVariant","isOpen","variant","actions","Button","key","onClick","isDisabled","labelsDelete","labelsCancel","titlesTemplateDeleteModalText","b","_len","chunks","Array","_key","Checkbox","isChecked","checked","onChange","label","titlesTemplateDeleteModalCheckbox","id","renderUnassignModalMessages","bodyMessage","systemsCount","GridItem","UnassignSystemsModal","_ref$unassignSystemsM","unassignSystemsModalState","setUnassignSystemsModalOpen","systemsIDs","isUnassignSystemsModalOpen","systemsWithPatchSet","setSystemWithPatchSet","_useState3","_useState4","systemsLoading","setSystemsLoading","handleModalToggle","shouldRefresh","handleModalClose","handleUnassignment","dispatch","useDispatch","handleSystemsRemoval","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","unassignSystemFromPatchSet","inventory_ids","sent","status","addNotification","patchSetUnassignSystemsNotifications","success","stop","useUnassignSystemsHook","fetchSystems","limit","filter","stale","then","allSystemsWithPatchSet","systemID","data","some","system","filterSystemsWithoutSets","result","systemsWithoutPatchSetCount","textUnassignSystemsTitle","labelsRemove","Grid","hasGutter","Skeleton","Fragment","injectIntl","useIntl","useStore","inventory","useRef","patchSetId","location","pathname","split","_React$useState","_React$useState2","firstMount","setFirstMount","isHeaderDropdownOpen","setHeaderDropdownOpen","isDeleteConfirmModalOpen","setDeleteConfirmModalOpen","_useState5","isPatchSetWizardOpen","_useState6","patchSetState","setPatchSetState","templateDetails","useSelector","PatchSetDetailStore","isHeaderLoading","_ref2","_PatchSetDetailStore$","_PatchSetDetailStore$2","isLoading","detailStatus","_ref3","systems","_ref4","entities","rows","shallowEqual","selectedRows","_ref5","systemStatus","_ref6","totalItems","_ref7","total","queryParams","_ref8","PatchSetDetailSystemsStore","templateHasSystemsLoading","_ref9","templateHasSystems","_ref10","hasAccess","usePermissionsWithContext","patchSetName","attributes","name","useOnSelect","endpoint","ID_API_ENDPOINTS","templateSystems","selectionDispatcher","systemSelectAction","params","changePatchSetDetailsSystemsParams","openPatchSetAssignWizard","_objectSpread","fetchPatchSetSystemsNoFiltersAction","clearTemplateDetail","clearInventoryReducer","_inventory$current","current","onRefreshData","timestamp","Date","now","fetchTemplateDetail","useDeepCompareEffect","decodeQueryparams","search","push","encodeURLParams","openSystemUnassignModal","ids","getEntities","useGetEntities","fetchPatchSetSystems","metadata","changePatchSetDetailsSystemsMetadata","tags","changeTags","dropdownItems","DropdownItem","labelsButtonEditTemplate","labelsButtonRemoveTemplate","decodedParams","systemProfile","selectedTags","page","perPage","sort","selectedCount","arrayFromObj","bulkSelectConfig","useBulkSelectConfig","total_items","_useRemoveFilter","useRemoveFilter","deleteFilters","osFilterConfig","useOsVersionFilter","os","filterConfig","buildTemplateFilterConfig","activeFiltersConfig","buildActiveFiltersConfig","hasError","ErrorHandler","code","deletePatchSet","patchSetDeleteNotifications","PatchSetWizard","setBaselineState","patchSetID","Header","style","width","headerOUIA","breadcrumbs","templateDetailHeaderBreadcrumb","to","isActive","position","DropdownPosition","right","document","getElementById","focus","toggle","DropdownToggle","onToggle","minWidth","labelsActions","border","marginTop","templateDetailTableDescription","description","titlesTemplateNoDescription","templateDetailTableUpToDate","processDate","config","to_time","templateDetailTableCreatedBy","creator","templateDetailTablePublished","published","templateDetailTableLastEdited","last_edited","Main","TextContent","Text","templateDetailTableTitle","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","columns","defaultColumns","templateSystemsColumnsMerger","showTags","onLoad","_ref11","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","systemsListColumns","modifyTemplateDetailSystems","persistantParams","customFilters","patchParams","paginationProps","bulkSelect","tableProps","canSelectAll","TableVariant","compact","isStickyHeader","actionResolver","patchSetDetailRowActions","actionsConfig","titlesTemplateRemoveFromSystems","filterSelectedActiveSystemIDs","NoAppliedSystems","onButtonClick","initialState","offset","modifyInventory","state","loaded","createSystemsRows","modifyPackageSystems","lastAction","idToEvraMapping","packageEvraCache","undefined","forEach","row","available_evra","fromEntries","entries","map","createPackageSystemsRows","createPatchSetDetailRows","modifyAdvisorySystems","createAdvisorySystemsRows","inventoryModifier","action","newState","type","fetchRejected","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}