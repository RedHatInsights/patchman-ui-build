{"version":3,"file":"js/9577.0db7f5f03c7da82ddfc3.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Filters/AdvisoryStatusFilter.js","webpack:///./src/PresentationalComponents/Filters/PublishDateFilter.js","webpack:///./src/PresentationalComponents/Filters/RebootFilter.js","webpack:///./src/PresentationalComponents/Filters/StatusFilter.js","webpack:///./src/PresentationalComponents/Filters/TypeFilter.js","webpack:///./src/PresentationalComponents/TableView/TableViewAssets.js","webpack:///./src/SmartComponents/SystemAdvisories/SystemAdvisories.js","webpack:///./src/SmartComponents/SystemPackages/SystemPackages.js","webpack:///./src/SmartComponents/SystemDetail/SystemDetail.js"],"sourcesContent":["import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { advisoryStatuses } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst advisoryStatusFilter = (apply, currentFilter = {}) => {\n    const filterByStatus = value => {\n        value.length === 0\n            ? apply({ filter: { status: undefined } })\n            : apply({ filter: { status: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStatus),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: advisoryStatuses,\n            value: !currentFilter.status || Array.isArray(currentFilter.status)\n                ? currentFilter.status\n                : [currentFilter.status],\n            placeholder: intl.formatMessage(messages.labelsColumnsStatusPlaceholder)\n        }\n    };\n};\n\nexport default advisoryStatusFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { publicDateOptions } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { public_date: currentValue } = currentFilter;\n\n    const filterByPublicDate = value => {\n        apply({ filter: { public_date: (value !== 'all' && value) || '' } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersPublishDate),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublicDate(value);\n            },\n            items: publicDateOptions,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersPublishDatePlaceholder)\n        }\n    };\n};\n\nexport default publishDateFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { rebootRequired } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst rebootFilter = (apply, currentFilter = {}) => {\n    let { reboot_required: currentValue } = currentFilter;\n\n    const rebootMap = React.useMemo(\n        () =>\n            rebootRequired.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n\n    const currentValueStringType = (\n        currentValue\n        && (\n            Array.isArray(currentValue)\n            && currentValue.map(value => value.toString())\n            || [currentValue.toString()]\n        )\n    );\n\n    const filterByReboot = value => {\n        apply({ filter: { reboot_required: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersReboot),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByReboot(value);\n            },\n            items: rebootMap,\n            value: currentValueStringType,\n            placeholder: intl.formatMessage(messages.labelsFiltersRebootPlaceholder)\n        }\n    };\n};\n\nexport default rebootFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { updatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { update_status: currentValue } = currentFilter;\n\n    const updatableTypesMap = React.useMemo(\n        () =>\n            updatableTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { update_status: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStatus),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: updatableTypesMap,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsColumnsStatusPlaceholder)\n        }\n    };\n};\n\nexport default statusFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst typeFilter = (apply, currentFilter = {}) => {\n    const advisoryTypesMap = React.useMemo(\n        () =>\n            advisoryTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { advisory_type_name: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersType),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: advisoryTypesMap,\n            value: currentFilter.advisory_type_name,\n            placeholder: intl.formatMessage(messages.labelsFiltersTypePlaceholder)\n        }\n    };\n};\n\nexport default typeFilter;\n","import { cellWidth, expandable, sortable } from '@patternfly/react-table';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nexport const advisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSynopsis),\n        transforms: [sortable],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsAffectedSystems),\n        transforms: [sortable, cellWidth(15)],\n        key: 'applicable_systems'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(15)],\n        key: 'public_date'\n    }\n];\n\nexport const systemAdvisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: 'Synopsis',\n        transforms: [sortable, cellWidth(35)],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [sortable, cellWidth(10)],\n        key: 'status'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable, cellWidth(10)],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(10)],\n        key: 'public_date'\n    }\n];\n\nexport const systemPackagesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(20)],\n        key: 'name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsInstalledVersion),\n        transforms: [sortable, cellWidth(15)],\n        key: 'evra'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsLatestInstallableVersion),\n        transforms: [cellWidth(15)],\n        key: 'latest_installable_version'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsLatestApplicableVersion),\n        transforms: [cellWidth(15)],\n        key: 'latest_applicable_version'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [sortable, cellWidth(10)],\n        key: 'update_status'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        key: 'summary'\n    }\n];\n\nexport const packagesColumns = [\n    {\n        key: 'name',\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(25)]\n    },\n    {\n        key: 'systems_installed',\n        title: intl.formatMessage(messages.labelsColumnsInstalledSystems),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'systems_applicable',\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'systems_installable',\n        title: intl.formatMessage(messages.labelsColumnsInstallableSystems),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'summary',\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        props: {\n            width: 30\n        }\n    }\n];\n\nexport const cvesTableColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsCveID),\n        transforms: [sortable, cellWidth(40)],\n        key: 'synopsis'\n    },\n    {\n        key: 'impact',\n        title: intl.formatMessage(messages.labelsColumnsSeverity),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    },\n    {\n        key: 'cvss',\n        title: intl.formatMessage(messages.labelsColumnsCVSS),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    }\n];\n","import propTypes from 'prop-types';\nimport React, { useMemo, useCallback, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSearchParams } from 'react-router-dom';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport rebootFilter from '../../PresentationalComponents/Filters/RebootFilter';\nimport advisoryStatusFilter from '../../PresentationalComponents/Filters/AdvisoryStatusFilter';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemAdvisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changeSystemAdvisoryListParams, clearSystemAdvisoriesStore, expandSystemAdvisoryRow,\n    fetchApplicableSystemAdvisories, selectSystemAdvisoryRow } from '../../store/Actions/Actions';\nimport { exportSystemAdvisoriesCSV, exportSystemAdvisoriesJSON } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport { createSystemAdvisoriesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, decodeQueryparams,\n    getRowIdByIndexExpandable, remediationProvider } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn, useOnExport, usePushUrlParams } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\n\nconst SystemAdvisories = ({ handleNoSystemData, inventoryId, shouldRefresh }) => {\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = useState(true);\n    const advisories = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.rows\n    );\n\n    const expandedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.status\n    );\n    const rows = useMemo(\n        () =>\n            createSystemAdvisoriesRows(advisories, expandedRows, selectedRows, metadata),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    const [searchParams] = useSearchParams();\n\n    const historyPusher = usePushUrlParams(queryParams);\n\n    useEffect(() => {\n        return () => dispatch(clearSystemAdvisoriesStore());\n    }, []);\n\n    useEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams('?' + searchParams.toString()));\n            setFirstMount(false);\n        } else {\n            historyPusher();\n            dispatch(\n                fetchApplicableSystemAdvisories({ id: inventoryId, ...queryParams })\n            );\n        }\n    }, [queryParams]);\n\n    useEffect(() => {\n        if (shouldRefresh) {\n            dispatch(fetchApplicableSystemAdvisories({ id: inventoryId, ...queryParams }));\n        }\n    }, [shouldRefresh]);\n\n    const onCollapse = useCallback((_, rowId, value) =>\n        dispatch(\n            expandSystemAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        ), [JSON.stringify(advisories)]\n    );\n\n    const constructFilename = (advisory) => advisory?.id || advisory;\n    const onSelect = useOnSelect(\n        rows,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systemAdvisories(inventoryId),\n            queryParams,\n            selectionDispatcher: selectSystemAdvisoryRow,\n            constructFilename\n        }\n    );\n\n    const onSort = useSortColumn(systemAdvisoriesColumns, apply, 2);\n    const sortBy = React.useMemo(\n        () => createSortBy(systemAdvisoriesColumns, metadata.sort, 2),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeSystemAdvisoryListParams({ id: inventoryId, ...params }));\n    }\n\n    const errorState = status.code === 404 ? handleNoSystemData() : <Unavailable/>;\n\n    const onExport = useOnExport(inventoryId, queryParams, {\n        csv: exportSystemAdvisoriesCSV,\n        json: exportSystemAdvisoriesJSON\n    }, dispatch);\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemAdvisoriesColumns}\n                compact\n                onCollapse={onCollapse}\n                onSelect={onSelect}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                onSort={onSort}\n                onExport={onExport}\n                sortBy={sortBy}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        inventoryId,\n                        remediationIdentifiers.advisory\n                    )\n                }\n                selectedRows={selectedRows}\n                systemId={inventoryId}\n                apply={apply}\n                store={{ rows, metadata, status, queryParams }}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-advisories-table'}\n                paginationOUIA={'system-advisories-pagination'}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search,\n                            intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle),\n                            intl.formatMessage(messages.labelsFiltersSearchAdvisoriesPlaceholder)\n                        ),\n                        typeFilter(apply, queryParams.filter),\n                        publishDateFilter(apply, queryParams.filter),\n                        rebootFilter(apply, queryParams.filter),\n                        advisoryStatusFilter(apply, queryParams.filter)\n                    ]\n                }}\n                errorState={errorState}\n                searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle)}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemAdvisories.propTypes = {\n    handleNoSystemData: propTypes.func,\n    inventoryId: propTypes.string.isRequired,\n    shouldRefresh: propTypes.bool\n};\nexport default SystemAdvisories;\n","import React, { useMemo, useEffect } from 'react';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport propTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport { SystemUpToDate } from '../../PresentationalComponents/Snippets/SystemUpToDate';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemPackagesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport {\n    changeSystemPackagesParams, clearSystemPackagesStore,\n    fetchApplicableSystemPackages, selectSystemPackagesRow\n} from '../../store/Actions/Actions';\nimport { exportSystemPackagesCSV, exportSystemPackagesJSON } from '../../Utilities/api';\nimport { remediationIdentifiers, systemPackagesDefaultFilters } from '../../Utilities/constants';\nimport { createSystemPackagesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, remediationProvider } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn, useOnExport } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\n\nconst SystemPackages = ({ handleNoSystemData, inventoryId, shouldRefresh }) => {\n    const dispatch = useDispatch();\n    const packages = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.rows\n    );\n    const queryParams = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.status\n    );\n    const error = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.error\n    );\n    const rows = useMemo(\n        () =>\n            createSystemPackagesRows(packages, selectedRows),\n        [packages,  selectedRows]\n    );\n\n    useEffect(() => {\n        return () => dispatch(clearSystemPackagesStore());\n    }, []);\n\n    useEffect(()=> {\n        dispatch(fetchApplicableSystemPackages({ id: inventoryId, ...queryParams }));\n    }, [queryParams]);\n\n    useEffect(() => {\n        if (shouldRefresh) {\n            dispatch(fetchApplicableSystemPackages({ id: inventoryId, ...queryParams }));\n        }\n    }, [shouldRefresh]);\n\n    const constructFilename = (pkg) => {\n        const pkgUpdates = pkg.updates || [];\n        const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n        return latestUpdate && `${pkg.name}-${latestUpdate.evra}`;\n    };\n\n    const transformKey = (row) => {\n        return `${row.name}-${row.evra}`;\n    };\n\n    const onSelect = useOnSelect(\n        packages,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systemPackages(inventoryId),\n            queryParams,\n            selectionDispatcher: selectSystemPackagesRow,\n            constructFilename,\n            transformKey\n        }\n    );\n\n    function apply(params) {\n        dispatch(changeSystemPackagesParams({ id: inventoryId, ...params }));\n    }\n\n    const onSort = useSortColumn(systemPackagesColumns, apply, 1);\n    const sortBy = useMemo(\n        () => createSortBy(systemPackagesColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const errorState = error.status === 404 ?  handleNoSystemData() : <Unavailable/>;\n    const emptyState = (!status.isLoading && !status.hasError && metadata.total_items === 0\n                            && Object.keys(queryParams).length === 0) && <SystemUpToDate/>;\n    const onExport = useOnExport(inventoryId, queryParams, {\n        csv: exportSystemPackagesCSV,\n        json: exportSystemPackagesJSON\n    }, dispatch);\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemPackagesColumns}\n                store={{ rows, metadata, status, queryParams }}\n                onSelect={onSelect}\n                selectedRows={selectedRows}\n                compact\n                onSort={onSort}\n                sortBy={sortBy}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                onExport={onExport}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        inventoryId,\n                        remediationIdentifiers.package\n                    )\n                }\n                apply={apply}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search,\n                            intl.formatMessage(messages.labelsFiltersPackagesSearchTitle),\n                            intl.formatMessage(messages.labelsFiltersPackagesSearchPlaceHolder)\n                        ),\n                        statusFilter(apply, queryParams.filter)\n                    ]\n                }}\n                defaultFilters = {systemPackagesDefaultFilters}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-packages-table'}\n                paginationOUIA={'system-packages-pagination'}\n                errorState={errorState}\n                emptyState={emptyState}\n                searchChipLabel={intl.formatMessage(messages.labelsFiltersPackagesSearchTitle)}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemPackages.propTypes = {\n    handleNoSystemData: propTypes.func,\n    inventoryId: propTypes.string.isRequired,\n    shouldRefresh: propTypes.bool\n};\nexport default SystemPackages;\n\n","import React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport SystemAdvisories from '../SystemAdvisories/SystemAdvisories';\nimport SystemPackages from '../SystemPackages/SystemPackages';\nimport './SystemDetail.scss';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport propTypes from 'prop-types';\n\nconst SystemDetail = ({ isInventoryApp, inventoryId, shouldRefresh }) => {\n    const { state } = useLocation();\n\n    const [activeTabKey, setActiveTabKey] = useState(\n        (state?.tab === 'packages') ? 1 : 0\n    );\n    const [areTabsHidden, setTabsHidden] = useState(false);\n\n    const onTabSelect = (event, id) => {\n        setActiveTabKey(id);\n    };\n\n    const handleNoSystemData = () => {\n        isInventoryApp && setTabsHidden(prevTabsHidden => !prevTabsHidden);\n        return isInventoryApp && null || <NotConnected />;\n    };\n\n    return (!areTabsHidden && (\n        <Tabs activeKey={activeTabKey} onSelect={onTabSelect} className={'patchTabSelect'} isHidden>\n            <Tab eventKey={0} title={<TabTitleText>{intl.formatMessage(messages.titlesAdvisories)}</TabTitleText>}\n                data-ouia-component-type={`system-advisories-tab`}\n                data-ouia-component-id={`system-advisories-tab`}\n            >\n                <SystemAdvisories\n                    handleNoSystemData={handleNoSystemData}\n                    inventoryId={inventoryId}\n                    shouldRefresh={shouldRefresh}\n                />\n            </Tab>\n            <Tab\n                eventKey={1}\n                title={<TabTitleText>{intl.formatMessage(messages.titlesPackages)}</TabTitleText>}\n                data-ouia-component-type={`system-packages-tab`}\n                data-ouia-component-id={`system-packages-tab`}\n            >\n                <SystemPackages\n                    handleNoSystemData={handleNoSystemData}\n                    inventoryId={inventoryId}\n                    shouldRefresh={shouldRefresh}\n                />\n            </Tab>\n        </Tabs>\n    ) || <NotConnected/>);\n};\n\nSystemDetail.propTypes = {\n    isInventoryApp: propTypes.bool,\n    inventoryId: propTypes.string.isRequired,\n    shouldRefresh: propTypes.bool\n};\nexport default SystemDetail;\n"],"names":["apply","currentFilter","arguments","length","undefined","label","intl","formatMessage","messages","labelsFiltersStatus","type","conditionalFilterType","checkbox","filterValues","onChange","event","value","filter","status","filterByStatus","items","advisoryStatuses","Array","isArray","placeholder","labelsColumnsStatusPlaceholder","currentValue","public_date","labelsFiltersPublishDate","radio","filterByPublicDate","publicDateOptions","labelsFiltersPublishDatePlaceholder","reboot_required","rebootMap","React","rebootRequired","map","_ref","toString","currentValueStringType","labelsFiltersReboot","filterByReboot","labelsFiltersRebootPlaceholder","update_status","updatableTypesMap","updatableTypes","filterByType","advisoryTypesMap","advisoryTypes","labelsFiltersType","advisory_type_name","labelsFiltersTypePlaceholder","advisoriesColumns","title","labelsColumnsName","cellFormatters","expandable","transforms","sortable","cellWidth","key","labelsColumnsSynopsis","labelsColumnsType","labelsColumnsAffectedSystems","labelsColumnsReboot","labelsColumnsPublishDate","systemAdvisoriesColumns","labelsColumnsStatus","systemPackagesColumns","labelsColumnsInstalledVersion","labelsColumnsLatestInstallableVersion","labelsColumnsLatestApplicableVersion","labelsColumnsSummary","packagesColumns","labelsColumnsInstalledSystems","props","width","labelsColumnsApplicableSystems","labelsColumnsInstallableSystems","cvesTableColumns","labelsColumnsCveID","labelsColumnsSeverity","labelsColumnsCVSS","SystemAdvisories","handleNoSystemData","inventoryId","shouldRefresh","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","firstMount","setFirstMount","advisories","useSelector","_ref2","SystemAdvisoryListStore","rows","expandedRows","_ref3","queryParams","_ref4","selectedRows","_ref5","metadata","_ref6","_ref7","useMemo","createSystemAdvisoriesRows","_useSearchParams","useSearchParams","searchParams","historyPusher","usePushUrlParams","useEffect","clearSystemAdvisoriesStore","decodeQueryparams","fetchApplicableSystemAdvisories","_objectSpread","id","onCollapse","useCallback","_","rowId","expandSystemAdvisoryRow","getRowIdByIndexExpandable","JSON","stringify","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","systemAdvisories","selectionDispatcher","selectSystemAdvisoryRow","constructFilename","advisory","onSort","useSortColumn","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","params","changeSystemAdvisoryListParams","errorState","code","Unavailable","onExport","useOnExport","csv","exportSystemAdvisoriesCSV","json","exportSystemAdvisoriesJSON","TableView","columns","compact","remediationProvider","arrayFromObj","remediationIdentifiers","systemId","store","remediationButtonOUIA","tableOUIA","paginationOUIA","filterConfig","searchFilter","search","labelsFiltersSearchAdvisoriesTitle","labelsFiltersSearchAdvisoriesPlaceholder","typeFilter","publishDateFilter","rebootFilter","advisoryStatusFilter","searchChipLabel","propTypes","isRequired","SystemPackages","packages","SystemPackageListStore","error","createSystemPackagesRows","clearSystemPackagesStore","fetchApplicableSystemPackages","systemPackages","selectSystemPackagesRow","pkg","pkgUpdates","updates","latestUpdate","concat","name","evra","transformKey","row","changeSystemPackagesParams","emptyState","isLoading","hasError","total_items","Object","keys","SystemUpToDate","exportSystemPackagesCSV","exportSystemPackagesJSON","labelsFiltersPackagesSearchTitle","labelsFiltersPackagesSearchPlaceHolder","statusFilter","defaultFilters","systemPackagesDefaultFilters","SystemDetail","isInventoryApp","state","useLocation","tab","activeTabKey","setActiveTabKey","_useState3","_useState4","areTabsHidden","setTabsHidden","prevTabsHidden","NotConnected","Tabs","activeKey","className","isHidden","Tab","eventKey","TabTitleText","titlesAdvisories","titlesPackages"],"sourceRoot":""}