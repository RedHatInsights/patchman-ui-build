{"version":3,"file":"js/TemplateDetail.df9a6982336f866605bc.js","mappings":"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","sources":["webpack:///./src/SmartComponents/Modals/DeleteSetModal.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./src/SmartComponents/PatchSet/PatchSetAssets.js","webpack:///./src/SmartComponents/PatchSetDetail/PatchSetDetailAssets.js","webpack:///./src/SmartComponents/PatchSetDetail/PatchSetDetail.js"],"sourcesContent":["import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Checkbox, Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst DeleteSetModal = ({ isModalOpen, setModalOpen, templateName, onConfirm }) => {\n    const [isCheckboxChecked, setCheckboxChecked] = useState(false);\n\n    const onClose = () => {\n        setModalOpen(false);\n        setCheckboxChecked(false);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.titlesTemplateDeleteModalTitle)}\n            titleIconVariant=\"warning\"\n            isOpen={isModalOpen}\n            onClose={onClose}\n            variant=\"small\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={() => {onClose(); onConfirm();}} isDisabled={!isCheckboxChecked}>\n                    {intl.formatMessage(messages.labelsDelete)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {intl.formatMessage(messages.titlesTemplateDeleteModalText, { templateName, b: (...chunks) => <b>{chunks}</b> })}\n            <Checkbox\n                className=\"pf-u-mt-md\"\n                isChecked={isCheckboxChecked}\n                checked={isCheckboxChecked}\n                onChange={(value) => setCheckboxChecked(value)}\n                label={intl.formatMessage(messages.titlesTemplateDeleteModalCheckbox)}\n                id=\"template-delete-modal-checkbox\"\n            />\n        </Modal>\n    );\n};\n\nDeleteSetModal.propTypes = {\n    isModalOpen: propTypes.bool,\n    setModalOpen: propTypes.func,\n    templateName: propTypes.string,\n    onConfirm: propTypes.func\n};\n\nexport default DeleteSetModal;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { removePatchSetApi } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../../Utilities/constants';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await removePatchSetApi({ inventory_ids: systemsWithPatchSet });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalToggle(true);\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","import React from 'react';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport {\n    EllipsisVIcon\n} from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const CreatePatchSetButton = (setPatchSetState, hasAccess) => () =>\n    !hasAccess ?\n        <Tooltip content='For editing access, contact your administrator.'>\n            <Button key='createButton' isAriaDisabled >\n                {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n            </Button>\n        </Tooltip>\n        :\n        (<Button key='createButton' onClick={() => setPatchSetState({ isPatchSetWizardOpen: true })}>\n            {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n        </Button>);\n\nexport const patchSetColumns = [\n    {\n        key: 'name',\n        title: 'Name',\n        transforms: [sortable]\n    },\n    {\n        key: 'systems',\n        title: 'Systems applied',\n        transforms: [sortable]\n    },\n    {\n        key: 'last_edited',\n        title: 'Last edited',\n        transforms: [sortable]\n    },\n    {\n        key: 'published',\n        title: 'Published',\n        transforms: [sortable]\n    },\n    {\n        key: 'creator',\n        title: 'Created by',\n        transforms: [sortable]\n    }\n];\n\nexport const patchSetRowActions = (openPatchSetEditModal, handlePatchSetDelete) => [\n    {\n        title: intl.formatMessage(messages.labelsButtonEditTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            openPatchSetEditModal(rowData?.id);\n        }\n    },\n    {\n        title: intl.formatMessage(messages.labelsButtonRemoveTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            handlePatchSetDelete(rowData);\n        }\n    }\n];\n\nexport const patchSetDetailRowActions = (handleSystemUnassign) => [\n    {\n        title: intl.formatMessage(messages.textUnassignSystemsShortTitle),\n        onClick: (_event, _rowId, rowData) => {\n            handleSystemUnassign(rowData);\n        }\n    }\n\n];\n\nexport const CustomActionsToggle = () => <Tooltip content='For editing access, contact your administrator.'>\n    <Button\n        isAriaDisabled\n        variant=\"plain\"\n        aria-label=\"plain kebab\"\n    >\n        <EllipsisVIcon />\n    </Button>\n</Tooltip>;\n","import { sortable } from '@patternfly/react-table/dist/js';\n\nexport const patchSetDetailColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        transforms: [sortable]\n    },\n    {\n        key: 'operating_system',\n        title: 'OS'\n    },\n    {\n        key: 'installable_advisories',\n        title: 'Installable advisories',\n        transforms: [sortable]\n    },\n    {\n        key: 'applicable_advisories',\n        title: 'Applicable advisories',\n        transforms: [sortable]\n    },\n    {\n        key: 'last_upload',\n        title: 'Last seen',\n        transforms: [sortable]\n    }\n];\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect, useState, Fragment, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { NoAppliedSystems, NoSmartManagement } from '../../PresentationalComponents/Snippets/EmptyStates';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { useDeepCompareEffect, useEntitlements, usePerPageSelect, useSetPage, useSortColumn } from '../../Utilities/Hooks';\nimport {\n    changePatchSetDetailsSystemsParams,\n    clearTemplateDetail,\n    fetchPatchSetDetailSystemsAction,\n    fetchTemplateDetail\n} from '../../store/Actions/Actions';\nimport { Dropdown, DropdownItem, DropdownPosition, DropdownToggle, Skeleton, Text, TextContent } from '@patternfly/react-core';\nimport DeleteSetModal from '../Modals/DeleteSetModal';\nimport { deletePatchSet } from '../../Utilities/api';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { patchSetDeleteNotifications, templateCompoundSortValues } from '../../Utilities/constants';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { patchSetDetailColumns } from './PatchSetDetailAssets';\nimport { createPatchSetDetailRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams, templateDateFormat } from '../../Utilities/Helpers';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport { CustomActionsToggle, patchSetDetailRowActions } from '../PatchSet/PatchSetAssets';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport UnassignSystemsModal from '../Modals/UnassignSystemsModal';\n\nconst PatchSetDetail = () => {\n    const getEntitlements = useEntitlements();\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const patchSetId = history.location.pathname.split('/')[2];\n\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [isHeaderDropdownOpen, setHeaderDropdownOpen] = useState(false);\n    const [hasSmartManagement, setSmartManagement] = React.useState(true);\n    const [isDeleteConfirmModalOpen, setDeleteConfirmModalOpen] = useState(false);\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        systemsIDs: [],\n        shouldRefresh: false\n    });\n\n    const templateDetails = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore\n    );\n\n    const isHeaderLoading = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore?.status?.isLoading ?? true\n    );\n\n    const status = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore.status\n    );\n\n    const assignedSystems = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore.rows\n    );\n\n    const metadata = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore.metadata\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore.queryParams\n    );\n\n    const { hasAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n\n    const rows = useMemo(\n        () => createPatchSetDetailRows(assignedSystems),\n        [assignedSystems]\n    );\n\n    const { hasError, code } = status;\n\n    const patchSetName = templateDetails.data.attributes.name;\n\n    const apply = (params) => {\n        dispatch(changePatchSetDetailsSystemsParams(params));\n    };\n\n    const onSetPage = useSetPage(metadata?.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const onSort = useSortColumn(patchSetDetailColumns, apply, 0, templateCompoundSortValues);\n    const sortBy = useMemo(\n        () => createSortBy(patchSetDetailColumns, metadata?.sort, 0, templateCompoundSortValues),\n        [metadata?.sort]\n    );\n\n    const openPatchSetAssignWizard = () => {\n        setPatchSetState({\n            ...patchSetState,\n            isPatchSetWizardOpen: true\n        });\n    };\n\n    const refreshTable = () => {\n        dispatch(fetchPatchSetDetailSystemsAction(patchSetId, { ...queryParams, page: 1, offset: 0 }));\n        dispatch(fetchTemplateDetail(patchSetId));\n    };\n\n    useEffect(() => {\n        getEntitlements().then((entitelements) => {\n            setSmartManagement(\n                entitelements?.smart_management?.is_entitled\n            );\n        });\n\n        return () => {\n            dispatch(changePatchSetDetailsSystemsParams());\n            dispatch(clearTemplateDetail());\n        };\n    }, []);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh === true) {\n            refreshTable();\n            setPatchSetState({ ...patchSetState, shouldRefresh: false });\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n\n            dispatch(fetchTemplateDetail(patchSetId));\n\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n\n            dispatch(fetchPatchSetDetailSystemsAction(patchSetId, queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const openSystemUnassignModal = (rowData) => {\n        setPatchSetState({ ...patchSetState, isUnassignSystemsModalOpen: true, systemsIDs: [rowData.id] });\n    };\n\n    const actionsConfig = patchSetDetailRowActions(openSystemUnassignModal);\n\n    const deleteSet = () => {\n        deletePatchSet(patchSetId).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).success));\n            history.push('/templates');\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).error));\n        });\n    };\n\n    const dropdownItems = [\n        <DropdownItem\n            key=\"edit-patch-set\"\n            component=\"button\"\n            onClick={() => openPatchSetAssignWizard()}\n        >\n            {intl.formatMessage(messages.labelsButtonEditTemplate)}\n        </DropdownItem>,\n        <DropdownItem\n            key=\"delete-patch-set\"\n            component=\"button\"\n            onClick={() => setDeleteConfirmModalOpen(true)}\n        >\n            {intl.formatMessage(messages.labelsButtonRemoveTemplate)}\n        </DropdownItem>\n    ];\n\n    return (\n        (hasError || metadata?.has_systems === false)\n            ? <ErrorHandler code={code} metadata={status.metadata} />\n            : <Fragment>\n                <DeleteSetModal\n                    templateName={patchSetName}\n                    isModalOpen={isDeleteConfirmModalOpen}\n                    setModalOpen={setDeleteConfirmModalOpen}\n                    onConfirm={deleteSet}\n                />\n                {patchSetState.isPatchSetWizardOpen &&\n                    <PatchSetWizard\n                        systemsIDs={patchSetState.systemsIDs}\n                        setBaselineState={setPatchSetState}\n                        patchSetID={patchSetId}\n                    />}\n                <UnassignSystemsModal\n                    unassignSystemsModalState={patchSetState}\n                    setUnassignSystemsModalOpen={setPatchSetState}\n                />\n                <Header\n                    title={isHeaderLoading ? <Skeleton style={{ width: 300 }} /> : patchSetName}\n                    headerOUIA={'template-details'}\n                    breadcrumbs={[\n                        {\n                            title: intl.formatMessage(messages.templateDetailHeaderBreadcrumb),\n                            to: '/templates',\n                            isActive: false\n                        },\n                        {\n                            title: isHeaderLoading ? <Skeleton style={{ width: 150 }} /> : patchSetName,\n                            isActive: true\n                        }\n                    ]}\n                    actions={\n                        <Dropdown\n                            position={DropdownPosition.right}\n                            onSelect={() => {\n                                setHeaderDropdownOpen(false);\n                                document.getElementById('patch-set-detail-header-kebab').focus();\n                            }}\n                            toggle={\n                                <DropdownToggle\n                                    id=\"patch-set-detail-header-kebab\"\n                                    className=\"pf-u-mr-xl\"\n                                    onToggle={(isOpen) => setHeaderDropdownOpen(isOpen)}\n                                    style={{ minWidth: 150 }}\n                                >\n                                    {intl.formatMessage(messages.labelsActions)}\n                                </DropdownToggle>\n                            }\n                            isOpen={isHeaderDropdownOpen}\n                            dropdownItems={dropdownItems}\n                        />\n                    }\n                >\n                    <table border=\"0\" style={{ marginTop: 8 }}>\n                        <tbody>\n                            <tr>\n                                <td style={{ width: 300 }}>{intl.formatMessage(messages.templateDetailTableDescription)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 300 }} />\n                                        : templateDetails.data.attributes.description\n                                        || intl.formatMessage(messages.titlesTemplateNoDescription)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableUpToDate)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : templateDateFormat(templateDetails.data.attributes.config.to_time)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableCreatedBy)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : templateDetails.data.attributes.creator}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTablePublished)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.published)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableLastEdited)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.last_edited)}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </Header>\n                <Main>\n                    <TextContent>\n                        <Text component=\"h2\" className=\"pf-u-mb-md\">\n                            {intl.formatMessage(messages.templateDetailTableTitle)}\n                        </Text>\n                    </TextContent>\n                    {hasSmartManagement\n                        ? (rows.length === 0 && !status.isLoading)\n                            ? <NoAppliedSystems onButtonClick={() => openPatchSetAssignWizard()} />\n                            : <TableView\n                                columns={patchSetDetailColumns}\n                                compact\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                onSort={onSort}\n                                sortBy={sortBy}\n                                apply={apply}\n                                tableOUIA={'patch-set-detail-table'}\n                                paginationOUIA={'patch-set-detail-pagination'}\n                                store={{ rows, metadata, status, queryParams }}\n                                actionsConfig={actionsConfig}\n                                actionsToggle={!hasAccess ? CustomActionsToggle : null}\n                                searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchTemplateTitle)}\n                            />\n                        : <NoSmartManagement />}\n                </Main>\n            </Fragment >);\n};\n\nexport default PatchSetDetail;\n"],"names":["DeleteSetModal","isModalOpen","setModalOpen","templateName","onConfirm","useState","isCheckboxChecked","setCheckboxChecked","onClose","title","intl","messages","titleIconVariant","isOpen","variant","actions","key","onClick","isDisabled","b","chunks","className","isChecked","checked","onChange","value","label","id","propTypes","renderUnassignModalMessages","bodyMessage","systemsCount","GridItem","formatMessage","UnassignSystemsModal","unassignSystemsModalState","setUnassignSystemsModalOpen","systemsIDs","isUnassignSystemsModalOpen","systemsWithPatchSet","setSystemWithPatchSet","systemsLoading","setSystemsLoading","handleModalToggle","shouldRefresh","handleModalClose","handleUnassignment","dispatch","useDispatch","handleSystemsRemoval","removePatchSetApi","inventory_ids","status","addNotification","patchSetUnassignSystemsNotifications","length","success","useUnassignSystemsHook","useEffect","fetchSystems","limit","filter","stale","then","allSystemsWithPatchSet","systemID","data","some","system","filterSystemsWithoutSets","result","systemsWithoutPatchSetCount","Modal","Button","Grid","hasGutter","Skeleton","Fragment","injectIntl","CreatePatchSetButton","setPatchSetState","hasAccess","isPatchSetWizardOpen","content","isAriaDisabled","patchSetColumns","transforms","sortable","patchSetRowActions","openPatchSetEditModal","handlePatchSetDelete","_event","_rowId","rowData","patchSetDetailRowActions","handleSystemUnassign","CustomActionsToggle","patchSetDetailColumns","getEntitlements","useEntitlements","useIntl","history","useHistory","patchSetId","location","pathname","split","React","firstMount","setFirstMount","isHeaderDropdownOpen","setHeaderDropdownOpen","hasSmartManagement","setSmartManagement","isDeleteConfirmModalOpen","setDeleteConfirmModalOpen","patchSetState","templateDetails","useSelector","PatchSetDetailStore","isHeaderLoading","isLoading","PatchSetDetailSystemsStore","assignedSystems","rows","metadata","queryParams","usePermissionsWithContext","useMemo","createPatchSetDetailRows","hasError","code","patchSetName","attributes","name","apply","params","changePatchSetDetailsSystemsParams","onSetPage","useSetPage","onPerPageSelect","usePerPageSelect","onSort","useSortColumn","templateCompoundSortValues","sortBy","createSortBy","sort","openPatchSetAssignWizard","entitelements","smart_management","is_entitled","clearTemplateDetail","fetchPatchSetDetailSystemsAction","page","offset","fetchTemplateDetail","useDeepCompareEffect","decodeQueryparams","search","push","encodeURLParams","actionsConfig","dropdownItems","DropdownItem","component","has_systems","ErrorHandler","deletePatchSet","patchSetDeleteNotifications","error","PatchSetWizard","setBaselineState","patchSetID","Header","style","width","headerOUIA","breadcrumbs","to","isActive","Dropdown","position","DropdownPosition","onSelect","document","getElementById","focus","toggle","DropdownToggle","onToggle","minWidth","border","marginTop","description","templateDateFormat","config","to_time","creator","processDate","published","last_edited","Main","TextContent","Text","TableView","columns","compact","tableOUIA","paginationOUIA","store","actionsToggle","searchChipLabel","onButtonClick"],"sourceRoot":""}