{"version":3,"file":"js/InventoryDetail.945baa53be42f88106fb.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./src/SmartComponents/Modals/AssignSystemsModal.js","webpack:///./src/PresentationalComponents/PatchSetWrapper/PatchSetWrapper.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/DetailWrapper.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryDetailHead.js","webpack:///./src/SmartComponents/SystemDetail/InventoryDetail.js","webpack:///./src/Utilities/usePatchSetState.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Stack, StackItem, Form } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\nimport SelectExistingSets from '../PatchSetWizard/InputFields/SelectExistingSets';\nimport messages from '../../Messages';\nimport {  updatePatchSets } from '../../Utilities/api';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { patchSetAssignSystemsNotifications } from '../PatchSet/PatchSetAssets';\nimport { filterSelectedActiveSystemIDs } from '../../Utilities/Helpers';\n\nconst AssignSystemsModal = ({ patchSetState = {}, setPatchSetState, intl }) => {\n    const dispatch = useDispatch();\n\n    const { systemsIDs, isAssignSystemsModalOpen } = patchSetState;\n    const [selectedPatchSet, setSelectedPatchSet] = useState([]);\n    const [selectedPatchSetDetails, setSelectedPatchSetDetails] = useState({});\n\n    const closeModal = () => {\n        setPatchSetState({\n            isAssignSystemsModalOpen: !isAssignSystemsModalOpen,\n            systemsIDs: []\n        });\n        setSelectedPatchSet([]);\n        setSelectedPatchSetDetails({});\n    };\n\n    const submitModal = () => {\n        updatePatchSets({ inventory_ids: systemsIDs }, selectedPatchSetDetails.id)\n        .then(() => {\n            dispatch(addNotification(patchSetAssignSystemsNotifications(Object.keys(systemsIDs).length).success));\n            setPatchSetState({\n                ...patchSetState,\n                shouldRefresh: true,\n                isAssignSystemsModalOpen: false,\n                systemsIDs: []\n            });\n        });\n\n        closeModal();\n    };\n\n    const openWizard = () => {\n        setPatchSetState({\n            ...patchSetState,\n            isPatchSetWizardOpen: true,\n            systemsIDs: filterSelectedActiveSystemIDs(systemsIDs),\n            shouldRefresh: false\n        });\n        setSelectedPatchSet([]);\n        setSelectedPatchSetDetails({});\n    };\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={patchSetState.isAssignSystemsModalOpen}\n            title={intl.formatMessage(messages.templateApply)}\n            onClose={closeModal}\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    isDisabled={!selectedPatchSetDetails?.id}\n                    onClick={submitModal}\n                >\n                    {intl.formatMessage(messages.templateApply)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeModal}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(messages.templateSelect, { systemCount: Object.keys(systemsIDs).length })}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <SelectExistingSets\n                            setSelectedPatchSet={setSelectedPatchSet}\n                            selectedSets={selectedPatchSet}\n                            selectCallback={setSelectedPatchSetDetails}\n                        />\n                    </Form>\n                </StackItem>\n                <StackItem>\n                    {intl.formatMessage(messages.templateOr)}\n                </StackItem>\n                <StackItem>\n                    <Button variant=\"secondary\" onClick={openWizard}>\n                        {intl.formatMessage(messages.templateCreate)}\n                    </Button>\n                </StackItem>\n            </Stack>\n        </Modal>\n    );\n};\n\nAssignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setPatchSetState: propTypes.func,\n    patchSetState: propTypes.object\n};\n\nexport default injectIntl(AssignSystemsModal);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport PatchSetWizard from '../../SmartComponents/PatchSetWizard/PatchSetWizard';\nimport UnassignSystemsModal from '../../SmartComponents/Modals/UnassignSystemsModal';\nimport AssignSystemsModal from '../../SmartComponents/Modals/AssignSystemsModal';\n\nconst PatchSetWrapper = ({ patchSetState, setPatchSetState }) => {\n    return (<>\n        {(patchSetState.isUnassignSystemsModalOpen) && <UnassignSystemsModal\n            unassignSystemsModalState={patchSetState}\n            setUnassignSystemsModalOpen={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n        />}\n        <AssignSystemsModal\n            patchSetState={patchSetState}\n            setPatchSetState={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n        />\n        {(patchSetState.isPatchSetWizardOpen) &&\n        <PatchSetWizard systemsIDs={patchSetState.systemsIDs} setBaselineState={setPatchSetState} />}\n    </>);\n};\n\nPatchSetWrapper.propTypes = {\n    patchSetState: propTypes.object,\n    setPatchSetState: propTypes.func\n};\nexport default PatchSetWrapper;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../PatchSet/PatchSetAssets';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalToggle(true);\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseDetailWrapper = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./DetailWrapper\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseDetailWrapper.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar DetailWrapper = React.forwardRef(function (props, ref) { return _jsx(BaseDetailWrapper, __assign({ innerRef: ref }, props)); });\nDetailWrapper.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nDetailWrapper.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default DetailWrapper;\n//# sourceMappingURL=DetailWrapper.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInventoryDetailHead = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryDetailHead\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInventoryDetailHead.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InventoryDetailHead = React.forwardRef(function (props, ref) { return _jsx(BaseInventoryDetailHead, __assign({ innerProps: ref }, props)); });\nInventoryDetailHead.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInventoryDetailHead.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InventoryDetailHead;\n//# sourceMappingURL=InventoryDetailHead.js.map","import React, { useEffect } from 'react';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useSelector, useDispatch, useStore } from 'react-redux';\nimport { combineReducers } from 'redux';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { defaultReducers } from '../../store';\nimport { SystemDetailStore } from '../../store/Reducers/SystemDetailStore';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { InventoryDetailHead, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Alert, Grid, GridItem, TextContent, Text } from '@patternfly/react-core';\nimport { fetchSystemDetailsAction } from '../../store/Actions/Actions';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';;\nimport PatchSetWrapper from '../../PresentationalComponents/PatchSetWrapper/PatchSetWrapper';\nimport usePatchSetState from '../../Utilities/usePatchSetState';\nimport { Link, useParams } from 'react-router-dom';\nimport SystemDetail from './SystemDetail';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { DEFAULT_PATCH_TITLE } from '../../Utilities/constants';\n\nconst InventoryDetail = () => {\n    const { inventoryId } = useParams();\n    const store = useStore();\n    const dispatch = useDispatch();\n\n    const { hasThirdPartyRepo, patchSetName, patchSetId } = useSelector(\n        ({ SystemDetailStore }) => SystemDetailStore\n    );\n\n    const { display_name: displayName } = useSelector(\n        ({ entityDetails }) => entityDetails?.entity ?? {}\n    );\n\n    const { patchSetState, setPatchSetState, openAssignSystemsModal, openUnassignSystemsModal } = usePatchSetState();\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    useEffect(() => {\n        dispatch(fetchSystemDetailsAction(inventoryId));\n    }, [patchSetState.shouldRefresh]);\n\n    const chrome = useChrome();\n    useEffect(()=>{\n        displayName &&  chrome.updateDocumentTitle(`${displayName} - ${intl.formatMessage(messages.titlesSystems)}\n        ${DEFAULT_PATCH_TITLE}`);\n    }, [chrome, displayName]);\n\n    return (\n        <DetailWrapper\n            onLoad={({ mergeWithDetail }) => {\n                store.replaceReducer(combineReducers({\n                    ...defaultReducers,\n                    ...mergeWithDetail(SystemDetailStore)\n                }));\n            }}\n            inventoryId={inventoryId}\n        >\n            <PatchSetWrapper patchSetState={patchSetState} setPatchSetState={setPatchSetState} />\n            <Header\n                title=\"\"\n                headerOUIA={'inventory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchSystems),\n                        to: '/systems',\n                        isActive: false\n                    },\n                    displayName && {\n                        title: displayName,\n                        isActive: true\n                    }\n                ]}\n            >\n                <InventoryDetailHead\n                    hideBack\n                    showTags\n                    inventoryId={inventoryId}\n                    actions={[\n                        {\n                            title: intl.formatMessage(messages.titlesTemplateAssign),\n                            key: 'assign-to-template',\n                            onClick: () => openAssignSystemsModal({ [inventoryId]: true })\n                        },\n                        {\n                            title: intl.formatMessage(messages.titlesTemplateRemoveMultipleButton),\n                            key: 'remove-from-template',\n                            isDisabled: !patchSetName,\n                            onClick: () => openUnassignSystemsModal([inventoryId])\n                        }]}\n                    //FIXME: remove this prop after inventory detail gets rid of activeApps in redux\n                    appList={[]}\n                >\n                    <Grid>\n                        {patchSetName && <GridItem>\n                            <TextContent>\n                                <Text>\n                                    {intl.formatMessage(messages.labelsColumnsTemplate)}:\n                                    <Link to={{ pathname: `/templates/${patchSetId}` }} className=\"pf-u-ml-xs\">\n                                        {patchSetName}\n                                    </Link>\n                                </Text>\n                            </TextContent>\n                        </GridItem>}\n                        <GridItem>\n                            {hasThirdPartyRepo &&\n                                (<Alert className='pf-u-mt-md' isInline variant=\"info\"\n                                    title={intl.formatMessage(messages.textThirdPartyInfo)}>\n                                </Alert>)\n                            }\n                        </GridItem>\n                    </Grid>\n                </InventoryDetailHead>\n            </Header>\n            <Main>\n                <SystemDetail inventoryId={inventoryId} />\n            </Main>\n        </DetailWrapper>);\n};\n\nexport default InventoryDetail;\n","import { useState } from 'react';\nimport {\n    filterSelectedActiveSystemIDs\n} from './Helpers';\n\n/**\n* Manages unified state for patch set wizard and unassign modal.\n* @param {Object} [selectedRows] selected rows object to be removed.\n* @returns {patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal}\n*/\nconst usePatchSetState = (selectedRows) => {\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        isAssignSystemsModalOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const openPatchSetAssignWizard = (systemID) => {\n        setPatchSetState({\n            isPatchSetWizardOpen: true,\n            systemsIDs: typeof systemID === 'string' && systemID !== ''\n                ? [systemID]\n                : filterSelectedActiveSystemIDs(selectedRows),\n            shouldRefresh: false\n        }\n        );\n    };\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openAssignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isAssignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openPatchSetEditModal = (patchSetID) => {\n        setPatchSetState({ isPatchSetWizardOpen: true, patchSetID });\n    };\n\n    return {\n        patchSetState,\n        setPatchSetState,\n        openPatchSetAssignWizard,\n        openUnassignSystemsModal,\n        openAssignSystemsModal,\n        openPatchSetEditModal\n    };\n};\n\nexport default usePatchSetState;\n"],"names":["_a","component","props","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","error","concat","children","AssignSystemsModal","_ref","_ref$patchSetState","patchSetState","setPatchSetState","intl","dispatch","useDispatch","systemsIDs","isAssignSystemsModalOpen","_useState","useState","_useState2","_slicedToArray","selectedPatchSet","setSelectedPatchSet","_useState3","_useState4","selectedPatchSetDetails","setSelectedPatchSetDetails","closeModal","React","Modal","variant","isOpen","title","formatMessage","messages","templateApply","onClose","actions","Button","key","isDisabled","id","onClick","updatePatchSets","inventory_ids","then","addNotification","patchSetAssignSystemsNotifications","keys","success","_objectSpread","shouldRefresh","labelsCancel","Stack","hasGutter","StackItem","templateSelect","systemCount","Form","SelectExistingSets","selectedSets","selectCallback","templateOr","isPatchSetWizardOpen","filterSelectedActiveSystemIDs","templateCreate","propTypes","injectIntl","PatchSetWrapper","isUnassignSystemsModalOpen","UnassignSystemsModal","unassignSystemsModalState","setUnassignSystemsModalOpen","PatchSetWizard","setBaselineState","renderUnassignModalMessages","bodyMessage","systemsCount","GridItem","b","_len","arguments","chunks","Array","_key","_ref$unassignSystemsM","systemsWithPatchSet","setSystemWithPatchSet","systemsLoading","setSystemsLoading","handleModalToggle","handleModalClose","handleUnassignment","handleSystemsRemoval","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","unassignSystemFromPatchSet","sent","status","patchSetUnassignSystemsNotifications","stop","apply","useUnassignSystemsHook","fetchSystems","limit","filter","stale","allSystemsWithPatchSet","systemID","data","some","system","filterSystemsWithoutSets","result","systemsWithoutPatchSetCount","textUnassignSystemsTitle","titleIconVariant","labelsRemove","Grid","Skeleton","Fragment","__assign","assign","n","this","BaseDetailWrapper","history","useHistory","store","Cmp","className","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","InventoryLoadError","ref","innerRef","DetailWrapper","defaultProps","Bullseye","Spinner","size","BaseInventoryDetailHead","InventoryDetailHead","innerProps","inventoryId","useParams","useStore","_useSelector","useSelector","SystemDetailStore","hasThirdPartyRepo","patchSetName","patchSetId","displayName","_ref2","_entityDetails$entity","entityDetails","entity","display_name","_usePatchSetState","usePatchSetState","openAssignSystemsModal","openUnassignSystemsModal","clearNotifications","fetchSystemDetailsAction","chrome","useChrome","updateDocumentTitle","titlesSystems","DEFAULT_PATCH_TITLE","onLoad","_ref3","mergeWithDetail","replaceReducer","combineReducers","defaultReducers","Header","headerOUIA","breadcrumbs","titlesPatchSystems","to","isActive","hideBack","showTags","titlesTemplateAssign","_defineProperty","titlesTemplateRemoveMultipleButton","appList","TextContent","Text","labelsColumnsTemplate","Link","pathname","Alert","isInline","textThirdPartyInfo","Main","SystemDetail","selectedRows","openPatchSetAssignWizard","openPatchSetEditModal","patchSetID"],"sourceRoot":""}