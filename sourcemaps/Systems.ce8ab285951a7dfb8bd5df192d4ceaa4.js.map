{"version":3,"file":"js/Systems.b30faebb7c6b8921cba4.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardBody.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/package-icon.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Card/card.mjs","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/SmartComponents/Modals/AssignSystemsModal.js","webpack:///./src/PresentationalComponents/PatchSetWrapper/PatchSetWrapper.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js","webpack:///./src/PresentationalComponents/StatusReports/SystemsStatusReport.js","webpack:///./src/SmartComponents/Systems/Systems.js","webpack:///./src/Utilities/usePatchSetState.js","webpack:///./src/Utilities/useRemediationDataProvider.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport const CardContext = React.createContext({\n    cardId: '',\n    registerTitleId: () => { },\n    isExpanded: false\n});\nexport const Card = (_a) => {\n    var { children = null, id = '', className = '', component = 'article', isHoverable = false, isCompact = false, isSelectable = false, isSelectableRaised = false, isSelected = false, isDisabledRaised = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true, hasSelectableInput = false, selectableInputAriaLabel, onSelectableInputChange = () => { } } = _a, props = __rest(_a, [\"children\", \"id\", \"className\", \"component\", \"isHoverable\", \"isCompact\", \"isSelectable\", \"isSelectableRaised\", \"isSelected\", \"isDisabledRaised\", \"isFlat\", \"isExpanded\", \"isRounded\", \"isLarge\", \"isFullHeight\", \"isPlain\", \"ouiaId\", \"ouiaSafe\", \"hasSelectableInput\", \"selectableInputAriaLabel\", \"onSelectableInputChange\"]);\n    const Component = component;\n    const ouiaProps = useOUIAProps(Card.displayName, ouiaId, ouiaSafe);\n    const [titleId, setTitleId] = React.useState('');\n    const [ariaProps, setAriaProps] = React.useState();\n    if (isCompact && isLarge) {\n        // eslint-disable-next-line no-console\n        console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n        isLarge = false;\n    }\n    const getSelectableModifiers = () => {\n        if (isDisabledRaised) {\n            return css(styles.modifiers.nonSelectableRaised);\n        }\n        if (isSelectableRaised) {\n            return css(styles.modifiers.selectableRaised, isSelected && styles.modifiers.selectedRaised);\n        }\n        if (isSelectable || isHoverable) {\n            return css(styles.modifiers.selectable, isSelected && styles.modifiers.selected);\n        }\n        return '';\n    };\n    const containsCardTitleChildRef = React.useRef(false);\n    const registerTitleId = (id) => {\n        setTitleId(id);\n        containsCardTitleChildRef.current = !!id;\n    };\n    React.useEffect(() => {\n        if (selectableInputAriaLabel) {\n            setAriaProps({ 'aria-label': selectableInputAriaLabel });\n        }\n        else if (titleId) {\n            setAriaProps({ 'aria-labelledby': titleId });\n        }\n        else if (hasSelectableInput && !containsCardTitleChildRef.current) {\n            setAriaProps({});\n            // eslint-disable-next-line no-console\n            console.warn('If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed');\n        }\n    }, [hasSelectableInput, selectableInputAriaLabel, titleId]);\n    return (React.createElement(CardContext.Provider, { value: {\n            cardId: id,\n            registerTitleId,\n            isExpanded\n        } },\n        hasSelectableInput && (React.createElement(\"input\", Object.assign({ className: \"pf-screen-reader\", id: `${id}-input` }, ariaProps, { type: \"checkbox\", checked: isSelected, onChange: event => onSelectableInputChange(id, event), disabled: isDisabledRaised, tabIndex: -1 }))),\n        React.createElement(Component, Object.assign({ id: id, className: css(styles.card, isCompact && styles.modifiers.compact, isExpanded && styles.modifiers.expanded, isFlat && styles.modifiers.flat, isRounded && styles.modifiers.rounded, isLarge && styles.modifiers.displayLg, isFullHeight && styles.modifiers.fullHeight, isPlain && styles.modifiers.plain, getSelectableModifiers(), className), tabIndex: isSelectable || isSelectableRaised ? '0' : undefined }, props, ouiaProps), children)));\n};\nCard.displayName = 'Card';\n//# sourceMappingURL=Card.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nexport const CardBody = (_a) => {\n    var { children = null, className = '', component = 'div', isFilled = true } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"isFilled\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardBody, !isFilled && styles.modifiers.noFill, className) }, props), children));\n};\nCardBody.displayName = 'CardBody';\n//# sourceMappingURL=CardBody.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nexport const CardTitle = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const { cardId, registerTitleId } = React.useContext(CardContext);\n    const Component = component;\n    const titleId = cardId ? `${cardId}-title` : '';\n    React.useEffect(() => {\n        registerTitleId(titleId);\n        return () => registerTitleId('');\n    }, [registerTitleId, titleId]);\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardTitle, className), id: titleId || undefined }, props), children));\n};\nCardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","import { createIcon } from '../createIcon';\n\nexport const PackageIconConfig = {\n  name: 'PackageIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M567.7,1010.49707 L951.5,818.498238 C994.7,796.698371 1024,752.39864 1024,703.998934 L1024,320.001265 C1024,271.601559 995.6,227.10183 952.2,205.501961 L568.6,13.5031267 C550.8,4.60318072 531.4,0.103208049 512,-0.00152855358 C492.3,-0.0967907365 472.5,4.40318194 454.4,13.5031267 L70.8,205.501961 C27.4,227.10183 0,271.50156 0,319.801267 L0.9,703.998934 C0.9,752.39864 28.3,796.79837 71.6,818.398239 L455.2,1010.39707 C464.3,1014.89705 488.1,1023.99699 511.9,1023.99699 C535.5,1023.99699 558.8,1014.99704 567.7,1010.49707 Z M512.5,630.899377 L672.5,550.899863 L672.5,645.29929 L736.5,613.299484 L736.5,518.900058 L896,438.900543 L896.5,712.698881 L512.5,904.697715 L512.5,630.899377 Z M145.1,304.101362 L294.9,228.60182 C295.3,228.801819 295.6,229.001818 296,229.201817 L661.9,412.300705 L512.5,487.600248 L145.1,304.101362 Z M512.5,118.902487 L881.3,301.701377 L733.1,376.400923 L366,192.702038 L512.5,118.902487 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PackageIcon = createIcon(PackageIconConfig);\n\nexport default PackageIcon;","import './card.css';\nexport default {\n  \"card\": \"pf-c-card\",\n  \"cardActions\": \"pf-c-card__actions\",\n  \"cardBody\": \"pf-c-card__body\",\n  \"cardExpandableContent\": \"pf-c-card__expandable-content\",\n  \"cardFooter\": \"pf-c-card__footer\",\n  \"cardHeader\": \"pf-c-card__header\",\n  \"cardHeaderToggle\": \"pf-c-card__header-toggle\",\n  \"cardHeaderToggleIcon\": \"pf-c-card__header-toggle-icon\",\n  \"cardSrInput\": \"pf-c-card__sr-input\",\n  \"cardTitle\": \"pf-c-card__title\",\n  \"divider\": \"pf-c-divider\",\n  \"modifiers\": {\n    \"hoverable\": \"pf-m-hoverable\",\n    \"selectable\": \"pf-m-selectable\",\n    \"selected\": \"pf-m-selected\",\n    \"hoverableRaised\": \"pf-m-hoverable-raised\",\n    \"selectableRaised\": \"pf-m-selectable-raised\",\n    \"nonSelectableRaised\": \"pf-m-non-selectable-raised\",\n    \"selectedRaised\": \"pf-m-selected-raised\",\n    \"compact\": \"pf-m-compact\",\n    \"displayLg\": \"pf-m-display-lg\",\n    \"flat\": \"pf-m-flat\",\n    \"plain\": \"pf-m-plain\",\n    \"rounded\": \"pf-m-rounded\",\n    \"expanded\": \"pf-m-expanded\",\n    \"fullHeight\": \"pf-m-full-height\",\n    \"toggleRight\": \"pf-m-toggle-right\",\n    \"noOffset\": \"pf-m-no-offset\",\n    \"noFill\": \"pf-m-no-fill\",\n    \"overpassFont\": \"pf-m-overpass-font\"\n  },\n  \"themeDark\": \"pf-theme-dark\"\n};","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Stack, StackItem, Form } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\nimport SelectExistingSets from '../PatchSetWizard/InputFields/SelectExistingSets';\nimport messages from '../../Messages';\nimport {  updatePatchSets } from '../../Utilities/api';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { patchSetAssignSystemsNotifications } from '../PatchSet/PatchSetAssets';\nimport { filterSelectedActiveSystemIDs } from '../../Utilities/Helpers';\n\nconst AssignSystemsModal = ({ patchSetState = {}, setPatchSetState, intl }) => {\n    const dispatch = useDispatch();\n\n    const { systemsIDs, isAssignSystemsModalOpen } = patchSetState;\n    const [selectedPatchSet, setSelectedPatchSet] = useState([]);\n    const [selectedPatchSetDetails, setSelectedPatchSetDetails] = useState({});\n\n    const closeModal = () => {\n        setPatchSetState({\n            isAssignSystemsModalOpen: !isAssignSystemsModalOpen,\n            systemsIDs: []\n        });\n        setSelectedPatchSet([]);\n        setSelectedPatchSetDetails({});\n    };\n\n    const submitModal = () => {\n        updatePatchSets({ inventory_ids: systemsIDs }, selectedPatchSetDetails.id)\n        .then(() => {\n            dispatch(addNotification(patchSetAssignSystemsNotifications(Object.keys(systemsIDs).length).success));\n            setPatchSetState({\n                ...patchSetState,\n                shouldRefresh: true,\n                isAssignSystemsModalOpen: false,\n                systemsIDs: []\n            });\n        });\n\n        closeModal();\n    };\n\n    const openWizard = () => {\n        setPatchSetState({\n            ...patchSetState,\n            isPatchSetWizardOpen: true,\n            systemsIDs: filterSelectedActiveSystemIDs(systemsIDs),\n            shouldRefresh: false\n        });\n        setSelectedPatchSet([]);\n        setSelectedPatchSetDetails({});\n    };\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={patchSetState.isAssignSystemsModalOpen}\n            title={intl.formatMessage(messages.templateApply)}\n            onClose={closeModal}\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    isDisabled={!selectedPatchSetDetails?.id}\n                    onClick={submitModal}\n                >\n                    {intl.formatMessage(messages.templateApply)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeModal}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(messages.templateSelect, { systemCount: Object.keys(systemsIDs).length })}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <SelectExistingSets\n                            setSelectedPatchSet={setSelectedPatchSet}\n                            selectedSets={selectedPatchSet}\n                            selectCallback={setSelectedPatchSetDetails}\n                        />\n                    </Form>\n                </StackItem>\n                <StackItem>\n                    {intl.formatMessage(messages.templateOr)}\n                </StackItem>\n                <StackItem>\n                    <Button variant=\"secondary\" onClick={openWizard}>\n                        {intl.formatMessage(messages.templateCreate)}\n                    </Button>\n                </StackItem>\n            </Stack>\n        </Modal>\n    );\n};\n\nAssignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setPatchSetState: propTypes.func,\n    patchSetState: propTypes.object\n};\n\nexport default injectIntl(AssignSystemsModal);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport PatchSetWizard from '../../SmartComponents/PatchSetWizard/PatchSetWizard';\nimport UnassignSystemsModal from '../../SmartComponents/Modals/UnassignSystemsModal';\nimport AssignSystemsModal from '../../SmartComponents/Modals/AssignSystemsModal';\n\nconst PatchSetWrapper = ({ patchSetState, setPatchSetState }) => {\n    return (<>\n        {(patchSetState.isUnassignSystemsModalOpen) && <UnassignSystemsModal\n            unassignSystemsModalState={patchSetState}\n            setUnassignSystemsModalOpen={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n        />}\n        <AssignSystemsModal\n            patchSetState={patchSetState}\n            setPatchSetState={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n        />\n        {(patchSetState.isPatchSetWizardOpen) &&\n        <PatchSetWizard systemsIDs={patchSetState.systemsIDs} setBaselineState={setPatchSetState} />}\n    </>);\n};\n\nPatchSetWrapper.propTypes = {\n    patchSetState: propTypes.object,\n    setPatchSetState: propTypes.func\n};\nexport default PatchSetWrapper;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../PatchSet/PatchSetAssets';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalToggle(true);\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { CheckCircleIcon, PackageIcon, ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Button, Skeleton,\n    Card, Grid, GridItem, CardBody, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { fetchSystems } from '../../Utilities/api';\n\nconst StatusCard = ({ title, color, Icon, value, filter, apply }) => {\n    return (\n        <Card isCompact isFullHeight>\n            <CardTitle style={{ marginTop: '0px' }}>{title}</CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                    <FlexItem\n                        spacer={{ default: 'spacerMd' }}\n                        alignSelf={{ default: 'alignSelfCenter' }}\n                    >\n                        <Icon color={color} size='md'/>\n                    </FlexItem>\n                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                        {\n                            typeof(value) === 'undefined'\n                            &&  <Skeleton width=\"24px\" />\n                                    ||  <Button\n                                        variant=\"link\"\n                                        onClick={() => apply(filter)}\n                                        className='patch-status-report-text'>\n                                        {value}\n                                    </Button>\n                        }\n                    </FlexItem>\n                </Flex>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst SystemsStatusReport = ({ apply, queryParams }) => {\n    const [subtotals, setSubtotals] = React.useState({});\n\n    const { selectedTags, selectedGlobalTags, systemProfile } = useSelector(({ GlobalFilterStore }) => GlobalFilterStore);\n\n    const fetchResource = () => {\n        setSubtotals({});\n\n        let result;\n\n        try {\n            result = fetchSystems({\n                filter: {\n                    os: queryParams?.filter?.os\n                },\n                selectedTags: [...selectedTags, ...selectedGlobalTags],\n                systemProfile,\n                limit: 1,\n                'filter[stale]': 'in:true,false'\n            }).then((result)=> {\n                setSubtotals(result.meta?.subtotals);\n            });\n        }\n        catch {\n            result = [];\n        }\n\n        return result;\n    };\n\n    React.useEffect(() => {\n        fetchResource();\n    }, [\n        queryParams?.filter?.os?.length, queryParams?.filter?.os !== undefined,\n        selectedTags?.length, selectedTags !== undefined,\n        selectedGlobalTags?.length, selectedGlobalTags !== undefined,\n        systemProfile,\n        queryParams?.subtotals !== undefined\n    ]);\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Grid hasGutter span={12} >\n                <GridItem lg={3} md={4}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsUpToDate)}\n                        Icon={CheckCircleIcon}\n                        color={'var(--pf-global--success-color--100)'}\n                        value={subtotals?.patched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'eq:0' } }}\n                    />\n                </GridItem>\n                <GridItem lg={3} md={4}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsWithPatchesAvailable)}\n                        Icon={PackageIcon}\n                        color={'var(--pf-global--primary-color--100)'}\n                        value={subtotals?.unpatched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'gt:0' } }}\n                    />\n                </GridItem>\n                <GridItem lg={3} md={4}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusStaleSystems)}\n                        Icon={ExclamationTriangleIcon}\n                        color={'var(--pf-global--warning-color--100)'}\n                        value={subtotals?.stale}\n                        apply={apply}\n                        filter={{ filter: { stale: true } }}\n                    />\n                </GridItem>\n            </Grid>\n        </Main>\n    );\n};\n\nStatusCard.propTypes = {\n    title: propTypes.string,\n    Icon: propTypes.elementType,\n    value: propTypes.number,\n    color: propTypes.string,\n    apply: propTypes.func,\n    filter: propTypes.object\n};\n\nSystemsStatusReport.propTypes = {\n    apply: propTypes.func,\n    queryParams: propTypes.object\n};\n\nexport default SystemsStatusReport;\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { defaultReducers } from '../../store';\nimport { changeSystemsParams, clearInventoryReducer,\n    changeSystemsMetadata, changeTags, systemSelectAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchSystems\n} from '../../Utilities/api';\nimport { DEFAULT_PATCH_TITLE, systemsListDefaultFilters } from '../../Utilities/constants';\nimport {\n    arrayFromObj, decodeQueryparams, persistantParams, filterSelectedActiveSystemIDs\n} from '../../Utilities/Helpers';\nimport { useBulkSelectConfig, useGetEntities, useOnExport,\n    useRemoveFilter\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\nimport SystemsStatusReport from '../../PresentationalComponents/StatusReports/SystemsStatusReport';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport { buildFilterConfig, buildActiveFiltersConfig } from '../../Utilities/SystemsHelpers';\nimport useRemediationProvier from '../../Utilities/useRemediationDataProvider';\nimport usePatchSetState from '../../Utilities/usePatchSetState';\nimport PatchSetWrapper from '../../PresentationalComponents/PatchSetWrapper/PatchSetWrapper';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\nimport { combineReducers } from 'redux';\nimport { systemsColumnsMerger } from '../../Utilities/SystemsHelpers';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst Systems = () => {\n    const store = useStore();\n    const inventory = useRef(null);\n\n    const chrome = useChrome();\n    useEffect(()=>{\n        chrome.updateDocumentTitle(`${intl.formatMessage(messages.titlesSystems)}${DEFAULT_PATCH_TITLE}`);\n    }, [chrome, intl]);\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [isRemediationOpen, setRemediationOpen] = React.useState(false);\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const { hasError, code } = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const metadata = useSelector(\n        ({ SystemsStore }) => SystemsStore?.metadata || {}\n    );\n    const areAllSelected = useSelector(\n        ({ SystemsStore }) => SystemsStore?.areAllSelected\n    );\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => dispatch(clearInventoryReducer());\n    }, []);\n\n    const showRemediationModal = useCallback(async (data) => {\n        const resolvedData = await data;\n        setRemediationModalCmp(() =>\n            () => <RemediationWizard\n                data={resolvedData}\n                isRemediationOpen\n                setRemediationOpen={setRemediationOpen} />);\n        setRemediationOpen(!isRemediationOpen);\n    }, [isRemediationOpen]);\n\n    function apply(queryParams) {\n        dispatch(changeSystemsParams(queryParams));\n    }\n\n    const applyMetadata = (metadata) => {\n        dispatch(changeSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply, systemsListDefaultFilters);\n\n    const osFilterConfig = useOsVersionFilter(filter?.os, apply);\n    const filterConfig = buildFilterConfig(search, filter, apply, osFilterConfig);\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systems,\n            queryParams,\n            selectionDispatcher: systemSelectAction\n        }\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport('systems', queryParams, {\n        csv: exportSystemsCSV,\n        json: exportSystemsJSON\n    }, dispatch);\n\n    const getEntities = useGetEntities(fetchSystems, apply, {}, history, applyMetadata, applyGlobalFilter);\n\n    const {\n        patchSetState, setPatchSetState, openUnassignSystemsModal, openAssignSystemsModal\n    } = usePatchSetState(selectedRows);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh) {\n            onSelect('none');\n            // timestamp is used to force inventory to refresh\n            // if it wasn't there inventory might ignore request to refresh because parameters are the same\n            inventory?.current?.onRefreshData({ timestamp: Date.now() });\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    const remediationDataProvider = useRemediationProvier(selectedRows, setRemediationLoading, 'systems', areAllSelected);\n\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'} />\n            {(hasError || metadata?.has_systems === false)\n            && <ErrorHandler code={code} metadata={metadata}/>\n            || <React.Fragment>\n                <SystemsStatusReport apply={apply} queryParams={queryParams} />\n                <PatchSetWrapper patchSetState={patchSetState} setPatchSetState={setPatchSetState} />\n                {isRemediationOpen && <RemediationModalCmp /> || null}\n                <Main>\n                    <InventoryTable\n                        ref={inventory}\n                        isFullView\n                        autoRefresh\n                        initialLoading\n                        hideFilters={{ all: true, tags: false }}\n                        columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, systemsListColumns)}\n                        showTags\n                        customFilters={{\n                            patchParams: {\n                                search,\n                                filter,\n                                systemProfile,\n                                selectedTags\n                            }\n                        }}\n                        paginationProps={{\n                            isDisabled: totalItems === 0\n                        }}\n                        onLoad={({ mergeWithEntities }) => {\n                            store.replaceReducer(combineReducers({\n                                ...defaultReducers,\n                                ...mergeWithEntities(\n                                    inventoryEntitiesReducer(systemsListColumns(), modifyInventory),\n                                    persistantParams({ page, perPage, sort, search }, decodedParams)\n                                )\n                            }));\n                        }}\n                        getEntities={getEntities}\n                        tableProps={{\n                            actionResolver: (row) =>\n                                systemsRowActions(\n                                    showRemediationModal,\n                                    openAssignSystemsModal,\n                                    openUnassignSystemsModal,\n                                    row\n                                ),\n                            canSelectAll: false,\n                            variant: TableVariant.compact,\n                            className: 'patchCompactInventory',\n                            isStickyHeader: true\n                        }}\n                        bulkSelect={bulkSelectConfig}\n                        exportConfig={{\n                            isDisabled: totalItems === 0,\n                            onSelect: onExport\n                        }}\n                        actionsConfig={{\n                            actions: [\n                                <AsyncRemediationButton\n                                    key='remediate-multiple-systems'\n                                    remediationProvider={remediationDataProvider}\n                                    isDisabled={\n                                        arrayFromObj(selectedRows).length === 0 || isRemediationLoading\n                                    }\n                                    isLoading={isRemediationLoading}\n                                />,\n                                {\n                                    key: 'assign-multiple-systems',\n                                    label: intl.formatMessage(messages.titlesTemplateAssign),\n                                    onClick: () => openAssignSystemsModal(selectedRows),\n                                    props: { isDisabled: selectedCount === 0 }\n                                },\n                                {\n                                    key: 'remove-multiple-systems',\n                                    label: intl.formatMessage(messages.titlesTemplateRemoveMultipleButton),\n                                    onClick: () => openUnassignSystemsModal(filterSelectedActiveSystemIDs(selectedRows)),\n                                    props: { isDisabled: selectedCount === 0 }\n                                }\n                            ]\n                        }}\n                        filterConfig={filterConfig}\n                        activeFiltersConfig={activeFiltersConfig}\n                    />\n                </Main>\n            </React.Fragment>}\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n","import { useState } from 'react';\nimport {\n    filterSelectedActiveSystemIDs\n} from './Helpers';\n\n/**\n* Manages unified state for patch set wizard and unassign modal.\n* @param {Object} [selectedRows] selected rows object to be removed.\n* @returns {patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal}\n*/\nconst usePatchSetState = (selectedRows) => {\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        isAssignSystemsModalOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const openPatchSetAssignWizard = (systemID) => {\n        setPatchSetState({\n            isPatchSetWizardOpen: true,\n            systemsIDs: typeof systemID === 'string' && systemID !== ''\n                ? [systemID]\n                : filterSelectedActiveSystemIDs(selectedRows),\n            shouldRefresh: false\n        }\n        );\n    };\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openAssignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isAssignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openPatchSetEditModal = (patchSetID) => {\n        setPatchSetState({ isPatchSetWizardOpen: true, patchSetID });\n    };\n\n    return {\n        patchSetState,\n        setPatchSetState,\n        openPatchSetAssignWizard,\n        openUnassignSystemsModal,\n        openAssignSystemsModal,\n        openPatchSetEditModal\n    };\n};\n\nexport default usePatchSetState;\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport {\n    removeUndefinedObjectKeys\n} from './Helpers';\n\nconst initializeWorker = () => {\n    const worker = new Worker(new URL('./RemediationPairs.js', import.meta.url));\n    return [worker, () => worker.terminate()];\n};\n\nconst deligateWorkerTask = (worker, task) => {\n    worker.postMessage(task);\n\n    //waits web worker response\n    return new Promise((resolve, reject) => {\n        worker.onmessage = ({ data: { status, error, result } } = {}) => {\n            if (status === 'resolved')  {\n                resolve(result);\n            }\n\n            reject(error);\n        };\n    });\n};\n\nexport const prepareRemediationPairs = async (task, dispatch) => {\n    const [worker, terminateWorker] = initializeWorker();\n    const deligatedTask = deligateWorkerTask(worker, task);\n\n    const response = await deligatedTask.catch(err =>\n        dispatch(\n            addNotification(\n                {\n                    title: `There was an error while processing.`,\n                    description: err,\n                    variant: 'danger'\n                }\n            )\n        ));\n\n    terminateWorker();\n\n    //displays NoDataModal when there is no patch updates available\n    return response?.issues?.length ? response : false;\n};\n\n/**\n* Provides remediation data, systems with all of their corresponding issues.\n* @param {Function} [setRemediationLoading] function to toggle remediation loading state\n* @param {Array} [selectedRows] array of systems to calculate\n* @returns {handleSystemsRemoval}\n*/\nconst useRemediationDataProvider = (selectedRows, setRemediationLoading, remediationType, areAllSelected) => {\n    const dispatch = useDispatch();\n    const chrome = useChrome();\n    const remediationDataProvider = async () => {\n        setRemediationLoading(true);\n\n        //Auth token must be added to webworker request as webworker does not have access\n        //to default token by platform\n        const authToken = await chrome.auth.getToken();\n        const remediationPairs = await prepareRemediationPairs(\n            {\n                payload: removeUndefinedObjectKeys(selectedRows),\n                remediationType,\n                areAllSelected,\n                authToken\n            },\n            dispatch\n        );\n\n        setRemediationLoading(false);\n\n        return remediationPairs;\n    };\n\n    return remediationDataProvider;\n};\n\nexport default useRemediationDataProvider;\n","import { createAdvisorySystemsRows, createSystemsRows, createPatchSetDetailRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows, fetchRejected } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state, lastAction) => {\n    // this is pretty scuffed, but trust me it cannot be solved more elegantly because\n    // single item select actions are triggered by Inventory and contain only system id\n    // but we also need to match available_evra for each selected system for remediations\n    // this does not happen with bulk select action because they are implemented by Patchman\n    // the id-evra mapping is cached to minimize O(n^2) time complexity of id-evra matching\n    if (lastAction === 'SELECT_ENTITY') {\n        let idToEvraMapping = state.packageEvraCache;\n\n        if (idToEvraMapping === undefined) {\n            idToEvraMapping = {};\n            state.rows.forEach(row => idToEvraMapping[row.id] = row.available_evra);\n            state.packageEvraCache = idToEvraMapping;\n        }\n\n        state.selectedRows = state.selectedRows ? Object.fromEntries(\n            Object.entries(state.selectedRows).map(([id, value]) =>\n                value === true ? [id, idToEvraMapping[id]] : [id, value]\n            )\n        ) : state.selectedRows;\n    }\n\n    if (lastAction === 'LOAD_ENTITIES_FULFILLED') {\n        state.packageEvraCache = undefined;\n    }\n\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyTemplateDetailSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createPatchSetDetailRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyAdvisorySystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createAdvisorySystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState, action.type);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection, action.type);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["CardContext","cardId","registerTitleId","isExpanded","Card","_a","children","id","className","component","isHoverable","isCompact","isSelectable","isSelectableRaised","isSelected","isDisabledRaised","isFlat","isRounded","isLarge","isFullHeight","isPlain","ouiaId","ouiaSafe","hasSelectableInput","selectableInputAriaLabel","onSelectableInputChange","props","__rest","Component","ouiaProps","displayName","titleId","setTitleId","ariaProps","setAriaProps","console","warn","containsCardTitleChildRef","current","Provider","value","Object","assign","type","checked","onChange","event","disabled","tabIndex","css","card","modifiers","compact","expanded","flat","rounded","displayLg","fullHeight","plain","nonSelectableRaised","selectableRaised","selectedRaised","selectable","selected","undefined","CardBody","isFilled","cardBody","noFill","CardTitle","cardTitle","PackageIconConfig","name","height","width","svgPath","yOffset","xOffset","PackageIcon","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","useEffect","error","concat","__assign","n","arguments","apply","this","BaseInvTable","history","useHistory","store","Cmp","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","AssignSystemsModal","_ref","_ref$patchSetState","patchSetState","setPatchSetState","intl","dispatch","useDispatch","systemsIDs","isAssignSystemsModalOpen","_useState","useState","_useState2","_slicedToArray","selectedPatchSet","setSelectedPatchSet","_useState3","_useState4","selectedPatchSetDetails","setSelectedPatchSetDetails","closeModal","React","Modal","variant","isOpen","title","formatMessage","messages","templateApply","onClose","actions","Button","key","isDisabled","onClick","updatePatchSets","inventory_ids","then","addNotification","patchSetAssignSystemsNotifications","keys","success","_objectSpread","shouldRefresh","labelsCancel","Stack","hasGutter","StackItem","templateSelect","systemCount","Form","SelectExistingSets","selectedSets","selectCallback","templateOr","isPatchSetWizardOpen","filterSelectedActiveSystemIDs","templateCreate","injectIntl","PatchSetWrapper","isUnassignSystemsModalOpen","UnassignSystemsModal","unassignSystemsModalState","setUnassignSystemsModalOpen","PatchSetWizard","setBaselineState","renderUnassignModalMessages","bodyMessage","systemsCount","GridItem","b","_len","chunks","Array","_key","_ref$unassignSystemsM","systemsWithPatchSet","setSystemWithPatchSet","systemsLoading","setSystemsLoading","handleModalToggle","handleModalClose","handleUnassignment","handleSystemsRemoval","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","unassignSystemFromPatchSet","sent","status","patchSetUnassignSystemsNotifications","stop","useUnassignSystemsHook","fetchSystems","limit","filter","stale","allSystemsWithPatchSet","systemID","data","some","system","filterSystemsWithoutSets","result","systemsWithoutPatchSetCount","textUnassignSystemsTitle","titleIconVariant","labelsRemove","Grid","Skeleton","Fragment","RemediationWizard","setRemediationOpen","AsyncComponent","setOpen","StatusCard","color","Icon","style","marginTop","Flex","flex","default","flexWrap","FlexItem","spacer","alignSelf","SystemsStatusReport","_ref2","_queryParams$filter2","_queryParams$filter2$","_queryParams$filter3","queryParams","_React$useState","_React$useState2","subtotals","setSubtotals","_useSelector","useSelector","_ref3","GlobalFilterStore","selectedTags","selectedGlobalTags","systemProfile","_queryParams$filter","os","_toConsumableArray","_result$meta","meta","_unused","fetchResource","Main","paddingBottom","span","lg","md","labelsStatusSystemsUpToDate","CheckCircleIcon","patched","packages_updatable","labelsStatusSystemsWithPatchesAvailable","unpatched","labelsStatusStaleSystems","ExclamationTriangleIcon","useStore","inventory","useRef","chrome","useChrome","updateDocumentTitle","titlesSystems","DEFAULT_PATCH_TITLE","isRemediationOpen","_React$useState3","_React$useState4","isRemediationLoading","setRemediationLoading","_React$useState5","_React$useState6","RemediationModalCmp","setRemediationModalCmp","decodedParams","decodeQueryparams","location","search","systems","entities","rows","shallowEqual","totalItems","total","selectedRows","_ref4","hasError","code","metadata","_ref5","SystemsStore","areAllSelected","_ref6","_ref7","page","perPage","sort","clearInventoryReducer","showRemediationModal","useCallback","_ref8","resolvedData","_x","changeSystemsParams","_useRemoveFilter","useRemoveFilter","systemsListDefaultFilters","deleteFilters","osFilterConfig","useOsVersionFilter","filterConfig","buildFilterConfig","activeFiltersConfig","buildActiveFiltersConfig","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","systemSelectAction","selectedCount","arrayFromObj","onExport","useOnExport","csv","exportSystemsCSV","json","exportSystemsJSON","getEntities","useGetEntities","changeSystemsMetadata","tags","changeTags","_usePatchSetState","usePatchSetState","openUnassignSystemsModal","openAssignSystemsModal","_inventory$current","onRefreshData","timestamp","Date","now","remediationDataProvider","useRemediationProvier","bulkSelectConfig","useBulkSelectConfig","total_items","Header","titlesPatchSystems","headerOUIA","has_systems","ErrorHandler","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","columns","defaultColumns","systemsColumnsMerger","systemsListColumns","showTags","customFilters","patchParams","paginationProps","onLoad","_ref9","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","modifyInventory","persistantParams","tableProps","actionResolver","row","systemsRowActions","canSelectAll","TableVariant","isStickyHeader","bulkSelect","exportConfig","actionsConfig","AsyncRemediationButton","remediationProvider","isLoading","label","titlesTemplateAssign","titlesTemplateRemoveMultipleButton","openPatchSetAssignWizard","openPatchSetEditModal","patchSetID","initializeWorker","worker","Worker","URL","terminate","deligateWorkerTask","task","postMessage","Promise","resolve","reject","onmessage","_ref$data","prepareRemediationPairs","_response$issues","_initializeWorker","_initializeWorker2","terminateWorker","deligatedTask","response","err","description","abrupt","issues","_x2","remediationType","_callee2","authToken","remediationPairs","_context2","auth","getToken","payload","removeUndefinedObjectKeys","initialState","offset","state","loaded","createSystemsRows","modifyPackageSystems","lastAction","idToEvraMapping","packageEvraCache","forEach","available_evra","fromEntries","entries","map","createPackageSystemsRows","modifyTemplateDetailSystems","createPatchSetDetailRows","modifyAdvisorySystems","createAdvisorySystemsRows","inventoryModifier","action","newState","fetchRejected","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}