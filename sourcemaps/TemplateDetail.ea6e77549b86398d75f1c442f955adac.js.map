{"version":3,"file":"js/TemplateDetail.2d65b313841ac718a231.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Dropdown/Dropdown.js","webpack:///./src/SmartComponents/Modals/DeleteSetModal.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./src/SmartComponents/PatchSet/PatchSetAssets.js","webpack:///./src/SmartComponents/PatchSetDetail/PatchSetDetailAssets.js","webpack:///./src/SmartComponents/PatchSetDetail/PatchSetDetail.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { DropdownWithContext } from './DropdownWithContext';\nimport { useOUIAId } from '../../helpers';\nexport const Dropdown = (_a) => {\n    var { onSelect, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref, // Types of Ref are different for React.FunctionComponent vs React.Component\n    ouiaId, ouiaSafe, alignments, contextProps, menuAppendTo = 'inline', isFlipEnabled = true, removeFindDomNode = false, zIndex = 9999 } = _a, props = __rest(_a, [\"onSelect\", \"ref\", \"ouiaId\", \"ouiaSafe\", \"alignments\", \"contextProps\", \"menuAppendTo\", \"isFlipEnabled\", \"removeFindDomNode\", \"zIndex\"]);\n    return (React.createElement(DropdownContext.Provider, { value: Object.assign({ onSelect: event => onSelect && onSelect(event), toggleTextClass: styles.dropdownToggleText, toggleIconClass: styles.dropdownToggleImage, toggleIndicatorClass: styles.dropdownToggleIcon, menuClass: styles.dropdownMenu, itemClass: styles.dropdownMenuItem, toggleClass: styles.dropdownToggle, baseClass: styles.dropdown, baseComponent: 'div', sectionClass: styles.dropdownGroup, sectionTitleClass: styles.dropdownGroupTitle, sectionComponent: 'section', disabledClass: styles.modifiers.disabled, plainTextClass: styles.modifiers.text, ouiaId: useOUIAId(Dropdown.displayName, ouiaId), ouiaSafe, ouiaComponentType: Dropdown.displayName, alignments }, contextProps) },\n        React.createElement(DropdownWithContext, Object.assign({ menuAppendTo: menuAppendTo, isFlipEnabled: isFlipEnabled, removeFindDomNode: removeFindDomNode, zIndex: zIndex }, props))));\n};\nDropdown.displayName = 'Dropdown';\n//# sourceMappingURL=Dropdown.js.map","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Checkbox, Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst DeleteSetModal = ({ isModalOpen, setModalOpen, templateName, onConfirm }) => {\n    const [isCheckboxChecked, setCheckboxChecked] = useState(false);\n\n    const onClose = () => {\n        setModalOpen(false);\n        setCheckboxChecked(false);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.titlesTemplateDeleteModalTitle)}\n            titleIconVariant=\"warning\"\n            isOpen={isModalOpen}\n            onClose={onClose}\n            variant=\"small\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={() => {onClose(); onConfirm();}} isDisabled={!isCheckboxChecked}>\n                    {intl.formatMessage(messages.labelsDelete)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {intl.formatMessage(messages.titlesTemplateDeleteModalText, { templateName, b: (...chunks) => <b>{chunks}</b> })}\n            <Checkbox\n                className=\"pf-u-mt-md\"\n                isChecked={isCheckboxChecked}\n                checked={isCheckboxChecked}\n                onChange={(value) => setCheckboxChecked(value)}\n                label={intl.formatMessage(messages.titlesTemplateDeleteModalCheckbox)}\n                id=\"template-delete-modal-checkbox\"\n            />\n        </Modal>\n    );\n};\n\nDeleteSetModal.propTypes = {\n    isModalOpen: propTypes.bool,\n    setModalOpen: propTypes.func,\n    templateName: propTypes.string,\n    onConfirm: propTypes.func\n};\n\nexport default DeleteSetModal;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../../Utilities/constants';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalToggle(true);\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","import React from 'react';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport {\n    EllipsisVIcon\n} from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const CreatePatchSetButton = (setPatchSetState, hasAccess) => () =>\n    !hasAccess ?\n        <Tooltip content='For editing access, contact your administrator.'>\n            <Button key='createButton' isAriaDisabled >\n                {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n            </Button>\n        </Tooltip>\n        :\n        (<Button key='createButton' onClick={() => setPatchSetState({ isPatchSetWizardOpen: true })}>\n            {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n        </Button>);\n\nexport const patchSetColumns = [\n    {\n        key: 'name',\n        title: 'Name',\n        transforms: [sortable]\n    },\n    {\n        key: 'systems',\n        title: 'Systems applied',\n        transforms: [sortable]\n    },\n    {\n        key: 'last_edited',\n        title: 'Last edited',\n        transforms: [sortable]\n    },\n    {\n        key: 'published',\n        title: 'Published',\n        transforms: [sortable]\n    },\n    {\n        key: 'creator',\n        title: 'Created by',\n        transforms: [sortable]\n    }\n];\n\nexport const patchSetRowActions = (openPatchSetEditModal, handlePatchSetDelete) => [\n    {\n        title: intl.formatMessage(messages.labelsButtonEditTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            openPatchSetEditModal(rowData?.id);\n        }\n    },\n    {\n        title: intl.formatMessage(messages.labelsButtonRemoveTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            handlePatchSetDelete(rowData);\n        }\n    }\n];\n\nexport const patchSetDetailRowActions = (handleSystemUnassign) => [\n    {\n        title: intl.formatMessage(messages.textUnassignSystemsShortTitle),\n        onClick: (_event, _rowId, rowData) => {\n            handleSystemUnassign(rowData);\n        }\n    }\n\n];\n\nexport const CustomActionsToggle = () => <Tooltip content='For editing access, contact your administrator.'>\n    <Button\n        isAriaDisabled\n        variant=\"plain\"\n        aria-label=\"plain kebab\"\n    >\n        <EllipsisVIcon />\n    </Button>\n</Tooltip>;\n","import { sortable } from '@patternfly/react-table/dist/js';\n\nexport const patchSetDetailColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        transforms: [sortable]\n    },\n    {\n        key: 'operating_system',\n        title: 'OS'\n    },\n    {\n        key: 'installable_advisories',\n        title: 'Installable advisories',\n        transforms: [sortable]\n    },\n    {\n        key: 'applicable_advisories',\n        title: 'Applicable advisories',\n        transforms: [sortable]\n    },\n    {\n        key: 'last_upload',\n        title: 'Last seen',\n        transforms: [sortable]\n    }\n];\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect, useState, Fragment, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { NoAppliedSystems, NoSmartManagement } from '../../PresentationalComponents/Snippets/EmptyStates';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { useDeepCompareEffect, useEntitlements, usePerPageSelect, useSetPage, useSortColumn } from '../../Utilities/Hooks';\nimport {\n    changePatchSetDetailsSystemsParams,\n    clearTemplateDetail,\n    fetchPatchSetDetailSystemsAction,\n    fetchTemplateDetail\n} from '../../store/Actions/Actions';\nimport { Dropdown, DropdownItem, DropdownPosition, DropdownToggle, Skeleton, Text, TextContent } from '@patternfly/react-core';\nimport DeleteSetModal from '../Modals/DeleteSetModal';\nimport { deletePatchSet } from '../../Utilities/api';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { patchSetDeleteNotifications, templateCompoundSortValues } from '../../Utilities/constants';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { patchSetDetailColumns } from './PatchSetDetailAssets';\nimport { createPatchSetDetailRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams, templateDateFormat } from '../../Utilities/Helpers';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport { CustomActionsToggle, patchSetDetailRowActions } from '../PatchSet/PatchSetAssets';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport UnassignSystemsModal from '../Modals/UnassignSystemsModal';\n\nconst PatchSetDetail = () => {\n    const getEntitlements = useEntitlements();\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const patchSetId = history.location.pathname.split('/')[2];\n\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [isHeaderDropdownOpen, setHeaderDropdownOpen] = useState(false);\n    const [hasSmartManagement, setSmartManagement] = React.useState(true);\n    const [isDeleteConfirmModalOpen, setDeleteConfirmModalOpen] = useState(false);\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        systemsIDs: [],\n        shouldRefresh: false\n    });\n\n    const templateDetails = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore\n    );\n\n    const isHeaderLoading = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore?.status?.isLoading ?? true\n    );\n\n    const status = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore.status\n    );\n\n    const assignedSystems = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore.rows\n    );\n\n    const metadata = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore.metadata\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore.queryParams\n    );\n\n    const { hasAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n\n    const rows = useMemo(\n        () => createPatchSetDetailRows(assignedSystems),\n        [assignedSystems]\n    );\n\n    const { hasError, code } = status;\n\n    const patchSetName = templateDetails.data.attributes.name;\n\n    const apply = (params) => {\n        dispatch(changePatchSetDetailsSystemsParams(params));\n    };\n\n    const onSetPage = useSetPage(metadata?.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const onSort = useSortColumn(patchSetDetailColumns, apply, 0, templateCompoundSortValues);\n    const sortBy = useMemo(\n        () => createSortBy(patchSetDetailColumns, metadata?.sort, 0, templateCompoundSortValues),\n        [metadata?.sort]\n    );\n\n    const openPatchSetAssignWizard = () => {\n        setPatchSetState({\n            ...patchSetState,\n            isPatchSetWizardOpen: true\n        });\n    };\n\n    const refreshTable = () => {\n        dispatch(fetchPatchSetDetailSystemsAction(patchSetId, { ...queryParams, page: 1, offset: 0 }));\n        dispatch(fetchTemplateDetail(patchSetId));\n    };\n\n    useEffect(() => {\n        getEntitlements().then((entitelements) => {\n            setSmartManagement(\n                entitelements?.smart_management?.is_entitled\n            );\n        });\n\n        return () => {\n            dispatch(changePatchSetDetailsSystemsParams());\n            dispatch(clearTemplateDetail());\n        };\n    }, []);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh === true) {\n            refreshTable();\n            setPatchSetState({ ...patchSetState, shouldRefresh: false });\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n\n            dispatch(fetchTemplateDetail(patchSetId));\n\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n\n            dispatch(fetchPatchSetDetailSystemsAction(patchSetId, queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const openSystemUnassignModal = (rowData) => {\n        setPatchSetState({ ...patchSetState, isUnassignSystemsModalOpen: true, systemsIDs: [rowData.id] });\n    };\n\n    const actionsConfig = patchSetDetailRowActions(openSystemUnassignModal);\n\n    const deleteSet = () => {\n        deletePatchSet(patchSetId).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).success));\n            history.push('/templates');\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).error));\n        });\n    };\n\n    const dropdownItems = [\n        <DropdownItem\n            key=\"edit-patch-set\"\n            component=\"button\"\n            onClick={() => openPatchSetAssignWizard()}\n        >\n            {intl.formatMessage(messages.labelsButtonEditTemplate)}\n        </DropdownItem>,\n        <DropdownItem\n            key=\"delete-patch-set\"\n            component=\"button\"\n            onClick={() => setDeleteConfirmModalOpen(true)}\n        >\n            {intl.formatMessage(messages.labelsButtonRemoveTemplate)}\n        </DropdownItem>\n    ];\n\n    return (\n        (hasError || metadata?.has_systems === false)\n            ? <ErrorHandler code={code} metadata={status.metadata} />\n            : <Fragment>\n                <DeleteSetModal\n                    templateName={patchSetName}\n                    isModalOpen={isDeleteConfirmModalOpen}\n                    setModalOpen={setDeleteConfirmModalOpen}\n                    onConfirm={deleteSet}\n                />\n                {patchSetState.isPatchSetWizardOpen &&\n                    <PatchSetWizard\n                        systemsIDs={patchSetState.systemsIDs}\n                        setBaselineState={setPatchSetState}\n                        patchSetID={patchSetId}\n                    />}\n                <UnassignSystemsModal\n                    unassignSystemsModalState={patchSetState}\n                    setUnassignSystemsModalOpen={setPatchSetState}\n                />\n                <Header\n                    title={isHeaderLoading ? <Skeleton style={{ width: 300 }} /> : patchSetName}\n                    headerOUIA={'template-details'}\n                    breadcrumbs={[\n                        {\n                            title: intl.formatMessage(messages.templateDetailHeaderBreadcrumb),\n                            to: '/templates',\n                            isActive: false\n                        },\n                        {\n                            title: isHeaderLoading ? <Skeleton style={{ width: 150 }} /> : patchSetName,\n                            isActive: true\n                        }\n                    ]}\n                    actions={\n                        <Dropdown\n                            position={DropdownPosition.right}\n                            onSelect={() => {\n                                setHeaderDropdownOpen(false);\n                                document.getElementById('patch-set-detail-header-kebab').focus();\n                            }}\n                            toggle={\n                                <DropdownToggle\n                                    id=\"patch-set-detail-header-kebab\"\n                                    className=\"pf-u-mr-xl\"\n                                    onToggle={(isOpen) => setHeaderDropdownOpen(isOpen)}\n                                    style={{ minWidth: 150 }}\n                                >\n                                    {intl.formatMessage(messages.labelsActions)}\n                                </DropdownToggle>\n                            }\n                            isOpen={isHeaderDropdownOpen}\n                            dropdownItems={dropdownItems}\n                        />\n                    }\n                >\n                    <table border=\"0\" style={{ marginTop: 8 }}>\n                        <tbody>\n                            <tr>\n                                <td style={{ width: 300 }}>{intl.formatMessage(messages.templateDetailTableDescription)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 300 }} />\n                                        : templateDetails.data.attributes.description\n                                        || intl.formatMessage(messages.titlesTemplateNoDescription)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableUpToDate)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : templateDateFormat(templateDetails.data.attributes.config.to_time)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableCreatedBy)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : templateDetails.data.attributes.creator}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTablePublished)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.published)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableLastEdited)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.last_edited)}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </Header>\n                <Main>\n                    <TextContent>\n                        <Text component=\"h2\" className=\"pf-u-mb-md\">\n                            {intl.formatMessage(messages.templateDetailTableTitle)}\n                        </Text>\n                    </TextContent>\n                    {hasSmartManagement\n                        ? (rows.length === 0 && !status.isLoading)\n                            ? <NoAppliedSystems onButtonClick={() => openPatchSetAssignWizard()} />\n                            : <TableView\n                                columns={patchSetDetailColumns}\n                                compact\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                onSort={onSort}\n                                sortBy={sortBy}\n                                apply={apply}\n                                tableOUIA={'patch-set-detail-table'}\n                                paginationOUIA={'patch-set-detail-pagination'}\n                                store={{ rows, metadata, status, queryParams }}\n                                actionsConfig={actionsConfig}\n                                actionsToggle={!hasAccess ? CustomActionsToggle : null}\n                                searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchTemplateTitle)}\n                            />\n                        : <NoSmartManagement />}\n                </Main>\n            </Fragment >);\n};\n\nexport default PatchSetDetail;\n"],"names":["Dropdown","_a","onSelect","ref","ouiaId","ouiaSafe","alignments","contextProps","menuAppendTo","isFlipEnabled","removeFindDomNode","zIndex","props","__rest","value","Object","assign","event","toggleTextClass","toggleIconClass","toggleIndicatorClass","menuClass","itemClass","toggleClass","baseClass","baseComponent","sectionClass","sectionTitleClass","sectionComponent","disabledClass","plainTextClass","displayName","ouiaComponentType","DeleteSetModal","_ref","isModalOpen","setModalOpen","templateName","onConfirm","_useState","useState","_useState2","_slicedToArray","isCheckboxChecked","setCheckboxChecked","onClose","React","Modal","title","intl","messages","titleIconVariant","isOpen","variant","actions","Button","key","onClick","isDisabled","b","_len","arguments","length","chunks","Array","_key","Checkbox","className","isChecked","checked","onChange","label","id","propTypes","renderUnassignModalMessages","bodyMessage","systemsCount","GridItem","formatMessage","UnassignSystemsModal","_ref$unassignSystemsM","unassignSystemsModalState","setUnassignSystemsModalOpen","systemsIDs","isUnassignSystemsModalOpen","systemsWithPatchSet","setSystemWithPatchSet","_useState3","_useState4","systemsLoading","setSystemsLoading","handleModalToggle","shouldRefresh","handleModalClose","handleUnassignment","dispatch","useDispatch","handleSystemsRemoval","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","unassignSystemFromPatchSet","inventory_ids","sent","status","addNotification","patchSetUnassignSystemsNotifications","success","stop","apply","useUnassignSystemsHook","useEffect","fetchSystems","limit","filter","stale","then","allSystemsWithPatchSet","systemID","data","some","system","filterSystemsWithoutSets","result","systemsWithoutPatchSetCount","Grid","hasGutter","Skeleton","Fragment","injectIntl","CreatePatchSetButton","setPatchSetState","hasAccess","isPatchSetWizardOpen","Tooltip","content","isAriaDisabled","patchSetColumns","transforms","sortable","patchSetRowActions","openPatchSetEditModal","handlePatchSetDelete","_event","_rowId","rowData","patchSetDetailRowActions","handleSystemUnassign","CustomActionsToggle","EllipsisVIcon","patchSetDetailColumns","getEntitlements","useEntitlements","useIntl","history","useHistory","patchSetId","location","pathname","split","_React$useState","_React$useState2","firstMount","setFirstMount","isHeaderDropdownOpen","setHeaderDropdownOpen","_React$useState3","_React$useState4","hasSmartManagement","setSmartManagement","isDeleteConfirmModalOpen","setDeleteConfirmModalOpen","_useState5","_useState6","patchSetState","templateDetails","useSelector","PatchSetDetailStore","isHeaderLoading","_ref2","_PatchSetDetailStore$","_PatchSetDetailStore$2","isLoading","_ref3","PatchSetDetailSystemsStore","assignedSystems","_ref4","rows","metadata","_ref5","queryParams","_ref6","usePermissionsWithContext","useMemo","createPatchSetDetailRows","hasError","code","patchSetName","attributes","name","params","changePatchSetDetailsSystemsParams","onSetPage","useSetPage","onPerPageSelect","usePerPageSelect","onSort","useSortColumn","templateCompoundSortValues","sortBy","createSortBy","sort","openPatchSetAssignWizard","_objectSpread","entitelements","_entitelements$smart_","smart_management","is_entitled","clearTemplateDetail","fetchPatchSetDetailSystemsAction","page","offset","fetchTemplateDetail","useDeepCompareEffect","decodeQueryparams","search","push","encodeURLParams","actionsConfig","dropdownItems","DropdownItem","component","has_systems","ErrorHandler","deletePatchSet","patchSetDeleteNotifications","error","PatchSetWizard","setBaselineState","patchSetID","Header","style","width","headerOUIA","breadcrumbs","to","isActive","position","DropdownPosition","document","getElementById","focus","toggle","DropdownToggle","onToggle","minWidth","border","marginTop","description","templateDateFormat","config","to_time","creator","processDate","published","last_edited","Main","TextContent","Text","TableView","columns","compact","tableOUIA","paginationOUIA","store","actionsToggle","searchChipLabel","NoAppliedSystems","onButtonClick","NoSmartManagement"],"sourceRoot":""}