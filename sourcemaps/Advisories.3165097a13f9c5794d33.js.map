{"version":3,"sources":["webpack:///./src/PresentationalComponents/StatusReports/AdvisoriesStatusReport.js","webpack:///./src/SmartComponents/Advisories/Advisories.js"],"names":["StatusCard","advisory","attributes","id","Card","CardTitle","handlePatchLink","entityTypes","CardBody","className","Grid","GridItem","span","AdvisoryType","type","advisory_type","processDate","public_date","os_name","severity","Flex","flex","default","style","flexWrap","FlexItem","size","color","advisorySeverities","isFilled","label","reboot_required","intl","messages","systemsCount","applicable_systems","handleLongSynopsis","synopsis","propTypes","React","advisories","setAdvisories","fetchApplicableAdvisoriesApi","limit","sort","data","length","Main","paddingBottom","paddingTop","Title","headingLevel","hasGutter","map","key","Advisories","history","pageTitle","setPageTitle","dispatch","useDispatch","firstMount","setFirstMount","useSelector","AdvisoryListStore","rows","expandedRows","queryParams","selectedRows","metadata","status","createAdvisoriesRows","clearNotifications","useDeepCompareEffect","apply","decodeQueryparams","location","search","push","encodeURLParams","fetchApplicableAdvisories","onCollapse","_","rowId","value","expandAdvisoryRow","getRowIdByIndexExpandable","onSelect","useOnSelect","toSelect","selectAdvisoryRow","onSort","useSortColumn","advisoriesColumns","sortBy","createSortBy","onExport","useOnExport","csv","exportAdvisoriesCSV","json","exportAdvisoriesJSON","onSetPage","useSetPage","onPerPageSelect","usePerPageSelect","params","changeAdvisoryListParams","prepareRemediationPairs","issues","fetchSystems","then","fetchViewAdvisoriesSystems","systems","system","Header","title","headerOUIA","AdvisoriesStatusReport","TableView","columns","compact","remediationProvider","remediationProviderWithPairs","arrayFromObj","transformPairs","remediationIdentifiers","remediationButtonOUIA","tableOUIA","paginationOUIA","store","filterConfig","items","searchFilter","typeFilter","filter","publishDateFilter","searchChipLabel","withRouter"],"mappings":"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","file":"js/Advisories.ab14db9a45ff18fb122d.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { PowerOffIcon, SecurityIcon } from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { fetchApplicableAdvisoriesApi } from '../../Utilities/api';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Card, Grid, GridItem, CardBody, Flex, FlexItem, Title\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { handlePatchLink, handleLongSynopsis } from '../../Utilities/Helpers';\nimport { entityTypes, advisorySeverities } from '../../Utilities/constants';\nimport AdvisoryType from '../AdvisoryType/AdvisoryType';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst StatusCard = ({ advisory: { attributes, id } }) =>\n    (\n        <Card>\n            <CardTitle>\n                {handlePatchLink(entityTypes.advisories, id)}\n            </CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Grid>\n                    <GridItem span={6}>\n                        <Grid>\n                            <GridItem>\n                                <AdvisoryType\n                                    type={attributes.advisory_type}\n                                />\n                            </GridItem>\n                            <GridItem>\n                                {processDate(attributes.public_date)}\n                            </GridItem>\n                            {attributes.os_name && (<GridItem>\n                                {attributes.os_name}\n                            </GridItem>)}\n                        </Grid>\n                    </GridItem>\n                    <GridItem span={6}>\n                        <Grid>\n                            {attributes.severity && (<GridItem>\n                                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                                    <FlexItem>\n                                        <SecurityIcon size=\"sm\" color={advisorySeverities[attributes.severity].color} />\n                                    </FlexItem>\n                                    <FlexItem isFilled>{advisorySeverities[attributes.severity].label}</FlexItem>\n                                </Flex>\n                            </GridItem>)}\n                            {attributes.reboot_required && (<GridItem>\n                                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                                    <FlexItem><PowerOffIcon color='var(--pf-global--palette--red-100)' /></FlexItem>\n                                    <FlexItem isFilled>{intl.formatMessage(messages.textRebootIsRequired)}</FlexItem>\n                                </Flex>\n                            </GridItem>)}\n                        </Grid>\n                    </GridItem>\n                    <GridItem>\n                        {handlePatchLink(\n                            entityTypes.advisories,\n                            id,\n                            intl.formatMessage(\n                                messages.labelsApplicableSystemsCount,\n                                { systemsCount: attributes.applicable_systems }\n                            )\n                        )}\n                    </GridItem>\n                    <GridItem>\n                        {handleLongSynopsis(attributes.synopsis)}\n                    </GridItem>\n                </Grid>\n            </CardBody>\n        </Card>\n    );\n\nconst AdvisoriesStatusBar = () => {\n    const [advisories, setAdvisories] = React.useState([]);\n    React.useEffect(async () => {\n        setAdvisories(\n            await fetchApplicableAdvisoriesApi({ limit: 4, sort: '-advisory_type,-applicable_systems' })\n        );\n    }, []);\n\n    return advisories.data && advisories.data.length  && (\n        <Main style={{ paddingBottom: 0, paddingTop: 0 }}>\n\n            <Title headingLevel=\"h3\" className='pf-u-my-md'>\n                {intl.formatMessage(messages.titlesMostImpactfulAdvisories)}\n            </Title>\n\n            <Grid hasGutter span={3}>\n                {advisories.data.map(advisory =>\n                    (<GridItem key={advisory.id}>\n                        <StatusCard\n                            advisory={advisory}\n                        />\n                    </GridItem>)\n                )\n                }\n            </Grid>\n        </Main>\n    ) || null;\n};\n\nStatusCard.propTypes = {\n    advisory: propTypes.object\n};\nexport default AdvisoriesStatusBar;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { advisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport {\n    changeAdvisoryListParams, expandAdvisoryRow,\n    fetchApplicableAdvisories, selectAdvisoryRow\n} from '../../store/Actions/Actions';\nimport {\n    exportAdvisoriesCSV, exportAdvisoriesJSON, fetchApplicableAdvisoriesApi,\n    fetchSystems, fetchViewAdvisoriesSystems\n} from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport { createAdvisoriesRows } from '../../Utilities/DataMappers';\nimport {\n    arrayFromObj, createSortBy, decodeQueryparams,\n    encodeURLParams, getRowIdByIndexExpandable, remediationProviderWithPairs, transformPairs\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useDeepCompareEffect, useOnExport,\n    useOnSelect, usePerPageSelect, useSetPage, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport AdvisoriesStatusReport from '../../PresentationalComponents/StatusReports/AdvisoriesStatusReport';\n\nconst Advisories = ({ history }) => {\n    const pageTitle = intl.formatMessage(messages.titlesAdvisories);\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const advisories = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.rows\n    );\n\n    const expandedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.status\n    );\n\n    const rows = React.useMemo(\n        () => createAdvisoriesRows(advisories, expandedRows, selectedRows),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchApplicableAdvisories(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const fetchAllData = () =>\n        fetchApplicableAdvisoriesApi({ ...queryParams, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            selectAdvisoryRow(toSelect)\n        );\n    };\n\n    const onSelect = useOnSelect(rows, selectedRows, fetchAllData, selectRows, (advisory) => advisory.id);\n\n    const onSort = useSortColumn(advisoriesColumns, apply, 2);\n    const sortBy = React.useMemo(\n        () => createSortBy(advisoriesColumns, metadata.sort, 2),\n        [metadata.sort]\n    );\n\n    const onExport = useOnExport('advisories', queryParams, {\n        csv: exportAdvisoriesCSV,\n        json: exportAdvisoriesJSON\n    }, dispatch);\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeAdvisoryListParams(params));\n    }\n\n    const prepareRemediationPairs = (issues) => {\n        return fetchSystems({ limit: -1 }).then(\n            ({ data }) => fetchViewAdvisoriesSystems(\n                {\n                    advisories: issues,\n                    systems: data.map(system => system.id)\n                }\n            ));\n    };\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchAdvisories)} headerOUIA={'advisories'} />\n            <AdvisoriesStatusReport/>\n            <Main>\n                <TableView\n                    columns={advisoriesColumns}\n                    compact\n                    onCollapse={onCollapse}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    onExport={onExport}\n                    selectedRows={selectedRows}\n                    onSelect={onSelect}\n                    sortBy={sortBy}\n                    remediationProvider={() =>\n                        remediationProviderWithPairs(\n                            arrayFromObj(selectedRows),\n                            prepareRemediationPairs,\n                            transformPairs,\n                            remediationIdentifiers.advisory)\n                    }\n                    apply={apply}\n                    remediationButtonOUIA={'toolbar-remediation-button'}\n                    tableOUIA={'advisories-table'}\n                    paginationOUIA={'advisories-pagination'}\n                    store={{ rows, metadata, status, queryParams }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle),\n                                intl.formatMessage(messages.labelsFiltersSearchAdvisoriesPlaceholder)\n                            ),\n                            typeFilter(apply, queryParams.filter),\n                            publishDateFilter(apply, queryParams.filter)\n                        ]\n                    }}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle)}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisories.propTypes = {\n    history: propTypes.object\n};\n\nexport default withRouter(Advisories);\n"],"sourceRoot":""}