{"version":3,"sources":["webpack:///./src/SmartComponents/Systems/SystemsListAssets.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"names":["systemsListColumns","key","title","composed","props","width","renderFunc","value","createAdvisoriesIcons","createOSColumn","packageSystemsColumns","transforms","sortable","createUpgradableColumn","systemsRowActions","showRemediationModal","onClick","event","rowId","rowData","fetchApplicableSystemAdvisoriesApi","id","limit","then","res","remediationProvider","data","map","item","remediationIdentifiers","initialState","rows","entities","selectedRows","page","perPage","queryParams","sort","metadata","offset","total_items","modifyInventory","columns","state","loaded","lastSeenColumn","filter","createSystemsRows","modifyPackageSystems","hosts","inventoryEntitiesReducer","action","newState","type","ActionTypes","payload","changeFilters","selectRows","packagesSystemsInventoryReducer","store"],"mappings":"kSAOaA,EAAqB,CAC9B,CACIC,IAAK,eACLC,MAAO,OACPC,SAAU,CAAC,mBAAoB,gBAC/BC,MAAO,CACHC,MAAO,KAGf,CACIJ,IAAK,qBACLC,MAAO,WACPE,MAAO,CACHC,MAAO,KAGf,CACIJ,IAAK,wBACLC,MAAO,wBACPE,MAAO,CACHC,MAAO,IAEXC,WAAY,SAAAC,GAAK,OAAIC,QAAsBD,KAE/C,CACIN,IAAK,mBACLC,MAAO,KACPI,WAAY,SAAAC,GAAK,OAAIE,QAAeF,IACpCH,MAAO,CACHC,MAAO,MAKNK,EAAwB,CACjC,CACIT,IAAK,eACLC,MAAO,OACPC,SAAU,CAAC,mBAAoB,gBAC/BC,MAAO,CACHC,MAAO,KAGf,CACIJ,IAAK,iBACLC,MAAO,oBACPS,WAAY,CAACC,YACbR,MAAO,CACHC,MAAO,KAGf,CACIJ,IAAK,iBACLC,MAAO,iBACPS,WAAY,CAACC,YACbR,MAAO,CACHC,MAAO,KAGf,CACIJ,IAAK,aACLC,MAAO,SACPE,MAAO,CACHC,MAAO,IAEXC,WAAY,SAAAC,GAAK,OAAIM,QAAuBN,MAIvCO,EAAoB,SAAAC,GAC7B,MAAO,CACH,CACIb,MAAO,kCACPc,QAAS,SAACC,EAAOC,EAAOC,IACpBC,QAAmC,CAC/BC,GAAIF,EAAQE,GACZC,MAAO,MACRC,MAAK,SAAAC,GAAG,OACPT,GACIU,QACID,EAAIE,KAAKC,KAAI,SAAAC,GAAI,OAAIA,EAAKP,MAC1BF,EAAQE,GACRQ,wB,gsBCpFrB,IAAMC,EAAe,CACxBC,KAAM,GACNC,SAAU,GACVC,aAAc,GACdC,KAAM,EACNC,QAAS,GACTC,YAAa,CACTC,KAAM,gBAEVC,SAAU,CACNhB,MAAO,GACPiB,OAAQ,EACRC,YAAa,IAKrB,SAASC,EAAgBC,EAASC,GAC9B,GAAIA,EAAMC,OAAQ,CACd,IAAIC,EAAiBF,EAAMD,QAAQI,QAAO,kBAAqB,YAArB,EAAG7C,OAG7C,OAFA4C,EAAiB,CAAC,EAAD,KAAMA,EAAe,IAArB,IAAyB5C,IAAK,iBAE/C,OACO0C,GADP,IAEID,QAAS,GAAF,eACAA,GAAW,KADX,OAEAG,GAAkB,KAEzBd,MAAMgB,QAAkBJ,EAAMZ,KAAMY,EAAMV,gBAIlD,OAAOU,EAGX,SAASK,EAAqBN,EAASO,EAAON,GAC1C,OAAIA,EAAMC,OACN,OACOD,GADP,IAEID,YAIDC,EAGJ,IAAMO,EAA2B,SAACR,GAAD,OAAa,WAAkC,MAAjCC,EAAiC,uDAAzBb,EAAcqB,EAAW,uCAC/EC,EAAW,EAAH,GAAQT,GACpB,OAAQQ,EAAOE,MACX,IAAK,0BACD,OAAOZ,EAAgBC,EAASC,GAEpC,KAAKW,KAED,OADA,UAAOH,EAAOI,eAAd,cAAO,EAAgBT,QAChBU,QAAcJ,EAAUD,GAEnC,IAAK,gBACD,OAAOM,QAAWL,EAAUD,GAEhC,IAAK,iBACD,OAAOrB,EAEX,QACI,OAAOa,KAINe,EAAkC,SAAChB,EAASiB,GAAV,OAAoB,WAAkC,IAAjChB,EAAiC,uDAAzBb,EAAcqB,EAAW,uCACjG,OAAQA,EAAOE,MACX,IAAK,0BACD,OAAOL,EAAqBN,EAASiB,WAAO5B,KAAMY,GAEtD,QACI,OAAOA","file":"js/705.86f24e28a2f6430be766.js","sourcesContent":["import { sortable } from '@patternfly/react-table/dist/js';\nimport { fetchApplicableSystemAdvisoriesApi } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport { createAdvisoriesIcons, createUpgradableColumn,\n    remediationProvider, createOSColumn } from '../../Utilities/Helpers';\nimport './SystemsListAssets.scss';\n\nexport const systemsListColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        props: {\n            width: 50\n        }\n    },\n    {\n        key: 'packages_installed',\n        title: 'Packages',\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'applicable_advisories',\n        title: 'Applicable advisories',\n        props: {\n            width: 15\n        },\n        renderFunc: value => createAdvisoriesIcons(value)\n    },\n    {\n        key: 'operating_system',\n        title: 'OS',\n        renderFunc: value => createOSColumn(value),\n        props: {\n            width: 10\n        }\n    }\n];\n\nexport const packageSystemsColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        props: {\n            width: 50\n        }\n    },\n    {\n        key: 'installed_evra',\n        title: 'Installed version',\n        transforms: [sortable],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'available_evra',\n        title: 'Latest version',\n        transforms: [sortable],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'upgradable',\n        title: 'Status',\n        props: {\n            width: 20\n        },\n        renderFunc: value => createUpgradableColumn(value)\n    }\n];\n\nexport const systemsRowActions = showRemediationModal => {\n    return [\n        {\n            title: 'Apply all applicable advisories',\n            onClick: (event, rowId, rowData) => {\n                fetchApplicableSystemAdvisoriesApi({\n                    id: rowData.id,\n                    limit: 10000\n                }).then(res =>\n                    showRemediationModal(\n                        remediationProvider(\n                            res.data.map(item => item.id),\n                            rowData.id,\n                            remediationIdentifiers.advisory\n                        )\n                    )\n                );\n            }\n        }\n    ];\n};\n","import * as ActionTypes from '../ActionTypes';\nimport { changeFilters, selectRows } from './HelperReducers';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\n\n// Initial State\nexport const initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: [],\n    page: 1,\n    perPage: 20,\n    queryParams: {\n        sort: '-last_upload'\n    },\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nfunction modifyInventory(columns, state) {\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], key: 'last_upload' }];\n\n        return {\n            ...state,\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ],\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n}\n\nfunction modifyPackageSystems(columns, hosts, state) {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n\n        case ActionTypes.CHANGE_ENTITIES_PARAMS:\n            delete action.payload?.filter;\n            return changeFilters(newState, action);\n\n        case 'SELECT_ENTITY':\n            return selectRows(newState, action);\n\n        case 'CLEAR_ENTITIES':\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n\nexport const packagesSystemsInventoryReducer = (columns, store) => (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyPackageSystems(columns, store?.rows, state);\n\n        default:\n            return state;\n    }\n};\n"],"sourceRoot":""}