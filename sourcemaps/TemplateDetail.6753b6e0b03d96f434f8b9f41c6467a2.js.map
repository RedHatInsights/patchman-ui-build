{"version":3,"file":"js/TemplateDetail.bea52e20dfc20090101e.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/SmartComponents/Modals/DeleteSetModal.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./src/SmartComponents/PatchSetDetail/PatchSetDetail.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Checkbox, Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst DeleteSetModal = ({ isModalOpen, setModalOpen, templateName, onConfirm }) => {\n    const [isCheckboxChecked, setCheckboxChecked] = useState(false);\n\n    const onClose = () => {\n        setModalOpen(false);\n        setCheckboxChecked(false);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.titlesTemplateDeleteModalTitle)}\n            titleIconVariant=\"warning\"\n            isOpen={isModalOpen}\n            onClose={onClose}\n            variant=\"small\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={() => {onClose(); onConfirm();}} isDisabled={!isCheckboxChecked}>\n                    {intl.formatMessage(messages.labelsDelete)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {intl.formatMessage(messages.titlesTemplateDeleteModalText, { templateName, b: (...chunks) => <b>{chunks}</b> })}\n            <Checkbox\n                className=\"pf-u-mt-md\"\n                isChecked={isCheckboxChecked}\n                checked={isCheckboxChecked}\n                onChange={(value) => setCheckboxChecked(value)}\n                label={intl.formatMessage(messages.titlesTemplateDeleteModalCheckbox)}\n                id=\"template-delete-modal-checkbox\"\n            />\n        </Modal>\n    );\n};\n\nDeleteSetModal.propTypes = {\n    isModalOpen: propTypes.bool,\n    setModalOpen: propTypes.func,\n    templateName: propTypes.string,\n    onConfirm: propTypes.func\n};\n\nexport default DeleteSetModal;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../PatchSet/PatchSetAssets';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalToggle(true);\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect, useState, Fragment, useRef } from 'react';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { NoAppliedSystems } from '../../PresentationalComponents/Snippets/EmptyStates';\nimport { useBulkSelectConfig, useDeepCompareEffect, useGetEntities, useRemoveFilter } from '../../Utilities/Hooks';\nimport {\n    changePatchSetDetailsSystemsMetadata,\n    changePatchSetDetailsSystemsParams,\n    changeTags,\n    clearInventoryReducer,\n    clearTemplateDetail,\n    fetchPatchSetSystemsNoFiltersAction,\n    fetchTemplateDetail\n} from '../../store/Actions/Actions';\nimport {\n    Bullseye,\n    Dropdown,\n    DropdownItem,\n    DropdownPosition,\n    DropdownToggle,\n    Skeleton,\n    Spinner,\n    Text,\n    TextContent\n} from '@patternfly/react-core';\nimport DeleteSetModal from '../Modals/DeleteSetModal';\nimport { deletePatchSet, fetchPatchSetSystems } from '../../Utilities/api';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { DEFAULT_PATCH_TITLE, patchSetDeleteNotifications } from '../../Utilities/constants';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport {\n    arrayFromObj,\n    decodeQueryparams,\n    encodeURLParams,\n    filterSelectedActiveSystemIDs,\n    persistantParams\n} from '../../Utilities/Helpers';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport { patchSetDetailRowActions } from '../PatchSet/PatchSetAssets';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport UnassignSystemsModal from '../Modals/UnassignSystemsModal';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport {\n    buildActiveFiltersConfig,\n    buildTemplateFilterConfig,\n    templateSystemsColumnsMerger\n} from '../../Utilities/SystemsHelpers';\nimport { combineReducers } from 'redux';\nimport { defaultReducers } from '../../store';\nimport { inventoryEntitiesReducer, modifyTemplateDetailSystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { systemsListColumns } from '../Systems/SystemsListAssets';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { ID_API_ENDPOINTS, useOnSelect } from '../../Utilities/useOnSelect';\nimport { systemSelectAction } from '../../store/Actions/Actions';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst PatchSetDetail = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const chrome = useChrome();\n\n    const store = useStore();\n    const inventory = useRef(null);\n\n    const patchSetId = history.location.pathname.split('/')[2];\n\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [isHeaderDropdownOpen, setHeaderDropdownOpen] = useState(false);\n    const [isDeleteConfirmModalOpen, setDeleteConfirmModalOpen] = useState(false);\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        systemsIDs: [],\n        shouldRefresh: false\n    });\n\n    const templateDetails = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore\n    );\n\n    const isHeaderLoading = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore?.status?.isLoading ?? true\n    );\n\n    const detailStatus = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore.status\n    );\n\n    const systems = useSelector(\n        ({ entities }) => entities?.rows || [], shallowEqual\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n\n    const systemStatus = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.queryParams || {}\n    );\n\n    const templateHasSystemsLoading = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.templateHasSystemsLoading\n    );\n\n    const templateHasSystems = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.templateHasSystems\n    );\n\n    const { hasAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n\n    const patchSetName = templateDetails.data.attributes.name;\n\n    useEffect(()=>{\n        patchSetName && chrome.updateDocumentTitle(`${patchSetName} - ${intl.formatMessage(messages.titlesTemplate)}\n        ${DEFAULT_PATCH_TITLE}`);\n    }, [chrome, patchSetName]);\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.templateSystems(patchSetId),\n            queryParams,\n            selectionDispatcher: systemSelectAction\n        }\n    );\n\n    const apply = (params) => {\n        dispatch(changePatchSetDetailsSystemsParams(params));\n    };\n\n    const openPatchSetAssignWizard = () => {\n        setPatchSetState({\n            ...patchSetState,\n            isPatchSetWizardOpen: true\n        });\n    };\n\n    const refreshTable = () => {\n        // timestamp is used to force inventory to refresh\n        // if it wasn't there inventory might ignore request to refresh because parameters are the same\n        inventory?.current?.onRefreshData({ timestamp: Date.now() });\n\n        onSelect('none');\n\n        dispatch(fetchTemplateDetail(patchSetId));\n    };\n\n    useEffect(() => {\n        dispatch(fetchPatchSetSystemsNoFiltersAction({ id: patchSetId, limit: 1 }));\n\n        return () => {\n            dispatch(clearTemplateDetail());\n            dispatch(clearInventoryReducer());\n        };\n    }, []);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh === true) {\n            refreshTable();\n            setPatchSetState({ ...patchSetState, shouldRefresh: false });\n            dispatch(fetchPatchSetSystemsNoFiltersAction({ id: patchSetId, limit: 1 }));\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n\n            dispatch(fetchTemplateDetail(patchSetId));\n\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const openSystemUnassignModal = ids => {\n        setPatchSetState({ ...patchSetState, isUnassignSystemsModalOpen: true, systemsIDs: ids });\n    };\n\n    const deleteSet = () => {\n        deletePatchSet(patchSetId).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).success));\n            history.push('/templates');\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).error));\n        });\n    };\n\n    const applyMetadata = (metadata) => {\n        dispatch(changePatchSetDetailsSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const getEntities = useGetEntities(\n        fetchPatchSetSystems,\n        apply,\n        { id: patchSetId },\n        history,\n        applyMetadata,\n        applyGlobalFilter\n    );\n\n    const dropdownItems = [\n        <DropdownItem\n            key=\"edit-patch-set\"\n            component=\"button\"\n            onClick={() => openPatchSetAssignWizard()}\n        >\n            {intl.formatMessage(messages.labelsButtonEditTemplate)}\n        </DropdownItem>,\n        <DropdownItem\n            key=\"delete-patch-set\"\n            component=\"button\"\n            onClick={() => setDeleteConfirmModalOpen(true)}\n        >\n            {intl.formatMessage(messages.labelsButtonRemoveTemplate)}\n        </DropdownItem>\n    ];\n\n    const decodedParams = decodeQueryparams(history.location.search);\n\n    const { systemProfile, selectedTags, filter, search, page, perPage, sort } = queryParams;\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems);\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply);\n\n    const osFilterConfig = useOsVersionFilter(filter?.os, apply);\n    const filterConfig = buildTemplateFilterConfig(search, apply, osFilterConfig);\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    return (\n        detailStatus?.hasError\n            ? <ErrorHandler code={detailStatus?.code} />\n            : <Fragment>\n                <DeleteSetModal\n                    templateName={patchSetName}\n                    isModalOpen={isDeleteConfirmModalOpen}\n                    setModalOpen={setDeleteConfirmModalOpen}\n                    onConfirm={deleteSet}\n                />\n                {patchSetState.isPatchSetWizardOpen &&\n                    <PatchSetWizard\n                        systemsIDs={patchSetState.systemsIDs}\n                        setBaselineState={setPatchSetState}\n                        patchSetID={patchSetId}\n                    />}\n                <UnassignSystemsModal\n                    unassignSystemsModalState={patchSetState}\n                    setUnassignSystemsModalOpen={setPatchSetState}\n                />\n                <Header\n                    title={isHeaderLoading ? <Skeleton style={{ width: 300 }} /> : patchSetName}\n                    headerOUIA={'template-details'}\n                    breadcrumbs={[\n                        {\n                            title: intl.formatMessage(messages.templateDetailHeaderBreadcrumb),\n                            to: '/templates',\n                            isActive: false\n                        },\n                        {\n                            title: isHeaderLoading ? <Skeleton style={{ width: 150 }} /> : patchSetName,\n                            isActive: true\n                        }\n                    ]}\n                    actions={\n                        <Dropdown\n                            position={DropdownPosition.right}\n                            onSelect={() => {\n                                setHeaderDropdownOpen(false);\n                                document.getElementById('patch-set-detail-header-kebab').focus();\n                            }}\n                            toggle={\n                                <DropdownToggle\n                                    id=\"patch-set-detail-header-kebab\"\n                                    className=\"pf-u-mr-xl\"\n                                    onToggle={(isOpen) => setHeaderDropdownOpen(isOpen)}\n                                    style={{ minWidth: 150 }}\n                                >\n                                    {intl.formatMessage(messages.labelsActions)}\n                                </DropdownToggle>\n                            }\n                            isOpen={isHeaderDropdownOpen}\n                            dropdownItems={dropdownItems}\n                        />\n                    }\n                >\n                    <table border=\"0\" style={{ marginTop: 8 }}>\n                        <tbody>\n                            <tr>\n                                <td style={{ width: 300 }}>{intl.formatMessage(messages.templateDetailTableDescription)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 300 }} />\n                                        : templateDetails.data.attributes.description\n                                        || intl.formatMessage(messages.titlesTemplateNoDescription)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableUpToDate)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.config.to_time)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableCreatedBy)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : templateDetails.data.attributes.creator}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTablePublished)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.published)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableLastEdited)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.last_edited)}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </Header>\n                <Main>\n                    <TextContent>\n                        <Text component=\"h2\" className=\"pf-u-mb-md\">\n                            {intl.formatMessage(messages.templateDetailTableTitle)}\n                        </Text>\n                    </TextContent>\n                    {templateHasSystemsLoading\n                        ? (\n                            <Bullseye>\n                                <Spinner size=\"xl\" />\n                            </Bullseye>\n                        ) : templateHasSystems\n                            ? systemStatus.hasError\n                                ? <ErrorHandler code={systemStatus.code} />\n                                : <InventoryTable\n                                    ref={inventory}\n                                    isFullView\n                                    autoRefresh\n                                    initialLoading\n                                    hideFilters={{ all: true, tags: false }}\n                                    columns={(defaultColumns) => templateSystemsColumnsMerger(defaultColumns)}\n                                    showTags\n                                    onLoad={({ mergeWithEntities }) => {\n                                        store.replaceReducer(combineReducers({\n                                            ...defaultReducers,\n                                            ...mergeWithEntities(\n                                                inventoryEntitiesReducer(systemsListColumns(true), modifyTemplateDetailSystems),\n                                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                                            )\n                                        }));\n                                    }}\n                                    customFilters={{\n                                        patchParams: {\n                                            search,\n                                            filter,\n                                            systemProfile,\n                                            selectedTags\n                                        }\n                                    }}\n                                    paginationProps={{\n                                        isDisabled: totalItems === 0\n                                    }}\n                                    getEntities={getEntities}\n                                    bulkSelect={bulkSelectConfig}\n                                    tableProps={{\n                                        canSelectAll: false,\n                                        variant: TableVariant.compact,\n                                        className: 'patchCompactInventory',\n                                        isStickyHeader: true,\n                                        actionResolver: () => hasAccess ? patchSetDetailRowActions(openSystemUnassignModal) : []\n                                    }}\n                                    actionsConfig={{\n                                        actions: [\n                                            '', // intentionally empty, remediation button placeholder\n                                            {\n                                                key: 'remove-multiple-systems',\n                                                label: intl.formatMessage(\n                                                    messages.titlesTemplateRemoveFromSystems,\n                                                    { systemsCount: selectedCount }\n                                                ),\n                                                onClick: () =>\n                                                    openSystemUnassignModal(filterSelectedActiveSystemIDs(selectedRows)),\n                                                props: { isDisabled: selectedCount === 0 }\n                                            }\n                                        ]\n                                    }}\n                                    filterConfig={filterConfig}\n                                    activeFiltersConfig={activeFiltersConfig}\n                                />\n                            : <NoAppliedSystems onButtonClick={() => openPatchSetAssignWizard()} />}\n                </Main>\n            </Fragment>\n    );\n};\n\nexport default PatchSetDetail;\n","import { createAdvisorySystemsRows, createSystemsRows, createPatchSetDetailRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows, fetchRejected } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state, lastAction) => {\n    // this is pretty scuffed, but trust me it cannot be solved more elegantly because\n    // single item select actions are triggered by Inventory and contain only system id\n    // but we also need to match available_evra for each selected system for remediations\n    // this does not happen with bulk select action because they are implemented by Patchman\n    // the id-evra mapping is cached to minimize O(n^2) time complexity of id-evra matching\n    if (lastAction === 'SELECT_ENTITY') {\n        let idToEvraMapping = state.packageEvraCache;\n\n        if (idToEvraMapping === undefined) {\n            idToEvraMapping = {};\n            state.rows.forEach(row => idToEvraMapping[row.id] = row.available_evra);\n            state.packageEvraCache = idToEvraMapping;\n        }\n\n        state.selectedRows = state.selectedRows ? Object.fromEntries(\n            Object.entries(state.selectedRows).map(([id, value]) =>\n                value === true ? [id, idToEvraMapping[id]] : [id, value]\n            )\n        ) : state.selectedRows;\n    }\n\n    if (lastAction === 'LOAD_ENTITIES_FULFILLED') {\n        state.packageEvraCache = undefined;\n    }\n\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyTemplateDetailSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createPatchSetDetailRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyAdvisorySystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createAdvisorySystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState, action.type);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection, action.type);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["_a","component","props","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","error","concat","children","__assign","assign","n","arguments","apply","this","BaseInvTable","history","useHistory","store","Cmp","className","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","DeleteSetModal","_ref","isModalOpen","setModalOpen","templateName","onConfirm","_useState","useState","_useState2","_slicedToArray","isCheckboxChecked","setCheckboxChecked","onClose","React","Modal","title","intl","formatMessage","messages","titlesTemplateDeleteModalTitle","titleIconVariant","isOpen","variant","actions","Button","key","onClick","isDisabled","labelsDelete","labelsCancel","titlesTemplateDeleteModalText","b","_len","chunks","Array","_key","Checkbox","isChecked","checked","onChange","value","label","titlesTemplateDeleteModalCheckbox","id","renderUnassignModalMessages","bodyMessage","systemsCount","GridItem","UnassignSystemsModal","_ref$unassignSystemsM","unassignSystemsModalState","setUnassignSystemsModalOpen","systemsIDs","isUnassignSystemsModalOpen","systemsWithPatchSet","setSystemWithPatchSet","_useState3","_useState4","systemsLoading","setSystemsLoading","handleModalToggle","shouldRefresh","handleModalClose","handleUnassignment","dispatch","useDispatch","handleSystemsRemoval","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","unassignSystemFromPatchSet","inventory_ids","sent","status","addNotification","patchSetUnassignSystemsNotifications","success","stop","useUnassignSystemsHook","fetchSystems","limit","filter","stale","then","allSystemsWithPatchSet","systemID","data","some","system","filterSystemsWithoutSets","result","systemsWithoutPatchSetCount","textUnassignSystemsTitle","labelsRemove","Grid","hasGutter","Skeleton","Fragment","injectIntl","useIntl","chrome","useChrome","useStore","inventory","useRef","patchSetId","location","pathname","split","_React$useState","_React$useState2","firstMount","setFirstMount","isHeaderDropdownOpen","setHeaderDropdownOpen","isDeleteConfirmModalOpen","setDeleteConfirmModalOpen","_useState5","isPatchSetWizardOpen","_useState6","patchSetState","setPatchSetState","templateDetails","useSelector","PatchSetDetailStore","isHeaderLoading","_ref2","_PatchSetDetailStore$","_PatchSetDetailStore$2","isLoading","detailStatus","_ref3","systems","_ref4","entities","rows","shallowEqual","selectedRows","_ref5","systemStatus","_ref6","totalItems","_ref7","total","queryParams","_ref8","PatchSetDetailSystemsStore","templateHasSystemsLoading","_ref9","templateHasSystems","_ref10","hasAccess","usePermissionsWithContext","patchSetName","attributes","name","updateDocumentTitle","titlesTemplate","DEFAULT_PATCH_TITLE","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","templateSystems","selectionDispatcher","systemSelectAction","params","changePatchSetDetailsSystemsParams","openPatchSetAssignWizard","_objectSpread","fetchPatchSetSystemsNoFiltersAction","clearTemplateDetail","clearInventoryReducer","_inventory$current","current","onRefreshData","timestamp","Date","now","fetchTemplateDetail","useDeepCompareEffect","decodeQueryparams","search","push","encodeURLParams","openSystemUnassignModal","ids","getEntities","useGetEntities","fetchPatchSetSystems","metadata","changePatchSetDetailsSystemsMetadata","tags","changeTags","dropdownItems","DropdownItem","labelsButtonEditTemplate","labelsButtonRemoveTemplate","decodedParams","systemProfile","selectedTags","page","perPage","sort","selectedCount","arrayFromObj","bulkSelectConfig","useBulkSelectConfig","total_items","_useRemoveFilter","useRemoveFilter","deleteFilters","osFilterConfig","useOsVersionFilter","os","filterConfig","buildTemplateFilterConfig","activeFiltersConfig","buildActiveFiltersConfig","hasError","ErrorHandler","code","deletePatchSet","patchSetDeleteNotifications","PatchSetWizard","setBaselineState","patchSetID","Header","style","width","headerOUIA","breadcrumbs","templateDetailHeaderBreadcrumb","to","isActive","Dropdown","position","DropdownPosition","right","document","getElementById","focus","toggle","DropdownToggle","onToggle","minWidth","labelsActions","border","marginTop","templateDetailTableDescription","description","titlesTemplateNoDescription","templateDetailTableUpToDate","processDate","config","to_time","templateDetailTableCreatedBy","creator","templateDetailTablePublished","published","templateDetailTableLastEdited","last_edited","Main","TextContent","Text","templateDetailTableTitle","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","columns","defaultColumns","templateSystemsColumnsMerger","showTags","onLoad","_ref11","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","systemsListColumns","modifyTemplateDetailSystems","persistantParams","customFilters","patchParams","paginationProps","bulkSelect","tableProps","canSelectAll","TableVariant","compact","isStickyHeader","actionResolver","patchSetDetailRowActions","actionsConfig","titlesTemplateRemoveFromSystems","filterSelectedActiveSystemIDs","NoAppliedSystems","onButtonClick","initialState","offset","modifyInventory","state","loaded","createSystemsRows","modifyPackageSystems","lastAction","idToEvraMapping","packageEvraCache","undefined","forEach","row","available_evra","fromEntries","entries","map","createPackageSystemsRows","createPatchSetDetailRows","modifyAdvisorySystems","createAdvisorySystemsRows","inventoryModifier","action","newState","type","fetchRejected","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}