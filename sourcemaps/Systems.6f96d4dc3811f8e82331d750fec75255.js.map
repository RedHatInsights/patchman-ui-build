{"version":3,"file":"js/Systems.27bbb423c8eab4110da4.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardBody.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/package-icon.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Card/card.mjs","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/WithHistory.js","webpack:///./src/SmartComponents/Modals/AssignSystemsModal.js","webpack:///./src/PresentationalComponents/PatchSetWrapper/PatchSetWrapper.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js","webpack:///./src/PresentationalComponents/StatusReports/SystemsStatusReport.js","webpack:///./src/SmartComponents/Systems/SystemsTable.js","webpack:///./src/SmartComponents/Systems/SystemsMainContent.js","webpack:///./src/SmartComponents/Systems/SystemsPage.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport const CardContext = React.createContext({\n    cardId: '',\n    registerTitleId: () => { },\n    isExpanded: false\n});\nexport const Card = (_a) => {\n    var { children = null, id = '', className = '', component = 'article', isHoverable = false, isCompact = false, isSelectable = false, isSelectableRaised = false, isSelected = false, isDisabledRaised = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true, hasSelectableInput = false, selectableInputAriaLabel, onSelectableInputChange = () => { } } = _a, props = __rest(_a, [\"children\", \"id\", \"className\", \"component\", \"isHoverable\", \"isCompact\", \"isSelectable\", \"isSelectableRaised\", \"isSelected\", \"isDisabledRaised\", \"isFlat\", \"isExpanded\", \"isRounded\", \"isLarge\", \"isFullHeight\", \"isPlain\", \"ouiaId\", \"ouiaSafe\", \"hasSelectableInput\", \"selectableInputAriaLabel\", \"onSelectableInputChange\"]);\n    const Component = component;\n    const ouiaProps = useOUIAProps(Card.displayName, ouiaId, ouiaSafe);\n    const [titleId, setTitleId] = React.useState('');\n    const [ariaProps, setAriaProps] = React.useState();\n    if (isCompact && isLarge) {\n        // eslint-disable-next-line no-console\n        console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n        isLarge = false;\n    }\n    const getSelectableModifiers = () => {\n        if (isDisabledRaised) {\n            return css(styles.modifiers.nonSelectableRaised);\n        }\n        if (isSelectableRaised) {\n            return css(styles.modifiers.selectableRaised, isSelected && styles.modifiers.selectedRaised);\n        }\n        if (isSelectable || isHoverable) {\n            return css(styles.modifiers.selectable, isSelected && styles.modifiers.selected);\n        }\n        return '';\n    };\n    const containsCardTitleChildRef = React.useRef(false);\n    const registerTitleId = (id) => {\n        setTitleId(id);\n        containsCardTitleChildRef.current = !!id;\n    };\n    React.useEffect(() => {\n        if (selectableInputAriaLabel) {\n            setAriaProps({ 'aria-label': selectableInputAriaLabel });\n        }\n        else if (titleId) {\n            setAriaProps({ 'aria-labelledby': titleId });\n        }\n        else if (hasSelectableInput && !containsCardTitleChildRef.current) {\n            setAriaProps({});\n            // eslint-disable-next-line no-console\n            console.warn('If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed');\n        }\n    }, [hasSelectableInput, selectableInputAriaLabel, titleId]);\n    return (React.createElement(CardContext.Provider, { value: {\n            cardId: id,\n            registerTitleId,\n            isExpanded\n        } },\n        hasSelectableInput && (React.createElement(\"input\", Object.assign({ className: \"pf-screen-reader\", id: `${id}-input` }, ariaProps, { type: \"checkbox\", checked: isSelected, onChange: event => onSelectableInputChange(id, event), disabled: isDisabledRaised, tabIndex: -1 }))),\n        React.createElement(Component, Object.assign({ id: id, className: css(styles.card, isCompact && styles.modifiers.compact, isExpanded && styles.modifiers.expanded, isFlat && styles.modifiers.flat, isRounded && styles.modifiers.rounded, isLarge && styles.modifiers.displayLg, isFullHeight && styles.modifiers.fullHeight, isPlain && styles.modifiers.plain, getSelectableModifiers(), className), tabIndex: isSelectable || isSelectableRaised ? '0' : undefined }, props, ouiaProps), children)));\n};\nCard.displayName = 'Card';\n//# sourceMappingURL=Card.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nexport const CardBody = (_a) => {\n    var { children = null, className = '', component = 'div', isFilled = true } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"isFilled\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardBody, !isFilled && styles.modifiers.noFill, className) }, props), children));\n};\nCardBody.displayName = 'CardBody';\n//# sourceMappingURL=CardBody.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nexport const CardTitle = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const { cardId, registerTitleId } = React.useContext(CardContext);\n    const Component = component;\n    const titleId = cardId ? `${cardId}-title` : '';\n    React.useEffect(() => {\n        registerTitleId(titleId);\n        return () => registerTitleId('');\n    }, [registerTitleId, titleId]);\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardTitle, className), id: titleId || undefined }, props), children));\n};\nCardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","import { createIcon } from '../createIcon';\n\nexport const PackageIconConfig = {\n  name: 'PackageIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M567.7,1010.49707 L951.5,818.498238 C994.7,796.698371 1024,752.39864 1024,703.998934 L1024,320.001265 C1024,271.601559 995.6,227.10183 952.2,205.501961 L568.6,13.5031267 C550.8,4.60318072 531.4,0.103208049 512,-0.00152855358 C492.3,-0.0967907365 472.5,4.40318194 454.4,13.5031267 L70.8,205.501961 C27.4,227.10183 0,271.50156 0,319.801267 L0.9,703.998934 C0.9,752.39864 28.3,796.79837 71.6,818.398239 L455.2,1010.39707 C464.3,1014.89705 488.1,1023.99699 511.9,1023.99699 C535.5,1023.99699 558.8,1014.99704 567.7,1010.49707 Z M512.5,630.899377 L672.5,550.899863 L672.5,645.29929 L736.5,613.299484 L736.5,518.900058 L896,438.900543 L896.5,712.698881 L512.5,904.697715 L512.5,630.899377 Z M145.1,304.101362 L294.9,228.60182 C295.3,228.801819 295.6,229.001818 296,229.201817 L661.9,412.300705 L512.5,487.600248 L145.1,304.101362 Z M512.5,118.902487 L881.3,301.701377 L733.1,376.400923 L366,192.702038 L512.5,118.902487 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PackageIcon = createIcon(PackageIconConfig);\n\nexport default PackageIcon;","import './card.css';\nexport default {\n  \"card\": \"pf-c-card\",\n  \"cardActions\": \"pf-c-card__actions\",\n  \"cardBody\": \"pf-c-card__body\",\n  \"cardExpandableContent\": \"pf-c-card__expandable-content\",\n  \"cardFooter\": \"pf-c-card__footer\",\n  \"cardHeader\": \"pf-c-card__header\",\n  \"cardHeaderToggle\": \"pf-c-card__header-toggle\",\n  \"cardHeaderToggleIcon\": \"pf-c-card__header-toggle-icon\",\n  \"cardSrInput\": \"pf-c-card__sr-input\",\n  \"cardTitle\": \"pf-c-card__title\",\n  \"divider\": \"pf-c-divider\",\n  \"modifiers\": {\n    \"hoverable\": \"pf-m-hoverable\",\n    \"selectable\": \"pf-m-selectable\",\n    \"selected\": \"pf-m-selected\",\n    \"hoverableRaised\": \"pf-m-hoverable-raised\",\n    \"selectableRaised\": \"pf-m-selectable-raised\",\n    \"nonSelectableRaised\": \"pf-m-non-selectable-raised\",\n    \"selectedRaised\": \"pf-m-selected-raised\",\n    \"compact\": \"pf-m-compact\",\n    \"displayLg\": \"pf-m-display-lg\",\n    \"flat\": \"pf-m-flat\",\n    \"plain\": \"pf-m-plain\",\n    \"rounded\": \"pf-m-rounded\",\n    \"expanded\": \"pf-m-expanded\",\n    \"fullHeight\": \"pf-m-full-height\",\n    \"toggleRight\": \"pf-m-toggle-right\",\n    \"noOffset\": \"pf-m-no-offset\",\n    \"noFill\": \"pf-m-no-fill\",\n    \"overpassFont\": \"pf-m-overpass-font\"\n  },\n  \"themeDark\": \"pf-theme-dark\"\n};","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nimport WithHistory from './WithHistory';\nvar BaseInvTable = function (props) {\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: props.history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\" }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n    history: PropTypes.object,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nvar CompatiblityWrapper = function (props, ref) { return _jsx(WithHistory, __assign({ innerRef: ref, Component: InvTable }, props)); };\nexport default React.forwardRef(CompatiblityWrapper);\n//# sourceMappingURL=InventoryTable.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useMemo } from 'react';\nimport * as reactRouter from 'react-router-dom';\nimport useChrome from '../useChrome';\nvar WithReactRouterHistory = function (_a) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var history = reactRouter.useHistory();\n    return _jsx(Component, __assign({ history: history }, props));\n};\nvar WithChromeHistory = function (_a) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var chromeHistory = useChrome().chromeHistory;\n    return _jsx(Component, __assign({ history: chromeHistory }, props));\n};\nvar WithHistory = function (_a, ref) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var HistoryComponent = useMemo(function () { return (typeof reactRouter.useHistory === 'function' ? WithReactRouterHistory : WithChromeHistory); }, [Component, props]);\n    return _jsx(HistoryComponent, __assign({ innerRef: ref, Component: Component }, props));\n};\nexport default React.forwardRef(WithHistory);\n//# sourceMappingURL=WithHistory.js.map","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Stack, StackItem, Form, Spinner } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\nimport SelectExistingSets from '../PatchSetWizard/InputFields/SelectExistingSets';\nimport messages from '../../Messages';\nimport { updatePatchSets } from '../../Utilities/api';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { patchSetAssignSystemsNotifications } from '../PatchSet/PatchSetAssets';\nimport { filterSelectedActiveSystemIDs } from '../../Utilities/Helpers';\nimport { filterSatelliteManagedSystems } from './Helpers';\n\nconst AssignSystemsModal = ({ patchSetState = {}, setPatchSetState, intl }) => {\n    const dispatch = useDispatch();\n\n    const { systemsIDs, isAssignSystemsModalOpen } = patchSetState;\n    const [selectedPatchSet, setSelectedPatchSet] = useState([]);\n    const [selectedPatchSetDetails, setSelectedPatchSetDetails] = useState({});\n\n    const [systemsNotManagedBySatellite, setSystemsNotManagedBySatellite] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const closeModal = () => {\n        setPatchSetState({\n            isAssignSystemsModalOpen: !isAssignSystemsModalOpen,\n            systemsIDs: []\n        });\n        setSelectedPatchSet([]);\n        setSelectedPatchSetDetails({});\n    };\n\n    const submitModal = () => {\n        const systems = systemsNotManagedBySatellite.reduce((obj, item) => {\n            obj[item] = true;\n            return obj;\n        }, {});\n\n        updatePatchSets({ inventory_ids: systemsIDs }, selectedPatchSetDetails.id)\n        .then(() => {\n            dispatch(addNotification(patchSetAssignSystemsNotifications(Object.keys(systems).length).success));\n            setPatchSetState({\n                ...patchSetState,\n                shouldRefresh: true,\n                isAssignSystemsModalOpen: false,\n                systemsIDs: []\n            });\n        })\n        .catch(() => {\n            dispatch(addNotification(patchSetAssignSystemsNotifications().failure));\n        });\n\n        closeModal();\n    };\n\n    const openWizard = () => {\n        setPatchSetState({\n            ...patchSetState,\n            isPatchSetWizardOpen: true,\n            systemsIDs: filterSelectedActiveSystemIDs(systemsIDs),\n            shouldRefresh: false\n        });\n        setSelectedPatchSet([]);\n        setSelectedPatchSetDetails({});\n        setSystemsLoading(true);\n    };\n\n    useEffect(() => {\n        if (systemsIDs) {\n            setSystemsLoading(true);\n\n            filterSatelliteManagedSystems(Object.keys(systemsIDs)).then(result => {\n                setSystemsNotManagedBySatellite(result);\n                setSystemsLoading(false);\n            });\n        }\n    }, [systemsIDs]);\n\n    const systemsManagedBySatelliteCount = Object.keys(systemsIDs).length - systemsNotManagedBySatellite.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={patchSetState.isAssignSystemsModalOpen}\n            title={intl.formatMessage(messages.templateApply)}\n            onClose={closeModal}\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    isDisabled={!selectedPatchSetDetails?.id}\n                    onClick={submitModal}\n                >\n                    {intl.formatMessage(messages.templateApply)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeModal}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {systemsLoading\n                ? <Spinner />\n                : systemsNotManagedBySatellite.length === 0\n                    ? systemsNotManagedBySatellite.length === 1\n                        ? 'Template cannot be applied to the selected system.'\n                        : 'Template cannot be applied to any of the selected systems.'\n                    : <Stack hasGutter>\n                        <StackItem>\n                            {intl.formatMessage(messages.templateSelect, {\n                                systemCount: systemsNotManagedBySatellite.length,\n                                b: (...chunks) => <b>{chunks}</b>\n                            })}\n                        </StackItem>\n                        {systemsManagedBySatelliteCount > 0 && <StackItem>{\n                            intl.formatMessage(messages.templateSelectSatellite, {\n                                systemCount: systemsManagedBySatelliteCount,\n                                b: (...chunks) => <b>{chunks}</b>\n                            })}\n                        </StackItem>\n                        }\n                        <StackItem>\n                            <Form>\n                                <SelectExistingSets\n                                    setSelectedPatchSet={setSelectedPatchSet}\n                                    selectedSets={selectedPatchSet}\n                                    selectCallback={setSelectedPatchSetDetails}\n                                />\n                            </Form>\n                        </StackItem>\n                        <StackItem>\n                            {intl.formatMessage(messages.templateOr)}\n                        </StackItem>\n                        <StackItem>\n                            <Button variant=\"secondary\" onClick={openWizard}>\n                                {intl.formatMessage(messages.templateCreate)}\n                            </Button>\n                        </StackItem>\n                    </Stack>\n            }\n        </Modal>\n    );\n};\n\nAssignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setPatchSetState: propTypes.func,\n    patchSetState: propTypes.object\n};\n\nexport default injectIntl(AssignSystemsModal);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport PatchSetWizard from '../../SmartComponents/PatchSetWizard/PatchSetWizard';\nimport UnassignSystemsModal from '../../SmartComponents/Modals/UnassignSystemsModal';\nimport AssignSystemsModal from '../../SmartComponents/Modals/AssignSystemsModal';\n\nconst PatchSetWrapper = ({ patchSetState, setPatchSetState }) => {\n    return (<>\n        {(patchSetState.isUnassignSystemsModalOpen) && <UnassignSystemsModal\n            unassignSystemsModalState={patchSetState}\n            setUnassignSystemsModalOpen={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n        />}\n        <AssignSystemsModal\n            patchSetState={patchSetState}\n            setPatchSetState={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n        />\n        {(patchSetState.isPatchSetWizardOpen) &&\n        <PatchSetWizard systemsIDs={patchSetState.systemsIDs} setBaselineState={setPatchSetState} />}\n    </>);\n};\n\nPatchSetWrapper.propTypes = {\n    patchSetState: propTypes.object,\n    setPatchSetState: propTypes.func\n};\nexport default PatchSetWrapper;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchIDs, fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data?.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const filterSatelliteManagedSystems = (systemsIDs) =>  {\n    return fetchIDs('/ids/systems', {\n        limit: -1, 'filter[satellite_managed]': 'false',\n        filter: { stale: [true, false] }\n    }).then((systemsNotManagedBySatellite) => {\n        return systemsIDs.filter(systemID =>\n            systemsNotManagedBySatellite?.data?.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length === 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsNoAssignedSystems', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithPatchSet.length > 0 && systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../PatchSet/PatchSetAssets';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n        handleModalToggle(true);\n\n        if (result.status === 200) {\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n        else {\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications().failure\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { CheckCircleIcon, PackageIcon, ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Button, Skeleton,\n    Card, Grid, GridItem, CardBody, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { fetchSystems } from '../../Utilities/api';\n\nconst StatusCard = ({ title, color, Icon, value, filter, apply }) => {\n    return (\n        <Card isCompact isFullHeight>\n            <CardTitle style={{ marginTop: '0px' }}>{title}</CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                    <FlexItem\n                        spacer={{ default: 'spacerMd' }}\n                        alignSelf={{ default: 'alignSelfCenter' }}\n                    >\n                        <Icon color={color} size='md'/>\n                    </FlexItem>\n                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                        {\n                            typeof(value) === 'undefined'\n                            &&  <Skeleton width=\"24px\" />\n                                    ||  <Button\n                                        variant=\"link\"\n                                        onClick={() => apply(filter)}\n                                        className='patch-status-report-text'>\n                                        {value}\n                                    </Button>\n                        }\n                    </FlexItem>\n                </Flex>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst SystemsStatusReport = ({ apply, queryParams }) => {\n    const [subtotals, setSubtotals] = React.useState({});\n\n    const { selectedTags, selectedGlobalTags, systemProfile } = useSelector(({ GlobalFilterStore }) => GlobalFilterStore);\n\n    const fetchResource = () => {\n        setSubtotals({});\n\n        let result;\n\n        try {\n            result = fetchSystems({\n                filter: {\n                    os: queryParams?.filter?.os\n                },\n                selectedTags: [...selectedTags, ...selectedGlobalTags],\n                systemProfile,\n                limit: 1,\n                'filter[stale]': 'in:true,false'\n            }).then((result)=> {\n                setSubtotals(result.meta?.subtotals);\n            });\n        }\n        catch {\n            result = [];\n        }\n\n        return result;\n    };\n\n    React.useEffect(() => {\n        fetchResource();\n    }, [\n        queryParams?.filter?.os?.length, queryParams?.filter?.os !== undefined,\n        selectedTags?.length, selectedTags !== undefined,\n        selectedGlobalTags?.length, selectedGlobalTags !== undefined,\n        systemProfile,\n        queryParams?.subtotals !== undefined\n    ]);\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Grid hasGutter span={12} >\n                <GridItem lg={3} md={4}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsUpToDate)}\n                        Icon={CheckCircleIcon}\n                        color={'var(--pf-global--success-color--100)'}\n                        value={subtotals?.patched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'eq:0' } }}\n                    />\n                </GridItem>\n                <GridItem lg={3} md={4}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsWithPatchesAvailable)}\n                        Icon={PackageIcon}\n                        color={'var(--pf-global--primary-color--100)'}\n                        value={subtotals?.unpatched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'gt:0' } }}\n                    />\n                </GridItem>\n                <GridItem lg={3} md={4}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusStaleSystems)}\n                        Icon={ExclamationTriangleIcon}\n                        color={'var(--pf-global--warning-color--100)'}\n                        value={subtotals?.stale}\n                        apply={apply}\n                        filter={{ filter: { stale: true } }}\n                    />\n                </GridItem>\n            </Grid>\n        </Main>\n    );\n};\n\nStatusCard.propTypes = {\n    title: propTypes.string,\n    Icon: propTypes.elementType,\n    value: propTypes.number,\n    color: propTypes.string,\n    apply: propTypes.func,\n    filter: propTypes.object\n};\n\nSystemsStatusReport.propTypes = {\n    apply: propTypes.func,\n    queryParams: propTypes.object\n};\n\nexport default SystemsStatusReport;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport messages from '../../Messages';\nimport { defaultReducers } from '../../store';\nimport { changeSystemsMetadata, changeTags, systemSelectAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchSystems\n} from '../../Utilities/api';\nimport { systemsListDefaultFilters } from '../../Utilities/constants';\nimport {\n    arrayFromObj, persistantParams, filterSelectedActiveSystemIDs\n} from '../../Utilities/Helpers';\nimport { useBulkSelectConfig, useGetEntities, useOnExport,\n    useRemoveFilter, useRemediationDataProvider, useOnSelect, ID_API_ENDPOINTS\n} from '../../Utilities/hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport { buildFilterConfig, buildActiveFiltersConfig } from '../../Utilities/SystemsHelpers';\nimport { combineReducers } from 'redux';\nimport { systemsColumnsMerger } from '../../Utilities/SystemsHelpers';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport propTypes from 'prop-types';\n\nconst SystemsTable = ({\n    apply,\n    patchSetState,\n    openAssignSystemsModal,\n    openUnassignSystemsModal,\n    setSearchParams,\n    activateRemediationModal,\n    decodedParams\n}) => {\n    const store = useStore();\n    const inventory = useRef(null);\n\n    const dispatch = useDispatch();\n    const [isRemediationLoading, setRemediationLoading] = useState(false);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const areAllSelected = useSelector(\n        ({ SystemsStore }) => SystemsStore?.areAllSelected\n    );\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const { hasAccess: hasTemplateAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    const applyMetadata = (metadata) => {\n        dispatch(changeSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const [deleteFilters] = useRemoveFilter(\n        { search, ...filter },\n        apply,\n        systemsListDefaultFilters\n    );\n    const filterConfig = buildFilterConfig(search, filter, apply);\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systems,\n            queryParams,\n            selectionDispatcher: systemSelectAction\n        }\n    );\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh) {\n            onSelect('none');\n            // timestamp is used to force inventory to refresh\n            // if it wasn't there inventory might ignore request to refresh because parameters are the same\n            inventory?.current?.onRefreshData({ timestamp: Date.now() });\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    const onExport = useOnExport(\n        'systems',\n        queryParams,\n        {\n            csv: exportSystemsCSV,\n            json: exportSystemsJSON\n        }, dispatch\n    );\n\n    const getEntities = useGetEntities(\n        fetchSystems,\n        apply,\n        {},\n        setSearchParams,\n        applyMetadata,\n        applyGlobalFilter\n    );\n\n    const remediationDataProvider = useRemediationDataProvider(\n        selectedRows,\n        setRemediationLoading,\n        'systems',\n        areAllSelected\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const bulkSelectConfig = useBulkSelectConfig(\n        selectedCount,\n        onSelect,\n        { total_items: totalItems },\n        systems\n    );\n\n    return (\n        <InventoryTable\n            ref={inventory}\n            isFullView\n            autoRefresh\n            initialLoading\n            hideFilters={{ all: true, tags: false, hostGroupFilter: false, operatingSystem: false }}\n            columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, systemsListColumns)}\n            showTags\n            customFilters={{\n                patchParams: {\n                    search,\n                    filter,\n                    systemProfile,\n                    selectedTags\n                }\n            }}\n            paginationProps={{\n                isDisabled: totalItems === 0\n            }}\n            onLoad={({ mergeWithEntities }) => {\n                store.replaceReducer(combineReducers({\n                    ...defaultReducers,\n                    ...mergeWithEntities(\n                        inventoryEntitiesReducer(systemsListColumns(), modifyInventory),\n                        persistantParams({ page, perPage, sort, search }, decodedParams)\n                    )\n                }));\n            }}\n            getEntities={getEntities}\n            tableProps={{\n                actionResolver: (row) =>\n                    systemsRowActions(\n                        activateRemediationModal,\n                        openAssignSystemsModal,\n                        openUnassignSystemsModal,\n                        row,\n                        hasTemplateAccess\n                    ),\n                canSelectAll: false,\n                variant: TableVariant.compact,\n                className: 'patchCompactInventory',\n                isStickyHeader: true\n            }}\n            bulkSelect={bulkSelectConfig}\n            exportConfig={{\n                isDisabled: totalItems === 0,\n                onSelect: onExport\n            }}\n            actionsConfig={{\n                actions: [\n                    <AsyncRemediationButton\n                        key='remediate-multiple-systems'\n                        remediationProvider={remediationDataProvider}\n                        isDisabled={\n                            arrayFromObj(selectedRows).length === 0 || isRemediationLoading\n                        }\n                        isLoading={isRemediationLoading}\n                    />,\n                    {\n                        key: 'assign-multiple-systems',\n                        label: intl.formatMessage(messages.titlesTemplateAssign),\n                        onClick: () => openAssignSystemsModal(selectedRows),\n                        props: { isDisabled: !hasTemplateAccess || selectedCount === 0 }\n                    },\n                    {\n                        key: 'remove-multiple-systems',\n                        label: intl.formatMessage(messages.titlesTemplateRemoveMultipleButton),\n                        onClick: () => openUnassignSystemsModal(filterSelectedActiveSystemIDs(selectedRows)),\n                        props: { isDisabled: !hasTemplateAccess || selectedCount === 0 }\n                    }\n                ]\n            }}\n            filterConfig={filterConfig}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n    );\n};\n\nSystemsTable.propTypes = {\n    apply: propTypes.func.isRequired,\n    patchSetState: propTypes.object.isRequired,\n    openAssignSystemsModal: propTypes.func.isRequired,\n    openUnassignSystemsModal: propTypes.func.isRequired,\n    setSearchParams: propTypes.func.isRequired,\n    activateRemediationModal: propTypes.func.isRequired,\n    decodedParams: propTypes.func.isRequired\n};\nexport default SystemsTable;\n","import React, { useEffect, useState } from 'react';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { changeSystemsParams, clearInventoryReducer } from '../../store/Actions/Actions';\nimport { usePatchSetState } from '../../Utilities/hooks';\nimport { decodeQueryparams } from '../../Utilities/Helpers';\nimport { useActivateRemediationModal } from './SystemsListAssets';\nimport SystemsStatusReport from '../../PresentationalComponents/StatusReports/SystemsStatusReport';\nimport PatchSetWrapper from '../../PresentationalComponents/PatchSetWrapper/PatchSetWrapper';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport SystemsTable from './SystemsTable';\nimport { useSearchParams } from 'react-router-dom';\n\nconst SystemsMainContent = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const dispatch = useDispatch();\n    const [isRemediationOpen, setRemediationOpen] = useState(false);\n    const decodedParams = decodeQueryparams('?' + searchParams.toString());\n    const [remediationIssues, setRemediationIssues] = useState([]);\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const { hasError, code } = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const metadata = useSelector(\n        ({ SystemsStore }) => SystemsStore?.metadata || {}\n    );\n\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const apply = (queryParams) => {\n        dispatch(changeSystemsParams(queryParams));\n    };\n\n    useEffect(() => {\n        apply(decodedParams);\n        return () => dispatch(clearInventoryReducer());\n    }, []);\n\n    const {\n        patchSetState, setPatchSetState, openUnassignSystemsModal, openAssignSystemsModal\n    } = usePatchSetState(selectedRows);\n\n    const activateRemediationModal = useActivateRemediationModal(\n        setRemediationIssues,\n        setRemediationOpen\n    );\n\n    if (hasError || metadata?.has_systems === false) {\n        return <ErrorHandler code={code} metadata={metadata}/>;\n    }\n\n    return (\n        <React.Fragment>\n            <SystemsStatusReport apply={apply} queryParams={queryParams} />\n            <PatchSetWrapper patchSetState={patchSetState} setPatchSetState={setPatchSetState} />\n            {isRemediationOpen &&\n                    <RemediationWizard\n                        data={remediationIssues}\n                        isRemediationOpen\n                        setRemediationOpen={setRemediationOpen}\n                    />\n                    || null\n            }\n            <Main>\n                <SystemsTable\n                    apply={apply}\n                    patchSetState={patchSetState}\n                    openAssignSystemsModal={openAssignSystemsModal}\n                    openUnassignSystemsModal={openUnassignSystemsModal}\n                    setSearchParams={setSearchParams}\n                    activateRemediationModal={activateRemediationModal}\n                    decodedParams={decodeQueryparams}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default SystemsMainContent;\n","import React, { useEffect } from 'react';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { DEFAULT_PATCH_TITLE } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport SystemsMainContent from './SystemsMainContent';\n\nconst SystemsPage = () => {\n    const chrome = useChrome();\n    useEffect(()=>{\n        chrome.updateDocumentTitle(`${intl.formatMessage(messages.titlesSystems)}${DEFAULT_PATCH_TITLE}`);\n    }, [chrome, intl]);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'} />\n            <SystemsMainContent />\n        </React.Fragment>\n    );\n};\n\nexport default SystemsPage;\n","import { createAdvisorySystemsRows, createSystemsRows, createPatchSetDetailRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows, fetchRejected } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state, lastAction) => {\n    // this is pretty scuffed, but trust me it cannot be solved more elegantly because\n    // single item select actions are triggered by Inventory and contain only system id\n    // but we also need to match available_evra for each selected system for remediations\n    // this does not happen with bulk select action because they are implemented by Patchman\n    // the id-evra mapping is cached to minimize O(n^2) time complexity of id-evra matching\n    if (lastAction === 'SELECT_ENTITY') {\n        let idToEvraMapping = state.packageEvraCache;\n\n        if (idToEvraMapping === undefined) {\n            idToEvraMapping = {};\n            state.rows.forEach(row => idToEvraMapping[row.id] = row.available_evra);\n            state.packageEvraCache = idToEvraMapping;\n        }\n\n        state.selectedRows = state.selectedRows ? Object.fromEntries(\n            Object.entries(state.selectedRows).map(([id, value]) =>\n                value === true ? [id, idToEvraMapping[id]] : [id, value]\n            )\n        ) : state.selectedRows;\n    }\n\n    if (lastAction === 'LOAD_ENTITIES_FULFILLED') {\n        state.packageEvraCache = undefined;\n    }\n\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyTemplateDetailSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createPatchSetDetailRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyAdvisorySystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createAdvisorySystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState, action.type);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection, action.type);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["CardContext","cardId","registerTitleId","isExpanded","Card","_a","children","id","className","component","isHoverable","isCompact","isSelectable","isSelectableRaised","isSelected","isDisabledRaised","isFlat","isRounded","isLarge","isFullHeight","isPlain","ouiaId","ouiaSafe","hasSelectableInput","selectableInputAriaLabel","onSelectableInputChange","props","__rest","Component","ouiaProps","displayName","titleId","setTitleId","ariaProps","setAriaProps","console","warn","containsCardTitleChildRef","current","Provider","value","Object","assign","type","checked","onChange","event","disabled","tabIndex","css","card","modifiers","compact","expanded","flat","rounded","displayLg","fullHeight","plain","nonSelectableRaised","selectableRaised","selectedRaised","selectable","selected","undefined","CardBody","isFilled","cardBody","noFill","CardTitle","cardTitle","PackageIconConfig","name","height","width","svgPath","yOffset","xOffset","PackageIcon","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","useEffect","error","concat","__assign","n","arguments","apply","this","BaseInvTable","store","Cmp","Suspense","fallback","ScalprumComponent","history","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","WithReactRouterHistory","WithChromeHistory","chromeHistory","HistoryComponent","useMemo","AssignSystemsModal","_ref","_ref$patchSetState","patchSetState","setPatchSetState","intl","dispatch","useDispatch","systemsIDs","isAssignSystemsModalOpen","_useState","useState","_useState2","_slicedToArray","selectedPatchSet","setSelectedPatchSet","_useState3","_useState4","selectedPatchSetDetails","setSelectedPatchSetDetails","_useState5","_useState6","systemsNotManagedBySatellite","setSystemsNotManagedBySatellite","_useState7","_useState8","systemsLoading","setSystemsLoading","closeModal","filterSatelliteManagedSystems","keys","then","result","systemsManagedBySatelliteCount","React","Modal","variant","isOpen","title","formatMessage","messages","templateApply","onClose","actions","Button","key","isDisabled","onClick","systems","reduce","obj","item","updatePatchSets","inventory_ids","addNotification","patchSetAssignSystemsNotifications","success","_objectSpread","shouldRefresh","failure","labelsCancel","Stack","hasGutter","StackItem","templateSelect","systemCount","b","_len","chunks","Array","_key","templateSelectSatellite","_len2","_key2","Form","SelectExistingSets","selectedSets","selectCallback","templateOr","isPatchSetWizardOpen","filterSelectedActiveSystemIDs","templateCreate","injectIntl","PatchSetWrapper","isUnassignSystemsModalOpen","UnassignSystemsModal","unassignSystemsModalState","setUnassignSystemsModalOpen","PatchSetWizard","setBaselineState","filterSystemsWithoutSets","fetchSystems","limit","filter","stale","allSystemsWithPatchSet","systemID","_allSystemsWithPatchS","data","some","system","fetchIDs","_systemsNotManagedByS","renderUnassignModalMessages","bodyMessage","systemsCount","GridItem","_ref$unassignSystemsM","systemsWithPatchSet","setSystemWithPatchSet","handleModalToggle","handleModalClose","handleUnassignment","handleSystemsRemoval","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","unassignSystemFromPatchSet","sent","status","patchSetUnassignSystemsNotifications","stop","useUnassignSystemsHook","systemsWithoutPatchSetCount","textUnassignSystemsTitle","titleIconVariant","labelsRemove","Grid","Skeleton","Fragment","RemediationWizard","setRemediationOpen","AsyncComponent","setOpen","StatusCard","color","Icon","style","marginTop","Flex","flex","default","flexWrap","FlexItem","spacer","alignSelf","SystemsStatusReport","_ref2","_queryParams$filter2","_queryParams$filter2$","_queryParams$filter3","queryParams","_React$useState","_React$useState2","subtotals","setSubtotals","_useSelector","useSelector","_ref3","GlobalFilterStore","selectedTags","selectedGlobalTags","systemProfile","_queryParams$filter","os","_toConsumableArray","_result$meta","meta","_unused","fetchResource","Main","paddingBottom","span","lg","md","labelsStatusSystemsUpToDate","CheckCircleIcon","patched","packages_updatable","labelsStatusSystemsWithPatchesAvailable","unpatched","labelsStatusStaleSystems","ExclamationTriangleIcon","SystemsTable","openAssignSystemsModal","openUnassignSystemsModal","setSearchParams","activateRemediationModal","decodedParams","useStore","inventory","useRef","isRemediationLoading","setRemediationLoading","entities","rows","shallowEqual","totalItems","total","selectedRows","_ref4","areAllSelected","_ref5","SystemsStore","_ref6","hasTemplateAccess","usePermissionsWithContext","hasAccess","search","page","perPage","sort","_useRemoveFilter","useRemoveFilter","systemsListDefaultFilters","deleteFilters","filterConfig","buildFilterConfig","activeFiltersConfig","buildActiveFiltersConfig","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","systemSelectAction","_inventory$current","onRefreshData","timestamp","Date","now","onExport","useOnExport","csv","exportSystemsCSV","json","exportSystemsJSON","getEntities","useGetEntities","metadata","changeSystemsMetadata","tags","changeTags","remediationDataProvider","useRemediationDataProvider","selectedCount","arrayFromObj","bulkSelectConfig","useBulkSelectConfig","total_items","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","hostGroupFilter","operatingSystem","columns","defaultColumns","systemsColumnsMerger","systemsListColumns","showTags","customFilters","patchParams","paginationProps","onLoad","_ref7","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","modifyInventory","persistantParams","tableProps","actionResolver","row","systemsRowActions","canSelectAll","TableVariant","isStickyHeader","bulkSelect","exportConfig","actionsConfig","AsyncRemediationButton","remediationProvider","isLoading","label","titlesTemplateAssign","titlesTemplateRemoveMultipleButton","isRequired","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","isRemediationOpen","decodeQueryparams","toString","remediationIssues","setRemediationIssues","hasError","code","changeSystemsParams","clearInventoryReducer","_usePatchSetState","usePatchSetState","useActivateRemediationModal","has_systems","ErrorHandler","chrome","useChrome","updateDocumentTitle","titlesSystems","DEFAULT_PATCH_TITLE","Header","titlesPatchSystems","headerOUIA","SystemsMainContent","initialState","offset","state","loaded","createSystemsRows","modifyPackageSystems","lastAction","idToEvraMapping","packageEvraCache","forEach","available_evra","fromEntries","entries","map","createPackageSystemsRows","modifyTemplateDetailSystems","createPatchSetDetailRows","modifyAdvisorySystems","createAdvisorySystemsRows","inventoryModifier","action","newState","fetchRejected","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}