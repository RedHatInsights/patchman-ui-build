{"version":3,"file":"js/5645.4266521cda36996e12cf.js","mappings":"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","sources":["webpack:///./src/Utilities/Helpers.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js"],"sourcesContent":["/* eslint-disable camelcase */\nimport { Flex, FlexItem, Tooltip } from '@patternfly/react-core';\nimport {\n    BugIcon, FlagIcon, EnhancementIcon, InfoCircleIcon, SecurityIcon\n} from '@patternfly/react-icons';\nimport { SortByDirection } from '@patternfly/react-table';\nimport flatten from 'lodash/flatten';\nimport findIndex from 'lodash/findIndex';\nimport pickBy from 'lodash/pickBy';\nimport qs from 'query-string';\nimport React from 'react';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport messages from '../Messages';\nimport AdvisoriesIcon from '../PresentationalComponents/Snippets/AdvisoriesIcon';\nimport {\n    advisorySeverities,\n    defaultCompoundSortValues,\n    filterCategories,\n    multiValueFilters\n} from './constants';\nimport { intl } from './IntlProvider';\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { InsightsLink } from '@redhat-cloud-services/frontend-components/InsightsLink';\n\nexport const removeUndefinedObjectItems = (originalObject) => {\n    const newObject = JSON.parse(JSON.stringify(originalObject));\n    Object.keys(newObject).forEach(key => newObject[key] === undefined && delete newObject[key]);\n    return newObject;\n};\n\nexport const convertLimitOffset = (limit, offset) => {\n    return [offset / limit + 1, limit];\n};\n\nexport const transformPairs = (input, remediationIdentifier) => {\n    let issues = [];\n\n    const advisoriesNames = Object.keys(input?.data || {});\n    for (let i = 0; i < advisoriesNames.length; i++) {\n        if (input.data[advisoriesNames[i]][0] !== '') {\n            issues.push({\n                id: `${remediationIdentifier}:${advisoriesNames[i]}`,\n                description: advisoriesNames[i],\n                systems: input.data[advisoriesNames[i]]\n            });\n        }\n    }\n\n    return { issues };\n};\n\nexport const createSortBy = (header, values, offset, compoundSortValues = defaultCompoundSortValues) => {\n    if (values) {\n        let [column] = values;\n        let multiple = values.join();\n        let direction =\n            column[0] === '-' ? SortByDirection.desc : SortByDirection.asc;\n        Object.keys(compoundSortValues).forEach(col => {\n            Object.keys(compoundSortValues[col]).forEach(dir => {\n                if (compoundSortValues[col][dir] === multiple) {\n                    column = col;\n                    direction = dir;\n                }\n            });\n        });\n\n        column = column.replace(/^(-|\\+)/, '');\n        const index = findIndex(header, item => item.key === column);\n        let sort = {\n            index: index + offset,\n            direction\n        };\n        return sort;\n    }\n\n    return {};\n};\n\nexport const addOrRemoveItemFromSet = (targetObj, inputArr) => {\n    const inputObj = inputArr.reduce(\n        (obj, item) => ((obj[item.rowId] = item.value || undefined), obj),\n        {}\n    );\n    const result = { ...targetObj, ...inputObj };\n    return result;\n};\n\nexport const getNewSelectedItems = (selectedItems, currentItems) => {\n    let payload = [].concat(selectedItems).map(item => ({ rowId: item.id, value: item.selected }));\n    const mergedSelection = addOrRemoveItemFromSet(\n        currentItems,\n        payload\n    );\n\n    return pickBy(mergedSelection, v => !!v);\n};\n\n// for expandable rows only\nexport const getRowIdByIndexExpandable = (arrayOfObjects, index) => {\n    return arrayOfObjects[index / 2].id;\n};\n\nexport const getOffsetFromPageLimit = (page, limit) => {\n    return page * limit - limit;\n};\n\nexport const getLimitFromPageSize = limit => {\n    return limit;\n};\n\nexport function truncate(str, max, end) {\n    return str.length > max ? (\n        <React.Fragment>\n            {str.substring(0, max - 1)}\n            ...&nbsp;{end}\n        </React.Fragment>\n    ) : str;\n}\n\nconst findBullets = (description) => {\n    let substringIndex = description.search(/:/);\n    // + 2 accounts for the 2 new lines to separate the sentence from the start of the bullets\n    return substringIndex > 0\n        ? description.slice(0, substringIndex + 2) + preserveNewlines(description.substring(substringIndex + 2)) : description;\n};\n\nexport const truncateDescription = (description, wordLength, setWordLength) => (\n    truncate(findBullets(description), wordLength,\n        <a onClick={() => setWordLength(description.length)}>\n            {intl.formatMessage(messages.linksReadMore)}\n        </a>)\n);\n\nexport function createAdvisoriesIcons([rhea, rhba, rhsa, other], type = 'applicable') {\n    return (\n        <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n            {[rhea, rhba, rhsa].every(item => item === 0) &&\n                `No ${type} advisories`}\n            {rhsa !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Security advisories'} count={rhsa} Icon={SecurityIcon} />\n                </FlexItem>)}\n            {rhba !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Bug fixes'} count={rhba} Icon={BugIcon} />\n                </FlexItem>)}\n            {rhea !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Enhancements'} count={rhea} Icon={EnhancementIcon} />\n                </FlexItem>)}\n            {other !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Other'} count={other} Icon={FlagIcon} />\n                </FlexItem>)}\n        </Flex>\n    );\n}\n\nexport function createUpgradableColumn(updatableStatus) {\n    switch (updatableStatus) {\n        case 'None':\n            return intl.formatMessage(messages.labelsColumnsUpToApplicable);\n        case 'Applicable':\n            return intl.formatMessage(messages.labelsColumnsUpToInstallable);\n        case 'Installable':\n            return intl.formatMessage(messages.labelsColumnsUpgradable);\n    }\n}\n\nexport function getSeverityById(id) {\n    return (\n        advisorySeverities.find(item => item.value === id) ||\n        advisorySeverities[0]\n    );\n}\n\nexport const createPackagesColumn = (packageCount, systemID) => (\n    <InsightsLink to={{\n        pathname: `/systems/${systemID}`,\n        state: { tab: 'packages' }\n    }}>\n        {packageCount}\n    </InsightsLink>\n);\n\nexport function handlePatchLink(type, name, body) {\n    if (location.href.indexOf('inventory') === -1) {\n        return (\n            <InsightsLink to={`/${type}/${name}`}>\n                {body === undefined ? name : body}\n            </InsightsLink>\n        );\n    } else {\n        return (\n            <a href={`${document.baseURI}insights/patch/${type}/${name}`}>\n                {body || name}\n            </a>\n        );\n    }\n}\n\nexport const arrayFromObj = items =>\n    Object.values(items).filter(value => value);\n\nexport const remediationProvider = (issues, systems, remediationIdentifier) => {\n    issues = [].concat(issues);\n    systems = [].concat(systems);\n    return issues.length && systems.length\n        ? {\n            issues: issues.map(item => ({\n                id: `${remediationIdentifier}:${item}`,\n                description: item\n            })),\n            systems\n        }\n        : false;\n};\n\nexport const remediationProviderWithPairs = (issuePairs, transformFunc, remediationIdentifier) => {\n    return issuePairs ? transformFunc(issuePairs, remediationIdentifier) : false;\n};\n\nexport const getFilterValue = (category, key) => {\n    const filterCategory = filterCategories[category];\n    if (filterCategory) {\n        const filterOption = /* some filters don't have constant values */\n            (filterCategory?.values || []).find((item) => item.value === key);\n        return filterOption || { apiValue: key };\n    } else {\n        return { apiValue: key };\n    }\n};\n\nexport const encodeParams = (parameters, shouldTranslateKeys) => {\n    const calculateWorkloads = ({ sap_sids, ...restOfProfile }) => {\n        let result = '';\n        Object.entries(generateFilter({ system_profile: restOfProfile })).forEach(entry => {\n            const [key, value] = entry;\n            result = `${result}&${key}=${value}`;\n        });\n\n        const SIDsFilter = sap_sids?.map(sid => `filter[system_profile][sap_sids][in]=${sid}`).join('&');\n\n        return result.concat(sap_sids ? `&${SIDsFilter}#SIDs=${sap_sids.join(',')}` : '');\n    };\n\n    const flattenFilters = filter => {\n        let result = {};\n        filter &&\n            Object.entries(filter).forEach(item => {\n                let [key, value] = item;\n                value = shouldTranslateKeys && getFilterValue(key, value).apiValue || value;\n                const operator = ([].concat(value).length > 1 || multiValueFilters.includes(key)) ? 'in:' : '';\n                result = {\n                    ...result,\n                    [`filter[${key}]`]: `${operator}${value.toString()}`\n                };\n            });\n        return result;\n    };\n\n    let { filter, systemProfile = {}, group_name, ...allParams } = parameters;\n\n    allParams = { ...allParams, ...flattenFilters({ ...filter, ...(group_name ? { group_name } : {}) }) };\n    let params = [];\n    Object.keys(allParams).forEach(key => {\n        const argKey = encodeURIComponent(key);\n        const argValue = encodeURIComponent(allParams[key]);\n\n        if (!['', undefined, null].some(value => [argValue, key].includes(value))) {\n            if (!['selectedTags', 'systemProfile'].includes(key)) {\n                params.push(argKey.concat('=').concat(argValue));\n            } else if (key === 'selectedTags') {\n                params.push.apply(params, allParams[key]);\n            }\n        }\n    });\n\n    const workloadsFilter = (Object.keys(systemProfile).length > 0)\n        && calculateWorkloads(systemProfile) || '';\n\n    return '?'.concat(params.join('&')).concat(workloadsFilter);\n};\n\nexport const encodeApiParams = parameters => {\n    return encodeParams(parameters, true);\n};\n\nexport const encodeURLParams = parameters => {\n    delete parameters.id;\n    let urlParams = { ...parameters };\n    delete urlParams.selectedTags;\n    return encodeParams(removeUndefinedObjectItems(urlParams), false);\n};\n\nexport const decomposeFilterValue = filterValue => {\n    if (typeof(filterValue) === 'string' && filterValue.startsWith('in:')) {\n        const values = filterValue.slice(3);\n        return values.split(',');\n    }\n\n    return filterValue;\n};\n\nexport const decodeQueryparams = queryString => {\n    const parsed = qs.parse(queryString);\n    const res = {};\n    Object.keys(parsed).forEach(key => {\n        if (!key.startsWith('filter[system_profile]')) {\n            const convertedToInt = parseInt(parsed[key], 10);\n            const typeHandledParam = isNaN(convertedToInt) ? parsed[key] : convertedToInt;\n            const bracketIndex = key.search(/\\[.*\\]/);\n            if (bracketIndex > 0) {\n                const objParent = key.slice(0, bracketIndex);\n                const objKey = key.slice(bracketIndex + 1, -1);\n                res[objParent] = {\n                    ...res[objParent],\n                    [objKey]: decomposeFilterValue(typeHandledParam)\n                };\n            } else {\n                res[key] = typeHandledParam;\n            }\n        }\n    });\n    return res;\n};\n\nexport const buildFilterChips = (filters, search, searchChipLabel = 'Search') => {\n\n    let filterConfig = [];\n    const buildChips = (filters, category) => {\n        if (multiValueFilters.includes(category)) {\n            const filterValues = filters[category] && (typeof(filters[category]) === 'string' && filters[category].split(',')\n                || filters[category]) || [];\n            return filterValues.map(value => ({\n                name: value,\n                id: category,\n                value\n            }));\n        } else {\n            const { values } = filterCategories[category];\n\n            if (!filters[category]) {\n                return [];\n            }\n\n            return [].concat(filters[category]).map(filterValue => {\n                const match = values.find(\n                    item =>\n                        item.value.toString() === filterValue.toString()\n                );\n                return {\n                    name: match.label,\n                    value: filterValue,\n                    id: match.value\n                };\n            });\n        }\n    };\n\n    const processFilters = () => {\n        let categories = Object.keys(filters).filter(\n            item =>\n                filters[item] !== '' && [].concat(filters[item]).length !== 0\n        );\n        filterConfig = filterConfig.concat(\n            categories.map(category => {\n                const label = category === 'installed_evra' && 'Package version' || filterCategories[category].label;\n                return {\n                    category: label,\n                    id: category,\n                    chips: buildChips(filters, category)\n                };\n            })\n        );\n    };\n\n    const processSearch = () => {\n        filterConfig = filterConfig.concat([\n            {\n                category: searchChipLabel,\n                id: 'search',\n                chips: [\n                    {\n                        name: search,\n                        value: search\n                    }\n                ]\n            }\n        ]);\n    };\n\n    filters && processFilters();\n    search && processSearch();\n\n    return filterConfig;\n};\n\nexport const buildApiFilters = (patchFilters, inventoryFilters) => (\n    {\n        ...patchFilters,\n        ...(Array.isArray(inventoryFilters.hostGroupFilter) && inventoryFilters.hostGroupFilter.length > 0\n            ? { group_name: inventoryFilters.hostGroupFilter }\n            : {}),\n        ...inventoryFilters?.osFilter?.length > 0 ? {\n            os: inventoryFilters.osFilter.map(({ value }) => 'RHEL ' + value).join(',')\n        } : {}\n    });\n\nexport const changeListParams = (oldParams, newParams) => {\n    const newState = { ...oldParams, ...newParams };\n    const offsetResetParams = ['filter', 'search', 'limit', 'selectedTags'];\n    if (offsetResetParams.some(item => newParams.hasOwnProperty(item))) {\n        newState.offset = 0;\n    }\n\n    if (newParams.hasOwnProperty('filter')) {\n        newState.filter = { ...oldParams.filter, ...newParams.filter };\n\n        //we need explicitly remove 'undefined' filters for safety\n        Object.keys(newState.filter).forEach(\n            (key) =>\n                (newState.filter[key] === undefined ||\n                    newState.filter[key] === '') &&\n                delete newState.filter[key]\n        );\n    }\n\n    if (newState.hasOwnProperty('tags')) {\n        newState && delete newState.tags;\n    }\n\n    return newState;\n};\n\nexport function subtractDate(days) {\n    const date = new Date();\n    date.setDate(date.getDate() - days);\n    return date.toISOString();\n}\n\nexport function preserveNewlines(input) {\n    return input && input.replace(\n        new RegExp('\\\\n\\\\n(?=.*[\\\\n\\\\n])', 'g'),\n        '\\n'\n    );\n}\n\nexport function sortCves(cves, index, direction) {\n\n    const sortedCves = cves.sort(\n        ({ cells: aCells }, { cells: bCells }) => {\n            const aCell = aCells[index].value || aCells[index].title;\n            const bCell = bCells[index].value || bCells[index].title;\n\n            const stringA = aCell.toString().toUpperCase();\n            const stringB = bCell.toString().toUpperCase();\n\n            return stringA.localeCompare(stringB);\n        }\n    );\n\n    return {\n        sortBy: { index, direction },\n        sortedCves: direction === SortByDirection.asc ? sortedCves : sortedCves.reverse()\n    };\n\n}\n\nexport const createOSColumn = ({ osName, rhsm }) => !rhsm ? osName : (\n    <Tooltip\n        content={\n            intl.formatMessage(messages.textLockVersionTooltip, { lockedVersion: rhsm })\n        }\n    >\n        <Flex flex={{ default: 'inlineFlex' }}>\n            <FlexItem spacer={{ default: 'spacerSm' }}>{osName}</FlexItem>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n                <InfoCircleIcon size=\"sm\" color={'var(--pf-global--info-color--100)'} />\n            </FlexItem>\n        </Flex>\n    </Tooltip>\n);\n\nexport const removeUndefinedObjectKeys = (selectedRows) => Object.keys(selectedRows).filter(row => selectedRows[row]);\n\nexport const prepareEntitiesParams = (parameters) => {\n    const offset = parameters.offset || getOffsetFromPageLimit(parameters.page || 1, parameters.perPage || 20);\n    const limit = parameters.limit || getLimitFromPageSize(parameters.perPage || 20);\n\n    const apiParams = { ...parameters, offset, limit };\n\n    //we need explicitly remove 'undefined' parameters for safety\n    return removeUndefinedObjectItems(apiParams);\n};\n\nexport const filterRemediatableSystems = result => ({\n    data: result?.data.filter(system => {\n        const {\n            packages_installed: installedPckg,\n            packages_updatable: updatablePckg,\n            rhba_count: rhba,\n            rhsa_count: rhsa,\n            rhea_count: rhea\n        } = system.attributes || {};\n\n        const isDisabled = updatablePckg === 0 || [installedPckg, rhba, rhsa, rhea].every(count => count === 0);\n\n        return !isDisabled;\n    })\n});\n\nexport const filterRemediatablePackageSystems = result => ({ data: result.data.filter(system => system.updatable) });\n\nexport const persistantParams = (patchParams, decodedParams) => {\n    const persistantParams = { ...patchParams, ...decodedParams };\n\n    if (typeof persistantParams.sort === 'string' && persistantParams.sort.match(/-?groups/)) {\n        // \"group_name\" is the sort key used by Inventory (requires translation between Patch and Inventory)\n        persistantParams.sort = persistantParams.sort.replace('groups', 'group_name');\n    }\n\n    return (\n        {\n            page: Number(persistantParams.page || 1),\n            perPage: Number(persistantParams.perPage || 20),\n            ...(persistantParams.sort && {\n                sortBy: {\n                    key: persistantParams.sort.replace(/^-/, ''),\n                    direction: persistantParams.sort.match(/^-/) ? 'desc' : 'asc'\n                }\n            })\n        }\n    );\n};\n\nexport const handleLongSynopsis = (synopsis) => {\n    return (\n        <LinesEllipsis\n            text={synopsis}\n            maxLine='1'\n            ellipsis='(...)'\n            trimRight\n            basedOn='letters'\n        />\n    );\n};\n\nexport const isRHAdvisory = (name) => {\n    return /^(RHEA|RHBA|RHSA)/.test(name);\n};\n\nexport const buildTagString = (tag) => {\n    return `${tag.category}/${tag.values?.tagKey}=${tag.value?.tagValue}`;\n};\n\nexport const mapGlobalFilters = (tags, SIDs, workloads = {}) => {\n    let tagsInUrlFormat = [];\n    tags && tags.forEach((tag, index) => {\n        let tagGruop = tag;\n        if (typeof tag === 'object') {\n            tagGruop = tag?.values.map(value => `tags=${encodeURIComponent(`${tag.category}/${value.tagKey}=${value.value}`)}`);\n            tagsInUrlFormat[index] = Array.isArray(tagGruop) && flatten(tagGruop) || tagGruop;\n        }\n        else {\n            tagsInUrlFormat[index] = `tags=${encodeURIComponent(tagGruop)}`;\n        }\n\n    });\n\n    const globalFilterConfig = { selectedTags: [], systemProfile: {} };\n\n    globalFilterConfig.systemProfile = {\n        ...workloads?.SAP?.isSelected && { sap_system: true },\n        ...workloads?.['Ansible Automation Platform']?.isSelected\n        && { ansible: { controller_version: 'not_nil' } },\n        ...workloads?.['Microsoft SQL']?.isSelected\n        && { mssql: { version: 'not_nil' } },\n        ...SIDs?.length > 0 && { sap_sids: SIDs }\n    };\n\n    tagsInUrlFormat && (globalFilterConfig.selectedTags = tagsInUrlFormat);\n\n    return globalFilterConfig;\n\n};\n\nexport const convertIsoToDate = (isoDate) => {\n    if (!isoDate) {\n        return '';\n    }\n\n    const dateObject = new Date(isoDate);\n    return `${dateObject.getFullYear()}-${(dateObject.getMonth() + 1).toString().padStart(2, '0')}` +\n        `-${dateObject.getDate().toString().padStart(2, '0')}`;\n};\n\n// 2023-03-05 -> 05 Mar 2023\n// 2023-03-22T20:00:00-04:00 (ISO format) -> 23 Mar 2023\nexport const templateDateFormat = (dateString) => {\n    if (!dateString) {\n        return 'N/A';\n    }\n\n    // handle ISO format - convert timezone to GMT and slice off the time\n    if (dateString.includes('T')) {\n        const gmtTime = (new Date(dateString)).toISOString();\n        [dateString] = gmtTime.split('T');\n    }\n\n    const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n    const [year, month, day] = dateString.split('-');\n\n    return `${day} ${MONTHS[parseInt(month) - 1]} ${year}`;\n};\n\nexport const filterSelectedActiveSystemIDs = (selectedSystemsObject) => {\n    const formValueSystemIDs = [];\n    if (typeof selectedSystemsObject === 'object') {\n        Object.keys(selectedSystemsObject).forEach((key) => {\n            if (selectedSystemsObject[key]) {\n                formValueSystemIDs.push(key);\n            }\n        });\n    }\n\n    return formValueSystemIDs;\n};\n\nexport const buildSelectedSystemsObj = (systemsIDs, formValueSystems) => {\n\n    const mergedSystems = [...systemsIDs, ...filterSelectedActiveSystemIDs(formValueSystems)];\n\n    const assignedSystemsObject = mergedSystems?.reduce((object, system) => {\n        object[system] = true;\n        return object;\n    }, {});\n\n    return assignedSystemsObject;\n};\n\nexport const objUndefinedToFalse = (object) =>\n    Object.keys(object).reduce((modifiedObject, key) => {\n        modifiedObject[key] = object[key] === undefined ? false : object[key];\n        return modifiedObject;\n    }, {});\n\nexport const objOnlyWithTrue = (object) =>\n    Object.keys(Object.fromEntries(Object.entries(object).filter(([, v]) => v === true)));\n\nexport const isObject = (variable) => {\n    return (typeof variable === 'object' && variable !== null) ? true : false;\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nimport { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\nimport messages from '../locales/en.json';\n\nconst Patchman = () => (<div className=\"patch-root\">\n    <IntlProvider locale={navigator.language.slice(0, 2)} messages={messages}>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </IntlProvider>\n</div>\n);\n\nexport default Patchman;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Patchman from './AppEntry';\n\nReactDOM.render(\n    <Patchman />,\n    document.getElementById('root')\n);\n"],"names":["removeUndefinedObjectItems","originalObject","newObject","JSON","parse","stringify","Object","keys","forEach","key","undefined","convertLimitOffset","limit","offset","createSortBy","header","values","compoundSortValues","arguments","length","defaultCompoundSortValues","column","_slicedToArray","multiple","join","direction","SortByDirection","desc","asc","col","dir","replace","index","findIndex","item","addOrRemoveItemFromSet","targetObj","inputArr","inputObj","reduce","obj","rowId","value","_objectSpread","getNewSelectedItems","selectedItems","currentItems","payload","concat","map","id","selected","mergedSelection","pickBy","v","getRowIdByIndexExpandable","arrayOfObjects","getOffsetFromPageLimit","page","getLimitFromPageSize","truncate","str","max","end","React","substring","truncateDescription","description","wordLength","setWordLength","input","substringIndex","search","slice","RegExp","findBullets","onClick","intl","formatMessage","messages","linksReadMore","createAdvisoriesIcons","_ref","_ref2","rhea","rhba","rhsa","other","type","Flex","flex","default","style","flexWrap","every","FlexItem","spacer","AdvisoriesIcon","tooltipText","count","Icon","SecurityIcon","BugIcon","EnhancementIcon","FlagIcon","createUpgradableColumn","updatableStatus","labelsColumnsUpToApplicable","labelsColumnsUpToInstallable","labelsColumnsUpgradable","getSeverityById","advisorySeverities","find","createPackagesColumn","packageCount","systemID","InsightsLink","to","pathname","state","tab","handlePatchLink","name","body","location","href","indexOf","document","baseURI","arrayFromObj","items","filter","remediationProvider","issues","systems","remediationIdentifier","remediationProviderWithPairs","issuePairs","transformFunc","encodeParams","parameters","shouldTranslateKeys","_parameters$systemPro","systemProfile","group_name","allParams","_objectWithoutProperties","_excluded2","result","entries","_item","category","filterCategory","filterCategories","apiValue","getFilterValue","operator","multiValueFilters","includes","_defineProperty","toString","flattenFilters","params","argKey","encodeURIComponent","argValue","some","push","apply","workloadsFilter","_ref3","sap_sids","restOfProfile","_excluded","generateFilter","system_profile","entry","_entry","SIDsFilter","sid","calculateWorkloads","encodeApiParams","encodeURLParams","urlParams","selectedTags","decodeQueryparams","queryString","parsed","qs","res","startsWith","convertedToInt","parseInt","typeHandledParam","isNaN","bracketIndex","objParent","objKey","filterValue","split","buildFilterChips","filters","categories","searchChipLabel","filterConfig","buildChips","match","label","chips","buildApiFilters","patchFilters","inventoryFilters","_inventoryFilters$osF","Array","isArray","hostGroupFilter","osFilter","os","_ref4","changeListParams","oldParams","newParams","newState","hasOwnProperty","tags","subtractDate","days","date","Date","setDate","getDate","toISOString","sortCves","cves","sortedCves","sort","_ref5","_ref6","aCells","cells","bCells","aCell","title","bCell","stringA","toUpperCase","stringB","localeCompare","sortBy","reverse","createOSColumn","_ref7","osName","rhsm","Tooltip","content","textLockVersionTooltip","lockedVersion","InfoCircleIcon","size","color","removeUndefinedObjectKeys","selectedRows","row","prepareEntitiesParams","perPage","apiParams","filterRemediatablePackageSystems","data","system","updatable","persistantParams","patchParams","decodedParams","Number","handleLongSynopsis","synopsis","LinesEllipsis","text","maxLine","ellipsis","trimRight","basedOn","isRHAdvisory","test","mapGlobalFilters","SIDs","_workloads$SAP","_workloads$AnsibleAu","_workloads$Microsoft","workloads","tagsInUrlFormat","tag","tagGruop","_typeof","tagKey","flatten","globalFilterConfig","SAP","isSelected","sap_system","ansible","controller_version","mssql","version","convertIsoToDate","isoDate","dateObject","getFullYear","getMonth","padStart","templateDateFormat","dateString","_gmtTime$split","_dateString$split","_dateString$split2","year","month","day","filterSelectedActiveSystemIDs","selectedSystemsObject","formValueSystemIDs","buildSelectedSystemsObj","systemsIDs","formValueSystems","mergedSystems","_toConsumableArray","object","objUndefinedToFalse","modifiedObject","objOnlyWithTrue","fromEntries","_ref9","isObject","variable","className","IntlProvider","locale","navigator","language","Provider","store","App","ReactDOM","Patchman","getElementById"],"sourceRoot":""}