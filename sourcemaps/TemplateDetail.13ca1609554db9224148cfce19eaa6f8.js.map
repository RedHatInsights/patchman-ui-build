{"version":3,"file":"js/TemplateDetail.301ec250579474b54d3c.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/SmartComponents/Modals/DeleteSetModal.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./src/SmartComponents/PatchSet/PatchSetAssets.js","webpack:///./src/SmartComponents/PatchSetDetail/PatchSetDetail.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Checkbox, Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst DeleteSetModal = ({ isModalOpen, setModalOpen, templateName, onConfirm }) => {\n    const [isCheckboxChecked, setCheckboxChecked] = useState(false);\n\n    const onClose = () => {\n        setModalOpen(false);\n        setCheckboxChecked(false);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.titlesTemplateDeleteModalTitle)}\n            titleIconVariant=\"warning\"\n            isOpen={isModalOpen}\n            onClose={onClose}\n            variant=\"small\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={() => {onClose(); onConfirm();}} isDisabled={!isCheckboxChecked}>\n                    {intl.formatMessage(messages.labelsDelete)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {intl.formatMessage(messages.titlesTemplateDeleteModalText, { templateName, b: (...chunks) => <b>{chunks}</b> })}\n            <Checkbox\n                className=\"pf-u-mt-md\"\n                isChecked={isCheckboxChecked}\n                checked={isCheckboxChecked}\n                onChange={(value) => setCheckboxChecked(value)}\n                label={intl.formatMessage(messages.titlesTemplateDeleteModalCheckbox)}\n                id=\"template-delete-modal-checkbox\"\n            />\n        </Modal>\n    );\n};\n\nDeleteSetModal.propTypes = {\n    isModalOpen: propTypes.bool,\n    setModalOpen: propTypes.func,\n    templateName: propTypes.string,\n    onConfirm: propTypes.func\n};\n\nexport default DeleteSetModal;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../../Utilities/constants';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalToggle(true);\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","import React from 'react';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport {\n    EllipsisVIcon\n} from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const CreatePatchSetButton = (setPatchSetState, hasAccess) => () =>\n    !hasAccess ?\n        <Tooltip content='For editing access, contact your administrator.'>\n            <Button key='createButton' isAriaDisabled >\n                {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n            </Button>\n        </Tooltip>\n        :\n        (<Button key='createButton' onClick={() => setPatchSetState({ isPatchSetWizardOpen: true })}>\n            {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n        </Button>);\n\nexport const patchSetColumns = [\n    {\n        key: 'name',\n        title: 'Name',\n        transforms: [sortable]\n    },\n    {\n        key: 'systems',\n        title: 'Systems applied',\n        transforms: [sortable]\n    },\n    {\n        key: 'last_edited',\n        title: 'Last edited',\n        transforms: [sortable]\n    },\n    {\n        key: 'published',\n        title: 'Published',\n        transforms: [sortable]\n    },\n    {\n        key: 'creator',\n        title: 'Created by',\n        transforms: [sortable]\n    }\n];\n\nexport const patchSetRowActions = (openPatchSetEditModal, handlePatchSetDelete) => [\n    {\n        title: intl.formatMessage(messages.labelsButtonEditTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            openPatchSetEditModal(rowData?.id);\n        }\n    },\n    {\n        title: intl.formatMessage(messages.labelsButtonRemoveTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            handlePatchSetDelete(rowData);\n        }\n    }\n];\n\nexport const patchSetDetailRowActions = (handleSystemUnassign) => [\n    {\n        title: intl.formatMessage(messages.textUnassignSystemsShortTitle),\n        onClick: (_event, _rowId, rowData) => {\n            handleSystemUnassign(rowData);\n        }\n    }\n\n];\n\nexport const CustomActionsToggle = () => <Tooltip content='For editing access, contact your administrator.'>\n    <Button\n        isAriaDisabled\n        variant=\"plain\"\n        aria-label=\"plain kebab\"\n    >\n        <EllipsisVIcon />\n    </Button>\n</Tooltip>;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect, useState, Fragment, useRef } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { NoAppliedSystems } from '../../PresentationalComponents/Snippets/EmptyStates';\nimport { useDeepCompareEffect, useGetEntities } from '../../Utilities/Hooks';\nimport {\n    changePatchSetDetailsSystemsMetadata,\n    changePatchSetDetailsSystemsParams,\n    changeTags,\n    clearTemplateDetail,\n    fetchPatchSetSystemsNoFiltersAction,\n    fetchTemplateDetail\n} from '../../store/Actions/Actions';\nimport {\n    Bullseye,\n    Dropdown,\n    DropdownItem,\n    DropdownPosition,\n    DropdownToggle,\n    Skeleton,\n    Spinner,\n    Text,\n    TextContent\n} from '@patternfly/react-core';\nimport DeleteSetModal from '../Modals/DeleteSetModal';\nimport { deletePatchSet, fetchPatchSetSystems } from '../../Utilities/api';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { patchSetDeleteNotifications } from '../../Utilities/constants';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { decodeQueryparams, encodeURLParams, persistantParams } from '../../Utilities/Helpers';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport { patchSetDetailRowActions } from '../PatchSet/PatchSetAssets';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport UnassignSystemsModal from '../Modals/UnassignSystemsModal';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { templateSystemsColumnsMerger } from '../../Utilities/SystemsHelpers';\nimport { combineReducers } from 'redux';\nimport { defaultReducers } from '../../store';\nimport { inventoryEntitiesReducer, modifyTemplateDetailSystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { systemsListColumns } from '../Systems/SystemsListAssets';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst PatchSetDetail = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const store = useStore();\n    const inventory = useRef(null);\n\n    const patchSetId = history.location.pathname.split('/')[2];\n\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [isHeaderDropdownOpen, setHeaderDropdownOpen] = useState(false);\n    const [isDeleteConfirmModalOpen, setDeleteConfirmModalOpen] = useState(false);\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        systemsIDs: [],\n        shouldRefresh: false\n    });\n\n    const templateDetails = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore\n    );\n\n    const isHeaderLoading = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore?.status?.isLoading ?? true\n    );\n\n    const detailStatus = useSelector(\n        ({ PatchSetDetailStore }) => PatchSetDetailStore.status\n    );\n\n    const systemStatus = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.queryParams || {}\n    );\n\n    const templateHasSystemsLoading = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.templateHasSystemsLoading\n    );\n\n    const templateHasSystems = useSelector(\n        ({ PatchSetDetailSystemsStore }) => PatchSetDetailSystemsStore?.templateHasSystems\n    );\n\n    const { hasAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n\n    const patchSetName = templateDetails.data.attributes.name;\n\n    const apply = (params) => {\n        dispatch(changePatchSetDetailsSystemsParams(params));\n    };\n\n    const openPatchSetAssignWizard = () => {\n        setPatchSetState({\n            ...patchSetState,\n            isPatchSetWizardOpen: true\n        });\n    };\n\n    const refreshTable = () => {\n        // timestamp is used to force inventory to refresh\n        // if it wasn't there inventory might ignore request to refresh because parameters are the same\n        inventory?.current?.onRefreshData({ timestamp: Date.now() });\n\n        dispatch(fetchTemplateDetail(patchSetId));\n    };\n\n    useEffect(() => {\n        dispatch(fetchPatchSetSystemsNoFiltersAction({ id: patchSetId, limit: 1 }));\n\n        return () => {\n            dispatch(clearTemplateDetail());\n        };\n    }, []);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh === true) {\n            refreshTable();\n            setPatchSetState({ ...patchSetState, shouldRefresh: false });\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n\n            dispatch(fetchTemplateDetail(patchSetId));\n\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const openSystemUnassignModal = (rowData) => {\n        setPatchSetState({ ...patchSetState, isUnassignSystemsModalOpen: true, systemsIDs: [rowData.id] });\n    };\n\n    const deleteSet = () => {\n        deletePatchSet(patchSetId).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).success));\n            history.push('/templates');\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetName).error));\n        });\n    };\n\n    const applyMetadata = (metadata) => {\n        dispatch(changePatchSetDetailsSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const getEntities = useGetEntities(\n        fetchPatchSetSystems,\n        apply,\n        { id: patchSetId },\n        history,\n        applyMetadata,\n        applyGlobalFilter\n    );\n\n    const dropdownItems = [\n        <DropdownItem\n            key=\"edit-patch-set\"\n            component=\"button\"\n            onClick={() => openPatchSetAssignWizard()}\n        >\n            {intl.formatMessage(messages.labelsButtonEditTemplate)}\n        </DropdownItem>,\n        <DropdownItem\n            key=\"delete-patch-set\"\n            component=\"button\"\n            onClick={() => setDeleteConfirmModalOpen(true)}\n        >\n            {intl.formatMessage(messages.labelsButtonRemoveTemplate)}\n        </DropdownItem>\n    ];\n\n    const decodedParams = decodeQueryparams(history.location.search);\n\n    const { systemProfile, selectedTags, filter, search, page, perPage, sort } = queryParams;\n\n    return (\n        detailStatus?.hasError\n            ? <ErrorHandler code={detailStatus?.code} />\n            : <Fragment>\n                <DeleteSetModal\n                    templateName={patchSetName}\n                    isModalOpen={isDeleteConfirmModalOpen}\n                    setModalOpen={setDeleteConfirmModalOpen}\n                    onConfirm={deleteSet}\n                />\n                {patchSetState.isPatchSetWizardOpen &&\n                    <PatchSetWizard\n                        systemsIDs={patchSetState.systemsIDs}\n                        setBaselineState={setPatchSetState}\n                        patchSetID={patchSetId}\n                    />}\n                <UnassignSystemsModal\n                    unassignSystemsModalState={patchSetState}\n                    setUnassignSystemsModalOpen={setPatchSetState}\n                />\n                <Header\n                    title={isHeaderLoading ? <Skeleton style={{ width: 300 }} /> : patchSetName}\n                    headerOUIA={'template-details'}\n                    breadcrumbs={[\n                        {\n                            title: intl.formatMessage(messages.templateDetailHeaderBreadcrumb),\n                            to: '/templates',\n                            isActive: false\n                        },\n                        {\n                            title: isHeaderLoading ? <Skeleton style={{ width: 150 }} /> : patchSetName,\n                            isActive: true\n                        }\n                    ]}\n                    actions={\n                        <Dropdown\n                            position={DropdownPosition.right}\n                            onSelect={() => {\n                                setHeaderDropdownOpen(false);\n                                document.getElementById('patch-set-detail-header-kebab').focus();\n                            }}\n                            toggle={\n                                <DropdownToggle\n                                    id=\"patch-set-detail-header-kebab\"\n                                    className=\"pf-u-mr-xl\"\n                                    onToggle={(isOpen) => setHeaderDropdownOpen(isOpen)}\n                                    style={{ minWidth: 150 }}\n                                >\n                                    {intl.formatMessage(messages.labelsActions)}\n                                </DropdownToggle>\n                            }\n                            isOpen={isHeaderDropdownOpen}\n                            dropdownItems={dropdownItems}\n                        />\n                    }\n                >\n                    <table border=\"0\" style={{ marginTop: 8 }}>\n                        <tbody>\n                            <tr>\n                                <td style={{ width: 300 }}>{intl.formatMessage(messages.templateDetailTableDescription)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 300 }} />\n                                        : templateDetails.data.attributes.description\n                                        || intl.formatMessage(messages.titlesTemplateNoDescription)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableUpToDate)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.config.to_time)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableCreatedBy)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : templateDetails.data.attributes.creator}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTablePublished)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.published)}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>{intl.formatMessage(messages.templateDetailTableLastEdited)}</td>\n                                <td>\n                                    {isHeaderLoading\n                                        ? <Skeleton style={{ width: 100 }} />\n                                        : processDate(templateDetails.data.attributes.last_edited)}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </Header>\n                <Main>\n                    <TextContent>\n                        <Text component=\"h2\" className=\"pf-u-mb-md\">\n                            {intl.formatMessage(messages.templateDetailTableTitle)}\n                        </Text>\n                    </TextContent>\n                    {templateHasSystemsLoading\n                        ? (\n                            <Bullseye>\n                                <Spinner size=\"xl\" />\n                            </Bullseye>\n                        ) : templateHasSystems\n                            ? systemStatus.hasError\n                                ? <ErrorHandler code={systemStatus.code} />\n                                : <InventoryTable\n                                    ref={inventory}\n                                    isFullView\n                                    autoRefresh\n                                    initialLoading\n                                    hideFilters={{ all: true }}\n                                    columns={(defaultColumns) => templateSystemsColumnsMerger(defaultColumns)}\n                                    showTags\n                                    onLoad={({ mergeWithEntities }) => {\n                                        store.replaceReducer(combineReducers({\n                                            ...defaultReducers,\n                                            ...mergeWithEntities(\n                                                inventoryEntitiesReducer(systemsListColumns(true), modifyTemplateDetailSystems),\n                                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                                            )\n                                        }));\n                                    }}\n                                    customFilters={{\n                                        patchParams: {\n                                            filter,\n                                            systemProfile,\n                                            selectedTags\n                                        }\n                                    }}\n                                    paginationProps={{\n                                        isDisabled: totalItems === 0\n                                    }}\n                                    getEntities={getEntities}\n                                    tableProps={{\n                                        canSelectAll: true,\n                                        variant: TableVariant.compact,\n                                        className: 'patchCompactInventory',\n                                        isStickyHeader: true,\n                                        actionResolver: () => hasAccess ? patchSetDetailRowActions(openSystemUnassignModal) : []\n                                    }}\n                                    hasCheckbox={false} /* TODO: Remove this when implementing bulk actions */\n                                />\n                            : <NoAppliedSystems onButtonClick={() => openPatchSetAssignWizard()} />}\n                </Main>\n            </Fragment>\n    );\n};\n\nexport default PatchSetDetail;\n","import { createAdvisorySystemsRows, createSystemsRows, createPatchSetDetailRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows, fetchRejected } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state, lastAction) => {\n    // this is pretty scuffed, but trust me it cannot be solved more elegantly because\n    // single item select actions are triggered by Inventory and contain only system id\n    // but we also need to match available_evra for each selected system for remediations\n    // this does not happen with bulk select action because they are implemented by Patchman\n    // the id-evra mapping is cached to minimize O(n^2) time complexity of id-evra matching\n    if (lastAction === 'SELECT_ENTITY') {\n        let idToEvraMapping = state.packageEvraCache;\n\n        if (idToEvraMapping === undefined) {\n            idToEvraMapping = {};\n            state.rows.forEach(row => idToEvraMapping[row.id] = row.available_evra);\n            state.packageEvraCache = idToEvraMapping;\n        }\n\n        state.selectedRows = state.selectedRows ? Object.fromEntries(\n            Object.entries(state.selectedRows).map(([id, value]) =>\n                value === true ? [id, idToEvraMapping[id]] : [id, value]\n            )\n        ) : state.selectedRows;\n    }\n\n    if (lastAction === 'LOAD_ENTITIES_FULFILLED') {\n        state.packageEvraCache = undefined;\n    }\n\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyTemplateDetailSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createPatchSetDetailRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyAdvisorySystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createAdvisorySystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState, action.type);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection, action.type);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["_a","component","props","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","error","concat","children","__assign","assign","n","arguments","apply","this","BaseInvTable","history","useHistory","store","Cmp","className","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","DeleteSetModal","_ref","isModalOpen","setModalOpen","templateName","onConfirm","_useState","useState","_useState2","_slicedToArray","isCheckboxChecked","setCheckboxChecked","onClose","React","Modal","title","intl","messages","titleIconVariant","isOpen","variant","actions","Button","key","onClick","isDisabled","b","_len","chunks","Array","_key","Checkbox","isChecked","checked","onChange","value","label","id","renderUnassignModalMessages","bodyMessage","systemsCount","GridItem","formatMessage","UnassignSystemsModal","_ref$unassignSystemsM","unassignSystemsModalState","setUnassignSystemsModalOpen","systemsIDs","isUnassignSystemsModalOpen","systemsWithPatchSet","setSystemWithPatchSet","_useState3","_useState4","systemsLoading","setSystemsLoading","handleModalToggle","shouldRefresh","handleModalClose","handleUnassignment","dispatch","useDispatch","handleSystemsRemoval","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","unassignSystemFromPatchSet","inventory_ids","sent","status","addNotification","patchSetUnassignSystemsNotifications","success","stop","useUnassignSystemsHook","fetchSystems","limit","filter","stale","then","allSystemsWithPatchSet","systemID","data","some","system","filterSystemsWithoutSets","result","systemsWithoutPatchSetCount","Grid","hasGutter","Skeleton","Fragment","injectIntl","CreatePatchSetButton","setPatchSetState","hasAccess","isPatchSetWizardOpen","Tooltip","content","isAriaDisabled","patchSetColumns","transforms","sortable","patchSetRowActions","openPatchSetEditModal","handlePatchSetDelete","_event","_rowId","rowData","patchSetDetailRowActions","handleSystemUnassign","CustomActionsToggle","EllipsisVIcon","useIntl","useStore","inventory","useRef","patchSetId","location","pathname","split","_React$useState","_React$useState2","firstMount","setFirstMount","isHeaderDropdownOpen","setHeaderDropdownOpen","isDeleteConfirmModalOpen","setDeleteConfirmModalOpen","_useState5","_useState6","patchSetState","templateDetails","useSelector","PatchSetDetailStore","isHeaderLoading","_ref2","_PatchSetDetailStore$","_PatchSetDetailStore$2","isLoading","detailStatus","_ref3","systemStatus","_ref4","entities","totalItems","_ref5","total","queryParams","_ref6","PatchSetDetailSystemsStore","templateHasSystemsLoading","_ref7","templateHasSystems","_ref8","usePermissionsWithContext","patchSetName","attributes","name","params","changePatchSetDetailsSystemsParams","openPatchSetAssignWizard","_objectSpread","fetchPatchSetSystemsNoFiltersAction","clearTemplateDetail","_inventory$current","current","onRefreshData","timestamp","Date","now","fetchTemplateDetail","useDeepCompareEffect","decodeQueryparams","search","push","encodeURLParams","openSystemUnassignModal","getEntities","useGetEntities","fetchPatchSetSystems","metadata","changePatchSetDetailsSystemsMetadata","tags","changeTags","dropdownItems","DropdownItem","decodedParams","systemProfile","selectedTags","page","perPage","sort","hasError","ErrorHandler","code","deletePatchSet","patchSetDeleteNotifications","PatchSetWizard","setBaselineState","patchSetID","Header","style","width","headerOUIA","breadcrumbs","to","isActive","Dropdown","position","DropdownPosition","onSelect","document","getElementById","focus","toggle","DropdownToggle","onToggle","minWidth","border","marginTop","description","processDate","config","to_time","creator","published","last_edited","Main","TextContent","Text","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","columns","defaultColumns","templateSystemsColumnsMerger","showTags","onLoad","_ref9","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","systemsListColumns","modifyTemplateDetailSystems","persistantParams","customFilters","patchParams","paginationProps","tableProps","canSelectAll","TableVariant","isStickyHeader","actionResolver","hasCheckbox","NoAppliedSystems","onButtonClick","initialState","rows","selectedRows","offset","total_items","modifyInventory","state","loaded","createSystemsRows","modifyPackageSystems","lastAction","idToEvraMapping","packageEvraCache","undefined","forEach","row","available_evra","fromEntries","entries","map","createPackageSystemsRows","createPatchSetDetailRows","modifyAdvisorySystems","createAdvisorySystemsRows","inventoryModifier","action","newState","type","fetchRejected","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}