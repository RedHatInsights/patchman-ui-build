{"version":3,"file":"js/PackageDetail.1645524139425.92bf63348984240972b1.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Spinner/Spinner.js","webpack:///./src/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/PresentationalComponents/PackageHeader/PackageHeader.js","webpack:///./src/PresentationalComponents/Filters/VersionFilter.js","webpack:///./src/SmartComponents/PackageSystems/PackageSystems.js","webpack:///./src/SmartComponents/PackageDetail/PackageDetail.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}\n                        data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                        data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                    >{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { paths } from '../../Routes';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history, headerOUIA }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={paths.advisories.to}\n                title={paths.advisories.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.advisories.title}`}\n            />\n            <Tab\n                eventKey={paths.systems.to}\n                title={paths.systems.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.systems.title}`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object,\n    headerOUIA: propTypes.string\n};\n\nexport default withRouter(HeaderTabs);\n","import {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <PageHeaderTitle title={title} />\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA = {headerOUIA}/>}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string\n};\n\nexport default Header;\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport \"../../Spinner/./spinner.css\";\n\nvar Spinner = function Spinner(_ref) {\n  var centered = _ref.centered,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, [\"centered\", \"className\"]);\n\n  var spinnerClasses = classNames('ins-c-spinner', _defineProperty({}, \"ins-m-center\", centered), className);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"status\",\n    className: spinnerClasses\n  }, props), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"pf-u-screen-reader\"\n  }, \"Loading...\"));\n};\n\nSpinner.propTypes = {\n  centered: PropTypes.bool,\n  className: PropTypes.string\n};\nexport default Spinner;","/* eslint-disable react/prop-types */\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nexport const WithLoaderVariants = {\n    spinner: 'spinner',\n    skeleton: 'skeleton'\n};\n\nconst loaderMap = {\n    [WithLoaderVariants.skeleton]: ({ size, isDark }) => (\n        <Skeleton size={size} isDark={isDark} />\n    ),\n    [WithLoaderVariants.spinner]: ({ centered }) => (\n        <Spinner centered={centered} />\n    )\n};\n\nexport const WithLoader = ({ loading, variant, children, ...props }) => {\n    if (loading !== false) {\n        return loaderMap[variant](props);\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    loading: propTypes.bool,\n    variant: propTypes.string,\n    children: propTypes.any\n};\n\nexport default WithLoader;\n","import { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Fragment } from 'react';\nimport { truncateDescription } from '../../Utilities/Helpers';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\n\nconst PackageHeader = ({ attributes: { description }, isLoading }) => {\n    const [wordLength, setWordLength] = React.useState(1000);\n\n    return description && (<Grid hasGutter style={{ minHeight: 50 }}>\n        <GridItem md={8} sm={12}>\n            <WithLoader\n                loading={isLoading}\n                variant={WithLoaderVariants.spinner}\n                centered\n            >\n                <Stack hasGutter>\n                    <StackItem />\n                    <StackItem style={{ whiteSpace: 'pre-line' }}>\n                        {\n                            description && truncateDescription(description, wordLength, setWordLength)\n                        }\n                    </StackItem>\n                </Stack>\n            </WithLoader>\n        </GridItem>\n    </Grid>) || <Fragment/>;\n};\n\nPackageHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default PackageHeader;\n","import React from 'react';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst VersionFilter = (apply, filter, packageVersions) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n\n    const isSet = filter && filter.installed_evra;\n    const installedEvra = isSet &&\n        (typeof(filter.installed_evra) === 'string' && filter.installed_evra.split(',')\n        || filter.installed_evra);\n    const versionList = packageVersions.data && packageVersions.data.sort().map(version => ({ value: version.evra }))\n        || [{ value: intl.formatMessage(messages.textNoVersionAvailable), disabled: true }];\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onSelect = (_, selection) => {\n        const config = { filter: {} };\n        if (!installedEvra || (installedEvra && !installedEvra.includes(selection))) {\n            const existingVersions = isSet && filter.installed_evra !== '' && filter.installed_evra.concat(',') || '';\n\n            config.filter = { installed_evra: `${existingVersions}${selection}` };\n        } else {\n            const filteredOutEvras = installedEvra.length !== 1\n                && installedEvra.filter(evra => !evra.includes(selection)).join(',') || undefined;\n\n            config.filter = { installed_evra: filteredOutEvras };\n        }\n\n        apply(config);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionList.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: intl.formatMessage(messages.labelsFiltersPackageVersionTitle),\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={versionList.length > 0 && SelectVariant.checkbox || SelectVariant.typeaheadMulti}\n                        typeAheadAriaLabel={intl.formatMessage(messages.labelsFiltersPackageVersionPlaceholder)}\n                        onToggle={onToggle}\n                        onSelect={onSelect}\n                        selections={installedEvra}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-version-filter'}\n                        placeholderText={intl.formatMessage(messages.labelsFiltersPackageVersionPlaceholder)}\n                        {...(numOptions < versionList.lengt\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionList.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                isDisabled={option.disabled}\n                                key={index}\n                                value={option.value}\n                                {...(option.description && { description: option.description })}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n\n};\n\nexport default VersionFilter;\n","import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport versionFilter from '../../PresentationalComponents/Filters/VersionFilter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changePackageSystemsParams, clearInventoryReducer, clearPackageSystemsReducer } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyPackageSystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportPackageSystemsCSV,\n    exportPackageSystemsJSON, fetchPackageSystems,\n    fetchPackageVersions\n} from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips, decodeQueryparams, filterRemediatablePackageSystems,\n    persistantParams, remediationProviderWithPairs, removeUndefinedObjectKeys, transformPairs\n} from '../../Utilities/Helpers';\nimport { useBulkSelectConfig, useGetEntities, useOnExport, useOnSelect, useRemoveFilter } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport PatchRemediationButton from '../Remediation/PatchRemediationButton';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { packageSystemsColumns } from '../Systems/SystemsListAssets';\n\nconst PackageSystems = ({ packageName }) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const [packageVersions, setPackageVersions] = React.useState([]);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const queryParams = useSelector(\n        ({ PackageSystemsStore }) => PackageSystemsStore?.queryParams || {}\n    );\n\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const { systemProfile, selectedTags,\n        filter, search, sort, page, perPage } = queryParams;\n\n    React.useEffect(async () => {\n        apply(decodedParams);\n        setPackageVersions(await fetchPackageVersions({ package_name: packageName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearInventoryReducer());\n            dispatch(clearPackageSystemsReducer());\n        };\n    }, []);\n\n    function apply(params) {\n        dispatch(changePackageSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ ...filter, search }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            statusFilter(apply, filter),\n            versionFilter(apply, filter, packageVersions)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n        onDelete: deleteFilters\n    };\n\n    async function showRemediationModal(data) {\n        setRemediationLoading(true);\n        const resolvedData = await data;\n        setRemediationModalCmp(() => () => <RemediationModal data={resolvedData} />);\n        setRemediationLoading(false);\n    }\n\n    ;\n\n    const constructFilename = (system) => {\n        return `${packageName}-${system.available_evra}`;\n    };\n\n    const fetchAllData = () => {\n        return fetchPackageSystems({\n            ...queryParams,\n            package_name: packageName,\n            limit: -1\n        })\n        .then(filterRemediatablePackageSystems);\n    };\n\n    const selectRows = (toSelect) => {\n        dispatch({ type: 'SELECT_ENTITY', payload: toSelect });\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows,\n        fetchAllData, selectRows, constructFilename);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport(packageName, queryParams, {\n        csv: exportPackageSystemsCSV,\n        json: exportPackageSystemsJSON\n    }, dispatch);\n\n    const prepareRemediationPairs = () => {\n        let pairs = {};\n        removeUndefinedObjectKeys(selectedRows).forEach(system => {\n            if (pairs[selectedRows[system]]) {\n                pairs[selectedRows[system]].push(system);\n            }\n            else {\n                pairs[selectedRows[system]] = [system];\n            }\n        });\n        return { data: pairs };\n    };\n\n    const getEntites = useGetEntities(fetchPackageSystems, apply, { packageName }, history);\n    return (\n        <React.Fragment>\n            <RemediationModalCmp/>\n            {status.hasError && <ErrorHandler code={status.code} /> || (\n                <InventoryTable\n                    disableDefaultColumns={['system_profile', 'updated']}\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    hideFilters={{ all: true, tags: false }}\n                    columns={packageSystemsColumns}\n                    showTags\n                    getEntities={getEntites}\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        register({\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(packageSystemsColumns, modifyPackageSystems),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        });\n\n                    }}\n                    tableProps={{\n                        canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig={activeFiltersConfig}\n                    bulkSelect={useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                    exportConfig={{\n                        isDisabled: totalItems === 0,\n                        onSelect: onExport\n                    }}\n                    dedicatedAction={(\n                        <PatchRemediationButton\n                            onClick={() =>\n                                showRemediationModal(\n                                    remediationProviderWithPairs(\n                                        removeUndefinedObjectKeys(selectedRows),\n                                        prepareRemediationPairs,\n                                        transformPairs,\n                                        remediationIdentifiers.package)\n\n                                )}\n                            isDisabled={arrayFromObj(selectedRows).length === 0 || isRemediationLoading}\n                            isLoading={isRemediationLoading}\n                            ouia={'toolbar-remediation-button'}\n                        />)}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nPackageSystems.propTypes = {\n    packageName: propTypes.string\n};\n\nexport default PackageSystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport PackageHeader from '../../PresentationalComponents/PackageHeader/PackageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { paths } from '../../Routes';\nimport PackageSystems from '../../SmartComponents/PackageSystems/PackageSystems';\nimport { clearPackageDetailStore, fetchPackageDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\n\nconst PackageDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [packageName] = React.useState(match.params.packageName);\n    const pageTitle = `${packageName} - ${intl.formatMessage(messages.titlesPackages)}`;\n    setPageTitle(pageTitle);\n    const packageDetails = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore\n    );\n    const status = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchPackageDetails({ packageName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n            dispatch(clearPackageDetailStore());\n        };\n    }, []);\n\n    const { attributes } = packageDetails.data;\n\n    return (\n        <React.Fragment>\n            <Header\n                title={packageName}\n                headerOUIA={'package-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchPackages),\n                        to: paths.packages.to,\n                        isActive: false\n                    },\n                    {\n                        title: packageName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable/> :\n                    <PackageHeader\n                        attributes={{ ...attributes, id: packageName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        {status.hasError\n                            && < ErrorHandler />\n                                || (!status.isLoading && <PackageSystems packageName={packageName}></PackageSystems>)\n                        }\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nPackageDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(PackageDetail);\n","import { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            newState.status = { isLoading: true, hasError: true };\n            return newState;\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["HeaderBreadcrumbs","items","headerOUIA","Breadcrumb","filter","Boolean","map","item","BreadcrumbItem","key","title","isActive","to","Link","propTypes","PropTypes","HeaderTabs","history","Tabs","onSelect","event","tabString","push","activeKey","location","pathname","className","Tab","eventKey","paths","withRouter","Header","showTabs","breadcrumbs","children","PageHeader","PageHeaderTitle","Spinner","_ref","centered","props","spinnerClasses","role","WithLoaderVariants","spinner","skeleton","loaderMap","size","isDark","Skeleton","WithLoader","loading","variant","PackageHeader","description","attributes","isLoading","React","wordLength","setWordLength","Grid","hasGutter","style","minHeight","GridItem","md","sm","Stack","StackItem","whiteSpace","truncateDescription","Fragment","apply","packageVersions","isOpen","setOpen","numOptions","setNumOptions","isSet","installed_evra","installedEvra","split","versionList","data","sort","version","value","evra","intl","messages","disabled","type","conditionalFilterType","label","filterValues","Select","length","SelectVariant","typeAheadAriaLabel","onToggle","_","selection","config","includes","existingVersions","concat","filteredOutEvras","join","undefined","selections","placeholderText","lengt","loadingVariant","text","onClick","maxHeight","overflow","slice","option","index","SelectOption","isDisabled","PackageSystems","packageName","dispatch","useDispatch","useHistory","RemediationModalCmp","setRemediationModalCmp","setPackageVersions","decodedParams","decodeQueryparams","search","systems","useSelector","entities","rows","shallowEqual","status","totalItems","total","selectedRows","queryParams","PackageSystemsStore","isRemediationLoading","setRemediationLoading","systemProfile","selectedTags","page","perPage","params","changePackageSystemsParams","fetchPackageVersions","package_name","clearInventoryReducer","clearPackageSystemsReducer","useRemoveFilter","deleteFilters","filterConfig","searchFilter","statusFilter","versionFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","resolvedData","RemediationModal","useOnSelect","fetchPackageSystems","limit","then","filterRemediatablePackageSystems","toSelect","payload","system","available_evra","selectedCount","arrayFromObj","onExport","useOnExport","csv","exportPackageSystemsCSV","json","exportPackageSystemsJSON","prepareRemediationPairs","pairs","removeUndefinedObjectKeys","forEach","getEntites","useGetEntities","hasError","ErrorHandler","code","InventoryTable","disableDefaultColumns","isFullView","autoRefresh","initialLoading","hideFilters","all","tags","columns","packageSystemsColumns","showTags","getEntities","customFilters","patchParams","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","modifyPackageSystems","persistantParams","tableProps","canSelectAll","TableVariant","isStickyHeader","bulkSelect","useBulkSelectConfig","total_items","exportConfig","dedicatedAction","PatchRemediationButton","showRemediationModal","remediationProviderWithPairs","transformPairs","remediationIdentifiers","ouia","PackageDetail","match","pageTitle","setPageTitle","packageDetails","PackageDetailStore","fetchPackageDetails","clearNotifications","clearPackageDetailStore","Unavailable","id","Main","TextContent","Text","component","TextVariants","initialState","metadata","offset","modifyInventory","state","loaded","createSystemsRows","createPackageSystemsRows","inventoryModifier","action","newState","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}