{"version":3,"file":"js/9041.917938f96d8ba55d24cd.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./src/PresentationalComponents/Snippets/SystemUpToDate.js","webpack:///./src/PresentationalComponents/TableView/TableFooter.js","webpack:///./src/PresentationalComponents/TableView/TableView.js","webpack:///./src/SmartComponents/PatchSet/PatchSetAssets.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/SelectExistingSets.js","webpack:///./src/Utilities/dateValidator.js","webpack:///./src/SmartComponents/PatchSetWizard/WizardAssets.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ConfigurationFields.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ConfigurationStepFields.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ContentStep.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/NameField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ToDateField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/DescriptionField.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewSystems.js","webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewPatchSet.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/RequestProgress.js","webpack:///./src/SmartComponents/PatchSetWizard/PatchSetWizard.js"],"sourcesContent":["import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { InsightsLink } from '@redhat-cloud-services/frontend-components/InsightsLink';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {item.to\n                        ? <InsightsLink to={`${item.to}`}\n                            data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                            data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                        >{item.title}</InsightsLink>\n                        : item.title\n                    }\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.node\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport './Header.scss';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst HeaderTabs = ({ headerOUIA }) => {\n    const location = useLocation();\n    const navigate = useNavigate();\n\n    const handleRedirect = (event, tabString) => {\n        navigate(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={'advisories'}\n                title={'Applicable advisories'}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-Applicable advisories'`}\n            />\n            <Tab\n                eventKey={'systems'}\n                title={'Systems'}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-Systems`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    headerOUIA: propTypes.string\n};\n\nexport default HeaderTabs;\n","import { Split, SplitItem } from '@patternfly/react-core';\nimport {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA, actions }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <Split hasGutter>\n                    <SplitItem>\n                        <PageHeaderTitle title={title} />\n                    </SplitItem>\n                    <SplitItem isFilled />\n                    <SplitItem>\n                        {actions}\n                    </SplitItem>\n                </Split>\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA={headerOUIA} />}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.node,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string,\n    actions: PropTypes.node\n};\n\nexport default Header;\n","import {\n    Bullseye,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateHeader,\n    Icon\n} from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const SystemUpToDate = () => (\n    <Bullseye>\n        <EmptyState style={{ paddingTop: 40 }}>\n            <EmptyStateHeader\n                titleText={intl.formatMessage(\n                    messages.statesNoApplicableAdvisories\n                )}\n                icon={\n                    <EmptyStateIcon\n                        icon={() => (\n                            <Icon size=\"xl\" style={{ marginBottom: 15 }}>\n                                <CheckCircleIcon\n                                    color={\n                                        'var(--pf-v5-global--success-color--200)'\n                                    }\n                                />\n                            </Icon>\n                        )}\n                    />\n                }\n                headingLevel=\"h5\"\n            />\n            <EmptyStateBody>\n                {intl.formatMessage(messages.statesSystemUpToDate)}\n            </EmptyStateBody>\n        </EmptyState>\n    </Bullseye>\n);\n","import { Pagination, PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport TableToolbar from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TableFooter = ({ isLoading, page, perPage, onSetPage, totalItems, onPerPageSelect, paginationOUIA }) => {\n    return (\n        <TableToolbar isFooter>\n            {isLoading ? (\n                <div className=\"pf-v5-c-pagination pf-m-bottom\">\n                    <Skeleton fontSize=\"xl\" width=\"350px\" style={{ margin: 10 }} />\n                </div>\n            ) :\n                <Pagination\n                    itemCount={totalItems}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    widgetId={`pagination-options-menu-bottom`}\n                    variant={PaginationVariant.bottom}\n                    ouiaId={paginationOUIA}\n                    isDisabled={totalItems === 0}\n                />\n            }\n        </TableToolbar>\n    );\n};\n\nTableFooter.propTypes = {\n    isLoading: PropTypes.bool,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalItems: PropTypes.number,\n    paginationOUIA: PropTypes.string\n};\n\nexport default TableFooter;\n","import {\n    TableVariant\n} from '@patternfly/react-table';\nimport {\n    Table,\n    TableBody,\n    TableHeader\n} from '@patternfly/react-table/deprecated';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport AsyncRemediationButton from '../../SmartComponents/Remediation/AsyncRemediationButton';\nimport { arrayFromObj, buildFilterChips, convertLimitOffset } from '../../Utilities/Helpers';\nimport { useRemoveFilter, useBulkSelectConfig } from '../../Utilities/hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableFooter from './TableFooter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { Skeleton, ToolbarItem } from '@patternfly/react-core';\n\nconst TableView = ({\n    columns,\n    store: {\n        rows,\n        metadata,\n        status,\n        queryParams: { filter, search }\n    },\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    onExport,\n    filterConfig,\n    sortBy,\n    remediationProvider,\n    selectedRows,\n    compact,\n    apply,\n    tableOUIA,\n    paginationOUIA,\n    errorState,\n    emptyState,\n    defaultFilters,\n    searchChipLabel,\n    ToolbarButton,\n    actionsConfig,\n    isRemediationLoading,\n    actionsToggle\n}) => {\n\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n\n    const [deleteFilters] = useRemoveFilter(filter, apply, defaultFilters);\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n    const { code, hasError, isLoading } = status;\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, metadata, rows, onCollapse);\n\n    return (\n        <React.Fragment>\n            {\n                (<React.Fragment>\n                    {(hasError || metadata.has_systems === false)\n                        ? <ErrorHandler code={code} ErrorState={errorState} EmptyState={emptyState} metadata={metadata} />\n                        : <React.Fragment>\n                            <PrimaryToolbar\n                                pagination={isLoading\n                                    ? <Skeleton fontSize=\"xl\" width=\"200px\" style={{ margin: 10 }} />\n                                    : {\n                                        itemCount: metadata.total_items,\n                                        page,\n                                        perPage,\n                                        isCompact: true,\n                                        onSetPage,\n                                        onPerPageSelect,\n                                        ouiaId: `top-${paginationOUIA}`,\n                                        isDisabled: metadata.total_items === 0\n                                    }}\n                                filterConfig={filterConfig}\n                                activeFiltersConfig={{\n                                    filters: buildFilterChips(filter, search, searchChipLabel),\n                                    onDelete: deleteFilters,\n                                    deleteTitle: intl.formatMessage(defaultFilters\n                                        && messages.labelsFiltersReset || messages.labelsFiltersClear)\n                                }}\n                                actionsConfig={{\n                                    actions: [remediationProvider && (\n                                        <AsyncRemediationButton\n                                            remediationProvider={remediationProvider}\n                                            isDisabled={\n                                                Object.values(selectedRows).filter(isSelected => isSelected).length === 0\n                                                || isRemediationLoading\n                                            }\n                                            isLoading={isRemediationLoading}\n                                        />\n                                    )]\n                                }}\n                                exportConfig={{\n                                    isDisabled: metadata.total_items === 0,\n                                    onSelect: onExport\n                                }}\n                                bulkSelect={onSelect && bulkSelectConfig}\n                            >\n                                {ToolbarButton && <ToolbarItem>\n                                    <ToolbarButton />\n                                </ToolbarItem>}\n                            </PrimaryToolbar>\n                            {isLoading\n                                ? <SkeletonTable\n                                    numberOfColumns={columns?.length ?? 5}\n                                    rows={20}\n                                    variant={compact && TableVariant.compact}\n                                />\n                                : <Table\n                                    aria-label=\"Patch table view\"\n                                    cells={columns}\n                                    onSelect={metadata.total_items && onSelect}\n                                    rows={rows}\n                                    onCollapse={metadata.total_items && onCollapse}\n                                    canSelectAll={false}\n                                    onSort={metadata.total_items && onSort}\n                                    ouiaId={tableOUIA}\n                                    sortBy={metadata.total_items && sortBy}\n                                    isStickyHeader\n                                    variant={compact && TableVariant.compact}\n                                    actions={actionsConfig}\n                                    actionsToggle={actionsToggle}\n                                >\n                                    <TableHeader />\n                                    <TableBody />\n                                </Table>\n                            }\n                            <TableFooter\n                                isLoading={isLoading}\n                                totalItems={metadata.total_items}\n                                perPage={perPage}\n                                page={page}\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                paginationOUIA={`bottom-${paginationOUIA}`}\n                            />\n                        </React.Fragment>\n                    }\n                </React.Fragment>)\n            }\n        </React.Fragment>\n    );\n};\n\nTableView.propTypes = {\n    columns: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    onExport: PropTypes.func,\n    remediationProvider: PropTypes.func,\n    selectedRows: PropTypes.object,\n    apply: PropTypes.func,\n    sortBy: PropTypes.object,\n    filterConfig: PropTypes.object,\n    store: PropTypes.object,\n    compact: PropTypes.bool,\n    tableOUIA: PropTypes.string,\n    paginationOUIA: PropTypes.string,\n    errorState: PropTypes.element,\n    emptyState: PropTypes.element,\n    defaultFilters: PropTypes.object,\n    searchChipLabel: PropTypes.string,\n    ToolbarButton: PropTypes.elementType,\n    actionsConfig: PropTypes.array,\n    isRemediationLoading: PropTypes.bool,\n    actionsToggle: PropTypes.func\n};\n\nexport default TableView;\n","import React from 'react';\nimport { Button, Icon, Tooltip } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport {\n    EllipsisVIcon\n} from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const CreatePatchSetButton = (setPatchSetState, hasAccess) => () =>\n    !hasAccess ?\n        <Tooltip content='For editing access, contact your administrator.'>\n            <Button key='createButton' isAriaDisabled >\n                {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n            </Button>\n        </Tooltip>\n        :\n        (<Button key='createButton' onClick={() => setPatchSetState({ isPatchSetWizardOpen: true })}>\n            {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n        </Button>);\n\nexport const patchSetColumns = [\n    {\n        key: 'name',\n        title: 'Name',\n        transforms: [sortable]\n    },\n    {\n        key: 'systems',\n        title: 'Systems applied',\n        transforms: [sortable]\n    },\n    {\n        key: 'last_edited',\n        title: 'Last edited',\n        transforms: [sortable]\n    },\n    {\n        key: 'published',\n        title: 'Published',\n        transforms: [sortable]\n    },\n    {\n        key: 'creator',\n        title: 'Created by',\n        transforms: [sortable]\n    }\n];\n\nexport const patchSetRowActions = (openPatchSetEditModal, handlePatchSetDelete) => [\n    {\n        title: intl.formatMessage(messages.labelsButtonEditTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            openPatchSetEditModal(rowData?.id);\n        }\n    },\n    {\n        title: intl.formatMessage(messages.labelsButtonRemoveTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            handlePatchSetDelete(rowData);\n        }\n    }\n];\n\nexport const patchSetDetailRowActions = (handleSystemUnassign) => [\n    {\n        title: intl.formatMessage(messages.titlesTemplateRemoveFromSystems, { systemsCount: 1 }),\n        onClick: (_event, _rowId, rowData) => {\n            handleSystemUnassign([rowData.id]);\n        }\n    }\n\n];\n\nexport const CustomActionsToggle = () => <Tooltip content='For editing access, contact your administrator.'>\n    <Button\n        isAriaDisabled\n        variant=\"plain\"\n        aria-label=\"plain kebab\"\n    >\n        <Icon>\n            <EllipsisVIcon />\n        </Icon>\n    </Button>\n</Tooltip>;\n\nexport const patchSetUnassignSystemsNotifications = (systemsCount) => ({\n    success: {\n        title: `Systems succesfully removed from this Patch template.`,\n        description: `${systemsCount} ${systemsCount > 1 ? 'systems' : 'system'} removed from Patch template(s)`,\n        variant: 'success'\n    },\n    failure: {\n        title: `Failed to remove systems from this Patch template.`,\n        variant: 'danger'\n    }\n});\n\nexport const patchSetAssignSystemsNotifications = (systemsCount) => ({\n    success: {\n        title: `Systems succesfully applied to this Patch template.`,\n        description: `${systemsCount} ${systemsCount > 1 ? 'systems' : 'system'} added to Patch template(s)`,\n        variant: 'success'\n    },\n    failure: {\n        title: `Failed to apply systems to this Patch template.`,\n        variant: 'danger'\n    }\n});\n","import '../../../App.scss';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AngleLeftIcon, AngleRightIcon } from '@patternfly/react-icons';\nimport {\n    FormGroup,\n    Spinner,\n    Flex,\n    FlexItem,\n    Button,\n    Icon\n} from '@patternfly/react-core';\nimport {\n    Select,\n    SelectOption,\n    SelectVariant\n} from '@patternfly/react-core/deprecated';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { fetchPatchSetsAction, changePatchSetsParams, clearPatchSetsAction } from '../../../store/Actions/Actions';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst SelectPagination = ({ changePage, page, perPage, totalItems }) =>{\n    const openNextPage = () => changePage(page + 1);\n    const openPrevPage = () => changePage(page - 1);\n\n    return (\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n            <FlexItem>\n                <Button variant=\"plain\" aria-label=\"prev\" isDisabled={page === 1} onClick={openPrevPage}>\n                    <Icon>\n                        <AngleLeftIcon />\n                    </Icon>\n                </Button>\n            </FlexItem>\n            <FlexItem>\n                <Button variant=\"plain\" aria-label=\"next\"\n                    isDisabled={totalItems < page * perPage}\n                    onClick={openNextPage}>\n                    <Icon>\n                        <AngleRightIcon />\n                    </Icon>\n                </Button>\n            </FlexItem>\n        </Flex>\n    );\n};\n\nconst SelectExistingSets = ({ setSelectedPatchSet, selectedSets, systems, selectCallback = () => {} }) => {\n    const dispatch = useDispatch();\n    const formOptions = useFormApi();\n    const [isOpen, setOpen] = useState(false);\n\n    const rows = useSelector(({ PatchSetsStore }) => PatchSetsStore.rows);\n    const queryParams = useSelector(({ PatchSetsStore }) => PatchSetsStore.queryParams);\n    const status = useSelector(({ PatchSetsStore }) => PatchSetsStore.status);\n    const metadata = useSelector(({ PatchSetsStore }) => PatchSetsStore.metadata);\n\n    useEffect(() => () => {\n        dispatch(clearPatchSetsAction());\n    }, []);\n\n    const { search } = queryParams || {};\n    const searchDependency = typeof search === 'string' && search !== '' ? search : Boolean(search);\n\n    useEffect(() => {\n        dispatch(fetchPatchSetsAction({ ...queryParams, offset:\n            queryParams.offset + ((queryParams.page - 1) * queryParams.perPage) }));\n    }, [queryParams.page, searchDependency]);\n\n    const patchOptions = useMemo(() =>{\n        if (status.isLoading) {\n            return [<SelectOption key='loading'><Spinner size=\"md\"/></SelectOption>];\n        }\n\n        return rows?.map(set => <SelectOption\n            key={set.id}\n            value={set.name}\n            aria-label='patch-set-option'\n        />);\n    }, [rows, status.isLoading]);\n\n    const apply = (params) => {\n        dispatch(changePatchSetsParams(params));\n    };\n\n    const [searchAdvisory] = useState(() =>\n        debounce(value => apply({ search: value }), 700)\n    );\n\n    const handleOpen = () => {\n        setOpen(!isOpen);\n    };\n\n    const handleSelect = (_, selected) => {\n        setOpen(false);\n        setSelectedPatchSet(selected);\n\n        const selectedSet = rows.filter(set => set.name === selected);\n\n        if (selectedSet.length === 1) {\n            selectCallback(selectedSet[0]);\n            formOptions?.change?.('existing_patch_set', { name: selectedSet[0]?.name, systems, id: selectedSet[0]?.id });\n        }\n    };\n\n    const changePage = (page) => {\n        dispatch(changePatchSetsParams({ ...queryParams, page }));\n    };\n\n    const onFilter = (props, searchValue) => {\n        searchAdvisory(searchValue);\n    };\n\n    return (\n        <FormGroup fieldId='existing_patch_set' label={intl.formatMessage(messages.textTemplateChoose)} isRequired>\n            <Select\n                variant={SelectVariant.single}\n                aria-label={intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)}\n                onSelect={handleSelect}\n                placeholderText={intl.formatMessage(messages.templateSelectExisting)}\n                inlineFilterPlaceholderText={intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)}\n                selections={selectedSets}\n                onToggle={handleOpen}\n                isOpen={isOpen}\n                isDisabled={false}\n                onFilter={onFilter}\n                hasInlineFilter\n                className='patch-existing-sets'\n                footer={\n                    <SelectPagination\n                        changePage={changePage}\n                        page={queryParams.page}\n                        perPage={queryParams.perPage}\n                        totalItems={metadata.total_items}\n                    />\n                }\n                menuAppendTo={document.body}\n                maxHeight={350}\n            >\n                {patchOptions}\n            </Select>\n        </FormGroup>\n    );\n};\n\nSelectPagination.propTypes = {\n    changePage: propTypes.func,\n    page: propTypes.number,\n    perPage: propTypes.number,\n    totalItems: propTypes.number\n};\n\nSelectExistingSets.propTypes = {\n    setSelectedPatchSet: propTypes.func,\n    selectedSets: propTypes.array,\n    systems: propTypes.array,\n    selectCallback: propTypes.func\n};\nexport default SelectExistingSets;\n","import { intl } from './IntlProvider';\nimport messages from '../Messages';\n\n/*\nvalidates date of a type YYYY-MM-DD with starting limit 1990-01-01.\nregex is used to comply the Patternfly date format.\n*/\nconst dateValidator = (dateStr) => {\n    const regex = /^(\\d{4})-(0[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$/;\n\n    if (dateStr && typeof dateStr === 'string' && dateStr.match(regex) === null) {\n        return intl.formatMessage(messages.labelsErrorInvalidDate);\n    }\n\n    const date = new Date(dateStr);\n    const timestamp = date.getTime();\n\n    //Month had to be set to equal 0 to get the first month of the year.\n    const minDate = new Date(1990, 0, 1);\n\n    if (typeof timestamp !== 'number' || Number.isNaN(timestamp)) {\n        return intl.formatMessage(messages.labelsErrorInvalidDate);\n    }\n\n    if (date < minDate) {\n        return intl.formatMessage(messages.labelsErrorDateLimit);\n    }\n\n    return;\n};\n\nexport default dateValidator;\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { filterSelectedActiveSystemIDs } from '../../Utilities/Helpers';\nimport dateValidator from '../../Utilities/dateValidator';\nimport { sortable } from '@patternfly/react-table/dist/js';\nimport React, { Fragment } from 'react';\nimport { useFetchBatched } from '../../Utilities/hooks';\n\nexport const reviewSystemColumns = [{\n    key: 'display_name',\n    title: 'Name',\n    props: {\n        width: 40\n    },\n    transforms: [sortable]\n},\n{\n    title: 'OS',\n    key: 'operating_system',\n    props: {\n        width: 20\n    },\n    transforms: [sortable]\n},\n{\n    key: 'baseline_name',\n    title: 'Template',\n    props: {\n        width: 20\n    },\n    transforms: [sortable]\n},\n{\n    key: 'last_upload',\n    title: 'Last seen',\n    props: {\n        width: 20\n    },\n    transforms: [sortable]\n}\n];\n\nexport const configurationFields = [\n    {\n        name: 'configurationStep',\n        component: 'configurationStep'\n    },\n    {\n        name: 'existing_patch_set',\n        component: componentTypes.TEXT_FIELD,\n        hidden: true\n    }\n];\n\nexport const contentStep = [\n    {\n        name: 'contentStep',\n        component: 'contentStep'\n    }\n];\n\nexport const nameComponent = [{\n    name: 'name',\n    component: 'nameField',\n    validate: [\n        { type: validatorTypes.REQUIRED },\n        { type: 'validate-name' }\n    ]\n}];\n\nexport const descriptionComponent = [{\n    name: 'description',\n    component: 'descriptionField'\n}];\n\nexport const toDateComponent = [{\n    name: 'toDate',\n    component: 'toDateField',\n    validate: [\n        { type: validatorTypes.REQUIRED },\n        { type: 'validate-date' }\n    ]\n}];\n\nexport const getWizardTitle = (wizardType) => {\n    return (wizardType === 'edit')\n        ? intl.formatMessage(messages.templateEdit)\n        : intl.formatMessage(messages.templateTitle);\n};\n\nexport const schema = (wizardType) => {\n    return ({\n        fields: [\n            {\n                component: componentTypes.WIZARD,\n                name: 'patch-set-wizard',\n                isDynamic: true,\n                inModal: true,\n                title: getWizardTitle(wizardType),\n                description: <Fragment>\n                    {intl.formatMessage(messages.templateDescription)}\n                    {/*\n                    <a href={TEMPLATES_DOCS_LINK} target=\"__blank\" rel=\"noopener noreferrer\" className=\"pf-v5-u-ml-sm\">\n                        {intl.formatMessage(messages.labelsDocumentation)}\n                        <ExternalLinkAltIcon className=\"pf-v5-u-ml-xs\"/>\n                    </a>*/}\n                </Fragment>,\n                fields: [\n                    {\n                        name: 'template-content',\n                        title: intl.formatMessage(messages.templateContentStepSidebarName),\n                        fields: contentStep,\n                        nextStep: 'template-details'\n                    },\n                    {\n                        name: 'template-details',\n                        title: intl.formatMessage(messages.templateDetailStepSidebarName),\n                        fields: configurationFields,\n                        nextStep: 'template-systems'\n                    },\n                    {\n                        name: 'template-systems',\n                        title: intl.formatMessage(messages.templateStepSystems),\n                        fields: [\n                            {\n                                name: 'systems',\n                                component: 'reviewSystems'\n                                //We can use this later in case UX wantes to prevent patch template s without zero systems\n                                //validate: [{ type: 'validate-systems' }]\n                            }\n                        ],\n                        nextStep: 'template-review'\n                    },\n                    {\n                        name: 'template-review',\n                        title: intl.formatMessage(messages.templateReview),\n                        fields: [\n                            {\n                                name: 'review',\n                                component: 'reviewPatchSet'\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    });\n};\n\nexport const validatorMapper = {\n    'validate-systems': () => (formValueSystems) => {\n        const systems = filterSelectedActiveSystemIDs(formValueSystems);\n\n        if (systems === undefined) {\n            return;\n        }\n        else if (systems.length > 0) {\n            return;\n        } else {\n            return intl.formatMessage(messages.templateNoSystemSelected);\n        }\n    },\n    'validate-date': () => dateValidator,\n    'validate-name': () => (name, formValues) => {\n        if (formValues.areTakenTemplateNamesLoading || formValues.templateDetailLoading) {\n            return intl.formatMessage(messages.templateWizardValidateLoading);\n        }\n\n        if (formValues.previousName !== name && formValues.takenTemplateNames?.includes(name)) {\n            return intl.formatMessage(messages.templateWizardValidateNameTaken);\n        }\n    }\n};\n\nexport const apiFailedNotification = (description) => ({\n    title: 'There was an error while processing your request',\n    description,\n    variant: 'danger'\n});\n\nexport const useFetchAllTemplateData = (fetchFunction, mapFunction) => {\n    const { fetchBatched, isLoading } = useFetchBatched();\n    return async (params = {}) => {\n        const result = await fetchBatched(\n            fetchFunction,\n            params,\n            undefined,\n            100\n        );\n\n        return {\n            isLoading,\n            data: result.flatMap(({ data }) => data).map(mapFunction)\n        };\n    };\n};\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Grid, GridItem, Spinner } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { nameComponent, descriptionComponent } from '../WizardAssets';\n\nconst ConfigurationFields = ({ isLoading }) => {\n    const { renderForm } = useFormApi();\n\n    return (\n        <Fragment>\n            {/* The form element always need to be rendered in order to correctly disable \"Next\" button,\n                that's why these are hidden using \"display: none\" instead of not rendering */}\n            <Spinner size=\"xl\" style={{ display: isLoading ? 'block' : 'none' }} id={`test-config-fields-spinner`}/>\n            <Grid hasGutter style={{ display: isLoading ? 'none' : 'grid' }}>\n                <GridItem lg={12} md={12}>\n                    {renderForm(nameComponent)}\n                </GridItem>\n                <GridItem lg={12} md={12}>\n                    {renderForm(descriptionComponent)}\n                </GridItem>\n            </Grid>\n        </Fragment>\n    );\n};\n\nConfigurationFields.propTypes = {\n    isLoading: propTypes.bool\n};\nexport default ConfigurationFields;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    Radio,\n    TextVariants\n} from '@patternfly/react-core';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\nimport SelectExistingSets from '../InputFields/SelectExistingSets';\nimport ConfigurationFields from '../InputFields/ConfigurationFields';\n\nconst ConfigurationStepFields = ({ systemsIDs, patchSetID }) => {\n    const formOptions = useFormApi();\n    // TODO: Cleanup this unused code later\n    const shouldShowRadioButtons = false;\n\n    const [shouldApplyExisting, setShouldApplyExisting] = useState(false);\n    const [shouldCreateNew, setShouldCreateNew] = useState(true);\n    const [selectedPatchSet, setSelectedPatchSet] = useState([]);\n\n    const { patchSet, status, areTakenTemplateNamesLoading } =\n        useSelector(({ SpecificPatchSetReducer }) => SpecificPatchSetReducer, shallowEqual);\n\n    const handleRadioChange = () => {\n        setShouldCreateNew(!shouldCreateNew);\n        setShouldApplyExisting(!shouldApplyExisting);\n    };\n\n    useEffect(() => {\n        if (patchSetID) {\n            const { name, description } = patchSet;\n\n            formOptions.change('name', name);\n            formOptions.change('description', description);\n        }\n    }, [patchSet]);\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component=\"h2\">\n                        {intl.formatMessage(messages.templateDetailStepTitle)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                {intl.formatMessage(messages.templateDetailStepText)}\n            </StackItem>\n            {shouldShowRadioButtons && <TextContent style={{ marginTop: '-15px' }}>\n                <Text component={TextVariants.p}>\n                    {intl.formatMessage(\n                        messages.textTemplateSelectedSystems,\n                        { systemsCount: systemsIDs.length, b: (...chunks) => <b>{chunks}</b> }\n                    )}\n                </Text>\n            </TextContent>}\n            <StackItem>\n                <Stack hasGutter>\n                    {shouldShowRadioButtons && (<><StackItem>\n                        <Radio\n                            isChecked={shouldApplyExisting}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label={intl.formatMessage(messages.textTemplateAddToExisting)}\n                            id=\"existing-template\"\n                        />\n                    </StackItem>\n                    <StackItem>\n                        {shouldApplyExisting ? <SelectExistingSets\n                            setSelectedPatchSet={setSelectedPatchSet}\n                            selectedSets={selectedPatchSet}\n                            systems={systemsIDs}\n                        /> : null}\n                    </StackItem>\n                    <StackItem>\n                        <Radio\n                            isChecked={shouldCreateNew}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label={intl.formatMessage(messages.textTemplateCreateNew)}\n                            id=\"new-template\"\n                        />\n                    </StackItem></>) || null}\n                    <StackItem>\n                        {shouldCreateNew ? <ConfigurationFields\n                            isLoading={(patchSetID && status.isLoading) || areTakenTemplateNamesLoading}\n                        /> : null}\n                    </StackItem>\n                </Stack>\n            </StackItem>\n        </Stack>\n    );\n};\n\nConfigurationStepFields.propTypes = {\n    systemsIDs: propTypes.array,\n    patchSetID: propTypes.string\n};\nexport default ConfigurationStepFields;\n","import React, { useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\nimport { convertIsoToDate } from '../../../Utilities/Helpers';\nimport { toDateComponent } from '../WizardAssets';\n\nconst ContentStep = ({ patchSetID }) => {\n    const formOptions = useFormApi();\n\n    const { patchSet, status } = useSelector(({ SpecificPatchSetReducer }) => SpecificPatchSetReducer, shallowEqual);\n\n    useEffect(() => {\n        if (patchSetID) {\n            const { config: { to_time: toDate }, name: previousName } = patchSet;\n\n            formOptions.change('toDate', convertIsoToDate(toDate));\n            formOptions.change('previousName', previousName);\n            formOptions.change('templateDetailLoading', status.isLoading);\n        }\n    }, [patchSet, status]);\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component=\"h2\">\n                        {intl.formatMessage(messages.templateContentStepTitle)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                {intl.formatMessage(messages.templateContentStepText)}\n            </StackItem>\n\n            <StackItem>\n                {formOptions.renderForm(toDateComponent)}\n            </StackItem>\n\n            <StackItem>\n                <ExpandableSection toggleText={intl.formatMessage(messages.templateContentStepExpandableTitle)}>\n                    {intl.formatMessage(messages.templateContentStepExpandable)}\n                </ExpandableSection>\n            </StackItem>\n        </Stack>\n    );\n};\n\nContentStep.propTypes = {\n    patchSetID: propTypes.string\n};\nexport default ContentStep;\n","import React, { useState, useEffect } from 'react';\nimport {\n    FormGroup,\n    FormHelperText,\n    HelperText,\n    HelperTextItem,\n    TextInput,\n    Spinner\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\nimport { useFetchAllTemplateData } from '../WizardAssets';\nimport { fetchPatchSets } from '../../../Utilities/api';\n\nconst NameField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [name, setName] = useState(values?.name);\n    const [validated, setValidated] = useState();\n    const [takenTemplateNames, setTakenTemplateNames] = useState([]);\n    const [areTakenTemplateNamesLoading, setAreTakenTemplateNamesLoading] = useState(true);\n\n    const fetchTemplateNames = useFetchAllTemplateData(\n        fetchPatchSets,\n        ({ attributes }) => attributes.name\n    );\n\n    useEffect(() => {\n        fetchTemplateNames().then(({ data, isLoading }) => {\n            setTakenTemplateNames(data);\n            setAreTakenTemplateNamesLoading(isLoading);\n        });\n    }, []);\n\n    useEffect(() => {\n        const validateName = () => {\n            if (\n                values.name === undefined ||\n                values.name === values.previousName\n            ) {\n                return 'default';\n            }\n\n            if (takenTemplateNames.includes(values.name)) {\n                return 'error';\n            }\n\n            return 'success';\n        };\n\n        setName(values.name);\n        setValidated(validateName());\n    }, [values.name, takenTemplateNames]);\n\n    useEffect(() => {\n        formOptions.change('takenTemplateNames', takenTemplateNames);\n        formOptions.change('areTakenTemplateNamesLoading', areTakenTemplateNamesLoading);\n    }, [takenTemplateNames, areTakenTemplateNamesLoading]);\n\n    return (\n        <FormGroup\n            fieldId=\"name\"\n            label={intl.formatMessage(messages.labelsColumnsName)}\n            isRequired\n        >\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={name}\n                onChange={(_event, val) => {\n                    input.onChange(val);\n                    setName(val);\n                }}\n                aria-label=\"name\"\n                autoFocus\n                validated={validated}\n            />\n            {(validated === 'error' || areTakenTemplateNamesLoading) && (\n                <FormHelperText>\n                    <HelperText>\n                        {areTakenTemplateNamesLoading\n                            ? <Spinner size=\"md\" />\n                            : <HelperTextItem variant={validated}>\n                                {intl.formatMessage(\n                                    messages.templateWizardValidateNameTaken\n                                )}\n                            </HelperTextItem>\n                        }\n                    </HelperText>\n                </FormHelperText>\n            )}\n        </FormGroup>\n    );\n};\n\nexport default NameField;\n","import React, { useState, useEffect } from 'react';\nimport {\n    FormGroup,\n    DatePicker,\n    Flex,\n    FlexItem\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport dateValidator from '../../../Utilities/dateValidator';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst ToDateField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [toDate, setToDate] = useState(values?.toDate);\n\n    useEffect(() => {\n        setToDate(values.toDate);\n    }, [values.toDate]);\n\n    return (\n        <FormGroup fieldId=\"toDate\" label={intl.formatMessage(messages.templateDateField)} isRequired>\n            <Flex>\n                <FlexItem lg={2} md={2}>\n                    {intl.formatMessage(messages.templateDateUpto)}\n                </FlexItem>\n                <FlexItem lg={10} md={10}>\n                    <DatePicker\n                        appendTo={document.body}\n                        value={toDate}\n                        onChange={(e, val) => {\n                            input.onChange(val);\n                            setToDate(val);\n                        }}\n                        popoverProps={{ position: 'right' }}\n                        aria-label=\"toDate\"\n                        validators={[dateValidator]}\n                        invalidFormatText={intl.formatMessage(messages.labelsErrorInvalidDate)}\n                    />\n                </FlexItem>\n            </Flex>\n        </FormGroup>\n    );\n};\n\nexport default ToDateField;\n","import React, { useState, useEffect } from 'react';\nimport { FormGroup, TextInput } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst DescriptionField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [description, setDescription] = useState(values?.description);\n\n    useEffect(() => {\n        setDescription(values.description);\n    }, [values.description]);\n\n    return (\n        <FormGroup fieldId=\"description\" label={intl.formatMessage(messages.labelsDescription)}>\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={description}\n                onChange={(_event, val) => {\n                    input.onChange(val);\n                    setDescription(val);\n                }}\n                aria-label=\"description\"\n            />\n        </FormGroup>\n    );\n};\n\nexport default DescriptionField;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport searchFilter from '../../../PresentationalComponents/Filters/SearchFilter';\nimport { Text, TextContent, Stack, StackItem, TextVariants, Alert } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nimport { createSortBy, buildSelectedSystemsObj } from '../../../Utilities/Helpers';\nimport { createSystemsRowsReview } from '../../../Utilities/DataMappers';\nimport { usePerPageSelect, useSetPage, useSortColumn, useOnSelect, ID_API_ENDPOINTS } from '../../../Utilities/hooks';\nimport TableView from '../../../PresentationalComponents/TableView/TableView';\nimport staleFilter from '../../../PresentationalComponents/Filters/SystemStaleFilter';\nimport systemsUpdatableFilter from '../../../PresentationalComponents/Filters/SystemsUpdatableFilter';\nimport { fetchSystems, fetchPatchSetSystems } from '../../../Utilities/api';\nimport { reviewSystemColumns } from '../WizardAssets';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { systemsListDefaultFilters } from '../../../Utilities/constants';\nimport useOsVersionFilter from '../../../PresentationalComponents/Filters/OsVersionFilter';\nimport { useFetchAllTemplateData } from '../WizardAssets';\n\nexport const ReviewSystems = ({ systemsIDs = [], patchSetID, ...props }) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const { values } = formOptions.getState();\n    const defaultSelectedSystems = buildSelectedSystemsObj(systemsIDs, values?.systems);\n\n    const [isLoading, setLoading] = useState(true);\n    const [rawData, setRawData] = useState([]);\n    const [systems, setSystems] = useState([]);\n    const [selectedRows, setSelectedRows] = useState(defaultSelectedSystems);\n    const [metadata, setMetada] = useState({\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    });\n    const [assignedSystems, setAssignedSystems] = useState([]);\n    const [areAssignedSystemsLoading, setAssignedSystemsLoading] = useState(true);\n\n    const [queryParams, setQueryParams] = useState({\n        page: 1,\n        perPage: 20,\n        filter: {\n            stale: [true, false]\n        }\n    });\n\n    const fetchAssignedSystems = useFetchAllTemplateData(\n        fetchPatchSetSystems,\n        system => system?.inventory_id\n    );\n\n    useEffect(() => {\n        if (patchSetID) {\n            fetchAssignedSystems({ id: patchSetID }).then(\n                ({ isLoading, data }) => {\n                    setAssignedSystems(data);\n                    setAssignedSystemsLoading(isLoading);\n                }\n            );\n        }\n    }, [patchSetID]);\n\n    useEffect(() => {\n        fetchSystems({\n            ...queryParams,\n            filter: {\n                ...queryParams.filter,\n                id: systemsIDs.length > 0 ? `in:${systemsIDs.join(',')}` : undefined,\n                satellite_managed: false\n            }\n        }).then(result => {\n            setSystems(\n                createSystemsRowsReview(\n                    result.data,\n                    { ...buildSelectedSystemsObj([...assignedSystems, ...systemsIDs]), ...selectedRows }\n                )\n            );\n            setMetada(result.meta);\n            setRawData(result.data);\n            setLoading(false);\n        });\n    }, [queryParams.filter, queryParams, assignedSystems]);\n\n    useEffect(() => {\n        input.onChange(selectedRows);\n\n        setSystems(\n            createSystemsRowsReview(rawData, selectedRows)\n        );\n    }, [selectedRows]);\n\n    useEffect(() => {\n        setSelectedRows({ ...selectedRows, ...buildSelectedSystemsObj(assignedSystems) });\n    }, [assignedSystems]);\n\n    const apply = (params, shouldReset = true) => {\n        setLoading(true);\n        setQueryParams((prevQueryParams) => ({\n            ...prevQueryParams,\n            ...params,\n            filter: { ...prevQueryParams.filter, ...params.filter },\n            ...shouldReset && {\n                page: 1,\n                offset: 0\n            }\n        }));\n    };\n\n    const osFilterConfig = useOsVersionFilter(queryParams.filter.os, apply);\n    const onSort = useSortColumn(reviewSystemColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(reviewSystemColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, params => apply(params, false));\n\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const selectRows = (toSelect) => {\n        const newSelections = toSelect.reduce((object, system) => {\n            object[system.id] = system.selected ? true : undefined;\n            return object;\n        }, {});\n\n        setSelectedRows({ ...selectedRows, ...newSelections });\n    };\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systems,\n            queryParams: {\n                ...queryParams,\n                filter: {\n                    ...queryParams.filter,\n                    ...systemsIDs.length > 0 && { id: `in:${systemsIDs.join(',')}` },\n                    satellite_managed: false\n                }\n            },\n            customSelector: selectRows,\n            totalItems: metadata.total_items\n        }\n    );\n\n    const isTableLoading = isLoading || (patchSetID && areAssignedSystemsLoading);\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component=\"h2\">\n                        {intl.formatMessage(messages.templateApplySystems)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TextContent>\n                    <Text component={TextVariants.p}>\n                        Select systems to apply the new template to. The list of systems <b>does not contain</b> systems\n                        managed by Satellite.\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <Alert variant=\"warning\" title={intl.formatMessage(messages.templateAlertSystems)} isInline />\n            <StackItem>\n                <TableView\n                    columns={reviewSystemColumns}\n                    compact\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    selectedRows={selectedRows}\n                    onSelect={onSelect}\n                    sortBy={sortBy}\n                    apply={apply}\n                    tableOUIA={'patch-set-table'}\n                    paginationOUIA={'patch-set-pagination'}\n                    store={{\n                        rows: systems,\n                        metadata,\n                        status: { isLoading: isTableLoading },\n                        queryParams\n                    }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                                intl.formatMessage(messages.labelsFiltersSearch)\n                            ),\n                            staleFilter(apply, queryParams.filter),\n                            systemsUpdatableFilter(apply, queryParams.filter),\n                            ...osFilterConfig\n                        ]\n                    }}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)}\n                    defaultFilters={systemsListDefaultFilters}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nReviewSystems.propTypes = {\n    systemsIDs: propTypes.array,\n    patchSetID: propTypes.string\n};\n\nexport default ReviewSystems;\n","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { getOperatingSystems } from '../../Utilities/api';\n\nconst useOsVersionFilter = (currentFilter = '', apply) => {\n    const versions = useSelector(({ entities }) => entities?.operatingSystems);\n    const versionsLoaded = useSelector(({ entities }) => entities?.operatingSystemsLoaded);\n\n    const [operatingSystems, setOperatingSystems] = useState([]);\n    const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule(\n        {\n            appName: 'inventory',\n            scope: 'inventory',\n            module: './OsFilterHelpers'\n        }\n    );\n\n    useEffect(() => {\n        if (versions === undefined || versionsLoaded === undefined) {\n            /* explicitly request OS versions from API */\n            getOperatingSystems().then(({ results }) => {\n                setOperatingSystems((results || []).map(entry => {\n                    const { name, major, minor } = entry.value;\n                    const versionStringified = `${major}.${minor}`;\n                    return { label: `${name} ${versionStringified}`, value: `${versionStringified}` };\n                }));\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        if (versionsLoaded === true) {\n            setOperatingSystems(versions);\n        }\n    }, [versionsLoaded]);\n\n    const osVersionValue = (currentFilter === '' ? [] : Array.isArray(currentFilter) ? currentFilter : currentFilter.split(','))\n    // patchman uses \"RHEL \" prefix in values; need to remove\n    .map((version) => version.substring(5));\n\n    return [\n        ...(buildOSFilterConfig\n            ? [\n                buildOSFilterConfig(\n                    {\n                        id: 'rhel_version',\n                        value: toGroupSelectionValue(osVersionValue),\n                        onChange: (event, value) => {\n                            /* `versions` must be of type string, e.g., \"8.9,9.0\" */\n                            const versions = Object.values(value)\n                            .flatMap((versions) => Object.keys(versions))\n                            .map((version) => `RHEL ${version}`)\n                            .toString();\n                            apply({ filter: { os: versions } });\n                        }\n                    },\n                    operatingSystems\n                )\n            ]\n            : [])\n    ];\n};\n\nexport default useOsVersionFilter;\n","import React, { Fragment } from 'react';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    TextVariants,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\nimport { templateDateFormat } from '../../../Utilities/Helpers';\n\nconst renderTextListItem = (label, text) => (\n    <Fragment>\n        <TextListItem component={TextListItemVariants.dt} style={{ minWidth: 220 }}>\n            {intl.formatMessage(messages[label])}\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n            {text}\n        </TextListItem>\n    </Fragment>\n);\n\nconst ReviewPatchSet = () => {\n    const formOptions = useFormApi();\n    const { values } = formOptions.getState();\n    const { name, description, toDate } = values.existing_patch_set || values;\n    const { systems } = values;\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component=\"h2\">\n                        {intl.formatMessage(messages.templateReview)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TextContent style={{ marginTop: '-15px' }}>\n                    <Text component={TextVariants.p}>\n                        {intl.formatMessage(messages.textPatchTemplateReview)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TextContent>\n                    <Text component=\"h2\" className=\"pf-v5-u-mt-md pf-v5-u-mb-sm\">\n                        {intl.formatMessage(messages.textPatchTemplateContent)}\n                    </Text>\n                    <TextList component={TextListVariants.dl}>\n                        {renderTextListItem('labelsColumnsUpToDate', templateDateFormat(toDate))}\n                    </TextList>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TextContent>\n                    <Text component=\"h2\" className=\"pf-v5-u-mt-md pf-v5-u-mb-sm\">\n                        {intl.formatMessage(messages.textPatchTemplateDetails)}\n                    </Text>\n                    <TextList component={TextListVariants.dl}>\n                        {renderTextListItem('labelsColumnsName', name)}\n                        {renderTextListItem('labelsDescription', description\n                            || intl.formatMessage(messages.titlesTemplateNoDescriptionProvided))}\n                    </TextList>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TextContent>\n                    <Text component=\"h2\" className=\"pf-v5-u-mt-md pf-v5-u-mb-sm\">\n                        {intl.formatMessage(messages.textPatchTemplateSystems)}\n                    </Text>\n                    <TextList component={TextListVariants.dl}>\n                        {renderTextListItem(\n                            'labelsSelectedSystems',\n                            intl.formatMessage(messages.labelsSystem, {\n                                systemsCount: Object.values(systems).filter(system => system).length\n                            })\n                        )}\n                    </TextList>\n                </TextContent>\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default ReviewPatchSet;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateIcon,\n    EmptyStateBody,\n    Grid,\n    GridItem,\n    HelperText,\n    HelperTextItem,\n    Button,\n    EmptyStateHeader\n} from '@patternfly/react-core';\nimport {\n    CheckCircleIcon,\n    ExclamationCircleIcon,\n    InProgressIcon\n} from '@patternfly/react-icons';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { apiFailedNotification } from '../WizardAssets';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst RequestProgress = ({ onClose, state }) => {\n    const { requestPending, failed, error } = state;\n    const dispatch = useDispatch();\n\n    if (failed) {\n        dispatch(\n            addNotification(\n                apiFailedNotification(error.detail)\n            )\n        );\n    }\n\n    return (\n        <EmptyState\n            variant={EmptyStateVariant.lg}\n            data-component-ouia-id=\"patch-set-progress\"\n        >\n            <EmptyStateHeader\n                titleText={failed\n                    ? intl.formatMessage(messages.textErrorSomethingWrong)\n                    : requestPending\n                        ? intl.formatMessage(messages.textConfigurationInProgress)\n                        : intl.formatMessage(messages.textPatchTemplateSuccessfuly)}\n                icon={<EmptyStateIcon\n                    color={\n                        failed\n                            ? 'var(--pf-v5-global--danger-color--100)'\n                            : !requestPending\n                                ? 'var(--pf-v5-global--success-color--100)'\n                                : undefined\n                    }\n                    icon={\n                        failed\n                            ? ExclamationCircleIcon\n                            : requestPending\n                                ? InProgressIcon\n                                : CheckCircleIcon\n                    }\n                />}\n                headingLevel=\"h1\"\n            />\n            <EmptyStateBody>\n                <Grid hasGutter>\n                    {(requestPending) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    {intl.formatMessage(messages.textPatchTemplatePending)}\n                                </HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"link\" isInline onClick={onClose}>\n                                {intl.formatMessage(messages.labelsCancel)}\n                            </Button>{' '}\n                        </GridItem></>\n                    )}\n                    {(!requestPending && !failed) && (\n                        <GridItem>\n                            <Button variant=\"primary\" onClick={onClose}>\n                                {intl.formatMessage(messages.textReturnToApp)}\n                            </Button>\n                        </GridItem>\n                    )}\n                    {(!requestPending && failed) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    {intl.formatMessage(\n                                        messages.templateError,\n                                        { a: (chunks) => <a href=\"https://www.redhat.com/en/services/support\">{chunks}</a> })}\n                                </HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"primary\" onClick={onClose}>\n                                {intl.formatMessage(messages.textReturnToApp)}\n                            </Button>\n                        </GridItem></>\n                    )}\n                </Grid>\n\n            </EmptyStateBody>\n        </EmptyState>\n    );\n};\n\nRequestProgress.propTypes = {\n    onClose: propTypes.func,\n    state: propTypes.object\n};\n\nexport default RequestProgress;\n","\nimport React, { Fragment, useState, memo, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport DatePicker from '@data-driven-forms/pf4-component-mapper/date-picker';\nimport {\n    Modal\n} from '@patternfly/react-core';\nimport {\n    Wizard\n} from '@patternfly/react-core/deprecated';\nimport { useDispatch } from 'react-redux';\n\nimport ConfigurationStepFields from './steps/ConfigurationStepFields';\nimport ContentStep from './steps/ContentStep';\nimport NameField from './InputFields/NameField';\nimport ToDateField from './InputFields/ToDateField';\nimport DescriptionField from './InputFields/DescriptionField';\nimport ReviewSystems from './steps/ReviewSystems';\nimport ReviewPatchSet from './steps/ReviewPatchSet';\nimport { schema, validatorMapper, getWizardTitle } from './WizardAssets';\nimport RequestProgress from './steps/RequestProgress';\nimport { usePatchSetApi } from '../../Utilities/hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport {\n    fetchPatchSetAction,\n    clearPatchSetAction\n} from '../../store/Actions/Actions';\n\nexport const PatchSetWizard = ({ systemsIDs, setBaselineState, patchSetID }) => {\n    //if system ids exist, those are being assigned. Likewise if patchSetID exists, it is being edited\n    const wizardType = patchSetID ? 'edit' : 'create';\n    const [wizardState, setWizardState] = useState({\n        submitted: false,\n        formValues: {},\n        requestPending: true,\n        failed: false,\n        shouldRefresh: false\n    });\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        if (patchSetID) {\n            dispatch(fetchPatchSetAction(patchSetID));\n        }\n\n        return () => dispatch(clearPatchSetAction());\n    }, []);\n\n    const onSubmit = usePatchSetApi(wizardState, setWizardState, patchSetID);\n\n    const handleWizardClose = () => {\n        const shouldRefresh = !wizardState.failed && wizardState.submitted;\n\n        setBaselineState({ isPatchSetWizardOpen: false, systemsIDs: [], patchSetID: undefined, shouldRefresh });\n        setWizardState({ formValues: {}, submitted: false });\n    };\n\n    const mapperExtensions = {\n        nameField: {\n            component: NameField\n        },\n        descriptionField: {\n            component: DescriptionField\n        },\n        toDateField: {\n            component: ToDateField\n        },\n        contentStep: {\n            component: ContentStep,\n            patchSetID\n        },\n        configurationStep: {\n            component: ConfigurationStepFields,\n            systemsIDs: systemsIDs || [],\n            patchSetID\n        },\n        reviewSystems: {\n            component: ReviewSystems,\n            systemsIDs: systemsIDs || [],\n            patchSetID\n        },\n        reviewPatchSet: {\n            component: ReviewPatchSet,\n            systemsIDs: systemsIDs || []\n        }\n    };\n\n    return (\n        <Fragment>\n            {!wizardState.submitted &&  (\n                <FormRenderer\n                    schema={schema(wizardType)}\n                    subscription={{ values: true }}\n                    FormTemplate={(props) => (\n                        <Pf4FormTemplate {...props} showFormControls={false} />\n                    )}\n                    componentMapper={{\n                        [componentTypes.WIZARD]: {\n                            component: WizardMapper,\n                            className: 'patch-set',\n                            'data-ouia-component-id': 'patch-set-wizard'\n                        },\n                        [componentTypes.TEXT_FIELD]: TextField,\n                        [componentTypes.DATE_PICKER]: DatePicker,\n                        ...mapperExtensions\n                    }}\n                    validatorMapper={validatorMapper}\n                    onSubmit={onSubmit}\n                    onCancel={handleWizardClose} />\n            ) || (\n                <Modal\n                    isOpen\n                    variant={'large'}\n                    showClose={false}\n                    className=\"patch-set\"\n                    hasNoBodyWrapper\n                    aria-describedby=\"patch-set-description\"\n                    aria-labelledby=\"patch-set-modal-title\"\n                >\n                    <Wizard\n                        className=\"patch-set\"\n                        title={getWizardTitle(wizardType)}\n                        description={\n                            <Fragment>\n                                {intl.formatMessage(messages.templateDescription)}\n                                {/*<a href={TEMPLATES_DOCS_LINK} target=\"__blank\" rel=\"noopener noreferrer\"\n                                    className=\"pf-v5-u-ml-sm\">\n                                    {intl.formatMessage(messages.labelsDocumentation)}\n                                    <ExternalLinkAltIcon className=\"pf-v5-u-ml-xs\"/>\n                                </a>*/}\n                            </Fragment>\n                        }\n                        steps={[\n                            {\n                                name: 'progress',\n                                component: (\n                                    <RequestProgress\n                                        onClose={handleWizardClose}\n                                        state={wizardState}\n                                    />\n                                ),\n                                isFinishedStep: true\n                            }\n                        ]}\n                        onClose={handleWizardClose}\n                    />\n                </Modal>\n            )}\n        </Fragment>\n    );\n};\n\nPatchSetWizard.propTypes = {\n    setBaselineState: propTypes.func,\n    systemsIDs: propTypes.array,\n    patchSetID: propTypes.string\n};\n\nexport default memo(PatchSetWizard, (prevProps, nextProps) => {\n    return JSON.stringify(prevProps) === JSON.stringify(nextProps);\n});\n"],"names":["HeaderBreadcrumbs","_ref","items","headerOUIA","React","Breadcrumb","filter","Boolean","map","item","BreadcrumbItem","key","title","isActive","to","InsightsLink","concat","propTypes","PropTypes","HeaderTabs","location","useLocation","navigate","useNavigate","Tabs","onSelect","event","tabString","activeKey","pathname","className","Tab","eventKey","Header","showTabs","breadcrumbs","children","actions","PageHeader","Split","hasGutter","SplitItem","PageHeaderTitle","isFilled","SystemUpToDate","Bullseye","EmptyState","style","paddingTop","EmptyStateHeader","titleText","intl","formatMessage","messages","statesNoApplicableAdvisories","icon","EmptyStateIcon","Icon","size","marginBottom","CheckCircleIcon","color","headingLevel","EmptyStateBody","statesSystemUpToDate","TableFooter","isLoading","page","perPage","onSetPage","totalItems","onPerPageSelect","paginationOUIA","TableToolbar","isFooter","Skeleton","fontSize","width","margin","Pagination","itemCount","widgetId","variant","PaginationVariant","bottom","ouiaId","isDisabled","TableView","_columns$length","columns","_ref$store","store","rows","metadata","status","_ref$store$queryParam","queryParams","search","onCollapse","onSort","onExport","filterConfig","sortBy","remediationProvider","selectedRows","compact","apply","tableOUIA","errorState","emptyState","defaultFilters","searchChipLabel","ToolbarButton","actionsConfig","isRemediationLoading","actionsToggle","_React$useMemo","convertLimitOffset","limit","offset","_React$useMemo2","_slicedToArray","_useRemoveFilter","useRemoveFilter","deleteFilters","selectedCount","arrayFromObj","length","code","hasError","bulkSelectConfig","useBulkSelectConfig","has_systems","ErrorHandler","ErrorState","PrimaryToolbar","pagination","total_items","isCompact","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","labelsFiltersReset","labelsFiltersClear","AsyncRemediationButton","Object","values","isSelected","exportConfig","bulkSelect","ToolbarItem","SkeletonTable","numberOfColumns","TableVariant","Table","cells","canSelectAll","isStickyHeader","TableHeader","TableBody","CreatePatchSetButton","setPatchSetState","hasAccess","Button","onClick","isPatchSetWizardOpen","labelsButtonCreateTemplate","Tooltip","content","isAriaDisabled","patchSetColumns","transforms","sortable","patchSetRowActions","openPatchSetEditModal","handlePatchSetDelete","labelsButtonEditTemplate","_event","_rowId","rowData","id","labelsButtonRemoveTemplate","patchSetDetailRowActions","handleSystemUnassign","titlesTemplateRemoveFromSystems","systemsCount","CustomActionsToggle","EllipsisVIcon","patchSetUnassignSystemsNotifications","success","description","failure","patchSetAssignSystemsNotifications","SelectPagination","changePage","Flex","justifyContent","default","FlexItem","AngleLeftIcon","AngleRightIcon","SelectExistingSets","_ref2","setSelectedPatchSet","selectedSets","systems","_ref2$selectCallback","selectCallback","dispatch","useDispatch","formOptions","useFormApi","_useState","useState","_useState2","isOpen","setOpen","useSelector","_ref3","PatchSetsStore","_ref4","_ref5","_ref6","useEffect","clearPatchSetsAction","searchDependency","fetchPatchSetsAction","_objectSpread","patchOptions","useMemo","SelectOption","Spinner","set","value","name","_useState3","debounce","params","changePatchSetsParams","searchAdvisory","FormGroup","fieldId","label","textTemplateChoose","isRequired","Select","SelectVariant","single","labelsFiltersSearchTemplatePlaceholder","_","selected","_formOptions$change","_selectedSet$","_selectedSet$2","selectedSet","change","call","placeholderText","templateSelectExisting","inlineFilterPlaceholderText","selections","onToggle","onFilter","props","searchValue","hasInlineFilter","footer","menuAppendTo","document","body","maxHeight","dateStr","match","labelsErrorInvalidDate","date","Date","timestamp","getTime","minDate","Number","isNaN","labelsErrorDateLimit","reviewSystemColumns","configurationFields","component","componentTypes","TEXT_FIELD","hidden","contentStep","nameComponent","validate","type","validatorTypes","REQUIRED","descriptionComponent","toDateComponent","getWizardTitle","wizardType","templateEdit","templateTitle","schema","fields","WIZARD","isDynamic","inModal","Fragment","templateDescription","templateContentStepSidebarName","nextStep","templateDetailStepSidebarName","templateStepSystems","templateReview","validatorMapper","formValueSystems","filterSelectedActiveSystemIDs","undefined","templateNoSystemSelected","dateValidator","formValues","_formValues$takenTemp","areTakenTemplateNamesLoading","templateDetailLoading","templateWizardValidateLoading","previousName","takenTemplateNames","includes","templateWizardValidateNameTaken","useFetchAllTemplateData","fetchFunction","mapFunction","_useFetchBatched","useFetchBatched","fetchBatched","_asyncToGenerator","_regeneratorRuntime","_callee","result","_args","arguments","_context","prev","next","sent","abrupt","data","flatMap","stop","ConfigurationFields","renderForm","display","Grid","GridItem","lg","md","ConfigurationStepFields","systemsIDs","patchSetID","_useState4","shouldCreateNew","_useState5","_useState6","_useSelector","SpecificPatchSetReducer","shallowEqual","patchSet","Stack","StackItem","TextContent","Text","templateDetailStepTitle","templateDetailStepText","ContentStep","toDate","config","to_time","convertIsoToDate","templateContentStepTitle","templateContentStepText","ExpandableSection","toggleText","templateContentStepExpandableTitle","templateContentStepExpandable","_formOptions$getState","input","useFieldApi","getState","setName","validated","setValidated","setTakenTemplateNames","_useState7","_useState8","setAreTakenTemplateNamesLoading","fetchTemplateNames","fetchPatchSets","attributes","then","labelsColumnsName","TextInput","onChange","val","autoFocus","FormHelperText","HelperText","HelperTextItem","setToDate","templateDateField","templateDateUpto","DatePicker","appendTo","e","popoverProps","position","validators","invalidFormatText","setDescription","labelsDescription","ReviewSystems","_ref$systemsIDs","_objectWithoutProperties","_excluded","defaultSelectedSystems","buildSelectedSystemsObj","setLoading","rawData","setRawData","setSystems","setSelectedRows","_useState9","_useState10","setMetada","_useState11","_useState12","assignedSystems","setAssignedSystems","_useState13","_useState14","areAssignedSystemsLoading","setAssignedSystemsLoading","_useState15","stale","_useState16","setQueryParams","fetchAssignedSystems","fetchPatchSetSystems","system","inventory_id","fetchSystems","join","satellite_managed","createSystemsRowsReview","_toConsumableArray","meta","shouldReset","prevQueryParams","osFilterConfig","currentFilter","versions","entities","operatingSystems","versionsLoaded","operatingSystemsLoaded","setOperatingSystems","_useLoadModule","useLoadModule","appName","scope","module","_useLoadModule2$","_useLoadModule2$2","toGroupSelectionValue","buildOSFilterConfig","getOperatingSystems","results","entry","_entry$value","major","minor","versionStringified","osVersionValue","Array","isArray","split","version","substring","keys","toString","os","useOsVersionFilter","useSortColumn","createSortBy","sort","useSetPage","usePerPageSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","customSelector","toSelect","newSelections","reduce","object","isTableLoading","templateApplySystems","TextVariants","p","Alert","templateAlertSystems","isInline","searchFilter","labelsFiltersSystemsSearchTitle","labelsFiltersSearch","staleFilter","systemsUpdatableFilter","systemsListDefaultFilters","renderTextListItem","text","TextListItem","TextListItemVariants","dt","minWidth","dd","existing_patch_set","marginTop","textPatchTemplateReview","textPatchTemplateContent","TextList","TextListVariants","dl","templateDateFormat","textPatchTemplateDetails","titlesTemplateNoDescriptionProvided","textPatchTemplateSystems","labelsSystem","RequestProgress","onClose","state","requestPending","failed","error","addNotification","detail","EmptyStateVariant","textErrorSomethingWrong","textConfigurationInProgress","textPatchTemplateSuccessfuly","ExclamationCircleIcon","InProgressIcon","textPatchTemplatePending","labelsCancel","textReturnToApp","templateError","a","chunks","href","PatchSetWizard","_objectSpread2","setBaselineState","submitted","shouldRefresh","wizardState","setWizardState","fetchPatchSetAction","clearPatchSetAction","onSubmit","usePatchSetApi","handleWizardClose","mapperExtensions","nameField","NameField","descriptionField","DescriptionField","toDateField","ToDateField","configurationStep","reviewSystems","reviewPatchSet","ReviewPatchSet","FormRenderer","subscription","FormTemplate","Pf4FormTemplate","_extends","showFormControls","componentMapper","_defineProperty","WizardMapper","TextField","DATE_PICKER","onCancel","Modal","showClose","hasNoBodyWrapper","Wizard","steps","isFinishedStep","memo","prevProps","nextProps","JSON","stringify"],"sourceRoot":""}