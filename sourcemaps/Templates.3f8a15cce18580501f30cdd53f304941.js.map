{"version":3,"file":"js/Templates.fdab098207d31b189768.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon.js","webpack:///./src/SmartComponents/Modals/DeleteSetModal.js","webpack:///./src/SmartComponents/PatchSet/PatchSetAssets.js","webpack:///./src/SmartComponents/PatchSet/PatchSet.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.OutlinedQuestionCircleIcon = require('../createIcon').createIcon(exports.OutlinedQuestionCircleIconConfig);\nexports[\"default\"] = exports.OutlinedQuestionCircleIcon;","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Checkbox, Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst DeleteSetModal = ({ isModalOpen, setModalOpen, templateName, onConfirm }) => {\n    const [isCheckboxChecked, setCheckboxChecked] = useState(false);\n\n    const onClose = () => {\n        setModalOpen(false);\n        setCheckboxChecked(false);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.titlesTemplateDeleteModalTitle)}\n            titleIconVariant=\"warning\"\n            isOpen={isModalOpen}\n            onClose={onClose}\n            variant=\"small\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={() => {onClose(); onConfirm();}} isDisabled={!isCheckboxChecked}>\n                    {intl.formatMessage(messages.labelsDelete)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {intl.formatMessage(messages.titlesTemplateDeleteModalText, { templateName, b: (...chunks) => <b>{chunks}</b> })}\n            <Checkbox\n                className=\"pf-u-mt-md\"\n                isChecked={isCheckboxChecked}\n                checked={isCheckboxChecked}\n                onChange={(value) => setCheckboxChecked(value)}\n                label={intl.formatMessage(messages.titlesTemplateDeleteModalCheckbox)}\n                id=\"template-delete-modal-checkbox\"\n            />\n        </Modal>\n    );\n};\n\nDeleteSetModal.propTypes = {\n    isModalOpen: propTypes.bool,\n    setModalOpen: propTypes.func,\n    templateName: propTypes.string,\n    onConfirm: propTypes.func\n};\n\nexport default DeleteSetModal;\n","import React from 'react';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table/dist/js';\nimport {\n    EllipsisVIcon\n} from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const CreatePatchSetButton = (setPatchSetState, hasAccess) => () =>\n    !hasAccess ?\n        <Tooltip content='For editing access, contact your administrator.'>\n            <Button key='createButton' isAriaDisabled >\n                {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n            </Button>\n        </Tooltip>\n        :\n        (<Button key='createButton' onClick={() => setPatchSetState({ isPatchSetWizardOpen: true })}>\n            {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n        </Button>);\n\nexport const patchSetColumns = [\n    {\n        key: 'name',\n        title: 'Name',\n        transforms: [sortable]\n    },\n    {\n        key: 'systems',\n        title: 'Systems applied',\n        transforms: [sortable]\n    },\n    {\n        key: 'last_edited',\n        title: 'Last edited',\n        transforms: [sortable]\n    },\n    {\n        key: 'published',\n        title: 'Published',\n        transforms: [sortable]\n    },\n    {\n        key: 'creator',\n        title: 'Created by',\n        transforms: [sortable]\n    }\n];\n\nexport const patchSetRowActions = (openPatchSetEditModal, handlePatchSetDelete) => [\n    {\n        title: intl.formatMessage(messages.labelsButtonEditTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            openPatchSetEditModal(rowData?.id);\n        }\n    },\n    {\n        title: intl.formatMessage(messages.labelsButtonRemoveTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            handlePatchSetDelete(rowData);\n        }\n    }\n\n];\n\nexport const CustomActionsToggle = () => <Tooltip content='For editing access, contact your administrator.'>\n    <Button\n        isAriaDisabled\n        variant=\"plain\"\n        aria-label=\"plain kebab\"\n    >\n        <EllipsisVIcon />\n    </Button>\n</Tooltip>;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport {\n    fetchPatchSetsAction, changePatchSetsParams,\n    selectPatchSetRow, clearPatchSetsAction\n} from '../../store/Actions/Actions';\nimport { deletePatchSet } from '../../Utilities/api';\nimport { createPatchSetRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams } from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useDeepCompareEffect, useEntitlements, usePerPageSelect, useSetPage, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications, addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n    patchSetColumns, CreatePatchSetButton as createPatchSetButton,\n    patchSetRowActions, CustomActionsToggle\n} from './PatchSetAssets';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport { patchSetDeleteNotifications, TEMPLATES_DOCS_LINK } from '../../Utilities/constants';\nimport usePatchSetState from '../../Utilities/usePatchSetState';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\nimport { ExternalLinkAltIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport DeleteSetModal from '../Modals/DeleteSetModal';\nimport { NoPatchSetList, NoSmartManagement } from '../../PresentationalComponents/Snippets/EmptyStates';\n\nconst PatchSet = () => {\n    const pageTitle = intl.formatMessage(messages.titlesTemplate);\n\n    const IS_SELECTION_ENABLED = false;\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [hasSmartManagement, setSmartManagement] = React.useState(true);\n    const [isDeleteConfirmModalOpen, setDeleteConfirmModalOpen] = React.useState(false);\n    const [patchSetToDelete, setPatchSetToDelete] = React.useState(null);\n\n    const patchSets = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.rows\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.metadata\n    );\n    const status = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.status\n    );\n\n    const rows = useMemo(\n        () => createPatchSetRows(patchSets, selectedRows, queryParams),\n        [patchSets, selectedRows]\n    );\n\n    const getEntitlements = useEntitlements();\n\n    function apply(params) {\n        dispatch(changePatchSetsParams(params));\n    }\n\n    const refreshTable = () => {\n        dispatch(fetchPatchSetsAction({ ...queryParams, page: 1, offset: 0 }));\n    };\n\n    useEffect(() => {\n        getEntitlements().then((entitelements) => {\n            setSmartManagement(\n                entitelements?.smart_management?.is_entitled\n            );\n        });\n\n        return () => {\n            dispatch(clearPatchSetsAction());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const { patchSetState, setPatchSetState, openPatchSetEditModal } = usePatchSetState(selectedRows);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh === true) {\n            refreshTable();\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchPatchSetsAction(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const onSelect = useOnSelect(\n        rows,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.templates,\n            queryParams,\n            selectionDispatcher: selectPatchSetRow\n        }\n    );\n\n    const onSort = useSortColumn(patchSetColumns, apply, 0);\n    const sortBy = React.useMemo(\n        () => createSortBy(patchSetColumns, metadata.sort, 0),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const openPatchDeleteModal = (rowData) => {\n        setDeleteConfirmModalOpen(true);\n        setPatchSetToDelete(rowData);\n    };\n\n    const handlePatchSetDelete = () => {\n        deletePatchSet(patchSetToDelete.id).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetToDelete.displayName).success));\n            refreshTable();\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetToDelete.displayName).error));\n        });\n    };\n\n    const { hasAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n    const CreatePatchSetButton = createPatchSetButton(setPatchSetState, hasAccess);\n    const actionsConfig = patchSetRowActions(openPatchSetEditModal, openPatchDeleteModal);\n\n    //TODO: refactor search filter to be able to wrap this into useMemo\n    const filterConfig = {\n        items: [\n            searchFilter(apply, queryParams.search,\n                intl.formatMessage(messages.labelsFiltersSearchTemplateTitle),\n                intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)\n            )\n        ]\n    };\n\n    return (\n        <React.Fragment>\n            <DeleteSetModal\n                templateName={patchSetToDelete?.displayName}\n                isModalOpen={isDeleteConfirmModalOpen}\n                setModalOpen={setDeleteConfirmModalOpen}\n                onConfirm={handlePatchSetDelete}\n            />\n            <Header\n                headerOUIA={'advisories'}\n                title={<span>\n                    {intl.formatMessage(messages.titlesTemplate)}\n                    <Popover\n                        id=\"template-header-title-popover\"\n                        aria-describedby=\"template-header-title-popover\"\n                        aria-labelledby=\"template-header-title-popover\"\n                        hasAutoWidth\n                        maxWidth=\"320px\"\n                        position=\"right\"\n                        enableFlip\n                        headerContent={\n                            intl.formatMessage(messages.templatePopoverHeader)\n                        }\n                        bodyContent={\n                            intl.formatMessage(messages.templatePopoverBody)\n                        }\n                        footerContent={\n                            <a href={TEMPLATES_DOCS_LINK} target=\"__blank\" rel=\"noopener noreferrer\">\n                                {intl.formatMessage(messages.linksReadMore)} <ExternalLinkAltIcon />\n                            </a>\n                        }\n                    >\n                        <OutlinedQuestionCircleIcon\n                            color=\"var(--pf-global--secondary-color--100)\"\n                            className=\"pf-u-ml-sm\"\n                            style={{ verticalAlign: '0', fontSize: 16, cursor: 'pointer' }}\n                        />\n                    </Popover>\n                </span>}\n            />\n            {patchSetState.isPatchSetWizardOpen &&\n                <PatchSetWizard\n                    systemsIDs={patchSetState.systemsIDs}\n                    setBaselineState={setPatchSetState}\n                    patchSetID={patchSetState.patchSetID}\n                />}\n            <Main>\n                {hasSmartManagement\n                    ? rows.length === 0\n                        ? <NoPatchSetList Button={CreatePatchSetButton}/>\n                        : <TableView\n                            columns={patchSetColumns}\n                            compact\n                            onSetPage={onSetPage}\n                            onPerPageSelect={onPerPageSelect}\n                            onSort={onSort}\n                            selectedRows={IS_SELECTION_ENABLED && selectedRows}\n                            onSelect={IS_SELECTION_ENABLED && onSelect}\n                            sortBy={sortBy}\n                            apply={apply}\n                            tableOUIA={'patch-set-table'}\n                            paginationOUIA={'patch-set-pagination'}\n                            store={{ rows, metadata, status, queryParams }}\n                            actionsConfig={(patchSets?.length > 0) && actionsConfig}\n                            filterConfig={filterConfig}\n                            searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchTemplateTitle)}\n                            CreatePatchSetButton={CreatePatchSetButton}\n                            actionsToggle={!hasAccess ? CustomActionsToggle : null}\n                        />\n                    : <NoSmartManagement />}\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default PatchSet;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","DeleteSetModal","isModalOpen","setModalOpen","templateName","onConfirm","useState","isCheckboxChecked","setCheckboxChecked","onClose","Modal","title","intl","messages","titleIconVariant","isOpen","variant","actions","Button","key","onClick","isDisabled","b","chunks","Checkbox","className","isChecked","checked","onChange","value","label","id","propTypes","patchSetColumns","transforms","sortable","CustomActionsToggle","Tooltip","content","isAriaDisabled","pageTitle","setPageTitle","dispatch","useDispatch","history","useHistory","React","firstMount","setFirstMount","hasSmartManagement","setSmartManagement","isDeleteConfirmModalOpen","setDeleteConfirmModalOpen","patchSetToDelete","setPatchSetToDelete","patchSets","useSelector","PatchSetsStore","rows","queryParams","selectedRows","metadata","status","useMemo","createPatchSetRows","getEntitlements","useEntitlements","apply","params","changePatchSetsParams","refreshTable","fetchPatchSetsAction","page","offset","useEffect","then","entitelements","smart_management","is_entitled","clearPatchSetsAction","clearNotifications","usePatchSetState","patchSetState","setPatchSetState","openPatchSetEditModal","shouldRefresh","useDeepCompareEffect","decodeQueryparams","location","search","push","encodeURLParams","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","selectPatchSetRow","onSort","useSortColumn","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","hasAccess","usePermissionsWithContext","CreatePatchSetButton","isPatchSetWizardOpen","createPatchSetButton","actionsConfig","handlePatchSetDelete","_event","_rowId","rowData","patchSetRowActions","filterConfig","items","searchFilter","displayName","deletePatchSet","addNotification","patchSetDeleteNotifications","success","error","Header","headerOUIA","Popover","hasAutoWidth","maxWidth","position","enableFlip","headerContent","bodyContent","footerContent","href","TEMPLATES_DOCS_LINK","target","rel","color","style","verticalAlign","fontSize","cursor","PatchSetWizard","systemsIDs","setBaselineState","patchSetID","Main","length","TableView","columns","compact","onSelect","tableOUIA","paginationOUIA","store","searchChipLabel","actionsToggle"],"sourceRoot":""}