{"version":3,"file":"js/Systems.76914b16907409840465.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardBody.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/package-icon.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Card/card.mjs","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/PresentationalComponents/PatchSetWrapper/PatchSetWrapper.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js","webpack:///./src/PresentationalComponents/StatusReports/SystemsStatusReport.js","webpack:///./src/SmartComponents/Systems/Systems.js","webpack:///./src/Utilities/usePatchSetState.js","webpack:///./src/Utilities/useRemediationDataProvider.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport const CardContext = React.createContext({\n    cardId: '',\n    registerTitleId: () => { },\n    isExpanded: false\n});\nexport const Card = (_a) => {\n    var { children = null, id = '', className = '', component = 'article', isHoverable = false, isCompact = false, isSelectable = false, isSelectableRaised = false, isSelected = false, isDisabledRaised = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true, hasSelectableInput = false, selectableInputAriaLabel, onSelectableInputChange = () => { } } = _a, props = __rest(_a, [\"children\", \"id\", \"className\", \"component\", \"isHoverable\", \"isCompact\", \"isSelectable\", \"isSelectableRaised\", \"isSelected\", \"isDisabledRaised\", \"isFlat\", \"isExpanded\", \"isRounded\", \"isLarge\", \"isFullHeight\", \"isPlain\", \"ouiaId\", \"ouiaSafe\", \"hasSelectableInput\", \"selectableInputAriaLabel\", \"onSelectableInputChange\"]);\n    const Component = component;\n    const ouiaProps = useOUIAProps(Card.displayName, ouiaId, ouiaSafe);\n    const [titleId, setTitleId] = React.useState('');\n    const [ariaProps, setAriaProps] = React.useState();\n    if (isCompact && isLarge) {\n        // eslint-disable-next-line no-console\n        console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n        isLarge = false;\n    }\n    const getSelectableModifiers = () => {\n        if (isDisabledRaised) {\n            return css(styles.modifiers.nonSelectableRaised);\n        }\n        if (isSelectableRaised) {\n            return css(styles.modifiers.selectableRaised, isSelected && styles.modifiers.selectedRaised);\n        }\n        if (isSelectable || isHoverable) {\n            return css(styles.modifiers.selectable, isSelected && styles.modifiers.selected);\n        }\n        return '';\n    };\n    const containsCardTitleChildRef = React.useRef(false);\n    const registerTitleId = (id) => {\n        setTitleId(id);\n        containsCardTitleChildRef.current = !!id;\n    };\n    React.useEffect(() => {\n        if (selectableInputAriaLabel) {\n            setAriaProps({ 'aria-label': selectableInputAriaLabel });\n        }\n        else if (titleId) {\n            setAriaProps({ 'aria-labelledby': titleId });\n        }\n        else if (hasSelectableInput && !containsCardTitleChildRef.current) {\n            setAriaProps({});\n            // eslint-disable-next-line no-console\n            console.warn('If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed');\n        }\n    }, [hasSelectableInput, selectableInputAriaLabel, titleId]);\n    return (React.createElement(CardContext.Provider, { value: {\n            cardId: id,\n            registerTitleId,\n            isExpanded\n        } },\n        hasSelectableInput && (React.createElement(\"input\", Object.assign({ className: \"pf-screen-reader\", id: `${id}-input` }, ariaProps, { type: \"checkbox\", checked: isSelected, onChange: event => onSelectableInputChange(id, event), disabled: isDisabledRaised, tabIndex: -1 }))),\n        React.createElement(Component, Object.assign({ id: id, className: css(styles.card, isCompact && styles.modifiers.compact, isExpanded && styles.modifiers.expanded, isFlat && styles.modifiers.flat, isRounded && styles.modifiers.rounded, isLarge && styles.modifiers.displayLg, isFullHeight && styles.modifiers.fullHeight, isPlain && styles.modifiers.plain, getSelectableModifiers(), className), tabIndex: isSelectable || isSelectableRaised ? '0' : undefined }, props, ouiaProps), children)));\n};\nCard.displayName = 'Card';\n//# sourceMappingURL=Card.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nexport const CardBody = (_a) => {\n    var { children = null, className = '', component = 'div', isFilled = true } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"isFilled\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardBody, !isFilled && styles.modifiers.noFill, className) }, props), children));\n};\nCardBody.displayName = 'CardBody';\n//# sourceMappingURL=CardBody.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nexport const CardTitle = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const { cardId, registerTitleId } = React.useContext(CardContext);\n    const Component = component;\n    const titleId = cardId ? `${cardId}-title` : '';\n    React.useEffect(() => {\n        registerTitleId(titleId);\n        return () => registerTitleId('');\n    }, [registerTitleId, titleId]);\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardTitle, className), id: titleId || undefined }, props), children));\n};\nCardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","import { createIcon } from '../createIcon';\n\nexport const PackageIconConfig = {\n  name: 'PackageIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M567.7,1010.49707 L951.5,818.498238 C994.7,796.698371 1024,752.39864 1024,703.998934 L1024,320.001265 C1024,271.601559 995.6,227.10183 952.2,205.501961 L568.6,13.5031267 C550.8,4.60318072 531.4,0.103208049 512,-0.00152855358 C492.3,-0.0967907365 472.5,4.40318194 454.4,13.5031267 L70.8,205.501961 C27.4,227.10183 0,271.50156 0,319.801267 L0.9,703.998934 C0.9,752.39864 28.3,796.79837 71.6,818.398239 L455.2,1010.39707 C464.3,1014.89705 488.1,1023.99699 511.9,1023.99699 C535.5,1023.99699 558.8,1014.99704 567.7,1010.49707 Z M512.5,630.899377 L672.5,550.899863 L672.5,645.29929 L736.5,613.299484 L736.5,518.900058 L896,438.900543 L896.5,712.698881 L512.5,904.697715 L512.5,630.899377 Z M145.1,304.101362 L294.9,228.60182 C295.3,228.801819 295.6,229.001818 296,229.201817 L661.9,412.300705 L512.5,487.600248 L145.1,304.101362 Z M512.5,118.902487 L881.3,301.701377 L733.1,376.400923 L366,192.702038 L512.5,118.902487 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PackageIcon = createIcon(PackageIconConfig);\n\nexport default PackageIcon;","import './card.css';\nexport default {\n  \"card\": \"pf-c-card\",\n  \"cardActions\": \"pf-c-card__actions\",\n  \"cardBody\": \"pf-c-card__body\",\n  \"cardExpandableContent\": \"pf-c-card__expandable-content\",\n  \"cardFooter\": \"pf-c-card__footer\",\n  \"cardHeader\": \"pf-c-card__header\",\n  \"cardHeaderToggle\": \"pf-c-card__header-toggle\",\n  \"cardHeaderToggleIcon\": \"pf-c-card__header-toggle-icon\",\n  \"cardSrInput\": \"pf-c-card__sr-input\",\n  \"cardTitle\": \"pf-c-card__title\",\n  \"divider\": \"pf-c-divider\",\n  \"modifiers\": {\n    \"hoverable\": \"pf-m-hoverable\",\n    \"selectable\": \"pf-m-selectable\",\n    \"selected\": \"pf-m-selected\",\n    \"hoverableRaised\": \"pf-m-hoverable-raised\",\n    \"selectableRaised\": \"pf-m-selectable-raised\",\n    \"nonSelectableRaised\": \"pf-m-non-selectable-raised\",\n    \"selectedRaised\": \"pf-m-selected-raised\",\n    \"compact\": \"pf-m-compact\",\n    \"displayLg\": \"pf-m-display-lg\",\n    \"flat\": \"pf-m-flat\",\n    \"plain\": \"pf-m-plain\",\n    \"rounded\": \"pf-m-rounded\",\n    \"expanded\": \"pf-m-expanded\",\n    \"fullHeight\": \"pf-m-full-height\",\n    \"toggleRight\": \"pf-m-toggle-right\",\n    \"noOffset\": \"pf-m-no-offset\",\n    \"noFill\": \"pf-m-no-fill\",\n    \"overpassFont\": \"pf-m-overpass-font\"\n  },\n  \"themeDark\": \"pf-theme-dark\"\n};","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport PatchSetWizard from '../../SmartComponents/PatchSetWizard/PatchSetWizard';\nimport UnassignSystemsModal from '../../SmartComponents/Modals/UnassignSystemsModal';\n\nconst PatchSetWrapper = ({ patchSetState, setPatchSetState }) => {\n    return (<>\n        {(patchSetState.isUnassignSystemsModalOpen) && <UnassignSystemsModal\n            unassignSystemsModalState={patchSetState}\n            setUnassignSystemsModalOpen={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n        />}\n        {(patchSetState.isPatchSetWizardOpen) &&\n        <PatchSetWizard systemsIDs={patchSetState.systemsIDs} setBaselineState={setPatchSetState} />}\n    </>);\n};\n\nPatchSetWrapper.propTypes = {\n    patchSetState: propTypes.object,\n    setPatchSetState: propTypes.func\n};\nexport default PatchSetWrapper;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../../Utilities/constants';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalToggle(true);\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { CheckCircleIcon, PackageIcon, ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Button, Skeleton,\n    Card, Grid, GridItem, CardBody, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { fetchSystems } from '../../Utilities/api';\n\nconst StatusCard = ({ title, color, Icon, value, filter, apply }) => {\n    return (\n        <Card isCompact isFullHeight>\n            <CardTitle style={{ marginTop: '0px' }}>{title}</CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                    <FlexItem\n                        spacer={{ default: 'spacerMd' }}\n                        alignSelf={{ default: 'alignSelfCenter' }}\n                    >\n                        <Icon color={color} size='md'/>\n                    </FlexItem>\n                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                        {\n                            typeof(value) === 'undefined'\n                            &&  <Skeleton width=\"24px\" />\n                                    ||  <Button\n                                        variant=\"link\"\n                                        onClick={() => apply(filter)}\n                                        className='patch-status-report-text'>\n                                        {value}\n                                    </Button>\n                        }\n                    </FlexItem>\n                </Flex>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst SystemsStatusreport = ({ apply, queryParams }) => {\n    const [subtotals, setSubtotals] = React.useState({});\n\n    const { selectedTags, selectedGlobalTags, systemProfile } = useSelector(({ GlobalFilterStore }) => GlobalFilterStore);\n\n    const res = useMemo(async () =>{\n        setSubtotals({});\n\n        let result;\n\n        try {\n            result = await fetchSystems({ filter: {\n                os: queryParams?.filter?.os\n            },\n            selectedTags: [...selectedTags, ...selectedGlobalTags],\n            systemProfile,\n            limit: 1\n            });\n        }\n        catch {\n            result = [];\n        }\n\n        return result;\n    }, [\n        queryParams?.filter?.os?.length, queryParams?.filter?.os !== undefined,\n        selectedTags?.length, selectedTags !== undefined,\n        selectedGlobalTags?.length, selectedGlobalTags !== undefined,\n        systemProfile,\n        queryParams?.subtotals !== undefined\n    ]);\n\n    res.then((result)=> {\n        setSubtotals(result.meta?.subtotals);\n    });\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Grid hasGutter span={12} >\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsUpToDate)}\n                        Icon={CheckCircleIcon}\n                        color={'var(--pf-global--success-color--100)'}\n                        value={subtotals?.patched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'eq:0' } }}\n                    />\n                </GridItem>\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsWithPatchesAvailable)}\n                        Icon={PackageIcon}\n                        color={'var(--pf-global--primary-color--100)'}\n                        value={subtotals?.unpatched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'gt:0' } }}\n                    />\n                </GridItem>\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusStaleSystems)}\n                        Icon={ExclamationTriangleIcon}\n                        color={'var(--pf-global--warning-color--100)'}\n                        value={subtotals?.stale}\n                        apply={apply}\n                        filter={{ filter: { stale: true } }}\n                    />\n                </GridItem>\n            </Grid>\n        </Main>\n    );\n};\n\nStatusCard.propTypes = {\n    title: propTypes.string,\n    Icon: propTypes.elementType,\n    value: propTypes.number,\n    color: propTypes.string,\n    apply: propTypes.func,\n    filter: propTypes.object\n};\n\nSystemsStatusreport.propTypes = {\n    apply: propTypes.func,\n    queryParams: propTypes.object\n};\n\nexport default SystemsStatusreport;\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { defaultReducers } from '../../store';\nimport { changeSystemsParams, clearInventoryReducer,\n    changeSystemsMetadata, changeTags, systemSelectAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchSystems\n} from '../../Utilities/api';\nimport { systemsListDefaultFilters, featureFlags } from '../../Utilities/constants';\nimport {\n    arrayFromObj, decodeQueryparams, persistantParams, filterSelectedActiveSystemIDs\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useBulkSelectConfig, useGetEntities, useOnExport,\n    useRemoveFilter, useFeatureFlag\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\nimport SystemsStatusReport from '../../PresentationalComponents/StatusReports/SystemsStatusReport';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport { buildFilterConfig, buildActiveFiltersConfig } from '../../Utilities/SystemsHelpers';\nimport useRemediationProvier from '../../Utilities/useRemediationDataProvider';\nimport usePatchSetState from '../../Utilities/usePatchSetState';\nimport PatchSetWrapper from '../../PresentationalComponents/PatchSetWrapper/PatchSetWrapper';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\nimport { combineReducers } from 'redux';\nimport { systemsColumnsMerger } from '../../Utilities/SystemsHelpers';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst Systems = () => {\n    const store = useStore();\n    const chrome = useChrome();\n    const inventory = useRef(null);\n    const pageTitle = intl.formatMessage(messages.titlesSystems);\n\n    setPageTitle(pageTitle);\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [isRemediationOpen, setRemediationOpen] = React.useState(false);\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n\n    const isPatchSetEnabled = useFeatureFlag(featureFlags.patch_set, chrome);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const { hasError, code } = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const metadata = useSelector(\n        ({ SystemsStore }) => SystemsStore?.metadata || {}\n    );\n    const areAllSelected = useSelector(\n        ({ SystemsStore }) => SystemsStore?.areAllSelected\n    );\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => dispatch(clearInventoryReducer());\n    }, []);\n\n    const showRemediationModal = useCallback(async (data) => {\n        const resolvedData = await data;\n        setRemediationModalCmp(() =>\n            () => <RemediationWizard\n                data={resolvedData}\n                isRemediationOpen\n                setRemediationOpen={setRemediationOpen} />);\n        setRemediationOpen(!isRemediationOpen);\n    }, [isRemediationOpen]);\n\n    function apply(queryParams) {\n        dispatch(changeSystemsParams(queryParams));\n    }\n\n    const applyMetadata = (metadata) => {\n        dispatch(changeSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply, systemsListDefaultFilters);\n\n    const osFilterConfig = useOsVersionFilter(filter?.os, apply);\n    const filterConfig = buildFilterConfig(search, filter, apply, osFilterConfig);\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systems,\n            queryParams,\n            selectionDispatcher: systemSelectAction\n        }\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport('systems', queryParams, {\n        csv: exportSystemsCSV,\n        json: exportSystemsJSON\n    }, dispatch);\n\n    const getEntities = useGetEntities(fetchSystems, apply, {}, history, applyMetadata, applyGlobalFilter);\n\n    const {\n        patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal\n    } = usePatchSetState(selectedRows);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh) {\n            onSelect('none');\n            inventory?.current?.onRefreshData();\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    const remediationDataProvider = useRemediationProvier(selectedRows, setRemediationLoading, 'systems', areAllSelected);\n\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'} />\n            {(hasError || metadata?.has_systems === false)\n            && <ErrorHandler code={code} metadata={metadata}/>\n            || <React.Fragment>\n                <SystemsStatusReport apply={apply} queryParams={queryParams} />\n                {isPatchSetEnabled && <PatchSetWrapper patchSetState={patchSetState} setPatchSetState={setPatchSetState} />}\n                {isRemediationOpen && <RemediationModalCmp /> || null}\n                <Main>\n                    <InventoryTable\n                        ref={inventory}\n                        isFullView\n                        autoRefresh\n                        initialLoading\n                        hideFilters={{ all: true, tags: false }}\n                        columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, systemsListColumns, isPatchSetEnabled)}\n                        showTags\n                        customFilters={{\n                            patchParams: {\n                                search,\n                                filter,\n                                systemProfile,\n                                selectedTags\n                            }\n                        }}\n                        paginationProps={{\n                            isDisabled: totalItems === 0\n                        }}\n                        onLoad={({ mergeWithEntities }) => {\n                            store.replaceReducer(combineReducers({\n                                ...defaultReducers,\n                                ...mergeWithEntities(\n                                    inventoryEntitiesReducer(systemsListColumns(isPatchSetEnabled), modifyInventory),\n                                    persistantParams({ page, perPage, sort, search }, decodedParams)\n                                )\n                            }));\n                        }}\n                        getEntities={getEntities}\n                        tableProps={{\n                            actionResolver: (row) =>\n                                systemsRowActions(\n                                    showRemediationModal, openPatchSetAssignWizard,\n                                    isPatchSetEnabled, openUnassignSystemsModal, row\n                                ),\n                            canSelectAll: false,\n                            variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                        }}\n                        bulkSelect={bulkSelectConfig}\n                        exportConfig={{\n                            isDisabled: totalItems === 0,\n                            onSelect: onExport\n                        }}\n                        actionsConfig={{\n                            actions: [\n                                <AsyncRemediationButton\n                                    key='remediate-multiple-systems'\n                                    remediationProvider={remediationDataProvider}\n                                    isDisabled={\n                                        arrayFromObj(selectedRows).length === 0 || isRemediationLoading\n                                    }\n                                    isLoading={isRemediationLoading}\n                                />,\n                                ...isPatchSetEnabled ? [{\n                                    key: 'assign-multiple-systems',\n                                    label: intl.formatMessage(messages.titlesTemplateAssign),\n                                    onClick: openPatchSetAssignWizard,\n                                    props: { isDisabled: selectedCount === 0 }\n                                },\n                                {\n                                    key: 'remove-multiple-systems',\n                                    label: intl.formatMessage(messages.titlesTemplateRemoveMultipleButton),\n                                    onClick: () => openUnassignSystemsModal(filterSelectedActiveSystemIDs(selectedRows)),\n                                    props: { isDisabled: selectedCount === 0 }\n                                }] : []\n                            ]\n                        }}\n                        filterConfig={filterConfig}\n                        activeFiltersConfig={activeFiltersConfig}\n                    />\n                </Main>\n            </React.Fragment>}\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n","import { useState } from 'react';\nimport {\n    filterSelectedActiveSystemIDs\n} from './Helpers';\n\n/**\n* Manages unified state for patch set wizard and unassign modal.\n* @param {Object} [selectedRows] selected rows object to be removed.\n* @returns {patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal}\n*/\nconst usePatchSetState = (selectedRows) => {\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const openPatchSetAssignWizard = (systemID) => {\n        setPatchSetState({\n            isPatchSetWizardOpen: true,\n            systemsIDs: typeof systemID === 'string' && systemID !== ''\n                ? [systemID]\n                : filterSelectedActiveSystemIDs(selectedRows),\n            shouldRefresh: false\n        }\n        );\n    };\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openPatchSetEditModal = (patchSetID) => {\n        setPatchSetState({ isPatchSetWizardOpen: true, patchSetID });\n    };\n\n    return { patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal };\n};\n\nexport default usePatchSetState;\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport {\n    removeUndefinedObjectKeys\n} from './Helpers';\n\nconst initializeWorker = () => {\n    const worker = new Worker(new URL('./RemediationPairs.js', import.meta.url));\n    return [worker, () => worker.terminate()];\n};\n\nconst deligateWorkerTask = (worker, task) => {\n    worker.postMessage(task);\n\n    //waits web worker response\n    return new Promise((resolve, reject) => {\n        worker.onmessage = ({ data: { status, error, result } } = {}) => {\n            if (status === 'resolved')  {\n                resolve(result);\n            }\n\n            reject(error);\n        };\n    });\n};\n\nexport const prepareRemediationPairs = async (task, dispatch) => {\n    const [worker, terminateWorker] = initializeWorker();\n    const deligatedTask = deligateWorkerTask(worker, task);\n\n    const response = await deligatedTask.catch(err =>\n        dispatch(\n            addNotification(\n                {\n                    title: `There was an error while processing.`,\n                    description: err,\n                    variant: 'danger'\n                }\n            )\n        ));\n\n    terminateWorker();\n\n    //displays NoDataModal when there is no patch updates available\n    return response?.issues?.length ? response : false;\n};\n\n/**\n* Provides remediation data, systems with all of their corresponding issues.\n* @param {Function} [setRemediationLoading] function to toggle remediation loading state\n* @param {Array} [selectedRows] array of systems to calculate\n* @returns {handleSystemsRemoval}\n*/\nconst useRemediationDataProvider = (selectedRows, setRemediationLoading, remediationType, areAllSelected) => {\n    const dispatch = useDispatch();\n    const chrome = useChrome();\n    const remediationDataProvider = async () => {\n        setRemediationLoading(true);\n\n        //Auth token must be added to webworker request as webworker does not have access\n        //to default token by platform\n        const authToken = await chrome.auth.getToken();\n        const remediationPairs = await prepareRemediationPairs(\n            {\n                payload: removeUndefinedObjectKeys(selectedRows),\n                remediationType,\n                areAllSelected,\n                authToken\n            },\n            dispatch\n        );\n\n        setRemediationLoading(false);\n\n        return remediationPairs;\n    };\n\n    return remediationDataProvider;\n};\n\nexport default useRemediationDataProvider;\n","import { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows, fetchRejected } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["CardContext","cardId","registerTitleId","isExpanded","Card","_a","children","id","className","component","isHoverable","isCompact","isSelectable","isSelectableRaised","isSelected","isDisabledRaised","isFlat","isRounded","isLarge","isFullHeight","isPlain","ouiaId","ouiaSafe","hasSelectableInput","selectableInputAriaLabel","onSelectableInputChange","props","__rest","Component","ouiaProps","displayName","titleId","setTitleId","ariaProps","setAriaProps","console","warn","containsCardTitleChildRef","current","Provider","value","Object","assign","type","checked","onChange","event","disabled","tabIndex","css","undefined","CardBody","isFilled","CardTitle","PackageIconConfig","name","height","width","svgPath","yOffset","xOffset","PackageIcon","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","useEffect","error","concat","__assign","n","arguments","apply","this","BaseInvTable","history","useHistory","store","Cmp","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","PatchSetWrapper","patchSetState","setPatchSetState","isUnassignSystemsModalOpen","unassignSystemsModalState","setUnassignSystemsModalOpen","systemsIDs","isPatchSetWizardOpen","setBaselineState","renderUnassignModalMessages","bodyMessage","systemsCount","intl","GridItem","formatMessage","messages","b","chunks","UnassignSystemsModal","useState","systemsWithPatchSet","setSystemWithPatchSet","systemsLoading","setSystemsLoading","handleModalToggle","shouldRefresh","handleModalClose","handleUnassignment","dispatch","useDispatch","handleSystemsRemoval","unassignSystemFromPatchSet","inventory_ids","status","addNotification","patchSetUnassignSystemsNotifications","success","useUnassignSystemsHook","fetchSystems","limit","filter","stale","then","allSystemsWithPatchSet","systemID","data","some","system","filterSystemsWithoutSets","result","systemsWithoutPatchSetCount","Modal","variant","isOpen","title","onClose","titleIconVariant","actions","Button","key","onClick","isDisabled","Grid","hasGutter","Skeleton","Fragment","injectIntl","RemediationWizard","setRemediationOpen","setOpen","StatusCard","color","Icon","style","marginTop","Flex","flex","default","flexWrap","FlexItem","spacer","alignSelf","SystemsStatusreport","queryParams","React","subtotals","setSubtotals","useSelector","GlobalFilterStore","selectedTags","selectedGlobalTags","systemProfile","useMemo","os","meta","Main","paddingBottom","span","md","CheckCircleIcon","patched","packages_updatable","unpatched","ExclamationTriangleIcon","useStore","chrome","useChrome","inventory","useRef","pageTitle","setPageTitle","isRemediationOpen","isRemediationLoading","setRemediationLoading","RemediationModalCmp","setRemediationModalCmp","isPatchSetEnabled","useFeatureFlag","featureFlags","decodedParams","decodeQueryparams","location","search","systems","entities","rows","shallowEqual","totalItems","total","selectedRows","hasError","code","metadata","SystemsStore","areAllSelected","page","perPage","sort","clearInventoryReducer","showRemediationModal","useCallback","resolvedData","changeSystemsParams","useRemoveFilter","systemsListDefaultFilters","deleteFilters","osFilterConfig","useOsVersionFilter","filterConfig","buildFilterConfig","activeFiltersConfig","buildActiveFiltersConfig","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","systemSelectAction","selectedCount","arrayFromObj","onExport","useOnExport","csv","exportSystemsCSV","json","exportSystemsJSON","getEntities","useGetEntities","changeSystemsMetadata","tags","changeTags","usePatchSetState","openPatchSetAssignWizard","openUnassignSystemsModal","onRefreshData","remediationDataProvider","useRemediationProvier","bulkSelectConfig","useBulkSelectConfig","total_items","Header","headerOUIA","has_systems","ErrorHandler","SystemsStatusReport","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","columns","defaultColumns","systemsColumnsMerger","systemsListColumns","showTags","customFilters","patchParams","paginationProps","onLoad","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","modifyInventory","persistantParams","tableProps","actionResolver","row","systemsRowActions","canSelectAll","TableVariant","isStickyHeader","bulkSelect","exportConfig","actionsConfig","AsyncRemediationButton","remediationProvider","isLoading","label","filterSelectedActiveSystemIDs","openPatchSetEditModal","patchSetID","initializeWorker","worker","Worker","URL","terminate","deligateWorkerTask","task","postMessage","Promise","resolve","reject","onmessage","prepareRemediationPairs","terminateWorker","deligatedTask","err","description","response","issues","remediationType","auth","getToken","authToken","payload","removeUndefinedObjectKeys","remediationPairs","initialState","offset","state","loaded","createSystemsRows","modifyPackageSystems","createPackageSystemsRows","inventoryModifier","action","newState","fetchRejected","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}