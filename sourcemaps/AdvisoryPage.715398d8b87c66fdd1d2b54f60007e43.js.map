{"version":3,"file":"js/AdvisoryPage.b9f0944f491e4e8596b4.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js","webpack:///./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack:///./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack:///./src/SmartComponents/AdvisorySystems/AdvisorySystems.js","webpack:///./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { getOperatingSystems } from '../../Utilities/api';\n\nconst useOsVersionFilter = (currentFilter = '', apply) => {\n    const versions = useSelector(({ entities }) => entities?.operatingSystems);\n    const versionsLoaded = useSelector(({ entities }) => entities?.operatingSystemsLoaded);\n\n    const [operatingSystems, setOperatingSystems] = useState([]);\n    const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule(\n        {\n            appName: 'inventory',\n            scope: 'inventory',\n            module: './OsFilterHelpers'\n        }\n    );\n\n    useEffect(() => {\n        if (versions === undefined || versionsLoaded === undefined) {\n            /* explicitly request OS versions from API */\n            getOperatingSystems().then(({ results }) => {\n                setOperatingSystems((results || []).map(entry => {\n                    const { name, major, minor } = entry.value;\n                    const versionStringified = `${major}.${minor}`;\n                    return { label: `${name} ${versionStringified}`, value: `${versionStringified}` };\n                }));\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        if (versionsLoaded === true) {\n            setOperatingSystems(versions);\n        }\n    }, [versionsLoaded]);\n\n    const osVersionValue = (currentFilter === '' ? [] : currentFilter.split(','))\n    // patchman uses \"RHEL \" prefix in values; need to remove\n    .map((version) => version.substring(5));\n\n    return [\n        ...(buildOSFilterConfig\n            ? [\n                buildOSFilterConfig(\n                    {\n                        id: 'rhel_version',\n                        value: toGroupSelectionValue(osVersionValue),\n                        onChange: (event, value) => {\n                            /* `versions` must be of type string, e.g., \"8.9,9.0\" */\n                            const versions = Object.values(value)\n                            .flatMap((versions) => Object.keys(versions))\n                            .map((version) => `RHEL ${version}`)\n                            .toString();\n                            apply({ filter: { os: versions } });\n                        }\n                    },\n                    operatingSystems\n                )\n            ]\n            : [])\n    ];\n};\n\nexport default useOsVersionFilter;\n","import { Split, SplitItem, Title } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Split className='infobox' hasGutter>\n            <SplitItem isFilled>\n                <Flex flex={{ default: 'column' }}>\n                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                        <Title headingLevel='h5'>\n                            {intl.formatMessage(messages.labelsColumnsSeverity)}\n                        </Title>\n                    </FlexItem>\n                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                        <Flex flex={{ default: 'row' }}>\n                            <FlexItem>\n                                <SecurityIcon size='sm' color={severity.color} />\n                            </FlexItem>\n                            <FlexItem>\n                                {severity.label}\n                            </FlexItem>\n                        </Flex>\n                    </FlexItem>\n                </Flex>\n            </SplitItem>\n        </Split>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import {\n    Button, Grid, GridItem, Stack, StackItem, Text, TextContent,\n    FlexItem, TextVariants, Flex, Split, SplitItem, Title\n} from '@patternfly/react-core';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport propTypes from 'prop-types';\nimport React, { useState, lazy, Suspense, Fragment } from 'react';\nimport messages from '../../Messages';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { getSeverityById, isRHAdvisory, truncateDescription } from '../../Utilities/Helpers';\nimport { intl } from '../../Utilities/IntlProvider';\nimport RebootRequired from '../Snippets/RebootRequired';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\nimport ExternalLink from '../Snippets/ExternalLink';\nimport AdvisoryType from '../AdvisoryType/AdvisoryType';\n\nconst CvesModal = lazy(() =>\n    import(\n        /* webpackChunkName: \"CvesModal\" */ '../../SmartComponents/AdvisoryDetail/CvesModal'\n    )\n);\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const [CvesInfoModal, setCvesModal] = useState(() => () => null);\n    const [wordLength, setWordLength] = useState(1000);\n    const severityObject = getSeverityById(attributes.severity);\n    const cves = attributes.cves;\n\n    const showCvesModal = () => {\n        setCvesModal(() => () => <CvesModal cveIds={cves} />);\n    };\n\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                attributes.description && truncateDescription(attributes.description, wordLength, setWordLength)\n                            }\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsPublicDate, {\n                                        date: processDate(\n                                            attributes.public_date\n                                        )\n                                    })}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsModifiedDate, {\n                                        date: processDate(\n                                            attributes.modified_date\n                                        )\n                                    })}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        {isRHAdvisory(attributes.id) &&\n                            <StackItem>\n                                <ExternalLink link={`https://access.redhat.com/errata/${attributes.id}`}\n                                    text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n                            </StackItem>\n                        }\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                <Flex flex={{ default: 'column' }}>\n                    {attributes.advisory_type_name && (<FlexItem>\n                        <Split className='infobox' hasGutter>\n                            <SplitItem isFilled>\n                                <Flex flex={{ default: 'column' }}>\n                                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                                        <Title headingLevel='h5'>\n                                            {intl.formatMessage(messages.titlesAdvisoryType)}\n                                        </Title>\n                                    </FlexItem>\n                                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                                        <AdvisoryType\n                                            type={attributes.advisory_type_name}\n                                        />\n                                    </FlexItem>\n                                </Flex>\n                            </SplitItem>\n                        </Split>\n                    </FlexItem>\n                    )}\n                    {severityObject.value !== 0 && (<FlexItem>\n                        <AdvisorySeverityInfo severity={severityObject}/>\n                    </FlexItem>\n                    )}\n                    {attributes.reboot_required && (<FlexItem spacer={{ default: 'spacerMd' }}>\n                        <RebootRequired />\n                    </FlexItem>)}\n                </Flex>\n            </GridItem>\n            {cves && cves.length !== 0 && (\n                <GridItem md={4} sm={12}>\n                    <TextContent>\n                        <Text component={TextVariants.h3}>\n                            {intl.formatMessage(messages.labelsCves)}\n                        </Text>\n                        <Button variant='link' style={{ padding: 0 }} onClick={showCvesModal} >\n                            {intl.formatMessage(messages.labelsCvesButton, { cvesCount: cves.length })}\n                        </Button>\n                    </TextContent>\n                </GridItem>\n            )}\n            <Suspense fallback={<Fragment/>}>\n                <CvesInfoModal />\n            </Suspense>\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React, { useCallback } from 'react';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport { combineReducers } from 'redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { defaultReducers } from '../../store';\nimport { changeAffectedSystemsParams, clearAdvisorySystemsReducer,\n    clearInventoryReducer, systemSelectAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { exportAdvisorySystemsCSV, exportAdvisorySystemsJSON, fetchAdvisorySystems } from '../../Utilities/api';\nimport { featureFlags, remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, decodeQueryparams, persistantParams,\n    remediationProvider, removeUndefinedObjectKeys\n} from '../../Utilities/Helpers';\nimport {\n    useBulkSelectConfig, useFeatureFlag, useGetEntities, useOnExport, useRemoveFilter\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { advisorySystemsColumns, systemsRowActions } from '../Systems/SystemsListAssets';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\nimport { systemsColumnsMerger, buildActiveFiltersConfig } from '../../Utilities/SystemsHelpers';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst AdvisorySystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const store = useStore();\n    const chrome = useChrome();\n    const [isRemediationOpen, setRemediationOpen] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const history = useHistory();\n\n    const isPatchSetEnabled = useFeatureFlag(featureFlags.patch_set, chrome);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const queryParams = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore?.queryParams || {}\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const metadata = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore?.metadata || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => {\n            dispatch(clearInventoryReducer());\n            dispatch(clearAdvisorySystemsReducer());\n        };\n    }, []);\n\n    function apply(params) {\n        dispatch(changeAffectedSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply);\n\n    const osFilterConfig = useOsVersionFilter(filter?.os, apply);\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            ...osFilterConfig\n        ]\n    };\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    const showRemediationModal = useCallback(async (data) => {\n        const resolvedData = await data;\n        setRemediationModalCmp(() =>\n            () => <RemediationWizard\n                data={resolvedData}\n                isRemediationOpen\n                setRemediationOpen={setRemediationOpen} />);\n        setRemediationOpen(!isRemediationOpen);\n    }, [isRemediationOpen]);\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.advisorySystems(advisoryName),\n            queryParams,\n            selectionDispatcher: systemSelectAction\n        }\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const getEntites = useGetEntities(fetchAdvisorySystems, apply, { id: advisoryName }, history);\n\n    const onExport = useOnExport(advisoryName, queryParams, {\n        csv: exportAdvisorySystemsCSV,\n        json: exportAdvisorySystemsJSON\n    }, dispatch);\n\n    const remediationDataProvider = () => remediationProvider(\n        advisoryName,\n        removeUndefinedObjectKeys(selectedRows),\n        remediationIdentifiers.advisory\n    );\n\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems);\n\n    return (\n        <React.Fragment>\n            {isRemediationOpen && <RemediationModalCmp /> || null}\n            {(status.hasError || metadata?.has_systems === false)\n                && <ErrorHandler code={status.code} metadata={metadata} />\n                || <InventoryTable\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    ignoreRefresh\n                    hideFilters={{ all: true, tags: false }}\n                    columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, advisorySystemsColumns, isPatchSetEnabled)}\n                    showTags\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    paginationProps={{\n                        isDisabled: totalItems === 0\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        store.replaceReducer(combineReducers({\n                            ...defaultReducers,\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(advisorySystemsColumns(false), modifyInventory),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        }));\n                    }}\n                    getEntities={getEntites}\n                    actions={systemsRowActions(showRemediationModal)}\n                    tableProps={{\n                        canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig={activeFiltersConfig}\n                    exportConfig={{\n                        isDisabled: totalItems === 0,\n                        onSelect: onExport\n                    }}\n                    bulkSelect={onSelect && bulkSelectConfig}\n                    dedicatedAction={(\n                        <AsyncRemediationButton\n                            remediationProvider={remediationDataProvider}\n                            isDisabled={\n                                arrayFromObj(selectedRows).length === 0\n                            }\n                        />\n                    )}\n\n                />\n            }\n        </React.Fragment>\n    );\n};\n\nAdvisorySystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AdvisorySystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { clearAdvisoryDetailStore, clearEntitiesStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport AdvisorySystems from '../AdvisorySystems/AdvisorySystems';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst AdvisoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [advisoryName] = React.useState(match.params.advisoryId);\n\n    const pageTitle = `${advisoryName} - ${intl.formatMessage(messages.titlesAdvisories)}`;\n    setPageTitle(pageTitle);\n\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearEntitiesStore());\n            dispatch(clearAdvisoryDetailStore());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                headerOUIA={'advisory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchAdvisories),\n                        to: '/advisories',\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable /> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        <AdvisorySystems advisoryName={advisoryName} />\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisoryDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(AdvisoryDetail);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n"],"names":["currentFilter","arguments","length","undefined","apply","versions","useSelector","_ref","entities","operatingSystems","versionsLoaded","_ref2","operatingSystemsLoaded","_useState","useState","_useState2","_slicedToArray","setOperatingSystems","_useLoadModule","useLoadModule","appName","scope","module","_useLoadModule2$","_useLoadModule2$2","toGroupSelectionValue","buildOSFilterConfig","useEffect","getOperatingSystems","then","_ref3","results","map","entry","_entry$value","value","name","major","minor","versionStringified","concat","label","osVersionValue","split","version","substring","_toConsumableArray","id","onChange","event","Object","values","flatMap","keys","toString","filter","os","AdvisorySeverityInfo","severity","React","Split","className","hasGutter","SplitItem","isFilled","Flex","flex","default","FlexItem","spacer","Title","headingLevel","intl","messages","SecurityIcon","size","color","propTypes","CvesModal","lazy","AdvisoryHeader","attributes","isLoading","CvesInfoModal","setCvesModal","_useState3","_useState4","wordLength","setWordLength","severityObject","getSeverityById","cves","Grid","style","minHeight","GridItem","md","sm","WithLoader","loading","variant","WithLoaderVariants","centered","Stack","StackItem","whiteSpace","description","truncateDescription","public_date","date","processDate","modified_date","isRHAdvisory","ExternalLink","link","text","advisory_type_name","AdvisoryType","type","reboot_required","RebootRequired","TextContent","Text","component","TextVariants","Button","padding","onClick","cveIds","cvesCount","Suspense","fallback","Fragment","AdvisorySystems","advisoryName","dispatch","useDispatch","store","useStore","chrome","useChrome","_React$useState","_React$useState2","isRemediationOpen","setRemediationOpen","_React$useState3","_React$useState4","RemediationModalCmp","setRemediationModalCmp","history","useHistory","isPatchSetEnabled","useFeatureFlag","featureFlags","decodedParams","decodeQueryparams","location","search","systems","rows","shallowEqual","status","totalItems","_ref4","total","queryParams","_ref5","AdvisorySystemsStore","selectedRows","_ref6","metadata","_ref7","systemProfile","selectedTags","page","perPage","sort","params","changeAffectedSystemsParams","clearInventoryReducer","clearAdvisorySystemsReducer","_useRemoveFilter","useRemoveFilter","_objectSpread","deleteFilters","osFilterConfig","useOsVersionFilter","filterConfig","items","searchFilter","activeFiltersConfig","buildActiveFiltersConfig","showRemediationModal","useCallback","_ref8","_asyncToGenerator","_regeneratorRuntime","_callee","data","resolvedData","_context","prev","next","sent","RemediationWizard","stop","_x","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","systemSelectAction","selectedCount","arrayFromObj","getEntites","useGetEntities","fetchAdvisorySystems","onExport","useOnExport","csv","exportAdvisorySystemsCSV","json","exportAdvisorySystemsJSON","bulkSelectConfig","useBulkSelectConfig","total_items","hasError","has_systems","ErrorHandler","code","InventoryTable","isFullView","autoRefresh","initialLoading","ignoreRefresh","hideFilters","all","tags","columns","defaultColumns","systemsColumnsMerger","advisorySystemsColumns","showTags","customFilters","patchParams","paginationProps","isDisabled","onLoad","_ref9","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","modifyInventory","persistantParams","getEntities","actions","systemsRowActions","tableProps","canSelectAll","TableVariant","isStickyHeader","exportConfig","bulkSelect","dedicatedAction","AsyncRemediationButton","remediationProvider","removeUndefinedObjectKeys","remediationIdentifiers","AdvisoryDetail","match","advisoryId","pageTitle","setPageTitle","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearEntitiesStore","clearAdvisoryDetailStore","clearNotifications","Header","title","headerOUIA","breadcrumbs","to","isActive","Unavailable","Main","withRouter","AsyncComponent","setOpen"],"sourceRoot":""}