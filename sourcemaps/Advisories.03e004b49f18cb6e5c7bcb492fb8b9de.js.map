{"version":3,"file":"js/Advisories.1643708752645.a4af7db8dd451872e1a0.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/Card.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/CardBody.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/CardTitle.js","webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./src/PresentationalComponents/StatusReports/AdvisoriesStatusReport.js","webpack:///./src/SmartComponents/Advisories/Advisories.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Card = exports.CardContext = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst helpers_1 = require(\"../../helpers\");\nexports.CardContext = React.createContext({\n    cardId: '',\n    isExpanded: false\n});\nconst Card = (_a) => {\n    var { children = null, id = '', className = '', component = 'article', isHoverable = false, isCompact = false, isSelectable = false, isSelected = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true } = _a, props = tslib_1.__rest(_a, [\"children\", \"id\", \"className\", \"component\", \"isHoverable\", \"isCompact\", \"isSelectable\", \"isSelected\", \"isFlat\", \"isExpanded\", \"isRounded\", \"isLarge\", \"isFullHeight\", \"isPlain\", \"ouiaId\", \"ouiaSafe\"]);\n    const Component = component;\n    const ouiaProps = helpers_1.useOUIAProps(exports.Card.displayName, ouiaId, ouiaSafe);\n    if (isCompact && isLarge) {\n        // eslint-disable-next-line no-console\n        console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n        isLarge = false;\n    }\n    return (React.createElement(exports.CardContext.Provider, { value: {\n            cardId: id,\n            isExpanded\n        } },\n        React.createElement(Component, Object.assign({ id: id, className: react_styles_1.css(card_1.default.card, isHoverable && card_1.default.modifiers.hoverable, isCompact && card_1.default.modifiers.compact, isSelectable && card_1.default.modifiers.selectable, isSelected && isSelectable && card_1.default.modifiers.selected, isExpanded && card_1.default.modifiers.expanded, isFlat && card_1.default.modifiers.flat, isRounded && card_1.default.modifiers.rounded, isLarge && card_1.default.modifiers.displayLg, isFullHeight && card_1.default.modifiers.fullHeight, isPlain && card_1.default.modifiers.plain, className), tabIndex: isSelectable ? '0' : undefined }, props, ouiaProps), children)));\n};\nexports.Card = Card;\nexports.Card.displayName = 'Card';\n//# sourceMappingURL=Card.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CardBody = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst CardBody = (_a) => {\n    var { children = null, className = '', component = 'div', isFilled = true } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\", \"isFilled\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(card_1.default.cardBody, !isFilled && card_1.default.modifiers.noFill, className) }, props), children));\n};\nexports.CardBody = CardBody;\nexports.CardBody.displayName = 'CardBody';\n//# sourceMappingURL=CardBody.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CardTitle = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst CardTitle = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(card_1.default.cardTitle, className) }, props), children));\n};\nexports.CardTitle = CardTitle;\nexports.CardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}\n                        data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                        data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                    >{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { paths } from '../../Routes';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history, headerOUIA }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={paths.advisories.to}\n                title={paths.advisories.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.advisories.title}`}\n            />\n            <Tab\n                eventKey={paths.systems.to}\n                title={paths.systems.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.systems.title}`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object,\n    headerOUIA: propTypes.string\n};\n\nexport default withRouter(HeaderTabs);\n","import {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <PageHeaderTitle title={title} />\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA = {headerOUIA}/>}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string\n};\n\nexport default Header;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PowerOffIcon, SecurityIcon } from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { fetchApplicableAdvisoriesApi } from '../../Utilities/api';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Card, Grid, GridItem, CardBody, Title, Split, SplitItem\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { handlePatchLink, handleLongSynopsis } from '../../Utilities/Helpers';\nimport { entityTypes, advisorySeverities } from '../../Utilities/constants';\nimport AdvisoryType from '../AdvisoryType/AdvisoryType';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst StatusCard = ({ advisory: { attributes, id } }) =>\n    (\n        <Card>\n            <CardTitle>\n                {handlePatchLink(entityTypes.advisories, id)}\n            </CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Grid>\n                    <GridItem>\n                        <Grid>\n                            <GridItem lg={6} md={12} sm={6}>\n                                <Grid>\n                                    <GridItem>\n                                        <AdvisoryType\n                                            type={attributes.advisory_type_name}\n                                        />\n                                    </GridItem>\n                                    <GridItem>\n                                        {processDate(attributes.public_date)}\n                                    </GridItem>\n                                    {attributes.os_name && (<GridItem>\n                                        {attributes.os_name}\n                                    </GridItem>)}\n                                </Grid>\n                            </GridItem>\n                            <GridItem lg={6} className='adjustableElement' sm={6}>\n                                <Grid>\n                                    {attributes.severity && (<GridItem>\n                                        <Split hasGutter>\n                                            <GridItem >\n                                                <SecurityIcon size=\"sm\" color={advisorySeverities[attributes.severity].color} />\n                                            </GridItem>\n                                            <GridItem isFilled>{advisorySeverities[attributes.severity].label}</GridItem>\n                                        </Split>\n                                    </GridItem>)}\n                                    {attributes.reboot_required && (\n                                        <GridItem>\n                                            <Split hasGutter>\n                                                <SplitItem><PowerOffIcon color='var(--pf-global--palette--red-100)' /></SplitItem>\n                                                <SplitItem isFilled style={{ flexWrap: 'nowrap' }}>\n                                                    {intl.formatMessage(messages.textRebootIsRequired)}\n                                                </SplitItem>\n                                            </Split>\n                                        </GridItem>\n                                    )}\n                                </Grid>\n                            </GridItem>\n                        </Grid>\n                    </GridItem>\n\n                    <GridItem>\n                        {handlePatchLink(\n                            entityTypes.advisories,\n                            id,\n                            intl.formatMessage(\n                                messages.labelsApplicableSystemsCount,\n                                { systemsCount: attributes.applicable_systems }\n                            )\n                        )}\n                    </GridItem>\n                    <GridItem>\n                        {handleLongSynopsis(attributes.synopsis)}\n                    </GridItem>\n                </Grid>\n            </CardBody>\n        </Card>\n    );\n\nconst AdvisoriesStatusBar = () => {\n    const [advisories, setAdvisories] = React.useState([]);\n    React.useEffect(async () => {\n        setAdvisories(\n            await fetchApplicableAdvisoriesApi({ limit: 4, sort: '-advisory_type_name,-applicable_systems' })\n        );\n    }, []);\n\n    return advisories.data && advisories.data.length  && (\n        <Main style={{ paddingBottom: 0, paddingTop: 0 }}>\n\n            <Title headingLevel=\"h3\" className='pf-u-my-md'>\n                {intl.formatMessage(messages.titlesMostImpactfulAdvisories)}\n            </Title>\n\n            <Grid hasGutter>\n                {advisories.data.map(advisory =>\n                    (<GridItem key={advisory.id} lg={3} md={3} sm={12}>\n                        <StatusCard\n                            advisory={advisory}\n                        />\n                    </GridItem>)\n                )\n                }\n            </Grid>\n        </Main>\n    ) || null;\n};\n\nStatusCard.propTypes = {\n    advisory: propTypes.object\n};\nexport default AdvisoriesStatusBar;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport rebootFilter from '../../PresentationalComponents/Filters/RebootFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { advisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport {\n    changeAdvisoryListParams, expandAdvisoryRow,\n    fetchApplicableAdvisories, selectAdvisoryRow\n} from '../../store/Actions/Actions';\nimport {\n    exportAdvisoriesCSV, exportAdvisoriesJSON, fetchApplicableAdvisoriesApi,\n    fetchSystems, fetchViewAdvisoriesSystems\n} from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport { createAdvisoriesRows } from '../../Utilities/DataMappers';\nimport {\n    arrayFromObj, createSortBy, decodeQueryparams,\n    encodeURLParams, getRowIdByIndexExpandable, remediationProviderWithPairs, transformPairs\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useDeepCompareEffect, useOnExport,\n    useOnSelect, usePerPageSelect, useSetPage, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport AdvisoriesStatusReport from '../../PresentationalComponents/StatusReports/AdvisoriesStatusReport';\n\nconst Advisories = ({ history }) => {\n    const pageTitle = intl.formatMessage(messages.titlesAdvisories);\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const advisories = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.rows\n    );\n\n    const expandedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.status\n    );\n\n    const rows = React.useMemo(\n        () => createAdvisoriesRows(advisories, expandedRows, selectedRows),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchApplicableAdvisories(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const fetchAllData = () =>\n        fetchApplicableAdvisoriesApi({ ...queryParams, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            selectAdvisoryRow(toSelect)\n        );\n    };\n\n    const onSelect = useOnSelect(rows, selectedRows, fetchAllData, selectRows, (advisory) => advisory.id);\n\n    const onSort = useSortColumn(advisoriesColumns, apply, 2);\n    const sortBy = React.useMemo(\n        () => createSortBy(advisoriesColumns, metadata.sort, 2),\n        [metadata.sort]\n    );\n\n    const onExport = useOnExport('advisories', queryParams, {\n        csv: exportAdvisoriesCSV,\n        json: exportAdvisoriesJSON\n    }, dispatch);\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeAdvisoryListParams(params));\n    }\n\n    const prepareRemediationPairs = (issues) => {\n        return fetchSystems({ limit: -1 }).then(\n            ({ data }) => fetchViewAdvisoriesSystems(\n                {\n                    advisories: issues,\n                    systems: data.map(system => system.id)\n                }\n            ));\n    };\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchAdvisories)} headerOUIA={'advisories'} />\n            <AdvisoriesStatusReport/>\n            <Main>\n                <TableView\n                    columns={advisoriesColumns}\n                    compact\n                    onCollapse={onCollapse}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    onExport={onExport}\n                    selectedRows={selectedRows}\n                    onSelect={onSelect}\n                    sortBy={sortBy}\n                    remediationProvider={() =>\n                        remediationProviderWithPairs(\n                            arrayFromObj(selectedRows),\n                            prepareRemediationPairs,\n                            transformPairs,\n                            remediationIdentifiers.advisory)\n                    }\n                    apply={apply}\n                    remediationButtonOUIA={'toolbar-remediation-button'}\n                    tableOUIA={'advisories-table'}\n                    paginationOUIA={'advisories-pagination'}\n                    store={{ rows, metadata, status, queryParams }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle),\n                                intl.formatMessage(messages.labelsFiltersSearchAdvisoriesPlaceholder)\n                            ),\n                            typeFilter(apply, queryParams.filter),\n                            publishDateFilter(apply, queryParams.filter),\n                            rebootFilter(apply, queryParams.filter)\n                        ]\n                    }}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle)}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisories.propTypes = {\n    history: propTypes.object\n};\n\nexport default withRouter(Advisories);\n"],"names":["exports","tslib_1","React","__importStar","card_1","__importDefault","react_styles_1","helpers_1","createContext","cardId","isExpanded","_a","children","id","className","component","isHoverable","isCompact","isSelectable","isSelected","isFlat","isRounded","isLarge","isFullHeight","isPlain","ouiaId","ouiaSafe","props","__rest","Component","ouiaProps","useOUIAProps","console","warn","createElement","value","Object","assign","css","default","card","modifiers","hoverable","compact","selectable","selected","expanded","flat","rounded","displayLg","fullHeight","plain","tabIndex","undefined","isFilled","cardBody","noFill","cardTitle","HeaderBreadcrumbs","items","headerOUIA","Breadcrumb","filter","Boolean","map","item","BreadcrumbItem","key","title","isActive","to","Link","propTypes","PropTypes","HeaderTabs","history","Tabs","onSelect","event","tabString","push","activeKey","location","pathname","Tab","eventKey","paths","withRouter","Header","showTabs","breadcrumbs","PageHeader","PageHeaderTitle","StatusCard","advisory","attributes","Card","CardTitle","handlePatchLink","entityTypes","CardBody","Grid","GridItem","lg","md","sm","AdvisoryType","type","advisory_type_name","processDate","public_date","os_name","severity","Split","hasGutter","size","color","advisorySeverities","label","reboot_required","SplitItem","style","flexWrap","intl","messages","systemsCount","applicable_systems","handleLongSynopsis","synopsis","advisories","setAdvisories","fetchApplicableAdvisoriesApi","limit","sort","data","length","Main","paddingBottom","paddingTop","Title","headingLevel","Advisories","pageTitle","setPageTitle","dispatch","useDispatch","firstMount","setFirstMount","useSelector","AdvisoryListStore","rows","expandedRows","queryParams","selectedRows","metadata","status","createAdvisoriesRows","clearNotifications","useDeepCompareEffect","apply","decodeQueryparams","search","encodeURLParams","fetchApplicableAdvisories","onCollapse","_","rowId","expandAdvisoryRow","getRowIdByIndexExpandable","useOnSelect","toSelect","selectAdvisoryRow","onSort","useSortColumn","advisoriesColumns","sortBy","createSortBy","onExport","useOnExport","csv","exportAdvisoriesCSV","json","exportAdvisoriesJSON","onSetPage","useSetPage","onPerPageSelect","usePerPageSelect","params","changeAdvisoryListParams","prepareRemediationPairs","issues","fetchSystems","then","fetchViewAdvisoriesSystems","systems","system","AdvisoriesStatusReport","TableView","columns","remediationProvider","remediationProviderWithPairs","arrayFromObj","transformPairs","remediationIdentifiers","remediationButtonOUIA","tableOUIA","paginationOUIA","store","filterConfig","searchFilter","typeFilter","publishDateFilter","rebootFilter","searchChipLabel"],"sourceRoot":""}