{"version":3,"sources":["webpack:///./src/SmartComponents/AdvisoryDetail/CvesModal.js","webpack:///./src/PresentationalComponents/InfoBox/InfoBox.js","webpack:///./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack:///./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack:///./src/SmartComponents/AdvisorySystems/AdvisorySystems.js","webpack:///./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js"],"names":["CvesModal","cveIds","dispatch","useDispatch","useState","cves","setCves","rows","setRows","page","setPage","perPage","setPerPage","undefined","search","setSearch","direction","SortByDirection","index","sortBy","setSortBy","data","useSelector","CvesListStore","status","React","fetchCves","slice","useMemo","sortedCves","filter","cve","synopsis","attributes","toLowerCase","includes","createCvesRows","length","handleFilter","Modal","variant","title","intl","messages","isOpen","Boolean","onClose","TableView","columns","cvesTableColumns","onSetPage","_","onPerPageSelect","apply","tableOUIA","paginationOUIA","onSort","sortCves","store","metadata","limit","offset","total_items","queryParams","filterConfig","items","searchFilter","propTypes","InfoBox","text","isLoading","content","color","Split","className","hasGutter","WithLoader","WithLoaderVariants","loading","size","SplitItem","style","backgroundColor","Bullseye","isFilled","TextContent","Text","component","TextVariants","AdvisorySeverityInfo","severity","Popover","position","enableFlip","headerContent","label","bodyContent","footerContent","href","target","rel","Flex","FlexItem","spacer","default","AdvisoryHeader","name","CvesInfoModal","setCvesModal","severityObject","getSeverityById","Grid","minHeight","GridItem","md","sm","centered","Stack","StackItem","whiteSpace","preserveNewlines","description","public_date","date","processDate","modified_date","id","test","ExternalLink","link","value","Button","padding","onClick","cvesCount","AdvisorySystems","advisoryName","RemediationModalCmp","setRemediationModalCmp","history","useHistory","decodedParams","decodeQueryparams","location","systems","entities","shallowEqual","totalItems","total","AdvisorySystemsStore","selectedRows","systemProfile","selectedTags","sort","params","changeAffectedSystemsParams","clearInventoryReducer","clearAdvisorySystemsReducer","useRemoveFilter","deleteFilters","activeFiltersConfig","filters","buildFilterChips","onDelete","showRemediationModal","RemediationModal","onSelect","useOnSelect","fetchAdvisorySystems","then","filterRemediatableSystems","toSelect","type","payload","selectedCount","arrayFromObj","getEntites","useGetEntities","onExport","useOnExport","csv","exportAdvisorySystemsCSV","json","exportAdvisorySystemsJSON","hasError","ErrorHandler","code","InventoryTable","disableDefaultColumns","isFullView","autoRefresh","initialLoading","ignoreRefresh","hideFilters","all","customFilters","patchParams","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","modifyInventory","persistantParams","getEntities","actions","systemsRowActions","tableProps","canSelectAll","TableVariant","isStickyHeader","Fragment","PrimaryToolbar","exportConfig","isDisabled","bulkSelect","useBulkSelectConfig","dedicatedAction","PatchRemediationButton","remediationProvider","removeUndefinedObjectKeys","remediationIdentifiers","ouia","AdvisoryDetail","match","advisoryId","pageTitle","setPageTitle","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearEntitiesStore","clearAdvisoryDetailStore","clearNotifications","Header","headerOUIA","breadcrumbs","to","paths","isActive","Unavailable","Main","withRouter"],"mappings":"uiBAcMA,EAAY,SAAC,GAAc,IAAZC,EAAY,EAAZA,OACXC,GAAWC,mBACjB,GAAwBC,cAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAwBF,cAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KACA,GAAwBJ,cAAS,GAAjC,eAAOK,EAAP,KAAaC,EAAb,KACA,GAA8BN,cAAS,IAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KACA,GAA4BR,mBAASS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BX,cAAS,CACjCY,UAAWC,sBACXC,MAAO,IAFX,eAAOC,EAAP,KAAeC,EAAf,KAKMC,GAAOC,kBAAY,qBAAGC,cAAkChB,QAExDiB,GAASF,kBACX,qBAAGC,cAAkCC,UAGzCC,eAAgB,WACZvB,GAASwB,QAAU,CAAEzB,cACtB,IAEHwB,aAAc,WACVjB,EAAQH,EAAKsB,OAAOlB,EAAO,GAAKE,EAASF,EAAOE,MACjD,CAACN,EAAMI,EAAME,EAASQ,KAEzBS,cAAQ,WACJ,IAAMC,OAAyBhB,IAAXC,GAAmC,KAAXA,GACrCO,EAAKS,QACJ,SAAAC,GACI,IAAsBC,EAAeD,EAA7BE,WAAcD,SACtB,OAAOA,GAAYlB,GAAWkB,EAASE,cAAcC,SAASrB,EAAOoB,mBAExEb,EAETf,GAAQ8B,SAAsC,IAAtBP,EAAWQ,QAAgBvB,IAAWe,GAAcR,MAC7E,CAACP,EAAQO,IAEZ,IAIMiB,EAAe,SAAC,GAAc,IAAZxB,EAAY,EAAZA,OACpBJ,EAAQD,GACRM,EAAUD,IAmBd,OACI,kBAAC,aAAD,KACI,kBAACyB,EAAA,GAAD,CACIC,QAAQ,QACRC,MAAOC,kBAAmBC,gBAC1BC,OAAQC,QAAQtC,GAChBuC,QA/BQ,WAChBtC,OAAQK,KAgCA,kBAACkC,EAAA,EAAD,CACIC,QAASC,IACTC,UA1BS,SAACC,EAAG1C,GACzBC,EAAQD,IA0BI2C,gBAvBY,SAACD,EAAGxC,GAC5BD,EAAQ,GACRE,EAAWD,IAsBC0C,MAAOf,EACPgB,UAAW,aACXC,eAAgB,kBAChBC,OAtBG,SAACL,EAAGjC,EAAOF,GAC1B,OAA+ByC,QAASpD,EAAMa,EAAOF,GAA7CG,EAAR,EAAQA,OAAQU,EAAhB,EAAgBA,WAEhBT,EAAUD,GACVb,EAAQuB,IAmBIV,OAAQA,EACRuC,MAAO,CACHnD,OACAoD,SAAU,CAAEC,MAAOjD,EAASkD,QAASpD,EAAO,GAAKE,EAASmD,YAAazD,GAAQA,EAAKgC,QACpFb,SAAQuC,YAAa,CAAEjC,OAAQ,GAAIhB,WAEvCkD,aAAc,CACVC,MAAO,EACHC,OAAa5B,EAAcxB,EAAQ,GAC/B4B,kBAAmBC,gDAUnD3C,EAAUmE,UAAY,CAClBlE,OAAQkE,WAGZ,U,oCC9GMC,EAAU,SAAC,GAA+C,IAA7C3B,EAA6C,EAA7CA,MAAO4B,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAChD,OACI,kBAACC,EAAA,EAAD,CAAOC,UAAU,UAAUC,WAAS,GAChC,kBAACC,EAAA,GAAD,CACIpC,QAASqC,aACTC,QAASR,EACTS,KAAK,MAEL,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,gBAAiBV,IACjC,kBAACW,EAAA,EAAD,KAAWZ,IAEf,kBAACS,EAAA,EAAD,CAAWI,UAAQ,GACf,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,GAAD,CAAMC,UAAWC,SAAkB/C,GACnC,kBAAC6C,EAAA,GAAD,CAAMC,UAAWC,QAAiBnB,QAQ1DD,EAAQD,UAAY,CAChB1B,MAAO0B,WACPE,KAAMF,QACNG,UAAWH,SACXI,QAASJ,QACTK,MAAOL,YAGX,U,8CC5BMsB,EAAuB,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SAC5B,OACI,kBAACC,EAAA,GAAD,CACIC,SAAS,SACTC,YAAU,EACVC,cAAe,6BAAMJ,EAASK,MAAQ,aACtCC,YACI,kBAACX,EAAA,EAAD,KACI,kBAACC,EAAA,GAAD,CAAMC,UAAWC,QAAiBE,EAASrB,OAGnD4B,cACI,uBACIC,KAAK,6DACLC,OAAO,SACPC,IAAI,uBAEJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,OAAQ,CAAEC,QAAS,aACzB,kBAAC,KAAD,OAEJ,kBAACF,EAAA,EAAD,CAAUC,OAAQ,CAAEC,QAAS,aACxB9D,kBAAmBC,oCAMpC,2BAAID,kBAAmBC,uBAKnC8C,EAAqBtB,UAAY,CAC7BuB,SAAUvB,YAGd,U,eC3BMsC,EAAiB,SAAC,GAA8B,IAS5BC,EATAzE,EAA4B,EAA5BA,WAAYqC,EAAgB,EAAhBA,UAClC,GAAsClE,eAAS,kBAAM,kBAAM,SAA3D,eAAOuG,EAAP,KAAsBC,EAAtB,KACMC,GAAiBC,OAAgB7E,EAAWyD,UAC5CrF,EAAO4B,EAAW5B,KAUxB,OACI,kBAAC0G,EAAA,EAAD,CAAMpC,WAAS,EAACM,MAAO,CAAE+B,UAAW,MAChC,kBAACC,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAACvC,EAAA,GAAD,CACIE,QAASR,EACT9B,QAASqC,YACTuC,UAAQ,GAER,kBAACC,EAAA,EAAD,CAAO1C,WAAS,GACZ,kBAAC2C,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAWrC,MAAO,CAAEsC,WAAY,cAExBC,QAAiBvF,EAAWwF,cAGpC,kBAACH,EAAA,EAAD,KACKrF,EAAWyF,aACR,kBAAC,aAAD,KACKhF,kBAAmBC,qBAA2B,CAC3CgF,MAAMC,QACF3F,EAAWyF,eAGnB,8BAGPzF,EAAW4F,eACR,kBAAC,aAAD,KACKnF,kBAAmBC,uBAA6B,CAC7CgF,MAAMC,QACF3F,EAAW4F,oBAlC7BnB,EAwCYzE,EAAW6F,GAvClC,oBAAoBC,KAAKrB,IAwCZ,kBAACY,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,CAAcC,KAAI,2CAAsChG,EAAW6F,IAC/DzD,KAAM3B,kBAAmBC,uCAMjD,kBAACsE,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACS,IAAzBN,EAAeqB,OACZ,kBAAC,EAAD,CACI5D,UAAWA,EACX7B,MAAOoE,EAAed,MACtBvB,MAAOqC,EAAerC,MACtBH,KACI,kBAAC,EAAD,CAAsBqB,SAAUmB,IAEpCtC,QAAS,kBAAC,KAAD,CAAcQ,KAAK,UAIvC1E,GAAwB,IAAhBA,EAAKgC,QACV,kBAAC4E,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAAC9B,EAAA,EAAD,KACI,kBAACC,EAAA,GAAD,CAAMC,UAAWC,SACZ9C,kBAAmBC,iBAExB,kBAACwF,SAAD,CAAQ3F,QAAQ,OAAOyC,MAAO,CAAEmD,QAAS,GAAKC,QAxE5C,WAClBzB,GAAa,kBAAM,kBAAM,kBAAC,EAAD,CAAW3G,OAAQI,UAwEvBqC,kBAAmBC,qBAA2B,CAAE2F,UAAWjI,EAAKgC,YAKjF,kBAACsE,EAAD,QAKZF,EAAetC,UAAY,CACvBlC,WAAYkC,WACZG,UAAWH,UAGf,U,yvBCjFA,IAAMoE,GAAkB,SAAC,GAAqB,IAAnBC,EAAmB,EAAnBA,aACjBtI,GAAWC,mBACjB,EAGIsB,cAAe,kBAAM,kBAAM,SAH/B,eACIgH,EADJ,KAEIC,EAFJ,KAIMC,GAAUC,kBAEVC,GAAgBC,QAAkBH,EAAQI,SAASjI,QACnDkI,GAAU1H,kBAAY,gBAAG2H,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAU1I,OAAQ,KAAI2I,gBAC9D1H,GAASF,kBACX,gBAAG2H,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAUzH,SAAU,MAEpC2H,GAAa7H,kBACf,gBAAG2H,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAUG,QAAS,KAEnCrF,GAAczC,kBAChB,gBAAG+H,EAAH,EAAGA,qBAAH,OAA8BA,aAAA,EAAAA,EAAsBtF,cAAe,MAEjEuF,GAAehI,kBACjB,gBAAG2H,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAUK,eAAgB,MAGxCC,EACoCxF,EADpCwF,cAAeC,EACqBzF,EADrByF,aACnB1H,EAAwCiC,EAAxCjC,OAAQhB,EAAgCiD,EAAhCjD,OAAQL,EAAwBsD,EAAxBtD,KAAME,EAAkBoD,EAAlBpD,QAAS8I,EAAS1F,EAAT0F,KAUnC,SAASpG,EAAMqG,GACXxJ,GAASyJ,QAA4BD,IATzCjI,eAAgB,WAEZ,OADA4B,EAAMwF,GACC,WACH3I,GAAS0J,WACT1J,GAAS2J,cAEd,IAMH,OAAwBC,QAAgB,CAAEhJ,UAAUuC,GAA7C0G,GAAP,eAEM/F,EAAe,CACjBC,MAAO,EACHC,OAAab,EAAOvC,EAChB4B,kBAAmBC,qCACnBD,kBAAmBC,8CAKzBqH,EAAsB,CACxBC,SAASC,QAAiBpI,EAAQhB,GAClCqJ,SAAUJ,GAGRK,EAAuB,SAAA/I,GACzBqH,GAAuB,kBAAM,kBAAM,kBAAC2B,GAAA,EAAD,CAAkBhJ,KAAMA,SAYzDiJ,GAAWC,QAAYvB,EAASM,GAHjB,kBACjBkB,SAAqB,GAAD,MAAMzG,GAAN,IAAmB+D,GAAIU,EAAc5E,OAAQ,KAAK6G,KAAKC,SAP5D,SAACC,GAChBzK,EACI,CAAE0K,KAAM,gBAAiBC,QAASF,OASpCG,EAAgBxB,IAAgByB,QAAazB,GAAcjH,OAE3D2I,GAAaC,OAAeT,MAAsBnH,EAAO,CAAEyE,GAAIU,GAAgBG,GAE/EuC,GAAWC,QAAY3C,EAAczE,EAAa,CACpDqH,IAAKC,MACLC,KAAMC,OACPrL,GAEH,OACI,kBAAC,aAAD,KACKsB,EAAOgK,UAAY,kBAACC,GAAA,EAAD,CAAcC,KAAMlK,EAAOkK,QAC3C,kBAACC,EAAA,EAAD,CACIC,uBAAqB,EACrBC,YAAU,EACVC,aAAW,EACXC,gBAAc,EACdC,eAAa,EACbC,YAAa,CAAEC,KAAK,GACpBC,cAAe,CACXC,YAAa,CACTtL,SACAgB,SACAyH,gBACAC,iBAGR6C,OAAQ,YAA2B,IAAxBC,EAAwB,EAAxBA,mBACPC,QAAS,GAAD,GACDD,GACCE,SAAyBC,MAAoBC,OAC7CC,QAAiB,CAAElM,OAAME,UAAS8I,OAAM3I,UAAU+H,OAI9D+D,YAAa5B,EACb6B,SAASC,SAAkB1C,GAC3B2C,WAAY,CACRC,cAAc,EACdxK,QAASyK,uBAAsBvI,UAAW,wBAAyBwI,gBAAgB,IA3B3F,MA8BI,kBAAC,EAAAC,SAAD,UAC0BtM,IAArBW,EAAO8C,WAA2B,kBAAC8I,GAAA,EAAD,CAC/B1I,UAAU,gCACVV,aAAcA,EACdgG,oBAAqBA,EACrBqD,aAAc,CACVC,WAA2B,IAAfnE,EACZmB,SAAUY,GAEdqC,WACIjD,IAAYkD,QAAoB1C,EAAeR,EAAU,CAAExG,YAAaqF,GAAcH,GAE1FyE,gBAAkB,kBAACC,GAAA,EAAD,CACdJ,WAC0C,KAAtCvC,QAAazB,GAAcjH,OAE/BgG,QAAS,kBACL+B,GACIuD,QACInF,GACAoF,QAA0BtE,GAC1BuE,kBAIZC,KAAM,6BACNxJ,WAAW,GAEX,kBAAC,KAAD,MAhBc,IAgBY5B,kBAAmBC,wBAIrD,kBAAC8F,EAAD,UASxBF,GAAgBpE,UAAY,CACxBqE,aAAcrE,YAGlB,Y,ylBCxKA,IAAM4J,GAAiB,SAAC,GAAc,IAAZC,EAAY,EAAZA,MAChB9N,GAAWC,mBACjB,EAAuBsB,aAAeuM,EAAMtE,OAAOuE,YAA5CzF,GAAP,eAEM0F,EAAY,GAAH,OAAM1F,EAAN,cAAwB9F,kBAAmBC,wBAC1DwL,QAAaD,GAEb,IAAME,GAAkB9M,kBACpB,qBAAG+M,uBAED7M,GAASF,kBACX,qBAAG+M,oBAA8C7M,UAGrDC,eAAgB,WACZvB,GAASoO,QAAoB,CAAE9F,oBAChC,IAEH/G,eAAgB,WACZ,OAAO,WACHvB,GAASqO,WACTrO,GAASsO,WACTtO,GAASuO,eAEd,IAEH,IAAQxM,EAAemM,EAAgB/M,KAA/BY,WACR,OACI,kBAAC,aAAD,KACI,kBAACyM,EAAA,EAAD,CACIjM,MAAO+F,EACPmG,WAAY,mBACZC,YAAa,CACT,CACInM,MAAOC,kBAAmBC,2BAC1BkM,GAAIC,kBACJC,UAAU,GAEd,CACItM,MAAO+F,EACPuG,UAAU,KAGpBvN,EAAOgK,SAAW,kBAACwD,EAAA,EAAD,MACZ,kBAAC,EAAD,CACI/M,WAAU,SAAOA,GAAP,IAAmB6F,GAAIU,IACjClE,UAAW9C,EAAO8C,aAG9B,kBAAC2K,EAAA,EAAD,KACI,kBAAC5H,EAAA,EAAD,CAAO1C,WAAS,GACZ,kBAAC2C,EAAA,EAAD,KACI,kBAACjC,EAAA,EAAD,KACI,kBAACC,EAAA,GAAD,CAAMC,UAAWC,SAAkB9C,kBAAmBC,8BAG9D,kBAAC2E,EAAA,EAAD,KACK9F,EAAOgK,UACD,kBAAEC,GAAA,EAAF,OACA,kBAAC,GAAD,CAAiBjD,aAAcA,SAQ9DuF,GAAe5J,UAAY,CACvB6J,MAAO7J,SAGX,UAAe+K,gBAAWnB","file":"js/AdvisoryyPage.87f5c255e09446cf51b7.js","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport { cvesTableColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCves } from '../../store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport { createCvesRows } from '../../Utilities/DataMappers';\nimport { sortCves } from '..//../Utilities/Helpers';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst CvesModal = ({ cveIds }) =>{\n    const dispatch = useDispatch();\n    const [cves, setCves] = useState([]);\n    const [rows, setRows] = useState([]);\n    const [page, setPage] = useState(1);\n    const [perPage, setPerPage] = useState(10);\n    const [search, setSearch] = useState(undefined);\n    const [sortBy, setSortBy] = useState({\n        direction: SortByDirection.asc,\n        index: 0\n    });\n\n    const data = useSelector(({ CvesListStore }) => CvesListStore.rows);\n\n    const status = useSelector(\n        ({ CvesListStore }) => CvesListStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchCves({ cveIds }));\n    }, []);\n\n    React.useMemo(() => {\n        setRows(cves.slice((page - 1) * perPage, page * perPage));\n    }, [cves, page, perPage, sortBy]);\n\n    useMemo(() => {\n        const sortedCves = (search !== undefined && search !== '')\n            && data.filter(\n                cve => {\n                    const { attributes: { synopsis } } = cve;\n                    return synopsis && search && (synopsis.toLowerCase().includes(search.toLowerCase()));\n                }\n            ) || data;\n\n        setCves(createCvesRows((sortedCves.length !== 0 || search) && sortedCves || data));\n    }, [search, data]);\n\n    const handleClose = () => {\n        setRows(undefined);\n    };\n\n    const handleFilter = ({ search }) =>{\n        setPage(page);\n        setSearch(search);\n    };\n\n    const handlePageChange = (_, page) => {\n        setPage(page);\n    };\n\n    const handlePerPageChange = (_, perPage) => {\n        setPage(1);\n        setPerPage(perPage);\n    };\n\n    const handleSort = (_, index, direction) => {\n        const { sortBy, sortedCves } = sortCves(cves, index, direction);\n\n        setSortBy(sortBy);\n        setCves(sortedCves);\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant='small'\n                title={intl.formatMessage(messages.labelsCves)}\n                isOpen={Boolean(rows)}\n                onClose={handleClose}\n            >\n                <TableView\n                    columns={cvesTableColumns}\n                    onSetPage={handlePageChange}\n                    onPerPageSelect={handlePerPageChange}\n                    apply={handleFilter}\n                    tableOUIA={'cves-table'}\n                    paginationOUIA={'cves-pagination'}\n                    onSort={handleSort}\n                    sortBy={sortBy}\n                    store={{\n                        rows,\n                        metadata: { limit: perPage, offset: (page - 1) * perPage, total_items: cves && cves.length },\n                        status, queryParams: { filter: {}, search }\n                    }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(handleFilter, search, '',\n                                intl.formatMessage(messages.labelsFiltersCvesSearchPlaceHolder))\n                        ]\n                    }}\n                />\n            </Modal>\n        </React.Fragment>\n    );\n\n};\n\nCvesModal.propTypes = {\n    cveIds: propTypes.array\n};\n\nexport default CvesModal;\n","import { Text, TextContent, TextVariants, Bullseye, Split, SplitItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\nimport './InfoBox.scss';\n\nconst InfoBox = ({ title, text, isLoading, content, color }) => {\n    return (\n        <Split className=\"infobox\" hasGutter>\n            <WithLoader\n                variant={WithLoaderVariants.skeleton}\n                loading={isLoading}\n                size=\"lg\"\n            >\n                <SplitItem style={{ backgroundColor: color }}>\n                    <Bullseye>{content}</Bullseye>\n                </SplitItem>\n                <SplitItem isFilled>\n                    <TextContent>\n                        <Text component={TextVariants.h6}>{title}</Text>\n                        <Text component={TextVariants.p}>{text}</Text>\n                    </TextContent>\n                </SplitItem>\n            </WithLoader>\n        </Split>\n    );\n};\n\nInfoBox.propTypes = {\n    title: propTypes.string,\n    text: propTypes.any,\n    isLoading: propTypes.bool,\n    content: propTypes.any,\n    color: propTypes.string\n};\n\nexport default InfoBox;\n","import { Text, TextContent, TextVariants, Popover } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Popover\n            position=\"bottom\"\n            enableFlip\n            headerContent={<div>{severity.label + ' severity'}</div>}\n            bodyContent={\n                <TextContent>\n                    <Text component={TextVariants.p}>{severity.text}</Text>\n                </TextContent>\n            }\n            footerContent={\n                <a\n                    href=\"https://access.redhat.com/security/updates/classification/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <Flex>\n                        <FlexItem spacer={{ default: 'spacerSm' }}>\n                            <ExternalLinkSquareAltIcon />\n                        </FlexItem>\n                        <FlexItem spacer={{ default: 'spacerSm' }}>\n                            {intl.formatMessage(messages.linksSearchSecurityRatings)}\n                        </FlexItem>\n                    </Flex>\n                </a>\n            }\n        >\n            <a>{intl.formatMessage(messages.linksLearnMore)}</a>\n        </Popover>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import {\n    Button, Grid, GridItem, Stack, StackItem, Text, TextContent,\n\n    TextVariants\n} from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport messages from '../../Messages';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport CvesModal from '../../SmartComponents/AdvisoryDetail/CvesModal';\nimport { getSeverityById, preserveNewlines } from '../../Utilities/Helpers';\nimport { intl } from '../../Utilities/IntlProvider';\nimport InfoBox from '../InfoBox/InfoBox';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\nimport ExternalLink from '../Snippets/ExternalLink';\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const [CvesInfoModal, setCvesModal] = useState(() => () => null);\n    const severityObject = getSeverityById(attributes.severity);\n    const cves = attributes.cves;\n\n    const showCvesModal = () => {\n        setCvesModal(() => () => <CvesModal cveIds={cves} />);\n    };\n\n    const isRHAdvisory = (name) => {\n        return /^(RHEA|RHBA|RHSA)/.test(name);\n    };\n\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                preserveNewlines(attributes.description)\n                            }\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsPublicDate, {\n                                        date: processDate(\n                                            attributes.public_date\n                                        )\n                                    })}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsModifiedDate, {\n                                        date: processDate(\n                                            attributes.modified_date\n                                        )\n                                    })}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        {isRHAdvisory(attributes.id) &&\n                            <StackItem>\n                                <ExternalLink link={`https://access.redhat.com/errata/${attributes.id}`}\n                                    text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n                            </StackItem>\n                        }\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                {severityObject.value !== 0 && (\n                    <InfoBox\n                        isLoading={isLoading}\n                        title={severityObject.label}\n                        color={severityObject.color}\n                        text={\n                            <AdvisorySeverityInfo severity={severityObject} />\n                        }\n                        content={<SecurityIcon size=\"lg\" />}\n                    />\n                )}\n            </GridItem>\n            {cves && cves.length !== 0 && (\n                <GridItem md={4} sm={12}>\n                    <TextContent>\n                        <Text component={TextVariants.h3}>\n                            {intl.formatMessage(messages.labelsCves)}\n                        </Text>\n                        <Button variant='link' style={{ padding: 0 }} onClick={showCvesModal} >\n                            {intl.formatMessage(messages.labelsCvesButton, { cvesCount: cves.length })}\n                        </Button>\n                    </TextContent>\n                </GridItem>\n            )}\n            <CvesInfoModal />\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { AnsibeTowerIcon } from '@patternfly/react-icons';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport { register } from '../../store';\nimport { changeAffectedSystemsParams, clearInventoryReducer, clearAdvisorySystemsReducer } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { fetchAdvisorySystems, exportAdvisorySystemsCSV, exportAdvisorySystemsJSON } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips, decodeQueryparams, filterRemediatableSystems,\n    remediationProvider, removeUndefinedObjectKeys, persistantParams\n} from '../../Utilities/Helpers';\nimport {\n    useOnSelect, useRemoveFilter,\n    useBulkSelectConfig, useGetEntities, useOnExport\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport PatchRemediationButton from '../Remediation/PatchRemediationButton';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from '../Systems/SystemsListAssets';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { useHistory } from 'react-router-dom';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { Fragment } from 'react';\n\nconst AdvisorySystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const history = useHistory();\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const queryParams = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore?.queryParams || {}\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => {\n            dispatch(clearInventoryReducer());\n            dispatch(clearAdvisorySystemsReducer());\n        };\n    }, []);\n\n    function apply(params) {\n        dispatch(changeAffectedSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ search }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            )\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: deleteFilters\n    };\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const fetchAllData = () =>\n        fetchAdvisorySystems({ ...queryParams, id: advisoryName, limit: -1 }).then(filterRemediatableSystems);\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllData, selectRows);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const getEntites = useGetEntities(fetchAdvisorySystems, apply, { id: advisoryName }, history);\n\n    const onExport = useOnExport(advisoryName, queryParams, {\n        csv: exportAdvisorySystemsCSV,\n        json: exportAdvisorySystemsJSON\n    }, dispatch);\n\n    return (\n        <React.Fragment>\n            {status.hasError && <ErrorHandler code={status.code} /> ||\n                <InventoryTable\n                    disableDefaultColumns\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    ignoreRefresh\n                    hideFilters={{ all: true }}\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        register({\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(systemsListColumns, modifyInventory),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        });\n                    }}\n                    getEntities={getEntites}\n                    actions={systemsRowActions(showRemediationModal)}\n                    tableProps={{\n                        canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n\n                >   <Fragment>\n                        {status.isLoading !== undefined && <PrimaryToolbar\n                            className=\"patch-systems-primary-toolbar\"\n                            filterConfig={filterConfig}\n                            activeFiltersConfig={activeFiltersConfig}\n                            exportConfig={{\n                                isDisabled: totalItems === 0,\n                                onSelect: onExport\n                            }}\n                            bulkSelect={\n                                onSelect && useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)\n                            }\n                            dedicatedAction={(<PatchRemediationButton\n                                isDisabled={\n                                    arrayFromObj(selectedRows).length === 0\n                                }\n                                onClick={() =>\n                                    showRemediationModal(\n                                        remediationProvider(\n                                            advisoryName,\n                                            removeUndefinedObjectKeys(selectedRows),\n                                            remediationIdentifiers.advisory\n                                        )\n                                    )\n                                }\n                                ouia={'toolbar-remediation-button'}\n                                isLoading={false}\n                            >\n                                <AnsibeTowerIcon />&nbsp;{intl.formatMessage(messages.labelsRemediate)}\n                            </PatchRemediationButton>\n                            )}\n                        />}\n                        <RemediationModalCmp />\n                    </Fragment>\n\n                </InventoryTable>\n            }\n        </React.Fragment>\n    );\n};\n\nAdvisorySystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AdvisorySystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { paths } from '../../Routes';\nimport { clearAdvisoryDetailStore, clearEntitiesStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport AdvisorySystems from '../AdvisorySystems/AdvisorySystems';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst AdvisoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [advisoryName] = React.useState(match.params.advisoryId);\n\n    const pageTitle = `${advisoryName} - ${intl.formatMessage(messages.titlesAdvisories)}`;\n    setPageTitle(pageTitle);\n\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearEntitiesStore());\n            dispatch(clearAdvisoryDetailStore());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                headerOUIA={'advisory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchAdvisories),\n                        to: paths.advisories.to,\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable /> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        {status.hasError\n                            && < ErrorHandler />\n                            || <AdvisorySystems advisoryName={advisoryName} />}\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisoryDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(AdvisoryDetail);\n"],"sourceRoot":""}