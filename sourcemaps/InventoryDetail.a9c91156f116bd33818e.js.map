{"version":3,"sources":["webpack:///./src/SmartComponents/SystemDetail/InventoryDetail.js"],"names":["InventoryDetail","match","dispatch","useDispatch","entityDetails","useSelector","entity","hasThirdPartyRepo","entityId","params","inventoryId","useEffect","fetchSystemDetailsAction","pageTitle","display_name","intl","messages","setPageTitle","onLoad","mergeWithDetail","register","SystemDetailStore","title","headerOUIA","breadcrumbs","to","paths","isActive","hideBack","variant","propTypes"],"mappings":"gpBAeA,IAAMA,EAAkB,SAAC,GAAc,MAAZC,EAAY,EAAZA,MACjBC,GAAWC,mBACXC,GAAgBC,kBAClB,gBAAGD,EAAH,EAAGA,cAAH,OAAuBA,GAAiBA,EAAcE,UAGpDC,GAAoBF,kBACtB,gBAAGD,EAAH,EAAGA,cAAH,OAAuBA,GAAiBA,EAAcG,qBAEpDC,EAAQ,UAAGP,EAAMQ,cAAT,aAAG,EAAcC,aAC/BC,gBAAU,WAAQT,GAASU,QAAyBJ,MAAe,IAEnE,IAAMK,EAAYT,GAAiB,GAAJ,OAAOA,EAAcU,aAArB,cAAuCC,kBAAmBC,oBAGzF,OAFAC,QAAaJ,GAGT,kBAAC,IAAD,CACIK,OAAQ,YAAyB,IAAtBC,EAAsB,EAAtBA,iBACPC,O,qWAAS,CAAD,GACDD,EAAgBE,SAI3B,kBAAC,IAAD,CACIC,MAAM,GACNC,WAAY,oBACZC,YAAa,CACT,CACIF,MAAOP,kBAAmBC,wBAC1BS,GAAIC,eACJC,UAAU,GAEdvB,GAAiB,CACbkB,MAAOlB,EAAcU,aACrBa,UAAU,KAIlB,kBAAC,IAAD,CAAqBC,UAAQ,GACvBrB,GACG,kBAAC,KAAD,CAAOsB,QAAQ,OAAOP,MAAOP,kBAAmBC,4BAI7D,kBAAC,IAAD,KACI,kBAAC,IAAD,SAMhBhB,EAAgB8B,UAAY,CACxB7B,M,MAAO6B,WAGX","file":"js/InventoryDetail.10a8a6c77429d3bfdf63.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { paths } from '../../Routes';\nimport { register } from '../../store';\nimport { SystemDetailStore } from '../../store/Reducers/SystemDetailStore';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { InventoryDetailHead, AppInfo, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Alert } from '@patternfly/react-core';\nimport { fetchSystemDetailsAction } from '../../store/Actions/Actions';\nimport propTypes from 'prop-types';\n\nconst InventoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const entityDetails = useSelector(\n        ({ entityDetails }) => entityDetails && entityDetails.entity\n    );\n\n    const hasThirdPartyRepo = useSelector(\n        ({ entityDetails }) => entityDetails && entityDetails.hasThirdPartyRepo\n    );\n    const entityId = match.params?.inventoryId;\n    useEffect(() => { dispatch(fetchSystemDetailsAction(entityId)); }, []);\n\n    const pageTitle = entityDetails && `${entityDetails.display_name} - ${intl.formatMessage(messages.titlesSystems)}`;\n    setPageTitle(pageTitle);\n\n    return (\n        <DetailWrapper\n            onLoad={({ mergeWithDetail }) => {\n                register({\n                    ...mergeWithDetail(SystemDetailStore)\n                });\n            }}\n        >\n            <Header\n                title=\"\"\n                headerOUIA={'inventory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchSystems),\n                        to: paths.systems.to,\n                        isActive: false\n                    },\n                    entityDetails && {\n                        title: entityDetails.display_name,\n                        isActive: true\n                    }\n                ]}\n            >\n                <InventoryDetailHead hideBack>\n                    { hasThirdPartyRepo &&\n                        (<Alert variant=\"info\" title={intl.formatMessage(messages.textThirdPartyInfo)}></Alert>)\n                    }\n                </InventoryDetailHead>\n            </Header>\n            <Main>\n                <AppInfo />\n            </Main>\n        </DetailWrapper>\n    );\n};\n\nInventoryDetail.propTypes = {\n    match: propTypes.object\n};\n\nexport default InventoryDetail;\n"],"sourceRoot":""}