{"version":3,"file":"js/5391.cfe99dfaf0e9f37c609b.js","mappings":"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","sources":["webpack:///./src/Utilities/Helpers.js"],"sourcesContent":["/* eslint-disable camelcase */\nimport { Flex, FlexItem, Tooltip } from '@patternfly/react-core';\nimport {\n    BugIcon, CheckIcon, FlagIcon,\n    EnhancementIcon, InfoCircleIcon, LongArrowAltUpIcon,\n    SecurityIcon\n} from '@patternfly/react-icons';\nimport { SortByDirection } from '@patternfly/react-table';\nimport flatten from 'lodash/flatten';\nimport findIndex from 'lodash/findIndex';\nimport pickBy from 'lodash/pickBy';\nimport qs from 'query-string';\nimport React from 'react';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport { Link } from 'react-router-dom';\nimport messages from '../Messages';\nimport AdvisoriesIcon from '../PresentationalComponents/Snippets/AdvisoriesIcon';\nimport {\n    advisorySeverities,\n    defaultCompoundSortValues,\n    filterCategories,\n    multiValueFilters\n} from './constants';\nimport { intl } from './IntlProvider';\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nexport const removeUndefinedObjectItems = (originalObject) => {\n    const newObject = JSON.parse(JSON.stringify(originalObject));\n    Object.keys(newObject).forEach(key => newObject[key] === undefined && delete newObject[key]);\n    return newObject;\n};\n\nexport const convertLimitOffset = (limit, offset) => {\n    return [offset / limit + 1, limit];\n};\n\nexport const transformPairs = (input, remediationIdentifier) => {\n    let issues = [];\n\n    const advisoriesNames = Object.keys(input?.data || {});\n    for (let i = 0; i < advisoriesNames.length; i++) {\n        if (input.data[advisoriesNames[i]][0] !== '') {\n            issues.push({\n                id: `${remediationIdentifier}:${advisoriesNames[i]}`,\n                description: advisoriesNames[i],\n                systems: input.data[advisoriesNames[i]]\n            });\n        }\n    }\n\n    return { issues };\n};\n\nexport const createSortBy = (header, values, offset, compoundSortValues = defaultCompoundSortValues) => {\n    if (values) {\n        let [column] = values;\n        let multiple = values.join();\n        let direction =\n            column[0] === '-' ? SortByDirection.desc : SortByDirection.asc;\n        Object.keys(compoundSortValues).forEach(col => {\n            Object.keys(compoundSortValues[col]).forEach(dir => {\n                if (compoundSortValues[col][dir] === multiple) {\n                    column = col;\n                    direction = dir;\n                }\n            });\n        });\n\n        column = column.replace(/^(-|\\+)/, '');\n        const index = findIndex(header, item => item.key === column);\n        let sort = {\n            index: index + offset,\n            direction\n        };\n        return sort;\n    }\n\n    return {};\n};\n\nexport const addOrRemoveItemFromSet = (targetObj, inputArr) => {\n    const inputObj = inputArr.reduce(\n        (obj, item) => ((obj[item.rowId] = item.value || undefined), obj),\n        {}\n    );\n    const result = { ...targetObj, ...inputObj };\n    return result;\n};\n\nexport const getNewSelectedItems = (selectedItems, currentItems) => {\n    let payload = [].concat(selectedItems).map(item => ({ rowId: item.id, value: item.selected }));\n    const mergedSelection = addOrRemoveItemFromSet(\n        currentItems,\n        payload\n    );\n\n    return pickBy(mergedSelection, v => !!v);\n};\n\n// for expandable rows only\nexport const getRowIdByIndexExpandable = (arrayOfObjects, index) => {\n    return arrayOfObjects[index / 2].id;\n};\n\nexport const getOffsetFromPageLimit = (page, limit) => {\n    return page * limit - limit;\n};\n\nexport const getLimitFromPageSize = limit => {\n    return limit;\n};\n\nexport function truncate(str, max, end) {\n    return str.length > max ? (\n        <React.Fragment>\n            {str.substring(0, max - 1)}\n            ...&nbsp;{end}\n        </React.Fragment>\n    ) : str;\n}\n\nconst findBullets = (description) => {\n    let substringIndex = description.search(/:/);\n    // + 2 accounts for the 2 new lines to separate the sentence from the start of the bullets\n    return substringIndex > 0\n        ? description.slice(0, substringIndex + 2) + preserveNewlines(description.substring(substringIndex + 2)) : description;\n};\n\nexport const truncateDescription = (description, wordLength, setWordLength) => (\n    truncate(findBullets(description), wordLength,\n        <a onClick={() => setWordLength(description.length)}>\n            {intl.formatMessage(messages.linksReadMore)}\n        </a>)\n);\n\nexport function createAdvisoriesIcons([rhea, rhba, rhsa, other], type = 'applicable') {\n    return (\n        <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n            {[rhea, rhba, rhsa].every(item => item === 0) &&\n                `No ${type} advisories`}\n            {rhsa !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Security advisories'} count={rhsa} Icon={SecurityIcon} />\n                </FlexItem>)}\n            {rhba !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Bug fixes'} count={rhba} Icon={BugIcon} />\n                </FlexItem>)}\n            {rhea !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Enhancements'} count={rhea} Icon={EnhancementIcon} />\n                </FlexItem>)}\n            {other !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Other'} count={other} Icon={FlagIcon} />\n                </FlexItem>)}\n        </Flex>\n    );\n}\n\nexport function createUpgradableColumn(value) {\n    return <div style={{\n        display: 'flex',\n        alignItems: 'center'\n    }}>\n        {\n            value && <LongArrowAltUpIcon style={{ color: 'var(--pf-global--palette--blue-400)' }} />\n            || <CheckIcon style={{ color: 'var(--pf-global--success-color--100)' }} />\n        }\n        {<span style={{ marginLeft: 'var(--pf-global--spacer--sm)' }}>\n            {\n                value && 'Upgradable' || 'Up-to-date'\n            }\n        </span>}\n    </div>;\n}\n\nexport function getSeverityById(id) {\n    return (\n        advisorySeverities.find(item => item.value === id) ||\n        advisorySeverities[0]\n    );\n}\n\nexport const createPackagesColumn = (packageCount, systemID) => (\n    <Link to={{\n        pathname: `/systems/${systemID}`,\n        state: { tab: 'packages' }\n    }}>\n        {packageCount}\n    </Link>\n);\n\nexport function handlePatchLink(type, name, body) {\n    if (location.href.indexOf('inventory') === -1) {\n        return (\n            <Link to={`/${type}/${name}`}>\n                {body === undefined ? name : body}\n            </Link>\n        );\n    } else {\n        return (\n            <a href={`${document.baseURI}insights/patch/${type}/${name}`}>\n                {body || name}\n            </a>\n        );\n    }\n}\n\nexport const arrayFromObj = items =>\n    Object.values(items).filter(value => value);\n\nexport const remediationProvider = (issues, systems, remediationIdentifier) => {\n    issues = [].concat(issues);\n    systems = [].concat(systems);\n    return issues.length && systems.length\n        ? {\n            issues: issues.map(item => ({\n                id: `${remediationIdentifier}:${item}`,\n                description: item\n            })),\n            systems\n        }\n        : false;\n};\n\nexport const remediationProviderWithPairs = (issuePairs, transformFunc, remediationIdentifier) => {\n    return issuePairs ? transformFunc(issuePairs, remediationIdentifier) : false;\n};\n\nexport const getFilterValue = (category, key) => {\n    const filterCategory = filterCategories[category];\n    if (filterCategory) {\n        const filterOption = /* some filters don't have constant values */\n        (filterCategory?.values || []).find((item) => item.value === key);\n        return filterOption || { apiValue: key };\n    } else {\n        return { apiValue: key };\n    }\n};\n\nexport const encodeParams = (parameters, shouldTranslateKeys) => {\n    const calculateWorkloads = ({ sap_sids, ...restOfProfile }) => {\n        let result = '';\n        Object.entries(generateFilter({ system_profile: restOfProfile })).forEach(entry => {\n            const [key, value] = entry;\n            result = `${result}&${key}=${value}`;\n        });\n\n        const SIDsFilter = sap_sids?.map(sid => `filter[system_profile][sap_sids][in]=${sid}`).join('&');\n\n        return result.concat(sap_sids ? `&${SIDsFilter}#SIDs=${sap_sids.join(',') }` : '');\n    };\n\n    const flattenFilters = filter => {\n        let result = {};\n        filter &&\n            Object.entries(filter).forEach(item => {\n                let [key, value] = item;\n                value = shouldTranslateKeys && getFilterValue(key, value).apiValue || value;\n                const operator = ([].concat(value).length > 1 || multiValueFilters.includes(key)) ? 'in:' : '';\n                result = {\n                    ...result,\n                    [`filter[${key}]`]: `${operator}${value.toString()}`\n                };\n            });\n        return result;\n    };\n\n    let { filter, systemProfile = {}, ...allParams } = parameters;\n\n    allParams = { ...allParams, ...flattenFilters(filter) };\n    let params = [];\n    Object.keys(allParams).forEach(key => {\n        const argKey = encodeURIComponent(key);\n        const argValue = encodeURIComponent(allParams[key]);\n\n        if (!['', undefined, null].some(value => [argValue, key].includes(value))) {\n            if (!['selectedTags', 'systemProfile'].includes(key)) {\n                params.push(argKey.concat('=').concat(argValue));\n            } else if (key === 'selectedTags') {\n                params.push.apply(params, allParams[key]);\n            }\n        }\n    });\n\n    const workloadsFilter = (Object.keys(systemProfile).length > 0)\n        && calculateWorkloads(systemProfile) || '';\n\n    return '?'.concat(params.join('&')).concat(workloadsFilter);\n};\n\nexport const encodeApiParams = parameters => {\n    return encodeParams(parameters, true);\n};\n\nexport const encodeURLParams = parameters => {\n    delete parameters.id;\n    let urlParams = { ...parameters };\n    delete urlParams.selectedTags;\n    return encodeParams(removeUndefinedObjectItems(urlParams), false);\n};\n\nexport const decomposeFilterValue = filterValue => {\n    if (typeof(filterValue) === 'string' && filterValue.startsWith('in:')) {\n        const values = filterValue.slice(3);\n        return values.split(',');\n    }\n\n    return filterValue;\n};\n\nexport const decodeQueryparams = queryString => {\n    const parsed = qs.parse(queryString);\n    const res = {};\n    Object.keys(parsed).forEach(key => {\n        if (!key.startsWith('filter[system_profile]')) {\n            const convertedToInt = parseInt(parsed[key], 10);\n            const typeHandledParam = isNaN(convertedToInt) ? parsed[key] : convertedToInt;\n            const bracketIndex = key.search(/\\[.*\\]/);\n            if (bracketIndex > 0) {\n                const objParent = key.slice(0, bracketIndex);\n                const objKey = key.slice(bracketIndex + 1, -1);\n                res[objParent] = {\n                    ...res[objParent],\n                    [objKey]: decomposeFilterValue(typeHandledParam)\n                };\n            } else {\n                res[key] = typeHandledParam;\n            }\n        }\n    });\n    return res;\n};\n\nexport const buildFilterChips = (filters, search, searchChipLabel = 'Search') => {\n\n    let filterConfig = [];\n    const buildChips = (filters, category) => {\n        if (multiValueFilters.includes(category)) {\n            const filterValues = filters[category] && (typeof(filters[category]) === 'string' && filters[category].split(',')\n                || filters[category]) || [];\n            return filterValues.map(value => ({\n                name: value,\n                id: category,\n                value\n            }));\n        } else {\n            const { values } = filterCategories[category];\n\n            if (!filters[category]) {\n                return [];\n            }\n\n            return [].concat(filters[category]).map(filterValue => {\n                const match = values.find(\n                    item =>\n                        item.value.toString() === filterValue.toString()\n                );\n                return {\n                    name: match.label,\n                    value: filterValue,\n                    id: match.value\n                };\n            });\n        }\n    };\n\n    const processFilters = () => {\n        let categories = Object.keys(filters).filter(\n            item =>\n                filters[item] !== '' && [].concat(filters[item]).length !== 0\n        );\n        filterConfig = filterConfig.concat(\n            categories.map(category => {\n                const label = category === 'installed_evra' && 'Package version' || filterCategories[category].label;\n                return {\n                    category: label,\n                    id: category,\n                    chips: buildChips(filters, category)\n                };\n            })\n        );\n    };\n\n    const processSearch = () => {\n        filterConfig = filterConfig.concat([\n            {\n                category: searchChipLabel,\n                id: 'search',\n                chips: [\n                    {\n                        name: search,\n                        value: search\n                    }\n                ]\n            }\n        ]);\n    };\n\n    filters && processFilters();\n    search && processSearch();\n\n    return filterConfig;\n};\n\nexport const changeListParams = (oldParams, newParams) => {\n    const newState = { ...oldParams, ...newParams };\n    const offsetResetParams = ['filter', 'search', 'limit', 'selectedTags'];\n    if (offsetResetParams.some(item => newParams.hasOwnProperty(item))) {\n        newState.offset = 0;\n    }\n\n    if (newParams.hasOwnProperty('filter')) {\n        newState.filter = { ...oldParams.filter, ...newParams.filter };\n\n        //we need explicitly remove 'undefined' filters for safety\n        Object.keys(newState.filter).forEach(\n            (key) =>\n                (newState.filter[key] === undefined ||\n                    newState.filter[key] === '') &&\n                delete newState.filter[key]\n        );\n    }\n\n    if (newState.hasOwnProperty('tags')) {\n        newState && delete newState.tags;\n    }\n\n    return newState;\n};\n\nexport function subtractDate(days) {\n    const date = new Date();\n    date.setDate(date.getDate() - days);\n    return date.toISOString();\n}\n\nexport function preserveNewlines(input) {\n    return input && input.replace(\n        new RegExp('\\\\n\\\\n(?=.*[\\\\n\\\\n])', 'g'),\n        '\\n'\n    );\n}\n\nexport function sortCves(cves, index, direction) {\n\n    const sortedCves = cves.sort(\n        ({ cells: aCells }, { cells: bCells }) => {\n            const aCell = aCells[index].value || aCells[index].title;\n            const bCell = bCells[index].value || bCells[index].title;\n\n            const stringA = aCell.toString().toUpperCase();\n            const stringB = bCell.toString().toUpperCase();\n\n            return stringA.localeCompare(stringB);\n        }\n    );\n\n    return {\n        sortBy: { index, direction },\n        sortedCves: direction === SortByDirection.asc ? sortedCves : sortedCves.reverse()\n    };\n\n}\n\nexport const createOSColumn = ({ osName, rhsm }) => !rhsm ? osName : (\n    <Tooltip\n        content={\n            intl.formatMessage(messages.textLockVersionTooltip, { lockedVersion: rhsm })\n        }\n    >\n        <Flex flex={{ default: 'inlineFlex' }}>\n            <FlexItem spacer={{ default: 'spacerSm' }}>{osName}</FlexItem>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n                <InfoCircleIcon size=\"sm\" color={'var(--pf-global--info-color--100)'} />\n            </FlexItem>\n        </Flex>\n    </Tooltip>\n);\n\nexport const removeUndefinedObjectKeys = (selectedRows) => Object.keys(selectedRows).filter(row => selectedRows[row]);\n\nexport const prepareEntitiesParams = (parameters) => {\n    const offset = parameters.offset || getOffsetFromPageLimit(parameters.page || 1, parameters.perPage || 20);\n    const limit = parameters.limit || getLimitFromPageSize(parameters.perPage || 20);\n\n    const apiParams = { ...parameters, offset, limit };\n\n    //we need explicitly remove 'undefined' parameters for safety\n    return removeUndefinedObjectItems(apiParams);\n};\n\nexport const filterRemediatableSystems = result => ({\n    data: result?.data.filter(system => {\n        const {\n            packages_installed: installedPckg,\n            packages_updatable: updatablePckg,\n            rhba_count: rhba,\n            rhsa_count: rhsa,\n            rhea_count: rhea\n        } = system.attributes || {};\n\n        const isDisabled = updatablePckg === 0 || [installedPckg, rhba, rhsa, rhea].every(count => count === 0);\n\n        return !isDisabled;\n    })\n});\n\nexport const filterRemediatablePackageSystems = result => ({ data: result.data.filter(system => system.updatable) });\n\nexport const persistantParams = (patchParams, decodedParams) => {\n    const persistantParams = { ...patchParams, ...decodedParams };\n    return (\n        {\n            page: Number(persistantParams.page || 1),\n            perPage: Number(persistantParams.perPage || 20),\n            ...(persistantParams.sort && {\n                sortBy: {\n                    key: persistantParams.sort.replace(/^-/, ''),\n                    direction: persistantParams.sort.match(/^-/) ? 'desc' : 'asc'\n                }\n            })\n        }\n    );\n};\n\nexport const handleLongSynopsis = (synopsis) => {\n    return (\n        <LinesEllipsis\n            text={synopsis}\n            maxLine='1'\n            ellipsis='(...)'\n            trimRight\n            basedOn='letters'\n        />\n    );\n};\n\nexport const isRHAdvisory = (name) => {\n    return /^(RHEA|RHBA|RHSA)/.test(name);\n};\n\nexport const buildTagString = (tag) => {\n    return `${tag.category}/${tag.values?.tagKey}=${tag.value?.tagValue}`;\n};\n\nexport const mapGlobalFilters = (tags, SIDs, workloads = {}) => {\n    let tagsInUrlFormat = [];\n    tags && tags.forEach((tag, index) => {\n        let tagGruop = tag;\n        if (typeof tag === 'object') {\n            tagGruop = tag?.values.map(value => `tags=${encodeURIComponent(`${tag.category}/${value.tagKey}=${value.value}`)}`);\n            tagsInUrlFormat[index] = Array.isArray(tagGruop) && flatten(tagGruop) || tagGruop;\n        }\n        else {\n            tagsInUrlFormat[index] = `tags=${encodeURIComponent(tagGruop)}`;\n        }\n\n    });\n\n    const globalFilterConfig = { selectedTags: [], systemProfile: {} };\n\n    globalFilterConfig.systemProfile = {\n        ...workloads?.SAP?.isSelected && { sap_system: true },\n        ...workloads?.['Ansible Automation Platform']?.isSelected\n        && { ansible: { controller_version: 'not_nil' } },\n        ...workloads?.['Microsoft SQL']?.isSelected\n        && { mssql: { version: 'not_nil' } },\n        ...SIDs?.length > 0 && { sap_sids: SIDs }\n    };\n\n    tagsInUrlFormat && (globalFilterConfig.selectedTags = tagsInUrlFormat);\n\n    return globalFilterConfig;\n\n};\n\nexport const convertDateToISO = (dateString)  => {\n    const parsedDate = Date.parse(dateString);\n\n    if (isNaN(parsedDate) === false) {\n        let date = new Date(parsedDate);\n\n        const tzOffset = -date.getTimezoneOffset();\n        const diff = tzOffset >= 0 ? '+' : '-';\n        const pad = n => `${Math.floor(Math.abs(n))}`.padStart(2, '0');\n\n        return date.getFullYear() +\n                '-' + pad(date.getMonth() + 1) +\n                '-' + pad(date.getDate()) +\n                'T' + pad(date.getHours()) +\n                ':' + pad(date.getMinutes()) +\n                ':' + pad(date.getSeconds()) +\n                diff + pad(tzOffset / 60) +\n                ':' + pad(tzOffset % 60);\n    }\n\n    return dateString;\n};\n\nexport const convertIsoToDate = (isoDate) => {\n    if (!isoDate) {\n        return '';\n    }\n\n    const dateObject = new Date(isoDate);\n    return `${dateObject.getFullYear()}-${(dateObject.getMonth() + 1).toString().padStart(2, '0')}` +\n        `-${dateObject.getDate().toString().padStart(2, '0')}`;\n};\n\n// 2023-03-05 -> 05 Mar 2023\n// 2023-03-22T20:00:00-04:00 (ISO format) -> 23 Mar 2023\nexport const templateDateFormat = (dateString) => {\n    if (!dateString) {\n        return 'N/A';\n    }\n\n    // handle ISO format - convert timezone to GMT and slice off the time\n    if (dateString.includes('T')) {\n        const gmtTime = (new Date(dateString)).toISOString();\n        [dateString] = gmtTime.split('T');\n    }\n\n    const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n    const [year, month, day] = dateString.split('-');\n\n    return `${day} ${MONTHS[parseInt(month) - 1]} ${year}`;\n};\n\nexport const filterSelectedActiveSystemIDs = (selectedSystemsObject) => {\n    const formValueSystemIDs = [];\n    if (typeof selectedSystemsObject === 'object') {\n        Object.keys(selectedSystemsObject).forEach((key) => {\n            if (selectedSystemsObject[key]) {\n                formValueSystemIDs.push(key);\n            }\n        });\n    }\n\n    return formValueSystemIDs;\n};\n\nexport const buildSelectedSystemsObj = (systemsIDs, formValueSystems) => {\n\n    const mergedSystems = [...systemsIDs, ...filterSelectedActiveSystemIDs(formValueSystems)];\n\n    const assignedSystemsObject = mergedSystems?.reduce((object, system) => {\n        object[system] = true;\n        return object;\n    }, {});\n\n    return assignedSystemsObject;\n};\n\nexport const objUndefinedToFalse = (object) =>\n    Object.keys(object).reduce((modifiedObject, key) => {\n        modifiedObject[key] =  object[key] === undefined ? false : object[key];\n        return modifiedObject;\n    }, {});\n\nexport const objOnlyWithTrue = (object) =>\n    Object.keys(Object.fromEntries(Object.entries(object).filter(([, v]) => v === true)));\n\nexport const isObject = (variable) => {\n    return (typeof variable === 'object' && variable !== null) ? true : false;\n};\n"],"names":["removeUndefinedObjectItems","originalObject","newObject","JSON","parse","stringify","Object","keys","forEach","key","undefined","convertLimitOffset","limit","offset","createSortBy","header","values","compoundSortValues","arguments","length","defaultCompoundSortValues","column","_slicedToArray","multiple","join","direction","SortByDirection","col","dir","replace","index","findIndex","item","addOrRemoveItemFromSet","targetObj","inputArr","inputObj","reduce","obj","rowId","value","_objectSpread","getNewSelectedItems","selectedItems","currentItems","payload","concat","map","id","selected","mergedSelection","pickBy","v","getRowIdByIndexExpandable","arrayOfObjects","getOffsetFromPageLimit","page","getLimitFromPageSize","truncate","str","max","end","React","substring","truncateDescription","description","wordLength","setWordLength","input","substringIndex","search","slice","RegExp","findBullets","onClick","intl","messages","createAdvisoriesIcons","_ref","_ref2","rhea","rhba","rhsa","other","type","Flex","flex","default","style","flexWrap","every","FlexItem","spacer","AdvisoriesIcon","tooltipText","count","Icon","SecurityIcon","BugIcon","EnhancementIcon","FlagIcon","createUpgradableColumn","display","alignItems","LongArrowAltUpIcon","color","CheckIcon","marginLeft","getSeverityById","advisorySeverities","createPackagesColumn","packageCount","systemID","Link","to","pathname","state","tab","handlePatchLink","name","body","location","href","indexOf","document","baseURI","arrayFromObj","items","filter","remediationProvider","issues","systems","remediationIdentifier","remediationProviderWithPairs","issuePairs","transformFunc","encodeParams","parameters","shouldTranslateKeys","_parameters$systemPro","systemProfile","allParams","_objectWithoutProperties","_excluded2","result","entries","_item","category","filterCategory","filterCategories","find","apiValue","getFilterValue","operator","multiValueFilters","_defineProperty","toString","flattenFilters","params","argKey","encodeURIComponent","argValue","some","includes","push","apply","workloadsFilter","_ref3","sap_sids","restOfProfile","_excluded","generateFilter","system_profile","entry","_entry","SIDsFilter","sid","calculateWorkloads","encodeApiParams","encodeURLParams","urlParams","selectedTags","decodeQueryparams","queryString","parsed","qs","res","startsWith","convertedToInt","parseInt","typeHandledParam","isNaN","bracketIndex","objParent","objKey","filterValue","split","buildFilterChips","filters","categories","searchChipLabel","filterConfig","buildChips","match","label","chips","changeListParams","oldParams","newParams","newState","hasOwnProperty","tags","subtractDate","days","date","Date","setDate","getDate","toISOString","sortCves","cves","sortedCves","sort","_ref4","_ref5","aCells","cells","bCells","aCell","title","bCell","stringA","toUpperCase","stringB","localeCompare","sortBy","reverse","createOSColumn","_ref6","osName","rhsm","Tooltip","content","lockedVersion","InfoCircleIcon","size","removeUndefinedObjectKeys","selectedRows","row","prepareEntitiesParams","perPage","apiParams","filterRemediatablePackageSystems","data","system","updatable","persistantParams","patchParams","decodedParams","Number","handleLongSynopsis","synopsis","LinesEllipsis","text","maxLine","ellipsis","trimRight","basedOn","isRHAdvisory","test","mapGlobalFilters","SIDs","_workloads$SAP","_workloads$AnsibleAu","_workloads$Microsoft","workloads","tagsInUrlFormat","tag","tagGruop","_typeof","tagKey","Array","isArray","flatten","globalFilterConfig","SAP","isSelected","sap_system","ansible","controller_version","mssql","version","convertDateToISO","dateString","parsedDate","tzOffset","getTimezoneOffset","diff","pad","n","Math","floor","abs","padStart","getFullYear","getMonth","getHours","getMinutes","getSeconds","convertIsoToDate","isoDate","dateObject","templateDateFormat","_gmtTime$split","_dateString$split","_dateString$split2","year","month","day","filterSelectedActiveSystemIDs","selectedSystemsObject","formValueSystemIDs","buildSelectedSystemsObj","systemsIDs","formValueSystems","mergedSystems","_toConsumableArray","object","objUndefinedToFalse","modifiedObject","objOnlyWithTrue","fromEntries","_ref8","isObject","variable"],"sourceRoot":""}