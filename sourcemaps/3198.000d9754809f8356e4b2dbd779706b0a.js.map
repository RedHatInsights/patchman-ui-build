{"version":3,"file":"js/3198.917938f96d8ba55d24cd.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/WithHistory.js","webpack:///./src/SmartComponents/Modals/AssignSystemsModal.js","webpack:///./src/PresentationalComponents/PatchSetWrapper/PatchSetWrapper.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useMemo } from 'react';\nimport * as reactRouter from 'react-router-dom';\nimport useChrome from '../useChrome';\nvar WithReactRouterHistory = function (_a) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var history = reactRouter.useHistory();\n    return _jsx(Component, __assign({ history: history }, props));\n};\nvar WithChromeHistory = function (_a) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var chromeHistory = useChrome().chromeHistory;\n    return _jsx(Component, __assign({ history: chromeHistory }, props));\n};\nvar WithHistory = function (_a, ref) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var HistoryComponent = useMemo(function () { return (typeof reactRouter.useHistory === 'function' ? WithReactRouterHistory : WithChromeHistory); }, [Component, props]);\n    return _jsx(HistoryComponent, __assign({ innerRef: ref, Component: Component }, props));\n};\nexport default React.forwardRef(WithHistory);\n//# sourceMappingURL=WithHistory.js.map","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Stack, StackItem, Form, Spinner } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\nimport SelectExistingSets from '../PatchSetWizard/InputFields/SelectExistingSets';\nimport messages from '../../Messages';\nimport { updatePatchSets } from '../../Utilities/api';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { patchSetAssignSystemsNotifications } from '../PatchSet/PatchSetAssets';\nimport { filterSelectedActiveSystemIDs } from '../../Utilities/Helpers';\nimport { filterSatelliteManagedSystems } from './Helpers';\nimport { useFetchBatched } from '../../Utilities/hooks';\nimport isEmpty from 'lodash/isEmpty';\n\nconst AssignSystemsModal = ({ patchSetState = {}, setPatchSetState, intl, totalItems }) => {\n    const dispatch = useDispatch();\n\n    const { systemsIDs, isAssignSystemsModalOpen } = patchSetState;\n    const [selectedPatchSet, setSelectedPatchSet] = useState([]);\n    const [selectedPatchSetDetails, setSelectedPatchSetDetails] = useState({});\n\n    const [systemsNotManagedBySatellite, setSystemsNotManagedBySatellite] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n    const { fetchBatched } = useFetchBatched();\n\n    const closeModal = () => {\n        setPatchSetState({\n            isAssignSystemsModalOpen: !isAssignSystemsModalOpen,\n            systemsIDs: []\n        });\n        setSelectedPatchSet([]);\n        setSelectedPatchSetDetails({});\n    };\n\n    const submitModal = () => {\n        const systems = systemsNotManagedBySatellite.reduce((obj, item) => {\n            obj[item] = true;\n            return obj;\n        }, {});\n\n        updatePatchSets({ inventory_ids: systemsIDs }, selectedPatchSetDetails.id)\n        .then(() => {\n            dispatch(addNotification(patchSetAssignSystemsNotifications(Object.keys(systems).length).success));\n            setPatchSetState({\n                ...patchSetState,\n                shouldRefresh: true,\n                isAssignSystemsModalOpen: false,\n                systemsIDs: []\n            });\n        })\n        .catch(() => {\n            dispatch(addNotification(patchSetAssignSystemsNotifications().failure));\n        });\n\n        closeModal();\n    };\n\n    const openWizard = () => {\n        setPatchSetState({\n            ...patchSetState,\n            isPatchSetWizardOpen: true,\n            systemsIDs: filterSelectedActiveSystemIDs(systemsIDs),\n            shouldRefresh: false\n        });\n        setSelectedPatchSet([]);\n        setSelectedPatchSetDetails({});\n        setSystemsLoading(true);\n    };\n\n    useEffect(() => {\n        if (systemsIDs && !isEmpty(systemsIDs)) {\n            setSystemsLoading(true);\n            filterSatelliteManagedSystems(\n                Object.keys(systemsIDs),\n                fetchBatched,\n                totalItems\n            ).then(result => {\n                setSystemsNotManagedBySatellite(result);\n                setSystemsLoading(false);\n            });\n        }\n    }, [systemsIDs]);\n\n    const systemsManagedBySatelliteCount = Object.keys(systemsIDs).length - systemsNotManagedBySatellite.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={patchSetState.isAssignSystemsModalOpen}\n            title={intl.formatMessage(messages.templateApply)}\n            onClose={closeModal}\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    isDisabled={!selectedPatchSetDetails?.id}\n                    onClick={submitModal}\n                >\n                    {intl.formatMessage(messages.templateApply)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeModal}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n            data-testid='assign-systems-modal'\n        >\n            {systemsLoading\n                ? <Spinner />\n                : systemsNotManagedBySatellite.length === 0\n                    ? systemsNotManagedBySatellite.length === 1\n                        ? 'Template cannot be applied to the selected system.'\n                        : 'Template cannot be applied to any of the selected systems.'\n                    : <Stack hasGutter>\n                        <StackItem>\n                            {intl.formatMessage(messages.templateSelect, {\n                                systemCount: systemsNotManagedBySatellite.length,\n                                b: (...chunks) => <b>{chunks}</b>\n                            })}\n                        </StackItem>\n                        {systemsManagedBySatelliteCount > 0 && <StackItem>{\n                            intl.formatMessage(messages.templateSelectSatellite, {\n                                systemCount: systemsManagedBySatelliteCount,\n                                b: (...chunks) => <b>{chunks}</b>\n                            })}\n                        </StackItem>\n                        }\n                        <StackItem>\n                            <Form>\n                                <SelectExistingSets\n                                    setSelectedPatchSet={setSelectedPatchSet}\n                                    selectedSets={selectedPatchSet}\n                                    selectCallback={setSelectedPatchSetDetails}\n                                />\n                            </Form>\n                        </StackItem>\n                        <StackItem>\n                            {intl.formatMessage(messages.templateOr)}\n                        </StackItem>\n                        <StackItem>\n                            <Button variant=\"secondary\" onClick={openWizard}>\n                                {intl.formatMessage(messages.templateCreate)}\n                            </Button>\n                        </StackItem>\n                    </Stack>\n            }\n        </Modal>\n    );\n};\n\nAssignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setPatchSetState: propTypes.func,\n    patchSetState: propTypes.object,\n    totalItems: propTypes.number\n};\n\nexport default injectIntl(AssignSystemsModal);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport PatchSetWizard from '../../SmartComponents/PatchSetWizard/PatchSetWizard';\nimport UnassignSystemsModal from '../../SmartComponents/Modals/UnassignSystemsModal';\nimport AssignSystemsModal from '../../SmartComponents/Modals/AssignSystemsModal';\n\nconst PatchSetWrapper = ({ patchSetState, setPatchSetState, totalItems }) => {\n    return (<>\n        {(patchSetState.isUnassignSystemsModalOpen) && <UnassignSystemsModal\n            unassignSystemsModalState={patchSetState}\n            setUnassignSystemsModalOpen={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n            totalItems={totalItems}\n        />}\n        <AssignSystemsModal\n            patchSetState={patchSetState}\n            setPatchSetState={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n            totalItems={totalItems}\n        />\n        {(patchSetState.isPatchSetWizardOpen) &&\n        <PatchSetWizard systemsIDs={patchSetState.systemsIDs} setBaselineState={setPatchSetState} />}\n    </>);\n};\n\nPatchSetWrapper.propTypes = {\n    patchSetState: propTypes.object,\n    setPatchSetState: propTypes.func,\n    totalItems: propTypes.number\n};\nexport default PatchSetWrapper;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchIDs } from '../../Utilities/api';\n\nconst filterChosenSystems = (urlFilter, systemsIDs, fetchBatched, totalItems) => {\n    return fetchBatched(\n        (filter) => fetchIDs(\n            '/ids/systems',\n            filter\n        ),\n        {\n            ...urlFilter,\n            filter: { stale: [true, false] }\n        },\n        totalItems,\n        100\n    ).then((systemsNotManagedBySatellite) => {\n        const aggregatedResult = systemsNotManagedBySatellite.flatMap(({ data }) => data);\n        return systemsIDs.filter(systemID =>{\n            return aggregatedResult?.some(system => system.id === systemID);\n        }\n        );\n    });\n};\n\nexport const filterSystemsWithoutSets = (systemsIDs, fetchBatched, totalItems) =>  {\n    const urlFilter = { 'filter[baseline_name]': 'neq:' };\n    return filterChosenSystems(urlFilter, systemsIDs, fetchBatched, totalItems);\n};\n\nexport const filterSatelliteManagedSystems = (systemsIDs, fetchBatched, totalItems) =>  {\n    const urlFilter = { 'filter[satellite_managed]': 'false' };\n    return filterChosenSystems(urlFilter, systemsIDs, fetchBatched, totalItems);\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\nimport { useFetchBatched } from '../../Utilities/hooks';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl, totalItems }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n    const { fetchBatched } = useFetchBatched();\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(\n            systemsIDs,\n            fetchBatched,\n            totalItems\n        )\n        .then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n            data-testid='unassign-systems-modal'\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length === 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsNoAssignedSystems', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithPatchSet.length > 0 && systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object,\n    totalItems: propTypes.number\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../PatchSet/PatchSetAssets';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n        handleModalToggle(true);\n\n        if (result.status === 200) {\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n        else {\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications().failure\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n"],"names":["_a","component","props","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","error","concat","children","__assign","assign","n","arguments","apply","this","WithReactRouterHistory","Component","history","WithChromeHistory","chromeHistory","ref","HistoryComponent","useMemo","innerRef","AssignSystemsModal","_ref","_ref$patchSetState","patchSetState","setPatchSetState","intl","totalItems","dispatch","useDispatch","systemsIDs","isAssignSystemsModalOpen","_useState","useState","_useState2","_slicedToArray","selectedPatchSet","setSelectedPatchSet","_useState3","_useState4","selectedPatchSetDetails","setSelectedPatchSetDetails","_useState5","_useState6","systemsNotManagedBySatellite","setSystemsNotManagedBySatellite","_useState7","_useState8","systemsLoading","setSystemsLoading","fetchBatched","useFetchBatched","closeModal","isEmpty","filterSatelliteManagedSystems","keys","then","result","systemsManagedBySatelliteCount","React","Modal","variant","isOpen","title","formatMessage","messages","templateApply","onClose","actions","Button","key","isDisabled","id","onClick","systems","reduce","obj","item","updatePatchSets","inventory_ids","addNotification","patchSetAssignSystemsNotifications","success","_objectSpread","shouldRefresh","failure","labelsCancel","Spinner","Stack","hasGutter","StackItem","templateSelect","systemCount","b","_len","chunks","Array","_key","templateSelectSatellite","_len2","_key2","Form","SelectExistingSets","selectedSets","selectCallback","templateOr","isPatchSetWizardOpen","filterSelectedActiveSystemIDs","templateCreate","propTypes","injectIntl","PatchSetWrapper","isUnassignSystemsModalOpen","UnassignSystemsModal","unassignSystemsModalState","setUnassignSystemsModalOpen","PatchSetWizard","setBaselineState","filterChosenSystems","urlFilter","filter","fetchIDs","stale","aggregatedResult","flatMap","data","systemID","some","system","filterSystemsWithoutSets","renderUnassignModalMessages","bodyMessage","systemsCount","GridItem","_ref$unassignSystemsM","systemsWithPatchSet","setSystemWithPatchSet","handleModalToggle","handleModalClose","handleUnassignment","handleSystemsRemoval","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","unassignSystemFromPatchSet","sent","status","patchSetUnassignSystemsNotifications","stop","useUnassignSystemsHook","systemsWithoutPatchSetCount","textUnassignSystemsTitle","titleIconVariant","labelsRemove","Grid","Skeleton","Fragment"],"sourceRoot":""}