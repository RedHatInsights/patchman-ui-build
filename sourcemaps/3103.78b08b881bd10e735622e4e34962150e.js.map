{"version":3,"file":"js/3103.1671803297204.b58a34ac6c0c96a7a3ec.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js","webpack:///./src/PresentationalComponents/Filters/SystemStaleFilter.js","webpack:///./src/PresentationalComponents/Filters/SystemsUpdatableFilter.js","webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/SelectExistingSets.js","webpack:///./src/Utilities/dateValidator.js","webpack:///./src/SmartComponents/PatchSetWizard/WizardAssets.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ConfigurationFields.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ConfigurationStepFields.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/NameField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ToDateField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/DescriptionField.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewSystems.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewPatchSet.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/RequestProgress.js","webpack:///./src/SmartComponents/PatchSetWizard/PatchSetWizard.js","webpack:///./src/Utilities/usePatchSetState.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { getOperatingSystems } from '../../Utilities/api';\n\nconst useOsVersionFilter = (currentFilter = '', apply) => {\n    const versions = useSelector(({ entities }) => entities?.operatingSystems);\n    const versionsLoaded = useSelector(({ entities }) => entities?.operatingSystemsLoaded);\n\n    const [operatingSystems, setOperatingSystems] = useState([]);\n    const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule(\n        {\n            appName: 'inventory',\n            scope: 'inventory',\n            module: './OsFilterHelpers'\n        }\n    );\n\n    useEffect(() => {\n        if (versions === undefined || versionsLoaded === undefined) {\n            /* explicitly request OS versions from API */\n            getOperatingSystems().then(({ results }) => {\n                setOperatingSystems((results || []).map(entry => {\n                    const { name, major, minor } = entry.value;\n                    const versionStringified = `${major}.${minor}`;\n                    return { label: `${name} ${versionStringified}`, value: `${versionStringified}` };\n                }));\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        if (versionsLoaded === true) {\n            setOperatingSystems(versions);\n        }\n    }, [versionsLoaded]);\n\n    const osVersionValue = (currentFilter === '' ? [] : currentFilter.split(','))\n    // patchman uses \"RHEL \" prefix in values; need to remove\n    .map((version) => version.substring(5));\n\n    return [\n        ...(buildOSFilterConfig\n            ? [\n                buildOSFilterConfig(\n                    {\n                        id: 'rhel_version',\n                        value: toGroupSelectionValue(osVersionValue),\n                        onChange: (event, value) => {\n                            /* `versions` must be of type string, e.g., \"8.9,9.0\" */\n                            const versions = Object.values(value)\n                            .flatMap((versions) => Object.keys(versions))\n                            .map((version) => `RHEL ${version}`)\n                            .toString();\n                            apply({ filter: { os: versions } });\n                        }\n                    },\n                    operatingSystems\n                )\n            ]\n            : [])\n    ];\n};\n\nexport default useOsVersionFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { staleSystems } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsStaleFilter = (apply, currentFilter = {}) => {\n\n    let { stale: currentValue } = currentFilter;\n\n    const staleMap = React.useMemo(\n        () =>\n            staleSystems.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n\n    const currentValueStringType = (\n        currentValue\n            && (\n                Array.isArray(currentValue)\n                    && currentValue.map(value => value.toString())\n                    || [currentValue.toString()]\n            )\n    );\n\n    const filterByStale = value => {\n        apply({ filter: { stale: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStale),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStale(value);\n            },\n            items: staleMap,\n            value: currentValueStringType,\n            placeholder: intl.formatMessage(messages.labelsFiltersStalePlaceholder)\n        }\n    };\n};\n\nexport default systemsStaleFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { packagesListUpdatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsUpdatableFilter = (apply, currentFilter = {}) => {\n\n    let { packages_updatable: currentValue } = currentFilter;\n\n    const filterByUpdatableSystems = value => {\n        apply({ filter: { packages_updatable: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersUpdatable),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByUpdatableSystems(value);\n            },\n            items: packagesListUpdatableTypes,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersUpdatablePlaceholder)\n        }\n    };\n};\n\nexport default systemsUpdatableFilter;\n","import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}\n                        data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                        data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                    >{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history, headerOUIA }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={'/advisories'}\n                title={'Applicable advisories'}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-Applicable advisories'`}\n            />\n            <Tab\n                eventKey={'/systems/'}\n                title={'Systems'}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-Systems`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object,\n    headerOUIA: propTypes.string\n};\n\nexport default withRouter(HeaderTabs);\n","import {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <PageHeaderTitle title={title} />\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA = {headerOUIA}/>}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string\n};\n\nexport default Header;\n","import '../../../App.scss';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AngleLeftIcon, AngleRightIcon } from '@patternfly/react-icons';\nimport { Select, SelectOption, SelectVariant, FormGroup, Spinner, Flex, FlexItem, Button } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { fetchPatchSetsAction, changePatchSetsParams, clearPatchSetsAction } from '../../../store/Actions/Actions';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst SelectPagination = ({ changePage, page, perPage, totalItems }) =>{\n    const openNextPage = () => changePage(page + 1);\n    const openPrevPage = () => changePage(page - 1);\n\n    return (\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n            <FlexItem>\n                <Button variant=\"plain\" aria-label=\"prev\" isDisabled={page === 1} onClick={openPrevPage}>\n                    <AngleLeftIcon />\n                </Button>\n            </FlexItem>\n            <FlexItem>\n                <Button variant=\"plain\" aria-label=\"next\"\n                    isDisabled={totalItems < page * perPage}\n                    onClick={openNextPage}>\n                    <AngleRightIcon />\n                </Button>\n            </FlexItem>\n        </Flex>\n    );\n};\n\nconst SelectExistingSets = ({ setSelectedPatchSet, selectedSets, systems }) => {\n    const dispatch = useDispatch();\n    const formOptions = useFormApi();\n    const [isOpen, setOpen] = useState(true);\n\n    const rows = useSelector(({ PatchSetsStore }) => PatchSetsStore.rows);\n    const queryParams = useSelector(({ PatchSetsStore }) => PatchSetsStore.queryParams);\n    const status = useSelector(({ PatchSetsStore }) => PatchSetsStore.status);\n    const metadata = useSelector(({ PatchSetsStore }) => PatchSetsStore.metadata);\n\n    useEffect(() => () => {\n        dispatch(clearPatchSetsAction());\n    }, []);\n\n    const { search } = queryParams || {};\n    const searchDependency = typeof search === 'string' && search !== '' ? search : Boolean(search);\n\n    useEffect(() => {\n        dispatch(fetchPatchSetsAction({ ...queryParams, offset:\n            queryParams.offset + ((queryParams.page - 1) * queryParams.perPage) }));\n    }, [queryParams.page, searchDependency]);\n\n    const patchOptions = useMemo(() =>{\n        if (status.isLoading) {\n            return [<SelectOption key='loading'><Spinner size=\"md\"/></SelectOption>];\n        }\n\n        return rows?.map(set => <SelectOption key={set.id} value={set.name} />);\n    }, [rows, status.isLoading]);\n\n    const apply = (params) => {\n        dispatch(changePatchSetsParams(params));\n    };\n\n    const [searchAdvisory] = useState(() =>\n        debounce(value => apply({ search: value }), 700)\n    );\n\n    const handleOpen = () => {\n        setOpen(!isOpen);\n    };\n\n    const handleSelect = (_, selected) =>{\n        setOpen(false);\n        setSelectedPatchSet(selected);\n\n        const selectedSet = rows.filter(set => set.name === selected);\n        if (selectedSet.length === 1) {\n            formOptions.change('existing_patch_set', { name: selectedSet[0]?.name, systems, id: selectedSet[0]?.id });\n        }\n\n    };\n\n    const changePage = (page) => {\n        dispatch(changePatchSetsParams({ ...queryParams, page }));\n    };\n\n    const onFilter = (props, searchValue) => {\n        searchAdvisory(searchValue);\n    };\n\n    return (\n        <FormGroup fieldId='existing_patch_set' label={intl.formatMessage(messages.textTemplateChoose)} isRequired>\n            <Select\n                variant={SelectVariant.single}\n                aria-label={intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)}\n                onSelect={handleSelect}\n                placeholderText={intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)}\n                inlineFilterPlaceholderText={intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)}\n                selections={selectedSets}\n                onToggle={handleOpen}\n                isOpen={isOpen}\n                isDisabled={false}\n                onFilter={onFilter}\n                hasInlineFilter\n                className='patch-existing-sets'\n                footer={\n                    <SelectPagination\n                        changePage={changePage}\n                        page={queryParams.page}\n                        perPage={queryParams.perPage}\n                        totalItems={metadata.total_items}\n                    />\n                }\n            >\n                {patchOptions}\n            </Select>\n        </FormGroup >\n    );\n};\n\nSelectPagination.propTypes = {\n    changePage: propTypes.func,\n    page: propTypes.number,\n    perPage: propTypes.number,\n    totalItems: propTypes.number\n};\n\nSelectExistingSets.propTypes = {\n    setSelectedPatchSet: propTypes.func,\n    selectedSets: propTypes.array,\n    systems: propTypes.array\n};\nexport default SelectExistingSets;\n","import { intl } from './IntlProvider';\nimport messages from '../Messages';\n\n/*\nvalidates date of a type YYYY-MM-DD with starting limit 1990-01-01.\nregex is used to comply the Patternfly date format.\n*/\nconst dateValidator = (dateStr) => {\n    const regex = /^(\\d{4})-(0[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$/;\n\n    if (dateStr && typeof dateStr === 'string' && dateStr.match(regex) === null) {\n        return intl.formatMessage(messages.labelsErrorInvalidDate);\n    }\n\n    const date = new Date(dateStr);\n    const timestamp = date.getTime();\n\n    //Month had to be set to equal 0 to get the first month of the year.\n    const minDate = new Date(1990, 0, 1);\n\n    if (typeof timestamp !== 'number' || Number.isNaN(timestamp)) {\n        return intl.formatMessage(messages.labelsErrorInvalidDate);\n    }\n\n    if (date < minDate) {\n        return intl.formatMessage(messages.labelsErrorDateLimit);\n    }\n\n    return;\n};\n\nexport default dateValidator;\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { filterSelectedActiveSystemIDs } from '../../Utilities/Helpers';\nimport dateValidator from '../../Utilities/dateValidator';\n\nexport const reviewSystemColumns = [{\n    key: 'display_name',\n    title: 'Name',\n    props: {\n        width: 50\n    }\n},\n{\n    title: 'OS',\n    key: 'os',\n    props: {\n        width: 25\n    }\n},\n{\n    key: 'baseline_name',\n    title: 'Patch template',\n    props: {\n        width: 25\n    }\n}\n];\n\nexport const configurationFields = [\n    {\n        name: 'configurationStep',\n        component: 'configurationStep'\n    },\n    {\n        name: 'existing_patch_set',\n        component: componentTypes.TEXT_FIELD,\n        hidden: true\n    }\n];\n\nexport const nameComponent = [{\n    name: 'name',\n    component: 'nameField',\n    validate: [{ type: validatorTypes.REQUIRED }]\n}];\n\nexport const descriptionComponent = [{\n    name: 'description',\n    component: 'descriptionField'\n}];\n\nexport const toDateComponent = [{\n    name: 'toDate',\n    component: 'toDateField',\n    validate: [\n        { type: validatorTypes.REQUIRED },\n        { type: 'validate-date' }\n    ]\n}];\n\nexport const getWizardTitle = (wizardType) => {\n    let wizardTitle = '';\n\n    switch (wizardType) {\n        case 'assign':\n            wizardTitle = intl.formatMessage(messages.templateTitleAssignSystem);\n            break;\n        case 'edit':\n            wizardTitle = intl.formatMessage(messages.templateEdit);\n            break;\n        default:\n            wizardTitle = intl.formatMessage(messages.templateTitle);\n    }\n\n    return wizardTitle;\n};\n\nexport const schema = (wizardType) =>{\n    return ({\n        fields: [\n            {\n                component: componentTypes.WIZARD,\n                name: 'patch-set-wizard',\n                isDynamic: true,\n                inModal: true,\n                showTitles: true,\n                title: getWizardTitle(wizardType),\n                description: intl.formatMessage(messages.templateDescription),\n                fields: [\n                    {\n                        name: 'patch-set-config',\n                        title: intl.formatMessage(wizardType === 'edit' ? messages.templateEdit : messages.templateNew),\n                        fields: configurationFields,\n                        nextStep: 'systems'\n                    },\n                    {\n                        name: 'systems',\n                        title: intl.formatMessage(messages.templateSelectSystems),\n                        fields: [\n                            {\n                                name: 'systems',\n                                component: 'reviewSystems'\n                                //We can use this later in case UX wantes to prevent patch template s without zero systems\n                                //validate: [{ type: 'validate-systems' }]\n                            }\n                        ],\n                        nextStep: 'review'\n                    },\n                    {\n                        name: 'review',\n                        title: intl.formatMessage(messages.templateReview),\n                        fields: [\n                            {\n                                name: 'review',\n                                component: 'reviewPatchSet'\n                            }\n                        ]\n                    }\n\n                ]\n\n            }\n        ]\n    });\n};\n\nexport const validatorMapper = {\n    'validate-systems': () => (formValueSystems) => {\n        const systems = filterSelectedActiveSystemIDs(formValueSystems);\n\n        if (systems === undefined) {\n            return;\n        }\n        else if (systems.length > 0) {\n            return;\n        } else {\n            return intl.formatMessage(messages.templateNoSystemSelected);\n        }\n    },\n    'validate-date': () => dateValidator\n};\n\nexport const apiFailedNotification = (description) => ({\n    title: 'There was an error while processing your request',\n    description,\n    variant: 'danger'\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Grid, GridItem, Spinner } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { nameComponent, descriptionComponent, toDateComponent } from '../WizardAssets';\n\nconst  ConfigurationFields = ({ isLoading }) =>{\n    const { renderForm } = useFormApi();\n\n    return isLoading ? <Spinner size='md' /> : (\n        <Grid hasGutter>\n            <GridItem lg={12} md={12}>\n                {renderForm(nameComponent)}\n            </GridItem>\n            <GridItem lg={12} md={12}>\n                {renderForm(descriptionComponent)}\n            </GridItem>\n            <GridItem lg={6} md={6}>\n                {renderForm(toDateComponent)}\n            </GridItem>\n        </Grid>\n    );\n};\n\nConfigurationFields.propTypes = {\n    isLoading: propTypes.bool\n};\nexport default ConfigurationFields;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    Radio,\n    TextVariants\n} from '@patternfly/react-core';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\nimport SelectExistingSets from '../InputFields/SelectExistingSets';\nimport ConfigurationFields from '../InputFields/ConfigurationFields';\n\nimport { convertIsoToDate } from '../../../Utilities/Helpers';\n\nconst ConfigurationStepFields = ({ systemsIDs, patchSetID }) => {\n\n    const formOptions = useFormApi();\n    const shouldShowRadioButtons = (!patchSetID && systemsIDs?.length !== 0) || false;\n\n    const [shouldApplyExisting, setShouldApplyExisting] = useState(false);\n    const [shouldCreateNew, setShouldCreateNew] = useState(true);\n    const [selectedPatchSet, setSelectedPatchSet] = useState([]);\n\n    const { patchSet, status } = useSelector(({ SpecificPatchSetReducer }) => SpecificPatchSetReducer, shallowEqual);\n\n    const handleRadioChange = () => {\n        setShouldCreateNew(!shouldCreateNew);\n        setShouldApplyExisting(!shouldApplyExisting);\n    };\n\n    useEffect(() => {\n        if (patchSetID) {\n            const { name, description, config: { to_time: toDate } } = patchSet;\n\n            formOptions.change('name', name);\n            formOptions.change('description', description);\n            formOptions.change('toDate', convertIsoToDate(toDate));\n        }\n    }, [patchSet]);\n\n    return (\n        <Stack hasGutter>\n            {shouldShowRadioButtons && <TextContent style={{ marginTop: '-15px' }}>\n                <Text component={TextVariants.p}>\n                    {intl.formatMessage(\n                        messages.textTemplateSelectedSystems,\n                        { systemsCount: systemsIDs.length, b: (...chunks) => <b>{chunks}</b> }\n                    )}\n                </Text>\n            </TextContent>}\n            <StackItem>\n                <Stack hasGutter>\n                    {shouldShowRadioButtons && (<><StackItem>\n                        <Radio\n                            isChecked={shouldApplyExisting}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label={intl.formatMessage(messages.textTemplateAddToExisting)}\n                            id=\"existing-template\"\n                        />\n                    </StackItem>\n                    <StackItem>\n                        {shouldApplyExisting ? <SelectExistingSets\n                            setSelectedPatchSet={setSelectedPatchSet}\n                            selectedSets={selectedPatchSet}\n                            systems={systemsIDs}\n                        /> : null}\n                    </StackItem>\n                    <StackItem>\n                        <Radio\n                            isChecked={shouldCreateNew}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label={intl.formatMessage(messages.textTemplateCreateNew)}\n                            id=\"new-template\"\n                        />\n                    </StackItem></>) || null}\n                    <StackItem>\n                        {shouldCreateNew ? <ConfigurationFields\n                            isLoading={patchSetID && status.isLoading}\n                        /> : null}\n                    </StackItem>\n                </Stack>\n            </StackItem>\n        </Stack>\n    );\n};\n\nConfigurationStepFields.propTypes = {\n    systemsIDs: propTypes.array,\n    patchSetID: propTypes.string\n};\nexport default ConfigurationStepFields;\n","import React, { useState, useEffect } from 'react';\nimport {\n    FormGroup,\n    TextInput\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst NameField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [name, setName] = useState(values?.name);\n\n    useEffect(() => {\n        setName(values.name);\n    }, [values.name]);\n\n    return (\n        <FormGroup fieldId=\"name\" label={intl.formatMessage(messages.labelsColumnsName)} isRequired>\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={name}\n                onChange={(val) => {\n                    input.onChange(val);\n                    setName(val);\n                }}\n                aria-label=\"name\"\n                autoFocus\n            />\n        </FormGroup>\n    );\n};\n\nexport default NameField;\n","import React, { useState, useEffect } from 'react';\nimport {\n    FormGroup,\n    DatePicker,\n    Flex,\n    FlexItem\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport dateValidator from '../../../Utilities/dateValidator';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst ToDateField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [toDate, setToDate] = useState(values?.toDate);\n\n    useEffect(() => {\n        setToDate(values.toDate);\n    }, [values.toDate]);\n\n    return (\n        <FormGroup fieldId=\"toDate\" label={intl.formatMessage(messages.templateDateField)} isRequired>\n            <Flex>\n                <FlexItem lg={2} md={2}>\n                    {intl.formatMessage(messages.templateDateUpto)}\n                </FlexItem>\n                <FlexItem lg={10} md={10}>\n                    <DatePicker\n                        value={toDate}\n                        onChange={(val) => {\n                            input.onChange(val);\n                            setToDate(val);\n                        }}\n                        popoverProps={{ position: 'right' }}\n                        aria-label=\"toDate\"\n                        validators={[dateValidator]}\n                        invalidFormatText={intl.formatMessage(messages.labelsErrorInvalidDate)}\n                    />\n                </FlexItem>\n            </Flex>\n        </FormGroup>\n    );\n};\n\nexport default ToDateField;\n","import React, { useState, useEffect } from 'react';\nimport { FormGroup, TextInput } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst DescriptionField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [description, setDescription] = useState(values?.description);\n\n    useEffect(() => {\n        setDescription(values.description);\n    }, [values.description]);\n\n    return (\n        <FormGroup fieldId=\"description\" label={intl.formatMessage(messages.labelsDescription)}>\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={description}\n                onChange={(val) => {\n                    input.onChange(val);\n                    setDescription(val);\n                }}\n                aria-label=\"description\"\n            />\n        </FormGroup>\n    );\n};\n\nexport default DescriptionField;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport searchFilter from '../../../PresentationalComponents/Filters/SearchFilter';\nimport { Text, TextContent, Stack, StackItem, TextVariants } from '@patternfly/react-core';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nimport { createSortBy, buildSelectedSystemsObj } from '../../../Utilities/Helpers';\nimport { createSystemsRowsReview } from '../../../Utilities/DataMappers';\nimport { usePerPageSelect, useSetPage, useSortColumn } from '../../../Utilities/Hooks';\nimport TableView from '../../../PresentationalComponents/TableView/TableView';\nimport staleFilter from '../../../PresentationalComponents/Filters/SystemStaleFilter';\nimport systemsUpdatableFilter from '../../../PresentationalComponents/Filters/SystemsUpdatableFilter';\nimport { fetchSystems } from '../../../Utilities/api';\nimport { reviewSystemColumns } from '../WizardAssets';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { systemsListDefaultFilters } from '../../../Utilities/constants';\nimport useOsVersionFilter from '../../../PresentationalComponents/Filters/OsVersionFilter';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../../Utilities/useOnSelect';\n\nexport const ReviewSystems = ({ systemsIDs = [], ...props }) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const { values } = formOptions.getState();\n    const defaultSelectedSystems = buildSelectedSystemsObj(systemsIDs, values?.systems);\n\n    const [isLoading, setLoading] = useState(true);\n    const [rawData, setRawData] = useState([]);\n    const [systems, setSystems] = useState([]);\n    const [selectedRows, setSelectedRows] = useState(defaultSelectedSystems);\n    const [metadata, setMetada] = useState({\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    });\n\n    const [queryParams, setQueryParams] = useState({\n        page: 1,\n        perPage: 20,\n        filter: {\n            stale: [true, false]\n        }\n    });\n\n    const { assignedSystems } = useSelector(({ SpecificPatchSetReducer }) => SpecificPatchSetReducer, shallowEqual);\n\n    useEffect(() => {\n        fetchSystems({\n            ...queryParams, filter: { ...queryParams.filter,\n                id: systemsIDs.length > 0 ? `in:${systemsIDs.join(',')}` : undefined }\n        }).then(result => {\n            setSystems(\n                createSystemsRowsReview(\n                    result.data,\n                    { ...buildSelectedSystemsObj([...assignedSystems, ...systemsIDs]), ...selectedRows }\n                )\n            );\n            setMetada(result.meta);\n            setRawData(result.data);\n            setLoading(false);\n        });\n    }, [queryParams.filter, queryParams]);\n\n    useEffect(() => {\n        input.onChange(selectedRows);\n\n        setSystems(\n            createSystemsRowsReview(rawData, selectedRows)\n        );\n    }, [selectedRows]);\n\n    useEffect(() => {\n        setSelectedRows({ ...selectedRows, ...buildSelectedSystemsObj(assignedSystems) });\n    }, [assignedSystems]);\n\n    const apply = (params) => {\n        setLoading(true);\n        setQueryParams((prevQueryParams) => ({\n            ...prevQueryParams,\n            ...params,\n            filter: { ...prevQueryParams.filter, ...params.filter }\n        }));\n    };\n\n    const osFilterConfig = useOsVersionFilter(queryParams.filter.os, apply);\n    const onSort = useSortColumn(reviewSystemColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(reviewSystemColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const selectRows = (toSelect) => {\n        const newSelections = toSelect.reduce((object, system) => {\n            object[system.id] = system.selected ? true : undefined;\n            return object;\n        }, {});\n\n        setSelectedRows({ ...selectedRows, ...newSelections });\n    };\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systems,\n            queryParams: {\n                ...queryParams,\n                filter: { ...queryParams.filter, ...systemsIDs.length > 0 && { id: `in:${systemsIDs.join(',')}` } }\n            },\n            customSelector: selectRows\n        }\n    );\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent style={{ marginTop: '-15px' }}>\n                    <Text component={TextVariants.p}>\n                        {intl.formatMessage(messages.textTemplateReviewSystems)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TableView\n                    columns={reviewSystemColumns}\n                    compact\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    selectedRows={selectedRows}\n                    onSelect={onSelect}\n                    sortBy={sortBy}\n                    apply={apply}\n                    tableOUIA={'patch-set-table'}\n                    paginationOUIA={'patch-set-pagination'}\n                    store={{ rows: systems, metadata, status: { isLoading }, queryParams }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                                intl.formatMessage(messages.labelsFiltersSearch)\n                            ),\n                            staleFilter(apply, queryParams.filter),\n                            systemsUpdatableFilter(apply, queryParams.filter),\n                            ...osFilterConfig\n                        ]\n                    }}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)}\n                    defaultFilters={systemsListDefaultFilters}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nReviewSystems.propTypes = {\n    systemsIDs: propTypes.array\n};\n\nexport default ReviewSystems;\n","import React, { Fragment } from 'react';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    TextVariants,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst renderTextListItem = (label, text) => (\n    <Fragment>\n        <TextListItem component={TextListItemVariants.dt}>\n            {intl.formatMessage(messages[label])}:\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n            {text}\n        </TextListItem>\n    </Fragment>\n);\n\nconst ReviewPatchSet = () => {\n    const formOptions = useFormApi();\n    const { values } = formOptions.getState();\n    const { name, description, toDate } = values.existing_patch_set || values;\n    const { systems } = values;\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent style={{ marginTop: '-15px' }}>\n                    <Text component={TextVariants.p}>\n                        {intl.formatMessage(\n                            messages.textPatchTemplateReview,\n                            { b: (...chunks) => <b>{chunks}</b> })}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TextContent>\n                    <TextList component={TextListVariants.dl}>\n                        {renderTextListItem('labelsColumnsName', name)}\n                        {description && renderTextListItem('labelsDescription', description)}\n                        {toDate && renderTextListItem('labelsDate', toDate)}\n                        {renderTextListItem(\n                            'labelsSelectedSystems',\n                            systems && Object.values(systems).filter(system => system).length\n                        )}\n                    </TextList>\n                </TextContent>\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default ReviewPatchSet;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title,\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateIcon,\n    EmptyStateBody,\n    Grid,\n    GridItem,\n    HelperText,\n    HelperTextItem,\n    Button\n} from '@patternfly/react-core';\nimport {\n    CheckCircleIcon,\n    ExclamationCircleIcon,\n    InProgressIcon\n} from '@patternfly/react-icons';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { apiFailedNotification } from '../WizardAssets';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst RequestProgress = ({ onClose, state }) => {\n    const { requestPending, failed, error } = state;\n    const dispatch = useDispatch();\n\n    if (failed) {\n        dispatch(\n            addNotification(\n                apiFailedNotification(error.detail)\n            )\n        );\n    }\n\n    return (\n        <EmptyState\n            variant={EmptyStateVariant.large}\n            data-component-ouia-id=\"patch-set-progress\"\n        >\n            <EmptyStateIcon\n                color={\n                    failed\n                        ? 'var(--pf-global--danger-color--100)'\n                        : !requestPending\n                            ? 'var(--pf-global--success-color--100)'\n                            : undefined\n                }\n                icon={\n                    failed\n                        ? ExclamationCircleIcon\n                        : requestPending\n                            ? InProgressIcon\n                            : CheckCircleIcon\n                }\n            />\n            <Title headingLevel=\"h1\" size=\"lg\">\n                {failed\n                    ? intl.formatMessage(messages.textErrorSomethingWrong)\n                    : requestPending\n                        ? intl.formatMessage(messages.textConfigurationInProgress)\n                        : intl.formatMessage(messages.textPatchTemplateSuccessfuly)}\n            </Title>\n            <EmptyStateBody>\n                <Grid hasGutter>\n                    {(requestPending) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    {intl.formatMessage(messages.textPatchTemplatePending)}\n                                </HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"link\" isInline onClick={onClose}>\n                                {intl.formatMessage(messages.labelsCancel)}\n                            </Button>{' '}\n                        </GridItem></>\n                    )}\n                    {(!requestPending && !failed) && (\n                        <GridItem>\n                            <Button variant=\"primary\" onClick={onClose}>\n                                {intl.formatMessage(messages.textReturnToApp)}\n                            </Button>\n                        </GridItem>\n                    )}\n                    {(!requestPending && failed) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    {intl.formatMessage(\n                                        messages.templateError,\n                                        { a: (chunks) => <a href=\"https://www.redhat.com/en/services/support\">{chunks}</a> })}\n                                </HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"primary\" onClick={onClose}>\n                                {intl.formatMessage(messages.textReturnToApp)}\n                            </Button>\n                        </GridItem></>\n                    )}\n                </Grid>\n\n            </EmptyStateBody>\n        </EmptyState>\n    );\n};\n\nRequestProgress.propTypes = {\n    onClose: propTypes.func,\n    state: propTypes.object\n};\n\nexport default RequestProgress;\n","\nimport React, { Fragment, useState, memo, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport DatePicker from '@data-driven-forms/pf4-component-mapper/date-picker';\nimport { Modal, Wizard } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\n\nimport ConfigurationStepFields from './steps/ConfigurationStepFields';\nimport NameField from './InputFields/NameField';\nimport ToDateField from './InputFields/ToDateField';\nimport DescriptionField from './InputFields/DescriptionField';\nimport ReviewSystems from './steps/ReviewSystems';\nimport ReviewPatchSet from './steps/ReviewPatchSet';\nimport { schema, validatorMapper, getWizardTitle } from './WizardAssets';\nimport RequestProgress from './steps/RequestProgress';\nimport { usePatchSetApi } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { fetchPatchSetAction, clearPatchSetAction, fetchPatchSetSystemsAction } from '../../store/Actions/Actions';\n\nexport const PatchSetWizard = ({ systemsIDs, setBaselineState, patchSetID }) => {\n    //if system ids exist, those are being assigned. Likewise if patchSetID exists, it is being edited\n    const wizardType = systemsIDs ? 'assign' : (patchSetID ? 'edit' : 'create');\n    const [wizardState, setWizardState] = useState({\n        submitted: false,\n        formValues: {},\n        requestPending: true,\n        failed: false,\n        shouldRefresh: false\n    });\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (patchSetID) {\n            dispatch(fetchPatchSetAction(patchSetID));\n            dispatch(fetchPatchSetSystemsAction(patchSetID, { limit: -1 }));\n        }\n\n        return () => dispatch(clearPatchSetAction());\n    }, []);\n\n    const onSubmit = usePatchSetApi(wizardState, setWizardState, patchSetID);\n\n    const handleWizardClose = () => {\n        const shouldRefresh = !wizardState.failed && wizardState.submitted;\n\n        setBaselineState({ isPatchSetWizardOpen: false, systemsIDs: [], patchSetID: undefined, shouldRefresh });\n        setWizardState({ formValues: {}, submitted: false });\n    };\n\n    const mapperExtensions = {\n        nameField: {\n            component: NameField\n        },\n        descriptionField: {\n            component: DescriptionField\n        },\n        toDateField: {\n            component: ToDateField\n        },\n        configurationStep: {\n            component: ConfigurationStepFields,\n            systemsIDs: systemsIDs || [],\n            patchSetID\n        },\n        reviewSystems: {\n            component: ReviewSystems,\n            systemsIDs: systemsIDs || []\n        },\n        reviewPatchSet: {\n            component: ReviewPatchSet,\n            systemsIDs: systemsIDs || []\n        }\n    };\n\n    return (\n        <Fragment>\n            {!wizardState.submitted &&  (\n                <FormRenderer\n                    schema={schema(wizardType)}\n                    subscription={{ values: true }}\n                    FormTemplate={(props) => (\n                        <Pf4FormTemplate {...props} showFormControls={false} />\n                    )}\n                    componentMapper={{\n                        [componentTypes.WIZARD]: {\n                            component: WizardMapper,\n                            className: 'patch-set',\n                            'data-ouia-component-id': 'patch-set-wizard'\n                        },\n                        [componentTypes.TEXT_FIELD]: TextField,\n                        [componentTypes.DATE_PICKER]: DatePicker,\n                        ...mapperExtensions\n                    }}\n                    validatorMapper={validatorMapper}\n                    onSubmit={onSubmit}\n                    onCancel={handleWizardClose} />\n            ) || (\n                <Modal\n                    isOpen\n                    variant={'large'}\n                    showClose={false}\n                    className=\"patch-set\"\n                    hasNoBodyWrapper\n                    aria-describedby=\"patch-set-description\"\n                    aria-labelledby=\"patch-set-modal-title\"\n                >\n                    <Wizard\n                        className=\"patch-set\"\n                        title={getWizardTitle(wizardType)}\n                        description={intl.formatMessage(messages.templateDescription)}\n                        steps={[\n                            {\n                                name: 'progress',\n                                component: (\n                                    <RequestProgress\n                                        onClose={handleWizardClose}\n                                        state={wizardState}\n                                    />\n                                ),\n                                isFinishedStep: true\n                            }\n                        ]}\n                        onClose={handleWizardClose}\n                    />\n                </Modal>\n            )}\n        </Fragment>\n    );\n};\n\nPatchSetWizard.propTypes = {\n    setBaselineState: propTypes.func,\n    systemsIDs: propTypes.array,\n    patchSetID: propTypes.string\n};\n\nexport default memo(PatchSetWizard, (prevProps, nextProps) => {\n    return JSON.stringify(prevProps) === JSON.stringify(nextProps);\n});\n","import { useState } from 'react';\nimport {\n    filterSelectedActiveSystemIDs\n} from './Helpers';\n\n/**\n* Manages unified state for patch set wizard and unassign modal.\n* @param {Object} [selectedRows] selected rows object to be removed.\n* @returns {patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal}\n*/\nconst usePatchSetState = (selectedRows) => {\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const openPatchSetAssignWizard = (systemID) => {\n        setPatchSetState({\n            isPatchSetWizardOpen: true,\n            systemsIDs: typeof systemID === 'string' && systemID !== ''\n                ? [systemID]\n                : filterSelectedActiveSystemIDs(selectedRows),\n            shouldRefresh: false\n        }\n        );\n    };\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openPatchSetEditModal = (patchSetID) => {\n        setPatchSetState({ isPatchSetWizardOpen: true, patchSetID });\n    };\n\n    return { patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal };\n};\n\nexport default usePatchSetState;\n"],"names":["currentFilter","apply","versions","useSelector","entities","operatingSystems","versionsLoaded","operatingSystemsLoaded","useState","setOperatingSystems","useLoadModule","appName","scope","module","toGroupSelectionValue","buildOSFilterConfig","useEffect","undefined","getOperatingSystems","then","results","map","entry","value","name","major","minor","versionStringified","label","osVersionValue","split","version","substring","id","onChange","event","Object","values","flatMap","keys","toString","filter","os","currentValue","stale","staleMap","React","staleSystems","currentValueStringType","Array","isArray","filterByStale","intl","messages","type","conditionalFilterType","filterValues","items","placeholder","packages_updatable","filterByUpdatableSystems","packagesListUpdatableTypes","HeaderBreadcrumbs","headerOUIA","Breadcrumb","Boolean","item","BreadcrumbItem","key","title","isActive","to","Link","propTypes","PropTypes","HeaderTabs","history","Tabs","onSelect","tabString","push","activeKey","location","pathname","className","Tab","eventKey","withRouter","Header","showTabs","breadcrumbs","children","PageHeader","PageHeaderTitle","SelectPagination","changePage","page","perPage","totalItems","Flex","justifyContent","default","FlexItem","Button","variant","isDisabled","onClick","SelectExistingSets","setSelectedPatchSet","selectedSets","systems","dispatch","useDispatch","formOptions","useFormApi","isOpen","setOpen","rows","PatchSetsStore","queryParams","status","metadata","clearPatchSetsAction","search","searchDependency","fetchPatchSetsAction","offset","patchOptions","useMemo","isLoading","SelectOption","Spinner","size","set","debounce","params","changePatchSetsParams","searchAdvisory","FormGroup","fieldId","isRequired","Select","SelectVariant","_","selected","selectedSet","length","change","placeholderText","inlineFilterPlaceholderText","selections","onToggle","onFilter","props","searchValue","hasInlineFilter","footer","total_items","dateStr","match","date","Date","timestamp","getTime","minDate","Number","isNaN","reviewSystemColumns","width","configurationFields","component","componentTypes","hidden","nameComponent","validate","validatorTypes","descriptionComponent","toDateComponent","getWizardTitle","wizardType","wizardTitle","schema","fields","isDynamic","inModal","showTitles","description","nextStep","validatorMapper","formValueSystems","filterSelectedActiveSystemIDs","dateValidator","ConfigurationFields","renderForm","Grid","hasGutter","GridItem","lg","md","ConfigurationStepFields","systemsIDs","patchSetID","shouldShowRadioButtons","shouldApplyExisting","setShouldApplyExisting","shouldCreateNew","setShouldCreateNew","selectedPatchSet","SpecificPatchSetReducer","shallowEqual","patchSet","handleRadioChange","toDate","config","to_time","convertIsoToDate","Stack","TextContent","style","marginTop","Text","TextVariants","systemsCount","b","chunks","StackItem","Radio","isChecked","input","useFieldApi","getState","setName","TextInput","val","autoFocus","setToDate","DatePicker","popoverProps","position","validators","invalidFormatText","setDescription","ReviewSystems","defaultSelectedSystems","buildSelectedSystemsObj","setLoading","rawData","setRawData","setSystems","selectedRows","setSelectedRows","limit","setMetada","setQueryParams","assignedSystems","fetchSystems","join","result","createSystemsRowsReview","data","meta","prevQueryParams","osFilterConfig","useOsVersionFilter","onSort","useSortColumn","sortBy","createSortBy","sort","onSetPage","useSetPage","onPerPageSelect","usePerPageSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","customSelector","toSelect","newSelections","reduce","object","system","TableView","columns","compact","tableOUIA","paginationOUIA","store","filterConfig","searchFilter","staleFilter","systemsUpdatableFilter","searchChipLabel","defaultFilters","systemsListDefaultFilters","renderTextListItem","text","Fragment","TextListItem","TextListItemVariants","existing_patch_set","TextList","TextListVariants","RequestProgress","onClose","state","requestPending","failed","error","addNotification","detail","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","InProgressIcon","CheckCircleIcon","Title","headingLevel","EmptyStateBody","HelperText","HelperTextItem","isInline","a","href","PatchSetWizard","setBaselineState","submitted","formValues","shouldRefresh","wizardState","setWizardState","fetchPatchSetAction","fetchPatchSetSystemsAction","clearPatchSetAction","onSubmit","usePatchSetApi","handleWizardClose","isPatchSetWizardOpen","mapperExtensions","nameField","NameField","descriptionField","DescriptionField","toDateField","ToDateField","configurationStep","reviewSystems","reviewPatchSet","ReviewPatchSet","subscription","FormTemplate","showFormControls","componentMapper","WizardMapper","TextField","onCancel","Modal","showClose","hasNoBodyWrapper","Wizard","steps","isFinishedStep","memo","prevProps","nextProps","JSON","stringify","isUnassignSystemsModalOpen","patchSetState","setPatchSetState","openPatchSetAssignWizard","systemID","openUnassignSystemsModal","openPatchSetEditModal"],"sourceRoot":""}