{"version":3,"file":"js/6327.1657229923938.8debd66b0233e426e18d.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js","webpack:///./src/PresentationalComponents/Filters/SystemStaleFilter.js","webpack:///./src/PresentationalComponents/Filters/SystemsUpdatableFilter.js","webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/SelectExistingSets.js","webpack:///./src/Utilities/dateValidator.js","webpack:///./src/SmartComponents/PatchSetWizard/WizardAssets.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ConfigurationFields.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ConfigurationStepFields.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/NameField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ToDateField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/DescriptionField.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewSystems.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewPatchSet.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/RequestProgress.js","webpack:///./src/SmartComponents/PatchSetWizard/PatchSetWizard.js","webpack:///./src/Utilities/usePatchSetState.js"],"sourcesContent":["import React from 'react';\nimport { osFilterTypes } from '../../Utilities/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst osVersionFilter = (currentFilter = {}, apply) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = osFilterTypes.slice().reverse();;\n\n    let { os: currentValue } = currentFilter;\n    const currentOsVersionsArray = typeof currentValue === 'string' && currentValue.split(',') || [];\n\n    const filterByOsType = (_, value) => {\n        if (currentValue && !currentValue.includes(value)) {\n            apply({ filter: { os: `${currentOsVersionsArray.join(',')},${value}` } });\n        }\n        else if (currentValue && currentValue.includes(value)) {\n            const remainingOs = currentOsVersionsArray.filter(os => os !== value);\n\n            apply({ filter: { os: remainingOs.length > 0 && `${remainingOs.join(',')}` || undefined } });\n        } else {\n            apply({ filter: { os: value !== '' && value || undefined  } });\n        }\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: intl.formatMessage(messages.labelsFiltersOsVersion),\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={SelectVariant.checkbox}\n                        typeAheadAriaLabel={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        onToggle={onToggle}\n                        onSelect={filterByOsType}\n                        selections={currentOsVersionsArray}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-os-version-filter'}\n                        placeholderText={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        {...(numOptions < versionFromNewestToOldest.length\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                key={index}\n                                value={option.value}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n};\n\nexport default osVersionFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { staleSystems } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsStaleFilter = (apply, currentFilter = {}) => {\n\n    let { stale: currentValue } = currentFilter;\n\n    const staleMap = React.useMemo(\n        () =>\n            staleSystems.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n\n    const currentValueStringType = (\n        currentValue\n            && (\n                Array.isArray(currentValue)\n                    && currentValue.map(value => value.toString())\n                    || [currentValue.toString()]\n            )\n    );\n\n    const filterByStale = value => {\n        apply({ filter: { stale: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStale),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStale(value);\n            },\n            items: staleMap,\n            value: currentValueStringType,\n            placeholder: intl.formatMessage(messages.labelsFiltersStalePlaceholder)\n        }\n    };\n};\n\nexport default systemsStaleFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { packagesListUpdatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsUpdatableFilter = (apply, currentFilter = {}) => {\n\n    let { packages_updatable: currentValue } = currentFilter;\n\n    const filterByUpdatableSystems = value => {\n        apply({ filter: { packages_updatable: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersUpdatable),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByUpdatableSystems(value);\n            },\n            items: packagesListUpdatableTypes,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersUpdatablePlaceholder)\n        }\n    };\n};\n\nexport default systemsUpdatableFilter;\n","import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}\n                        data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                        data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                    >{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { paths } from '../../Routes';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history, headerOUIA }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={paths.advisories.to}\n                title={paths.advisories.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.advisories.title}`}\n            />\n            <Tab\n                eventKey={paths.systems.to}\n                title={paths.systems.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.systems.title}`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object,\n    headerOUIA: propTypes.string\n};\n\nexport default withRouter(HeaderTabs);\n","import {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <PageHeaderTitle title={title} />\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA = {headerOUIA}/>}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string\n};\n\nexport default Header;\n","import '../../../App.scss';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AngleLeftIcon, AngleRightIcon } from '@patternfly/react-icons';\nimport { Select, SelectOption, SelectVariant, FormGroup, Spinner, Flex, FlexItem, Button } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { fetchPatchSetsAction, changePatchSetsParams, clearPatchSetsAction } from '../../../store/Actions/Actions';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst SelectPagination = ({ changePage, page, perPage, totalItems }) =>{\n    const openNextPage = () => changePage(page + 1);\n    const openPrevPage = () => changePage(page - 1);\n\n    return (\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n            <FlexItem>\n                <Button variant=\"plain\" aria-label=\"prev\" isDisabled={page === 1} onClick={openPrevPage}>\n                    <AngleLeftIcon />\n                </Button>\n            </FlexItem>\n            <FlexItem>\n                <Button variant=\"plain\" aria-label=\"next\"\n                    isDisabled={totalItems < page * perPage}\n                    onClick={openNextPage}>\n                    <AngleRightIcon />\n                </Button>\n            </FlexItem>\n        </Flex>\n    );\n};\n\nconst SelectExistingSets = ({ setSelectedPatchSet, selectedSets, systems }) => {\n    const dispatch = useDispatch();\n    const formOptions = useFormApi();\n    const [isOpen, setOpen] = useState(true);\n\n    const rows = useSelector(({ PatchSetsStore }) => PatchSetsStore.rows);\n    const queryParams = useSelector(({ PatchSetsStore }) => PatchSetsStore.queryParams);\n    const status = useSelector(({ PatchSetsStore }) => PatchSetsStore.status);\n    const metadata = useSelector(({ PatchSetsStore }) => PatchSetsStore.metadata);\n\n    useEffect(() => () => {\n        dispatch(clearPatchSetsAction());\n    }, []);\n\n    const { search } = queryParams || {};\n    const searchDependency = typeof search === 'string' && search !== '' ? search : Boolean(search);\n\n    useEffect(() => {\n        dispatch(fetchPatchSetsAction({ ...queryParams, offset:\n            queryParams.offset + ((queryParams.page - 1) * queryParams.perPage) }));\n    }, [queryParams.page, searchDependency]);\n\n    const patchOptions = useMemo(() =>{\n        if (status.isLoading) {\n            return [<SelectOption key='loading'><Spinner size=\"md\"/></SelectOption>];\n        }\n\n        return rows?.map(set => <SelectOption key={set.id} value={set.name} />);\n    }, [rows, status.isLoading]);\n\n    const apply = (params) => {\n        dispatch(changePatchSetsParams(params));\n    };\n\n    const [searchAdvisory] = useState(() =>\n        debounce(value => apply({ search: value }), 700)\n    );\n\n    const handleOpen = () => {\n        setOpen(!isOpen);\n    };\n\n    const handleSelect = (_, selected) =>{\n        setOpen(false);\n        setSelectedPatchSet(selected);\n\n        const selectedSet = rows.filter(set => set.name === selected);\n        if (selectedSet.length === 1) {\n            formOptions.change('existing_patch_set', { name: selectedSet[0]?.name, systems, id: selectedSet[0]?.id });\n        }\n\n    };\n\n    const changePage = (page) => {\n        dispatch(changePatchSetsParams({ ...queryParams, page }));\n    };\n\n    const onFilter = (props, searchValue) => {\n        searchAdvisory(searchValue);\n    };\n\n    return (\n        <FormGroup fieldId='existing_patch_set' label={intl.formatMessage(messages.textTemplateChoose)} isRequired>\n            <Select\n                variant={SelectVariant.single}\n                aria-label={intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)}\n                onSelect={handleSelect}\n                placeholderText={intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)}\n                inlineFilterPlaceholderText={intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)}\n                selections={selectedSets}\n                onToggle={handleOpen}\n                isOpen={isOpen}\n                isDisabled={false}\n                onFilter={onFilter}\n                hasInlineFilter\n                className='patch-existing-sets'\n                footer={\n                    <SelectPagination\n                        changePage={changePage}\n                        page={queryParams.page}\n                        perPage={queryParams.perPage}\n                        totalItems={metadata.total_items}\n                    />\n                }\n            >\n                {patchOptions}\n            </Select>\n        </FormGroup >\n    );\n};\n\nSelectPagination.propTypes = {\n    changePage: propTypes.func,\n    page: propTypes.number,\n    perPage: propTypes.number,\n    totalItems: propTypes.number\n};\n\nSelectExistingSets.propTypes = {\n    setSelectedPatchSet: propTypes.func,\n    selectedSets: propTypes.array,\n    systems: propTypes.array\n};\nexport default SelectExistingSets;\n","import { intl } from './IntlProvider';\nimport messages from '../Messages';\n\n/*\nvalidates date of a type YYYY-MM-DD with starting limit 1990-01-01.\nregex is used to comply the Patternfly date format.\n*/\nconst dateValidator = (dateStr) => {\n    const regex = /^(\\d{4})-(0[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$/;\n\n    if (dateStr && typeof dateStr === 'string' && dateStr.match(regex) === null) {\n        return intl.formatMessage(messages.labelsErrorInvalidDate);\n    }\n\n    const date = new Date(dateStr);\n    const timestamp = date.getTime();\n\n    //Month had to be set to equal 0 to get the first month of the year.\n    const minDate = new Date(1990, 0, 1);\n\n    if (typeof timestamp !== 'number' || Number.isNaN(timestamp)) {\n        return intl.formatMessage(messages.labelsErrorInvalidDate);\n    }\n\n    if (date < minDate) {\n        return intl.formatMessage(messages.labelsErrorDateLimit);\n    }\n\n    return;\n};\n\nexport default dateValidator;\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { filterSelectedActiveSystemIDs } from '../../Utilities/Helpers';\nimport dateValidator from '../../Utilities/dateValidator';\n\nexport const reviewSystemColumns = [{\n    key: 'display_name',\n    title: 'Name',\n    props: {\n        width: 50\n    }\n},\n{\n    title: 'OS',\n    key: 'os',\n    props: {\n        width: 25\n    }\n},\n{\n    key: 'baseline_name',\n    title: 'Patch template',\n    props: {\n        width: 25\n    }\n}\n];\n\nexport const configurationFields = [\n    {\n        name: 'configurationStep',\n        component: 'configurationStep'\n    },\n    {\n        name: 'existing_patch_set',\n        component: componentTypes.TEXT_FIELD,\n        hidden: true\n    }\n];\n\nexport const nameComponent = [{\n    name: 'name',\n    component: 'nameField',\n    validate: [{ type: validatorTypes.REQUIRED }]\n}];\n\nexport const descriptionComponent = [{\n    name: 'description',\n    component: 'descriptionField'\n}];\n\nexport const toDateComponent = [{\n    name: 'toDate',\n    component: 'toDateField',\n    validate: [\n        { type: validatorTypes.REQUIRED },\n        { type: 'validate-date' }\n    ]\n}];\n\nexport const schema = (wizardType) =>{\n    let wizardTitle = '';\n\n    switch (wizardType) {\n        case 'assign':\n            wizardTitle = intl.formatMessage(messages.templateTitleAssignSystem);\n            break;\n        case 'edit':\n            wizardTitle = intl.formatMessage(messages.templateEdit);\n            break;\n        default:\n            wizardTitle = intl.formatMessage(messages.templateTitle);\n    }\n\n    return ({\n        fields: [\n            {\n                component: componentTypes.WIZARD,\n                name: 'patch-set-wizard',\n                isDynamic: true,\n                inModal: true,\n                showTitles: true,\n                title: wizardTitle,\n                description: intl.formatMessage(messages.templateDescription),\n                fields: [\n                    {\n                        name: 'patch-set-config',\n                        title: intl.formatMessage(wizardType === 'edit' ? messages.templateEdit : messages.templateNew),\n                        fields: configurationFields,\n                        nextStep: 'systems'\n                    },\n                    {\n                        name: 'systems',\n                        title: intl.formatMessage(messages.templateSelectSystems),\n                        fields: [\n                            {\n                                name: 'systems',\n                                component: 'reviewSystems'\n                                //We can use this later in case UX wantes to prevent patch template s without zero systems\n                                //validate: [{ type: 'validate-systems' }]\n                            }\n                        ],\n                        nextStep: 'review'\n                    },\n                    {\n                        name: 'review',\n                        title: intl.formatMessage(messages.templateReview),\n                        fields: [\n                            {\n                                name: 'review',\n                                component: 'reviewPatchSet'\n                            }\n                        ]\n                    }\n\n                ]\n\n            }\n        ]\n    });\n};\n\nexport const validatorMapper = {\n    'validate-systems': () => (formValueSystems) => {\n        const systems = filterSelectedActiveSystemIDs(formValueSystems);\n\n        if (systems === undefined) {\n            return;\n        }\n        else if (systems.length > 0) {\n            return;\n        } else {\n            return intl.formatMessage(messages.templateNoSystemSelected);\n        }\n    },\n    'validate-date': () => dateValidator\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Grid, GridItem, Spinner } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { nameComponent, descriptionComponent, toDateComponent } from '../WizardAssets';\n\nconst  ConfigurationFields = ({ isLoading }) =>{\n    const { renderForm } = useFormApi();\n\n    return isLoading ? <Spinner size='md' /> : (\n        <Grid hasGutter>\n            <GridItem lg={12} md={12}>\n                {renderForm(nameComponent)}\n            </GridItem>\n            <GridItem lg={12} md={12}>\n                {renderForm(descriptionComponent)}\n            </GridItem>\n            <GridItem lg={6} md={6}>\n                {renderForm(toDateComponent)}\n            </GridItem>\n        </Grid>\n    );\n};\n\nConfigurationFields.propTypes = {\n    isLoading: propTypes.bool\n};\nexport default ConfigurationFields;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    Radio,\n    TextVariants\n} from '@patternfly/react-core';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\nimport SelectExistingSets from '../InputFields/SelectExistingSets';\nimport ConfigurationFields from '../InputFields/ConfigurationFields';\n\nimport { convertIsoToDate } from '../../../Utilities/Helpers';\n\nconst ConfigurationStepFields = ({ systemsIDs, patchSetID }) => {\n\n    const formOptions = useFormApi();\n    const shouldShowRadioButtons = (!patchSetID && systemsIDs?.length !== 0) || false;\n\n    const [shouldApplyExisting, setShouldApplyExisting] = useState(false);\n    const [shouldCreateNew, setShouldCreateNew] = useState(true);\n    const [selectedPatchSet, setSelectedPatchSet] = useState([]);\n\n    const { patchSet, status } = useSelector(({ SpecificPatchSetReducer }) => SpecificPatchSetReducer, shallowEqual);\n\n    const handleRadioChange = () => {\n        setShouldCreateNew(!shouldCreateNew);\n        setShouldApplyExisting(!shouldApplyExisting);\n    };\n\n    useEffect(() => {\n        if (patchSetID) {\n            const { name, description, config: { to_time: toDate } } = patchSet;\n\n            formOptions.change('name', name);\n            formOptions.change('description', description);\n            formOptions.change('toDate', convertIsoToDate(toDate));\n        }\n    }, [patchSet]);\n\n    return (\n        <Stack hasGutter>\n            {shouldShowRadioButtons && <TextContent style={{ marginTop: '-15px' }}>\n                <Text component={TextVariants.p}>\n                    {intl.formatMessage(\n                        messages.textTemplateSelectedSystems,\n                        { systemsCount: systemsIDs.length, b: (...chunks) => <b>{chunks}</b> }\n                    )}\n                </Text>\n            </TextContent>}\n            <StackItem>\n                <Stack hasGutter>\n                    {shouldShowRadioButtons && (<><StackItem>\n                        <Radio\n                            isChecked={shouldApplyExisting}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label={intl.formatMessage(messages.textTemplateAddToExisting)}\n                            id=\"existing-template\"\n                        />\n                    </StackItem>\n                    <StackItem>\n                        {shouldApplyExisting ? <SelectExistingSets\n                            setSelectedPatchSet={setSelectedPatchSet}\n                            selectedSets={selectedPatchSet}\n                            systems={systemsIDs}\n                        /> : null}\n                    </StackItem>\n                    <StackItem>\n                        <Radio\n                            isChecked={shouldCreateNew}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label={intl.formatMessage(messages.textTemplateCreateNew)}\n                            id=\"new-template\"\n                        />\n                    </StackItem></>) || null}\n                    <StackItem>\n                        {shouldCreateNew ? <ConfigurationFields\n                            isLoading={patchSetID && status.isLoading}\n                        /> : null}\n                    </StackItem>\n                </Stack>\n            </StackItem>\n        </Stack>\n    );\n};\n\nConfigurationStepFields.propTypes = {\n    systemsIDs: propTypes.array,\n    patchSetID: propTypes.string\n};\nexport default ConfigurationStepFields;\n","import React, { useState, useEffect } from 'react';\nimport {\n    FormGroup,\n    TextInput\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nconst NameField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [name, setName] = useState(values?.name);\n\n    useEffect(() => {\n        setName(values.name);\n    }, [values.name]);\n\n    return (\n        <FormGroup fieldId=\"name\" label=\"Name\" isRequired>\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={name}\n                onChange={(val) => {\n                    input.onChange(val);\n                    setName(val);\n                }}\n                aria-label=\"name\"\n                autoFocus\n            />\n        </FormGroup>\n    );\n};\n\nexport default NameField;\n","import React, { useState, useEffect } from 'react';\nimport {\n    FormGroup,\n    DatePicker,\n    Flex,\n    FlexItem\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport dateValidator from '../../../Utilities/dateValidator';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst ToDateField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [toDate, setToDate] = useState(values?.toDate);\n\n    useEffect(() => {\n        setToDate(values.toDate);\n    }, [values.toDate]);\n\n    return (\n        <FormGroup fieldId=\"toDate\" label=\"Patch template date\" isRequired>\n            <Flex>\n                <FlexItem lg={2} md={2}>\n                    Upto\n                </FlexItem>\n                <FlexItem lg={10} md={10}>\n                    <DatePicker\n                        isRequired\n                        value={toDate}\n                        onChange={(val) => {\n                            input.onChange(val);\n                            setToDate(val);\n                        }}\n                        popoverProps={{ position: 'right' }}\n                        aria-label=\"toDate\"\n                        validators={[dateValidator]}\n                        invalidFormatText={intl.formatMessage(messages.labelsErrorInvalidDate)}\n                    />\n                </FlexItem>\n            </Flex>\n        </FormGroup>\n    );\n};\n\nexport default ToDateField;\n","import React, { useState, useEffect } from 'react';\nimport { FormGroup, TextInput } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nconst DescriptionField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [description, setDescription] = useState(values?.description);\n\n    useEffect(() => {\n        setDescription(values.description);\n    }, [values.description]);\n\n    return (\n        <FormGroup fieldId=\"description\" label=\"Description\">\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={description}\n                onChange={(val) => {\n                    input.onChange(val);\n                    setDescription(val);\n                }}\n                aria-label=\"description\"\n            />\n        </FormGroup>\n    );\n};\n\nexport default DescriptionField;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport searchFilter from '../../../PresentationalComponents/Filters/SearchFilter';\nimport osVersionFilter from '../../../PresentationalComponents/Filters/OsVersionFilter';\nimport { Text, TextContent, Stack, StackItem, TextVariants } from '@patternfly/react-core';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nimport { createSortBy, buildSelectedSystemsObj } from '../../../Utilities/Helpers';\nimport { createSystemsRowsReview } from '../../../Utilities/DataMappers';\nimport { useOnSelect, usePerPageSelect, useSetPage, useSortColumn } from '../../../Utilities/Hooks';\nimport TableView from '../../../PresentationalComponents/TableView/TableView';\nimport staleFilter from '../../../PresentationalComponents/Filters/SystemStaleFilter';\nimport systemsUpdatableFilter from '../../../PresentationalComponents/Filters/SystemsUpdatableFilter';\nimport { fetchSystems } from '../../../Utilities/api';\nimport { reviewSystemColumns } from '../WizardAssets';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { systemsListDefaultFilters } from '../../../Utilities/constants';\n\nexport const ReviewSystems = ({ systemsIDs = [], ...props }) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const { values } = formOptions.getState();\n    const defaultSelectedSystems = buildSelectedSystemsObj(systemsIDs, values?.systems);\n\n    const [isLoading, setLoading] = useState(true);\n    const [rawData, setRawData] = useState([]);\n    const [systems, setSystems] = useState([]);\n    const [selectedRows, setSelectedRows] = useState(defaultSelectedSystems);\n    const [metadata, setMetada] = useState({\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    });\n\n    const [queryParams, setQueryParams] = useState({\n        page: 1,\n        perPage: 20,\n        filter: {\n            stale: [true, false]\n        }\n    });\n\n    const { assignedSystems } = useSelector(({ SpecificPatchSetReducer }) => SpecificPatchSetReducer, shallowEqual);\n\n    useEffect(() => {\n        fetchSystems({\n            ...queryParams, filter: { ...queryParams.filter,\n                id: systemsIDs.length > 0 ? `in:${systemsIDs.join(',')}` : undefined }\n        }).then(result => {\n            setSystems(\n                createSystemsRowsReview(\n                    result.data,\n                    { ...buildSelectedSystemsObj([...assignedSystems, ...systemsIDs]), ...selectedRows }\n                )\n            );\n            setMetada(result.meta);\n            setRawData(result.data);\n            setLoading(false);\n        });\n    }, [queryParams.filter, queryParams]);\n\n    useEffect(() => {\n        input.onChange(selectedRows);\n\n        setSystems(\n            createSystemsRowsReview(rawData, selectedRows)\n        );\n    }, [selectedRows]);\n\n    useEffect(() => {\n        setSelectedRows({ ...selectedRows, ...buildSelectedSystemsObj(assignedSystems) });\n    }, [assignedSystems]);\n\n    const apply = (params) => {\n        setLoading(true);\n        setQueryParams((prevQueryParams) => ({\n            ...prevQueryParams,\n            ...params,\n            filter: { ...prevQueryParams.filter, ...params.filter }\n        }));\n    };\n\n    const onSort = useSortColumn(reviewSystemColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(reviewSystemColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const fetchAllData = () =>\n        fetchSystems({ ...queryParams,\n            filter: { ...queryParams.filter, ...systemsIDs.length > 0 && { id: `in:${systemsIDs.join(',')}` } }, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        const newSelections = toSelect.reduce((object, system) => {\n            object[system.id] = system.selected ? true : undefined;\n            return object;\n        }, {});\n\n        setSelectedRows({ ...selectedRows, ...newSelections });\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllData, selectRows);\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent style={{ marginTop: '-15px' }}>\n                    <Text component={TextVariants.p}>\n                        {intl.formatMessage(messages.textTemplateReviewSystems)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TableView\n                    columns={reviewSystemColumns}\n                    compact\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    selectedRows={selectedRows}\n                    onSelect={onSelect}\n                    sortBy={sortBy}\n                    apply={apply}\n                    tableOUIA={'patch-set-table'}\n                    paginationOUIA={'patch-set-pagination'}\n                    store={{ rows: systems, metadata, status: { isLoading }, queryParams }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                                intl.formatMessage(messages.labelsFiltersSearch)\n                            ),\n                            staleFilter(apply, queryParams.filter),\n                            systemsUpdatableFilter(apply, queryParams.filter),\n                            osVersionFilter(queryParams.filter, apply)\n                        ]\n                    }}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)}\n                    defaultFilters={systemsListDefaultFilters}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nReviewSystems.propTypes = {\n    systemsIDs: propTypes.array\n};\n\nexport default ReviewSystems;\n","import React from 'react';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    TextVariants,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst ReviewPatchSet = () => {\n    const formOptions = useFormApi();\n    const { values } = formOptions.getState();\n    const { name, description, toDate } = values.existing_patch_set || values;\n    const { systems } = values;\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent style={{ marginTop: '-15px' }}>\n                    <Text component={TextVariants.p}>\n                        Review the information below and click <b>Submit</b> to complete patch template creation\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TextContent>\n                    <TextList component={TextListVariants.dl}>\n                        <TextListItem component={TextListItemVariants.dt}>Name:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{name}</TextListItem>\n                        {description && (<>\n                            <TextListItem component={TextListItemVariants.dt}>Description:</TextListItem>\n                            <TextListItem component={TextListItemVariants.dd}>{description}</TextListItem>\n                        </>)}\n                        {toDate && (<>\n                            <TextListItem component={TextListItemVariants.dt}>Date:</TextListItem>\n                            <TextListItem component={TextListItemVariants.dd}>{toDate}</TextListItem>\n                        </>)}\n                        <TextListItem component={TextListItemVariants.dt}>Selected systems:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>\n                            {systems && Object.values(systems).filter(system => system).length}\n                        </TextListItem>\n                    </TextList>\n                </TextContent>\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default ReviewPatchSet;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title,\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateIcon,\n    EmptyStateBody,\n    Grid,\n    GridItem,\n    HelperText,\n    HelperTextItem,\n    Button\n} from '@patternfly/react-core';\nimport {\n    CheckCircleIcon,\n    ExclamationCircleIcon,\n    InProgressIcon\n} from '@patternfly/react-icons';\n\nconst RequestProgress = ({ onClose, state }) => {\n    const { requestPending, failed } = state;\n\n    return (\n        <EmptyState\n            variant={EmptyStateVariant.large}\n            data-component-ouia-id=\"patch-set-progress\"\n        >\n            <EmptyStateIcon\n                color={\n                    failed\n                        ? 'var(--pf-global--danger-color--100)'\n                        : !requestPending\n                            ? 'var(--pf-global--success-color--100)'\n                            : undefined\n                }\n                icon={\n                    failed\n                        ? ExclamationCircleIcon\n                        : requestPending\n                            ? InProgressIcon\n                            : CheckCircleIcon\n                }\n            />\n            <Title headingLevel=\"h1\" size=\"lg\">\n                {failed\n                    ? 'Something went wrong'\n                    : requestPending\n                        ? 'Configuration in progress'\n                        : 'Patch template configuration successful'}\n            </Title>\n            <EmptyStateBody>\n                <Grid hasGutter>\n                    {(requestPending) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    Please allow a few minutes to set up a patch template.\n                                    You will receive a notification when finished</HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"link\" isInline onClick={onClose}>\n                                    Cancel\n                            </Button>{' '}\n                        </GridItem></>\n                    )}\n                    {(!requestPending && !failed) && (\n                        <GridItem>\n                            <Button variant=\"primary\" onClick={onClose}>Return to application</Button>\n                        </GridItem>\n                    )}\n                    {(!requestPending && failed) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    There was a problem processing the patch template. Please try again. If the problem\n                                    persists, contact <a href='https://www.redhat.com/en/services/support'>Red Hat support</a>\n                                </HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"primary\" onClick={onClose}>Return to application</Button>\n                        </GridItem></>\n                    )}\n                </Grid>\n\n            </EmptyStateBody>\n        </EmptyState>\n    );\n};\n\nRequestProgress.propTypes = {\n    onClose: propTypes.func,\n    state: propTypes.object\n};\n\nexport default RequestProgress;\n","\nimport React, { Fragment, useState, memo, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport DatePicker from '@data-driven-forms/pf4-component-mapper/date-picker';\nimport { Modal, Wizard } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\n\nimport ConfigurationStepFields from './steps/ConfigurationStepFields';\nimport NameField from './InputFields/NameField';\nimport ToDateField from './InputFields/ToDateField';\nimport DescriptionField from './InputFields/DescriptionField';\nimport ReviewSystems from './steps/ReviewSystems';\nimport ReviewPatchSet from './steps/ReviewPatchSet';\nimport { schema, validatorMapper } from './WizardAssets';\nimport RequestProgress from './steps/RequestProgress';\nimport { usePatchSetApi } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { fetchPatchSetAction, clearPatchSetAction, fetchPatchSetSystemsAction } from '../../store/Actions/Actions';\n\nexport const PatchSetWizard = ({ systemsIDs, setBaselineState, patchSetID }) => {\n    //if system ids exist, those are being assigned. Likewise if patchSetID exists, it is being edited\n    const wizardType = systemsIDs ? 'assign' : (patchSetID ? 'edit' : 'create');\n    const [wizardState, setWizardState] = useState({\n        submitted: false,\n        formValues: {},\n        requestPending: true,\n        failed: false,\n        shouldRefresh: false\n    });\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (patchSetID) {\n            dispatch(fetchPatchSetAction(patchSetID));\n            dispatch(fetchPatchSetSystemsAction(patchSetID, { limit: -1 }));\n        }\n\n        return () => dispatch(clearPatchSetAction());\n    }, []);\n\n    const onSubmit = usePatchSetApi(wizardState, setWizardState, patchSetID);\n\n    const handleWizardClose = () => {\n        const shouldRefresh = !wizardState.failed && wizardState.submitted;\n\n        setBaselineState({ isPatchSetWizardOpen: false, systemsIDs: [], patchSetID: undefined, shouldRefresh });\n        setWizardState({ formValues: {}, submitted: false });\n    };\n\n    const mapperExtensions = {\n        nameField: {\n            component: NameField\n        },\n        descriptionField: {\n            component: DescriptionField\n        },\n        toDateField: {\n            component: ToDateField\n        },\n        configurationStep: {\n            component: ConfigurationStepFields,\n            systemsIDs: systemsIDs || [],\n            patchSetID\n        },\n        reviewSystems: {\n            component: ReviewSystems,\n            systemsIDs: systemsIDs || []\n        },\n        reviewPatchSet: {\n            component: ReviewPatchSet,\n            systemsIDs: systemsIDs || []\n        }\n    };\n\n    return (\n        <Fragment>\n            {!wizardState.submitted &&  (\n                <FormRenderer\n                    schema={schema(wizardType)}\n                    subscription={{ values: true }}\n                    FormTemplate={(props) => (\n                        <Pf4FormTemplate {...props} showFormControls={false} />\n                    )}\n                    componentMapper={{\n                        [componentTypes.WIZARD]: {\n                            component: WizardMapper,\n                            className: 'patch-set',\n                            'data-ouia-component-id': 'patch-set-wizard'\n                        },\n                        [componentTypes.TEXT_FIELD]: TextField,\n                        [componentTypes.DATE_PICKER]: DatePicker,\n                        ...mapperExtensions\n                    }}\n                    validatorMapper={validatorMapper}\n                    onSubmit={onSubmit}\n                    onCancel={handleWizardClose} />\n            ) || (\n                <Modal\n                    isOpen\n                    variant={'large'}\n                    showClose={false}\n                    className=\"patch-set\"\n                    hasNoBodyWrapper\n                    aria-describedby=\"patch-set-description\"\n                    aria-labelledby=\"patch-set-modal-title\"\n                >\n                    <Wizard\n                        className=\"patch-set\"\n                        title={intl.formatMessage(messages.templateTitle)}\n                        description={intl.formatMessage(messages.templateDescription)}\n                        steps={[\n                            {\n                                name: 'progress',\n                                component: (\n                                    <RequestProgress\n                                        onClose={handleWizardClose}\n                                        state={wizardState}\n                                    />\n                                ),\n                                isFinishedStep: true\n                            }\n                        ]}\n                        onClose={handleWizardClose}\n                    />\n                </Modal>\n            )}\n        </Fragment>\n    );\n};\n\nPatchSetWizard.propTypes = {\n    setBaselineState: propTypes.func,\n    systemsIDs: propTypes.array,\n    patchSetID: propTypes.string\n};\n\nexport default memo(PatchSetWizard, (prevProps, nextProps) => {\n    return JSON.stringify(prevProps) === JSON.stringify(nextProps);\n});\n","import { useState } from 'react';\nimport {\n    filterSelectedActiveSystemIDs\n} from './Helpers';\n\n/**\n* Manages unified state for patch set wizard and unassign modal.\n* @param {Object} [selectedRows] selected rows object to be removed.\n* @returns {patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal}\n*/\nconst usePatchSetState = (selectedRows) => {\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const openPatchSetAssignWizard = (systemID) => {\n        setPatchSetState({\n            isPatchSetWizardOpen: true,\n            systemsIDs: typeof systemID === 'string' && systemID !== ''\n                ? [systemID]\n                : filterSelectedActiveSystemIDs(selectedRows),\n            shouldRefresh: false\n        }\n        );\n    };\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openPatchSetEditModal = (patchSetID) => {\n        setPatchSetState({ isPatchSetWizardOpen: true, patchSetID });\n    };\n\n    return { patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal };\n};\n\nexport default usePatchSetState;\n"],"names":["currentFilter","apply","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","osFilterTypes","reverse","currentValue","os","currentOsVersionsArray","split","filterByOsType","_","value","includes","filter","join","remainingOs","length","undefined","onToggle","onViewMoreClick","type","conditionalFilterType","label","intl","messages","filterValues","children","Select","variant","SelectVariant","typeAheadAriaLabel","onSelect","selections","placeholderText","loadingVariant","text","onClick","style","maxHeight","overflow","slice","map","option","index","SelectOption","key","stale","staleMap","staleSystems","toString","currentValueStringType","Array","isArray","filterByStale","onChange","event","items","placeholder","packages_updatable","filterByUpdatableSystems","packagesListUpdatableTypes","HeaderBreadcrumbs","headerOUIA","Breadcrumb","Boolean","item","BreadcrumbItem","title","isActive","to","Link","propTypes","PropTypes","HeaderTabs","history","Tabs","tabString","push","activeKey","location","pathname","className","Tab","eventKey","paths","withRouter","Header","showTabs","breadcrumbs","PageHeader","PageHeaderTitle","SelectPagination","changePage","page","perPage","totalItems","Flex","justifyContent","default","FlexItem","Button","isDisabled","SelectExistingSets","setSelectedPatchSet","selectedSets","systems","dispatch","useDispatch","formOptions","useFormApi","useState","rows","useSelector","PatchSetsStore","queryParams","status","metadata","useEffect","clearPatchSetsAction","search","searchDependency","fetchPatchSetsAction","offset","patchOptions","useMemo","isLoading","Spinner","size","set","id","name","debounce","params","changePatchSetsParams","searchAdvisory","FormGroup","fieldId","isRequired","selected","selectedSet","change","inlineFilterPlaceholderText","onFilter","props","searchValue","hasInlineFilter","footer","total_items","dateStr","match","date","Date","timestamp","getTime","minDate","Number","isNaN","reviewSystemColumns","width","configurationFields","component","componentTypes","hidden","nameComponent","validate","validatorTypes","descriptionComponent","toDateComponent","schema","wizardType","wizardTitle","fields","isDynamic","inModal","showTitles","description","nextStep","validatorMapper","formValueSystems","filterSelectedActiveSystemIDs","dateValidator","ConfigurationFields","renderForm","Grid","hasGutter","GridItem","lg","md","ConfigurationStepFields","systemsIDs","patchSetID","shouldShowRadioButtons","shouldApplyExisting","setShouldApplyExisting","shouldCreateNew","setShouldCreateNew","selectedPatchSet","SpecificPatchSetReducer","shallowEqual","patchSet","handleRadioChange","toDate","config","to_time","convertIsoToDate","Stack","TextContent","marginTop","Text","TextVariants","systemsCount","b","chunks","StackItem","Radio","isChecked","input","useFieldApi","values","getState","setName","TextInput","val","autoFocus","setToDate","DatePicker","popoverProps","position","validators","invalidFormatText","setDescription","ReviewSystems","defaultSelectedSystems","buildSelectedSystemsObj","setLoading","rawData","setRawData","setSystems","selectedRows","setSelectedRows","limit","setMetada","setQueryParams","assignedSystems","fetchSystems","then","result","createSystemsRowsReview","data","meta","prevQueryParams","onSort","useSortColumn","sortBy","createSortBy","sort","onSetPage","useSetPage","onPerPageSelect","usePerPageSelect","useOnSelect","toSelect","newSelections","reduce","object","system","TableView","columns","compact","tableOUIA","paginationOUIA","store","filterConfig","searchFilter","staleFilter","systemsUpdatableFilter","osVersionFilter","searchChipLabel","defaultFilters","systemsListDefaultFilters","existing_patch_set","TextList","TextListVariants","TextListItem","TextListItemVariants","Object","RequestProgress","onClose","state","requestPending","failed","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","InProgressIcon","CheckCircleIcon","Title","headingLevel","EmptyStateBody","HelperText","HelperTextItem","isInline","href","PatchSetWizard","setBaselineState","submitted","formValues","shouldRefresh","wizardState","setWizardState","fetchPatchSetAction","fetchPatchSetSystemsAction","clearPatchSetAction","onSubmit","usePatchSetApi","handleWizardClose","isPatchSetWizardOpen","mapperExtensions","nameField","NameField","descriptionField","DescriptionField","toDateField","ToDateField","configurationStep","reviewSystems","reviewPatchSet","ReviewPatchSet","Fragment","subscription","FormTemplate","showFormControls","componentMapper","WizardMapper","TextField","onCancel","Modal","showClose","hasNoBodyWrapper","Wizard","steps","isFinishedStep","memo","prevProps","nextProps","JSON","stringify","isUnassignSystemsModalOpen","patchSetState","setPatchSetState","openPatchSetAssignWizard","systemID","openUnassignSystemsModal","openPatchSetEditModal"],"sourceRoot":""}