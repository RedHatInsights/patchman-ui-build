{"version":3,"file":"js/AdvisoryPage.69cdcb56b12174d4f0c6.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/layouts/Stack/Stack.js","webpack:///./node_modules/@patternfly/react-core/dist/js/layouts/Stack/StackItem.js","webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js","webpack:///./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack:///./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack:///./src/SmartComponents/AdvisorySystems/AdvisorySystems.js","webpack:///./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Stack = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst stack_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/layouts/Stack/stack\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst Stack = (_a) => {\n    var { hasGutter = false, className = '', children = null, component = 'div' } = _a, props = tslib_1.__rest(_a, [\"hasGutter\", \"className\", \"children\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: react_styles_1.css(stack_1.default.stack, hasGutter && stack_1.default.modifiers.gutter, className) }), children));\n};\nexports.Stack = Stack;\nexports.Stack.displayName = 'Stack';\n//# sourceMappingURL=Stack.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StackItem = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst stack_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/layouts/Stack/stack\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst StackItem = (_a) => {\n    var { isFilled = false, className = '', children = null } = _a, props = tslib_1.__rest(_a, [\"isFilled\", \"className\", \"children\"]);\n    return (React.createElement(\"div\", Object.assign({}, props, { className: react_styles_1.css(stack_1.default.stackItem, isFilled && stack_1.default.modifiers.fill, className) }), children));\n};\nexports.StackItem = StackItem;\nexports.StackItem.displayName = 'StackItem';\n//# sourceMappingURL=StackItem.js.map","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { getOperatingSystems } from '../../Utilities/api';\n\nconst useOsVersionFilter = (currentFilter = '', apply) => {\n    const versions = useSelector(({ entities }) => entities?.operatingSystems);\n    const versionsLoaded = useSelector(({ entities }) => entities?.operatingSystemsLoaded);\n\n    const [operatingSystems, setOperatingSystems] = useState([]);\n    const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule(\n        {\n            appName: 'inventory',\n            scope: 'inventory',\n            module: './OsFilterHelpers'\n        }\n    );\n\n    useEffect(() => {\n        if (versions === undefined || versionsLoaded === undefined) {\n            /* explicitly request OS versions from API */\n            getOperatingSystems().then(({ results }) => {\n                setOperatingSystems((results || []).map(entry => {\n                    const { name, major, minor } = entry.value;\n                    const versionStringified = `${major}.${minor}`;\n                    return { label: `${name} ${versionStringified}`, value: `${versionStringified}` };\n                }));\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        if (versionsLoaded === true) {\n            setOperatingSystems(versions);\n        }\n    }, [versionsLoaded]);\n\n    const osVersionValue = (currentFilter === '' ? [] : currentFilter.split(','))\n    // patchman uses \"RHEL \" prefix in values; need to remove\n    .map((version) => version.substring(5));\n\n    return [\n        ...(buildOSFilterConfig\n            ? [\n                buildOSFilterConfig(\n                    {\n                        id: 'rhel_version',\n                        value: toGroupSelectionValue(osVersionValue),\n                        onChange: (event, value) => {\n                            /* `versions` must be of type string, e.g., \"8.9,9.0\" */\n                            const versions = Object.values(value)\n                            .flatMap((versions) => Object.keys(versions))\n                            .map((version) => `RHEL ${version}`)\n                            .toString();\n                            apply({ filter: { os: versions } });\n                        }\n                    },\n                    operatingSystems\n                )\n            ]\n            : [])\n    ];\n};\n\nexport default useOsVersionFilter;\n","import { Split, SplitItem, Title } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Split className='infobox' hasGutter>\n            <SplitItem isFilled>\n                <Flex flex={{ default: 'column' }}>\n                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                        <Title headingLevel='h5'>\n                            {intl.formatMessage(messages.labelsColumnsSeverity)}\n                        </Title>\n                    </FlexItem>\n                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                        <Flex flex={{ default: 'row' }}>\n                            <FlexItem>\n                                <SecurityIcon size='sm' color={severity.color} />\n                            </FlexItem>\n                            <FlexItem>\n                                {severity.label}\n                            </FlexItem>\n                        </Flex>\n                    </FlexItem>\n                </Flex>\n            </SplitItem>\n        </Split>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import {\n    Button, Grid, GridItem, Stack, StackItem, Text, TextContent,\n    FlexItem, TextVariants, Flex, Split, SplitItem, Title\n} from '@patternfly/react-core';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport propTypes from 'prop-types';\nimport React, { useState, lazy, Suspense, Fragment } from 'react';\nimport messages from '../../Messages';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { getSeverityById, isRHAdvisory, truncateDescription } from '../../Utilities/Helpers';\nimport { intl } from '../../Utilities/IntlProvider';\nimport RebootRequired from '../Snippets/RebootRequired';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\nimport ExternalLink from '../Snippets/ExternalLink';\nimport AdvisoryType from '../AdvisoryType/AdvisoryType';\n\nconst CvesModal = lazy(() =>\n    import(\n        /* webpackChunkName: \"CvesModal\" */ '../../SmartComponents/AdvisoryDetail/CvesModal'\n    )\n);\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const [CvesInfoModal, setCvesModal] = useState(() => () => null);\n    const [wordLength, setWordLength] = useState(1000);\n    const severityObject = getSeverityById(attributes.severity);\n    const cves = attributes.cves;\n\n    const showCvesModal = () => {\n        setCvesModal(() => () => <CvesModal cveIds={cves} />);\n    };\n\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                attributes.description && truncateDescription(attributes.description, wordLength, setWordLength)\n                            }\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsPublicDate, {\n                                        date: processDate(\n                                            attributes.public_date\n                                        )\n                                    })}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsModifiedDate, {\n                                        date: processDate(\n                                            attributes.modified_date\n                                        )\n                                    })}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        {isRHAdvisory(attributes.id) &&\n                            <StackItem>\n                                <ExternalLink link={`https://access.redhat.com/errata/${attributes.id}`}\n                                    text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n                            </StackItem>\n                        }\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                <Flex flex={{ default: 'column' }}>\n                    {attributes.advisory_type_name && (<FlexItem>\n                        <Split className='infobox' hasGutter>\n                            <SplitItem isFilled>\n                                <Flex flex={{ default: 'column' }}>\n                                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                                        <Title headingLevel='h5'>\n                                            {intl.formatMessage(messages.titlesAdvisoryType)}\n                                        </Title>\n                                    </FlexItem>\n                                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                                        <AdvisoryType\n                                            type={attributes.advisory_type_name}\n                                        />\n                                    </FlexItem>\n                                </Flex>\n                            </SplitItem>\n                        </Split>\n                    </FlexItem>\n                    )}\n                    {severityObject.value !== 0 && (<FlexItem>\n                        <AdvisorySeverityInfo severity={severityObject}/>\n                    </FlexItem>\n                    )}\n                    {attributes.reboot_required && (<FlexItem spacer={{ default: 'spacerMd' }}>\n                        <RebootRequired />\n                    </FlexItem>)}\n                </Flex>\n            </GridItem>\n            {cves && cves.length !== 0 && (\n                <GridItem md={4} sm={12}>\n                    <TextContent>\n                        <Text component={TextVariants.h3}>\n                            {intl.formatMessage(messages.labelsCves)}\n                        </Text>\n                        <Button variant='link' style={{ padding: 0 }} onClick={showCvesModal} >\n                            {intl.formatMessage(messages.labelsCvesButton, { cvesCount: cves.length })}\n                        </Button>\n                    </TextContent>\n                </GridItem>\n            )}\n            <Suspense fallback={<Fragment/>}>\n                <CvesInfoModal />\n            </Suspense>\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React, { useCallback } from 'react';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport { combineReducers } from 'redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { defaultReducers } from '../../store';\nimport { changeAffectedSystemsParams, clearAdvisorySystemsReducer,\n    clearInventoryReducer, systemSelectAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { exportAdvisorySystemsCSV, exportAdvisorySystemsJSON, fetchAdvisorySystems } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, decodeQueryparams, persistantParams,\n    remediationProvider, removeUndefinedObjectKeys\n} from '../../Utilities/Helpers';\nimport {\n    useBulkSelectConfig, useGetEntities, useOnExport, useRemoveFilter\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { systemsListColumns, systemsRowActions } from '../Systems/SystemsListAssets';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\nimport { systemsColumnsMerger, buildActiveFiltersConfig } from '../../Utilities/SystemsHelpers';\n\nconst AdvisorySystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const store = useStore();\n    const [isRemediationOpen, setRemediationOpen] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const history = useHistory();\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const queryParams = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore?.queryParams || {}\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const metadata = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore?.metadata || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => {\n            dispatch(clearInventoryReducer());\n            dispatch(clearAdvisorySystemsReducer());\n        };\n    }, []);\n\n    function apply(params) {\n        dispatch(changeAffectedSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply);\n\n    const osFilterConfig = useOsVersionFilter(filter?.os, apply);\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            ...osFilterConfig\n        ]\n    };\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    const showRemediationModal = useCallback(async (data) => {\n        const resolvedData = await data;\n        setRemediationModalCmp(() =>\n            () => <RemediationWizard\n                data={resolvedData}\n                isRemediationOpen\n                setRemediationOpen={setRemediationOpen} />);\n        setRemediationOpen(!isRemediationOpen);\n    }, [isRemediationOpen]);\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.advisorySystems(advisoryName),\n            queryParams,\n            selectionDispatcher: systemSelectAction\n        }\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const getEntites = useGetEntities(fetchAdvisorySystems, apply, { id: advisoryName }, history);\n\n    const onExport = useOnExport(advisoryName, queryParams, {\n        csv: exportAdvisorySystemsCSV,\n        json: exportAdvisorySystemsJSON\n    }, dispatch);\n\n    const remediationDataProvider = () => remediationProvider(\n        advisoryName,\n        removeUndefinedObjectKeys(selectedRows),\n        remediationIdentifiers.advisory\n    );\n\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems);\n\n    return (\n        <React.Fragment>\n            {isRemediationOpen && <RemediationModalCmp /> || null}\n            {(status.hasError || metadata?.has_systems === false)\n                && <ErrorHandler code={status.code} metadata={metadata} />\n                || <InventoryTable\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    ignoreRefresh\n                    hideFilters={{ all: true, tags: false }}\n                    columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, false)}\n                    showTags\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    paginationProps={{\n                        isDisabled: totalItems === 0\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        store.replaceReducer(combineReducers({\n                            ...defaultReducers,\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(systemsListColumns(false), modifyInventory),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        }));\n                    }}\n                    getEntities={getEntites}\n                    actions={systemsRowActions(showRemediationModal)}\n                    tableProps={{\n                        canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig={activeFiltersConfig}\n                    exportConfig={{\n                        isDisabled: totalItems === 0,\n                        onSelect: onExport\n                    }}\n                    bulkSelect={onSelect && bulkSelectConfig}\n                    dedicatedAction={(\n                        <AsyncRemediationButton\n                            remediationProvider={remediationDataProvider}\n                            isDisabled={\n                                arrayFromObj(selectedRows).length === 0\n                            }\n                        />\n                    )}\n\n                />\n            }\n        </React.Fragment>\n    );\n};\n\nAdvisorySystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AdvisorySystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { clearAdvisoryDetailStore, clearEntitiesStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport AdvisorySystems from '../AdvisorySystems/AdvisorySystems';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst AdvisoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [advisoryName] = React.useState(match.params.advisoryId);\n\n    const pageTitle = `${advisoryName} - ${intl.formatMessage(messages.titlesAdvisories)}`;\n    setPageTitle(pageTitle);\n\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearEntitiesStore());\n            dispatch(clearAdvisoryDetailStore());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                headerOUIA={'advisory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchAdvisories),\n                        to: '/advisories',\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable /> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        <AdvisorySystems advisoryName={advisoryName} />\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisoryDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(AdvisoryDetail);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n"],"names":["exports","tslib_1","React","__importStar","stack_1","__importDefault","react_styles_1","_a","hasGutter","className","children","component","props","__rest","Component","createElement","Object","assign","css","default","stack","modifiers","gutter","isFilled","stackItem","fill","currentFilter","apply","versions","useSelector","entities","operatingSystems","versionsLoaded","operatingSystemsLoaded","useState","setOperatingSystems","useLoadModule","appName","scope","module","toGroupSelectionValue","buildOSFilterConfig","useEffect","undefined","getOperatingSystems","then","results","map","entry","value","name","major","minor","versionStringified","label","osVersionValue","split","version","substring","id","onChange","event","values","flatMap","keys","toString","filter","os","AdvisorySeverityInfo","severity","Split","SplitItem","Flex","flex","FlexItem","spacer","Title","headingLevel","intl","messages","size","color","propTypes","CvesModal","lazy","AdvisoryHeader","attributes","isLoading","CvesInfoModal","setCvesModal","wordLength","setWordLength","severityObject","getSeverityById","cves","Grid","style","minHeight","GridItem","md","sm","WithLoader","loading","variant","WithLoaderVariants","centered","Stack","StackItem","whiteSpace","description","truncateDescription","public_date","date","processDate","modified_date","isRHAdvisory","ExternalLink","link","text","advisory_type_name","AdvisoryType","type","reboot_required","RebootRequired","length","TextContent","Text","TextVariants","Button","padding","onClick","cveIds","cvesCount","Suspense","fallback","Fragment","AdvisorySystems","advisoryName","dispatch","useDispatch","store","useStore","isRemediationOpen","setRemediationOpen","RemediationModalCmp","setRemediationModalCmp","history","useHistory","decodedParams","decodeQueryparams","location","search","systems","rows","shallowEqual","status","totalItems","total","queryParams","AdvisorySystemsStore","selectedRows","metadata","systemProfile","selectedTags","page","perPage","sort","params","changeAffectedSystemsParams","clearInventoryReducer","clearAdvisorySystemsReducer","useRemoveFilter","deleteFilters","osFilterConfig","useOsVersionFilter","filterConfig","items","searchFilter","activeFiltersConfig","buildActiveFiltersConfig","showRemediationModal","useCallback","data","resolvedData","RemediationWizard","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","systemSelectAction","selectedCount","arrayFromObj","getEntites","useGetEntities","fetchAdvisorySystems","onExport","useOnExport","csv","exportAdvisorySystemsCSV","json","exportAdvisorySystemsJSON","bulkSelectConfig","useBulkSelectConfig","total_items","hasError","has_systems","ErrorHandler","code","InventoryTable","isFullView","autoRefresh","initialLoading","ignoreRefresh","hideFilters","all","tags","columns","defaultColumns","systemsColumnsMerger","showTags","customFilters","patchParams","paginationProps","isDisabled","onLoad","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","systemsListColumns","modifyInventory","persistantParams","getEntities","actions","systemsRowActions","tableProps","canSelectAll","TableVariant","isStickyHeader","exportConfig","bulkSelect","dedicatedAction","AsyncRemediationButton","remediationProvider","removeUndefinedObjectKeys","remediationIdentifiers","AdvisoryDetail","match","advisoryId","pageTitle","setPageTitle","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearEntitiesStore","clearAdvisoryDetailStore","clearNotifications","Header","title","headerOUIA","breadcrumbs","to","isActive","Unavailable","Main","withRouter","setOpen"],"sourceRoot":""}