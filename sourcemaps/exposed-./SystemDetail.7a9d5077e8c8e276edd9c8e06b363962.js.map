{"version":3,"file":"js/exposed-./SystemDetail.bea52e20dfc20090101e.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Snippets/SystemUpToDate.js","webpack:///./src/PresentationalComponents/TableView/TableFooter.js","webpack:///./src/PresentationalComponents/TableView/TableView.js","webpack:///./src/Utilities/useOnSelect.js","webpack:///./src/index.js"],"sourcesContent":["import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const SystemUpToDate = () => (\n    <Bullseye>\n        <EmptyState style={{ paddingTop: 40 }}>\n            <EmptyStateIcon icon={()=><CheckCircleIcon size='xl' color={'var(--pf-global--success-color--200)' }\n                style={{ marginBottom: 15 }} />}/>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                {intl.formatMessage(messages.statesNoApplicableAdvisories)}\n            </Title>\n            <EmptyStateBody>\n                {intl.formatMessage(messages.statesSystemUpToDate)}\n            </EmptyStateBody>\n        </EmptyState>\n    </Bullseye>\n);\n","import { Pagination, PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TableFooter = ({ isLoading, page, perPage, onSetPage, totalItems, onPerPageSelect, paginationOUIA }) => {\n    return (\n        <>\n            {isLoading ? (\n                <div className=\"pf-c-pagination pf-m-bottom\">\n                    <Skeleton fontSize=\"xl\" width=\"350px\" style={{ margin: 10 }} />\n                </div>\n            ) :\n                <Pagination\n                    itemCount={totalItems}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    widgetId={`pagination-options-menu-bottom`}\n                    variant={PaginationVariant.bottom}\n                    ouiaId={paginationOUIA}\n                    isDisabled={totalItems === 0}\n                />\n            }\n        </>\n    );\n};\n\nTableFooter.propTypes = {\n    isLoading: PropTypes.bool,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalItems: PropTypes.number,\n    paginationOUIA: PropTypes.string\n};\n\nexport default TableFooter;\n","import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport AsyncRemediationButton from '../../SmartComponents/Remediation/AsyncRemediationButton';\nimport { arrayFromObj, buildFilterChips, convertLimitOffset } from '../../Utilities/Helpers';\nimport { useRemoveFilter, useBulkSelectConfig } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableFooter from './TableFooter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { Skeleton, ToolbarItem } from '@patternfly/react-core';\n\nconst TableView = ({\n    columns,\n    store: {\n        rows,\n        metadata,\n        status,\n        queryParams: { filter, search }\n    },\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    onExport,\n    filterConfig,\n    sortBy,\n    remediationProvider,\n    selectedRows,\n    compact,\n    apply,\n    tableOUIA,\n    paginationOUIA,\n    errorState,\n    emptyState,\n    defaultFilters,\n    searchChipLabel,\n    ToolbarButton,\n    actionsConfig,\n    isRemediationLoading,\n    actionsToggle\n}) => {\n\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n\n    const [deleteFilters] = useRemoveFilter(filter, apply, defaultFilters);\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n    const { code, hasError, isLoading } = status;\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, metadata, rows, onCollapse);\n\n    return (\n        <React.Fragment>\n            {\n                (<React.Fragment>\n                    {(hasError || metadata.has_systems === false)\n                        ? <ErrorHandler code={code} ErrorState={errorState} EmptyState={emptyState} metadata={metadata} />\n                        : <React.Fragment>\n                            <PrimaryToolbar\n                                pagination={isLoading\n                                    ? <Skeleton fontSize=\"xl\" width=\"200px\" style={{ margin: 10 }} />\n                                    : {\n                                        itemCount: metadata.total_items,\n                                        page,\n                                        perPage,\n                                        isCompact: true,\n                                        onSetPage,\n                                        onPerPageSelect,\n                                        ouiaId: `top-${paginationOUIA}`,\n                                        isDisabled: metadata.total_items === 0\n                                    }}\n                                filterConfig={filterConfig}\n                                activeFiltersConfig={{\n                                    filters: buildFilterChips(filter, search, searchChipLabel),\n                                    onDelete: deleteFilters,\n                                    deleteTitle: intl.formatMessage(defaultFilters\n                                        && messages.labelsFiltersReset || messages.labelsFiltersClear)\n                                }}\n                                actionsConfig={{\n                                    actions: [remediationProvider && (\n                                        <AsyncRemediationButton\n                                            remediationProvider={remediationProvider}\n                                            isDisabled={\n                                                Object.values(selectedRows).filter(isSelected => isSelected).length === 0\n                                                || isRemediationLoading\n                                            }\n                                            isLoading={isRemediationLoading}\n                                        />\n                                    )]\n                                }}\n                                exportConfig={{\n                                    isDisabled: metadata.total_items === 0,\n                                    onSelect: onExport\n                                }}\n                                bulkSelect={onSelect && bulkSelectConfig}\n                            >\n                                {ToolbarButton && <ToolbarItem>\n                                    <ToolbarButton />\n                                </ToolbarItem>}\n                            </PrimaryToolbar>\n                            {isLoading\n                                ? <SkeletonTable\n                                    colSize={columns?.length ?? 5}\n                                    rowSize={20}\n                                    variant={compact && TableVariant.compact}\n                                />\n                                : <Table\n                                    aria-label=\"Patch table view\"\n                                    cells={columns}\n                                    onSelect={metadata.total_items && onSelect}\n                                    rows={rows}\n                                    onCollapse={metadata.total_items && onCollapse}\n                                    canSelectAll={false}\n                                    onSort={metadata.total_items && onSort}\n                                    ouiaId={tableOUIA}\n                                    sortBy={metadata.total_items && sortBy}\n                                    isStickyHeader\n                                    variant={compact && TableVariant.compact}\n                                    actions={actionsConfig}\n                                    actionsToggle={actionsToggle}\n                                >\n                                    <TableHeader />\n                                    <TableBody />\n                                </Table>\n                            }\n                            <TableFooter\n                                isLoading={isLoading}\n                                totalItems={metadata.total_items}\n                                perPage={perPage}\n                                page={page}\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                paginationOUIA={`bottom-${paginationOUIA}`}\n                            />\n                        </React.Fragment>\n                    }\n                </React.Fragment>)\n            }\n        </React.Fragment>\n    );\n};\n\nTableView.propTypes = {\n    columns: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    onExport: PropTypes.func,\n    remediationProvider: PropTypes.func,\n    selectedRows: PropTypes.object,\n    apply: PropTypes.func,\n    sortBy: PropTypes.object,\n    filterConfig: PropTypes.object,\n    store: PropTypes.object,\n    compact: PropTypes.bool,\n    tableOUIA: PropTypes.string,\n    paginationOUIA: PropTypes.string,\n    errorState: PropTypes.element,\n    emptyState: PropTypes.element,\n    defaultFilters: PropTypes.object,\n    searchChipLabel: PropTypes.string,\n    ToolbarButton: PropTypes.elementType,\n    actionsConfig: PropTypes.array,\n    isRemediationLoading: PropTypes.bool,\n    actionsToggle: PropTypes.func\n};\n\nexport default TableView;\n","import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchIDs } from './api';\nimport { toggleAllSelectedAction } from '../store/Actions/Actions';\nimport { isObject } from './Helpers';\n\nexport const ID_API_ENDPOINTS = {\n    advisories: '/ids/advisories',\n    systems: '/ids/systems',\n    templates: '/baselines',\n    advisorySystems: (advisoryID) => `/ids/advisories/${advisoryID}/systems`,\n    systemAdvisories: (systemID) => `/ids/systems/${systemID}/advisories`,\n    packageSystems: (packageName) => `/packages/${packageName}/systems`,\n    systemPackages: (systemID) => `/systems/${systemID}/packages`,\n    templateSystems: (templateId) => `/ids/baselines/${templateId}/systems`\n};\n\nconst useFetchAllIDs = (\n    endpoint,\n    apiResponseTransformer\n) =>\n    useCallback((queryParams) =>\n        fetchIDs(endpoint, { ...queryParams, limit: -1 })\n        .then(response =>\n            apiResponseTransformer ? apiResponseTransformer(response) : response\n        ),\n    []\n    );\n\nconst useCreateSelectedRow = (transformKey, constructFilename) =>\n    useCallback((rows, toSelect = []) => {\n        const { ids, data } = rows;\n        const shouldUseOnlyIDs = Array.isArray(ids);\n        const items = shouldUseOnlyIDs ? ids : data;\n\n        items.forEach((item) => {\n            const id = shouldUseOnlyIDs ? item : item.id;\n\n            //expanded rows does not have ID and should be disabled for selection\n            if (!(isObject(item) && item.isExpandedRow)) {\n                toSelect.push(\n                    {\n                        id: transformKey ? transformKey(item) : id,\n                        selected: constructFilename ? constructFilename(item) : id\n                    }\n                );\n            }\n        });\n\n        return toSelect;\n    });\n\nconst createSelectors = (\n    createSelectedRow,\n    dispatchSelection,\n    toggleAllSystemsSelected\n) => {\n    const selectNone = (rows) => {\n        const toSelect = [];\n        Object.keys(rows).forEach(id => {\n            toSelect.push(\n                {\n                    id,\n                    selected: false\n                }\n            );\n        });\n\n        dispatchSelection(toSelect);\n        toggleAllSystemsSelected(false);\n    };\n\n    const selectPage = (pageRows) => {\n        if (Array.isArray(pageRows)) {\n            pageRows = pageRows.filter(row => !row.disableSelection);\n        }\n\n        dispatchSelection(createSelectedRow({ data: pageRows }));\n    };\n\n    const selectAll = (fetchIDs, queryParams) => {\n        queryParams.offset = 0;\n        return fetchIDs(queryParams).then(response => {\n            if (Array.isArray(response.data)) {\n                let rowsToSelect = response.data.filter(row => row.status !== 'Applicable');\n                dispatchSelection(createSelectedRow({ data: rowsToSelect }));\n            } else {\n                dispatchSelection(createSelectedRow(response));\n                toggleAllSystemsSelected(true);\n            }\n        });\n    };\n\n    return { selectNone, selectPage, selectAll };\n};\n\nexport const useOnSelect = (rawData, selectedRows, config) => {\n    const {\n        endpoint,\n        queryParams,\n        selectionDispatcher,\n        constructFilename,\n        transformKey,\n        apiResponseTransformer,\n        //TODO: get rid of this custom selector\n        customSelector\n    } = config;\n\n    const dispatch = useDispatch();\n    const fetchIDs = useFetchAllIDs(endpoint, apiResponseTransformer);\n    const createSelectedRow = useCreateSelectedRow(transformKey, constructFilename);\n\n    const toggleAllSystemsSelected = (flagState) => {\n        dispatch(toggleAllSelectedAction(flagState));\n    };\n\n    const dispatchSelection = (toSelect) => {\n        if (customSelector) {\n            customSelector(toSelect);\n        } else {\n            dispatch(selectionDispatcher(toSelect));\n        }\n    };\n\n    const { selectNone, selectPage, selectAll } = createSelectors(\n        createSelectedRow,\n        dispatchSelection,\n        toggleAllSystemsSelected\n    );\n\n    const onSelect = useCallback(\n        async (event, selected, rowId, setBulkLoading = () => {}) => {\n            switch (event) {\n                case 'none': {\n                    selectNone(selectedRows);\n                    break;\n                }\n\n                case 'page': {\n                    selectPage(rawData);\n                    break;\n                }\n\n                case 'all': {\n                    selectAll(fetchIDs, queryParams)\n                    .then(() => setBulkLoading(false));\n                    break;\n                }\n\n                default: {\n                    dispatchSelection([{\n                        id: transformKey ? transformKey(rawData[rowId]) : rawData[rowId].id,\n                        selected: selected && (constructFilename ? constructFilename(rawData[rowId]) : true)\n                    }]);\n                }\n            }\n        });\n\n    return onSelect;\n};\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport SystemDetail from './SmartComponents/SystemDetail/SystemDetail';\nimport { SystemAdvisoryListStore } from './store/Reducers/SystemAdvisoryListStore';\nimport { SystemPackageListStore } from './store/Reducers/SystemPackageListStore';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst WrappedSystemDetail = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ SystemAdvisoryListStore, SystemPackageListStore });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, []);\n    return <Router>\n        {\n            Wrapper ? <Wrapper {...getRegistry && { store: getRegistry()?.getStore() }}>\n                <SystemDetail {...props} isInventoryApp />\n            </Wrapper> : <Bullseye>\n                <Spinner size=\"xl\" />\n            </Bullseye>\n        }\n    </Router>;\n};\n\nWrappedSystemDetail.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport { SystemPackageListStore, SystemAdvisoryListStore };\n\nexport default WrappedSystemDetail;\n"],"names":["SystemUpToDate","React","Bullseye","EmptyState","style","paddingTop","EmptyStateIcon","icon","CheckCircleIcon","size","color","marginBottom","Title","headingLevel","intl","formatMessage","messages","statesNoApplicableAdvisories","EmptyStateBody","statesSystemUpToDate","TableFooter","_ref","isLoading","page","perPage","onSetPage","totalItems","onPerPageSelect","paginationOUIA","className","Skeleton","fontSize","width","margin","Pagination","itemCount","widgetId","variant","PaginationVariant","bottom","ouiaId","isDisabled","propTypes","PropTypes","TableView","_columns$length","columns","_ref$store","store","rows","metadata","status","_ref$store$queryParam","queryParams","filter","search","onCollapse","onSelect","onSort","onExport","filterConfig","sortBy","remediationProvider","selectedRows","compact","apply","tableOUIA","errorState","emptyState","defaultFilters","searchChipLabel","ToolbarButton","actionsConfig","isRemediationLoading","actionsToggle","_React$useMemo","convertLimitOffset","limit","offset","_React$useMemo2","_slicedToArray","_useRemoveFilter","useRemoveFilter","deleteFilters","selectedCount","arrayFromObj","length","code","hasError","bulkSelectConfig","useBulkSelectConfig","has_systems","ErrorHandler","ErrorState","PrimaryToolbar","pagination","total_items","isCompact","concat","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","labelsFiltersReset","labelsFiltersClear","actions","AsyncRemediationButton","Object","values","isSelected","exportConfig","bulkSelect","ToolbarItem","SkeletonTable","colSize","rowSize","TableVariant","Table","cells","canSelectAll","isStickyHeader","TableHeader","TableBody","ID_API_ENDPOINTS","advisories","systems","templates","advisorySystems","advisoryID","systemAdvisories","systemID","packageSystems","packageName","systemPackages","templateSystems","templateId","useOnSelect","rawData","config","endpoint","selectionDispatcher","constructFilename","transformKey","apiResponseTransformer","customSelector","dispatch","useDispatch","fetchIDs","useCallback","_objectSpread","then","response","useFetchAllIDs","createSelectedRow","toSelect","arguments","undefined","ids","data","shouldUseOnlyIDs","Array","isArray","forEach","item","id","isObject","isExpandedRow","push","selected","useCreateSelectedRow","dispatchSelection","_createSelectors","toggleAllSystemsSelected","selectNone","keys","selectPage","pageRows","row","disableSelection","selectAll","rowsToSelect","createSelectors","flagState","toggleAllSelectedAction","_asyncToGenerator","_regeneratorRuntime","_callee","event","rowId","setBulkLoading","_args","_context","prev","next","t0","abrupt","stop","_x","_x2","_x3","WrappedSystemDetail","_getRegistry2","getRegistry","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","Wrapper","setWrapper","useEffect","_getRegistry","_getRegistry$register","register","call","SystemAdvisoryListStore","SystemPackageListStore","Provider","Fragment","Router","getStore","SystemDetail","_extends","isInventoryApp","Spinner"],"sourceRoot":""}