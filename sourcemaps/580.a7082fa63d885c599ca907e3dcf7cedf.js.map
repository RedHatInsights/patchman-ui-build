{"version":3,"file":"js/580.1641981924129.c09f674c887238834d79.js","mappings":"8MACAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQE,QAAUF,EAAQG,iBAAc,EACxC,MAAMC,EAAU,EAAQ,OAClBC,EAAQD,EAAQE,aAAa,EAAQ,QACrCC,EAAYH,EAAQI,gBAAgB,EAAQ,QAC5CC,EAAiB,EAAQ,OAE/B,IAAWN,GAAAA,EAKMH,EAAQG,cAAgBH,EAAQG,YAAc,KAJ3C,GAAI,KACpBA,EAAgB,GAAI,KACpBA,EAAgB,GAAI,KACpBA,EAAgB,GAAI,KAYxBH,EAAQE,QAVSQ,IACb,IAAI,UAEJC,EAAY,GAAE,KAAEC,EAAO,KAAM,iBAAkBC,EAAgB,aAAY,MAAEC,GAAQ,EAAK,SAAEC,GAAaL,EAAIM,EAAQZ,EAAQa,OAAOP,EAAI,CAAC,YAAa,OAAQ,iBAAkB,QAAS,aACzL,MAAMQ,EAAYJ,EAAQ,MAAQ,OAClC,OAAQT,EAAMc,cAAcD,EAAWpB,OAAOsB,OAAO,CAAET,UAAWF,EAAeY,IAAId,EAAUe,QAAQC,QAAShB,EAAUe,QAAQE,UAAUZ,GAAOD,GAAYc,KAAM,cAAe,iBAAkBZ,GAAkBC,GAAS,CAAEY,QAAS,eAAmBX,GAAY,CAAEY,MAAO,CAAE,2BAA4BZ,IAAeC,GAAQF,EAAST,EAAMc,cAAc,SAAU,CAAER,UAAWJ,EAAUe,QAAQM,YAAaC,GAAI,KAAMC,GAAI,KAAMC,EAAG,KAAMC,KAAM,SAAc3B,EAAMc,cAAcd,EAAM4B,SAAU,KAC7e5B,EAAMc,cAAc,OAAQ,CAAER,UAAWF,EAAeY,IAAId,EAAUe,QAAQY,kBAC9E7B,EAAMc,cAAc,OAAQ,CAAER,UAAWF,EAAeY,IAAId,EAAUe,QAAQa,mBAC9E9B,EAAMc,cAAc,OAAQ,CAAER,UAAWF,EAAeY,IAAId,EAAUe,QAAQc,sBAGtFpC,EAAQE,QAAQmC,YAAc,W,8ICnBjBC,EAAiB,kBAC1B,kBAAC,IAAD,KACI,kBAAC,KAAD,CAAYX,MAAO,CAAEY,WAAY,KAC7B,kBAAC,IAAD,CAAgBC,KAAM,kBAAI,kBAAC,UAAD,CAAiB5B,KAAK,KAAK6B,MAAO,uCACxDd,MAAO,CAAEe,aAAc,SAC3B,kBAAC,KAAD,CAAOC,aAAa,KAAK/B,KAAK,MACzBgC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,+BAExB,kBAAC,IAAD,KACKD,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,2B,6QCN9BC,EAAsB,SAAC,GAA8B,MAA5BC,EAA4B,EAA5BA,YAAgB/B,GAAY,YACvD,GAA8BgC,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,OAPAC,EAAAA,EAAAA,YAAU,WACW,QAAbJ,IACW,QAAX,EAAAA,WAAA,mBAAeK,gBAAf,gBAA0B,CAAEC,wBAAAA,EAAAA,EAAyBC,uBAAAA,EAAAA,KAGzDJ,GAAW,kBAAMH,EAAcQ,EAAAA,GAAWtB,EAAAA,cAC3C,IACI,kBAAC,gBAAD,KAECgB,EAAU,kBAACA,EAAYF,GAAe,CAAES,MAAK,UAAET,WAAF,aAAE,EAAeU,YAC1D,kBAAC,KAAD,UAAkBzC,EAAlB,CAAyB0C,gBAAc,MAC9B,kBAAC,IAAD,KACT,kBAAC,EAAAxD,QAAD,CAASU,KAAK,UAM9BkC,EAAoBa,UAAY,CAC5BZ,Y,MAAaa,GAAAA,MAKjB","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Spinner/Spinner.js","webpack:///./src/PresentationalComponents/Snippets/SystemUpToDate.js","webpack:///./src/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Spinner = exports.spinnerSize = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst spinner_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Spinner/spinner\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nvar spinnerSize;\n(function (spinnerSize) {\n    spinnerSize[\"sm\"] = \"sm\";\n    spinnerSize[\"md\"] = \"md\";\n    spinnerSize[\"lg\"] = \"lg\";\n    spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize = exports.spinnerSize || (exports.spinnerSize = {}));\nconst Spinner = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', size = 'xl', 'aria-valuetext': ariaValueText = 'Loading...', isSVG = false, diameter } = _a, props = tslib_1.__rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\"]);\n    const Component = isSVG ? 'svg' : 'span';\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(spinner_1.default.spinner, spinner_1.default.modifiers[size], className), role: \"progressbar\", \"aria-valuetext\": ariaValueText }, (isSVG && { viewBox: '0 0 100 100' }), (diameter && { style: { '--pf-c-spinner--diameter': diameter } }), props), isSVG ? (React.createElement(\"circle\", { className: spinner_1.default.spinnerPath, cx: \"50\", cy: \"50\", r: \"45\", fill: \"none\" })) : (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerClipper) }),\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerLeadBall) }),\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerTailBall) })))));\n};\nexports.Spinner = Spinner;\nexports.Spinner.displayName = 'Spinner';\n//# sourceMappingURL=Spinner.js.map","import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const SystemUpToDate = () => (\n    <Bullseye>\n        <EmptyState style={{ paddingTop: 40 }}>\n            <EmptyStateIcon icon={()=><CheckCircleIcon size='xl' color={'var(--pf-global--success-color--200)' }\n                style={{ marginBottom: 15 }} />}/>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                {intl.formatMessage(messages.statesNoApplicableAdvisories)}\n            </Title>\n            <EmptyStateBody>\n                {intl.formatMessage(messages.statesSystemUpToDate)}\n            </EmptyStateBody>\n        </EmptyState>\n    </Bullseye>\n);\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport SystemDetail from './SmartComponents/SystemDetail/SystemDetail';\nimport { SystemAdvisoryListStore } from './store/Reducers/SystemAdvisoryListStore';\nimport { SystemPackageListStore } from './store/Reducers/SystemPackageListStore';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst WrappedSystemDetail = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ SystemAdvisoryListStore, SystemPackageListStore });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, []);\n    return <Router>\n        {\n            Wrapper ? <Wrapper {...getRegistry && { store: getRegistry()?.getStore() }}>\n                <SystemDetail {...props} isInventoryApp />\n            </Wrapper> : <Bullseye>\n                <Spinner size=\"xl\" />\n            </Bullseye>\n        }\n    </Router>;\n};\n\nWrappedSystemDetail.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport { SystemPackageListStore, SystemAdvisoryListStore };\n\nexport default WrappedSystemDetail;\n"],"names":["Object","defineProperty","exports","value","Spinner","spinnerSize","tslib_1","React","__importStar","spinner_1","__importDefault","react_styles_1","_a","className","size","ariaValueText","isSVG","diameter","props","__rest","Component","createElement","assign","css","default","spinner","modifiers","role","viewBox","style","spinnerPath","cx","cy","r","fill","Fragment","spinnerClipper","spinnerLeadBall","spinnerTailBall","displayName","SystemUpToDate","paddingTop","icon","color","marginBottom","headingLevel","intl","messages","WrappedSystemDetail","getRegistry","useState","Wrapper","setWrapper","useEffect","register","SystemAdvisoryListStore","SystemPackageListStore","Provider","store","getStore","isInventoryApp","propTypes","PropTypes"],"sourceRoot":""}