{"version":3,"file":"js/Systems.0482c9735f5bc4b7451b.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/package-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js","webpack:///./src/PresentationalComponents/StatusReports/SystemsStatusReport.js","webpack:///./src/SmartComponents/Systems/SystemsTable.js","webpack:///./src/SmartComponents/Systems/SystemsMainContent.js","webpack:///./src/SmartComponents/Systems/SystemsPage.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card.mjs';\nimport { CardContext } from './Card';\nexport const CardTitle = (_a) => {\n    var { children, className, component = 'div' } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const { cardId, registerTitleId } = React.useContext(CardContext);\n    const Component = component;\n    const titleId = cardId ? `${cardId}-title` : '';\n    React.useEffect(() => {\n        registerTitleId(titleId);\n        return () => registerTitleId('');\n    }, [registerTitleId, titleId]);\n    return (React.createElement(\"div\", { className: css(styles.cardTitle) },\n        React.createElement(Component, Object.assign({ className: css(styles.cardTitleText, className), id: titleId || undefined }, props), children)));\n};\nCardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","import { createIcon } from '../createIcon';\n\nexport const PackageIconConfig = {\n  name: 'PackageIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M567.7,1010.49707 L951.5,818.498238 C994.7,796.698371 1024,752.39864 1024,703.998934 L1024,320.001265 C1024,271.601559 995.6,227.10183 952.2,205.501961 L568.6,13.5031267 C550.8,4.60318072 531.4,0.103208049 512,-0.00152855358 C492.3,-0.0967907365 472.5,4.40318194 454.4,13.5031267 L70.8,205.501961 C27.4,227.10183 0,271.50156 0,319.801267 L0.9,703.998934 C0.9,752.39864 28.3,796.79837 71.6,818.398239 L455.2,1010.39707 C464.3,1014.89705 488.1,1023.99699 511.9,1023.99699 C535.5,1023.99699 558.8,1014.99704 567.7,1010.49707 Z M512.5,630.899377 L672.5,550.899863 L672.5,645.29929 L736.5,613.299484 L736.5,518.900058 L896,438.900543 L896.5,712.698881 L512.5,904.697715 L512.5,630.899377 Z M145.1,304.101362 L294.9,228.60182 C295.3,228.801819 295.6,229.001818 296,229.201817 L661.9,412.300705 L512.5,487.600248 L145.1,304.101362 Z M512.5,118.902487 L881.3,301.701377 L733.1,376.400923 L366,192.702038 L512.5,118.902487 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PackageIcon = createIcon(PackageIconConfig);\n\nexport default PackageIcon;","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useStore } from 'react-redux';\nimport { Bullseye } from \"@patternfly/react-core/dist/dynamic/layouts/Bullseye\";\nimport { Spinner } from \"@patternfly/react-core/dist/dynamic/components/Spinner\";\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nimport WithHistory from './WithHistory';\nvar BaseInvTable = function (props) {\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, { className: classNames(props.className, 'inventory'), children: _jsx(Suspense, { fallback: props.fallback, children: _jsx(ScalprumComponent, __assign({ history: props.history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\" }, props)), ref: props.innerRef }, props)) }) }));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n    history: PropTypes.object,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, { className: \"pf-v5-u-p-lg\", children: _jsx(Spinner, { size: \"xl\" }) })),\n    component: 'section',\n};\nvar CompatiblityWrapper = function (props, ref) { return _jsx(WithHistory, __assign({ innerRef: ref, Component: InvTable }, props)); };\nexport default React.forwardRef(CompatiblityWrapper);\n//# sourceMappingURL=InventoryTable.js.map","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { CheckCircleIcon, PackageIcon, ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport {\n    CardTitle,\n    Button,\n    Skeleton,\n    Card,\n    Grid,\n    GridItem,\n    CardBody,\n    Flex,\n    FlexItem,\n    Icon as PfIcon\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { fetchSystems } from '../../Utilities/api';\n\nconst StatusCard = ({ title, color, Icon, value, filter, apply }) => {\n    return (\n        <Card isCompact isFullHeight>\n            <CardTitle style={{ marginTop: '0px' }}>{title}</CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                    <FlexItem\n                        spacer={{ default: 'spacerMd' }}\n                        alignSelf={{ default: 'alignSelfCenter' }}\n                    >\n                        <PfIcon size='md'>\n                            <Icon color={color} />\n                        </PfIcon>\n                    </FlexItem>\n                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                        {\n                            typeof(value) === 'undefined'\n                            &&  <Skeleton width=\"24px\" />\n                                    ||  <Button\n                                        variant=\"link\"\n                                        onClick={() => apply(filter)}\n                                        className='patch-status-report-text'>\n                                        {value}\n                                    </Button>\n                        }\n                    </FlexItem>\n                </Flex>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst SystemsStatusReport = ({ apply, queryParams }) => {\n    const [subtotals, setSubtotals] = React.useState({});\n\n    const { selectedTags, selectedGlobalTags, systemProfile } = useSelector(({ GlobalFilterStore }) => GlobalFilterStore);\n\n    const fetchResource = () => {\n        setSubtotals({});\n\n        let result;\n\n        try {\n            result = fetchSystems({\n                filter: {\n                    os: queryParams?.filter?.os\n                },\n                selectedTags: [...selectedTags, ...selectedGlobalTags],\n                systemProfile,\n                limit: 1,\n                'filter[stale]': 'in:true,false'\n            }).then((result)=> {\n                setSubtotals(result.meta?.subtotals);\n            });\n        }\n        catch {\n            result = [];\n        }\n\n        return result;\n    };\n\n    React.useEffect(() => {\n        fetchResource();\n    }, [\n        queryParams?.filter?.os?.length, queryParams?.filter?.os !== undefined,\n        selectedTags?.length, selectedTags !== undefined,\n        selectedGlobalTags?.length, selectedGlobalTags !== undefined,\n        systemProfile,\n        queryParams?.subtotals !== undefined\n    ]);\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Grid hasGutter span={12} >\n                <GridItem lg={3} md={4}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsUpToDate)}\n                        Icon={CheckCircleIcon}\n                        color={'var(--pf-v5-global--success-color--100)'}\n                        value={subtotals?.patched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'eq:0' } }}\n                    />\n                </GridItem>\n                <GridItem lg={3} md={4}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsWithPatchesAvailable)}\n                        Icon={PackageIcon}\n                        color={'var(--pf-v5-global--primary-color--100)'}\n                        value={subtotals?.unpatched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'gt:0' } }}\n                    />\n                </GridItem>\n                <GridItem lg={3} md={4}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusStaleSystems)}\n                        Icon={ExclamationTriangleIcon}\n                        color={'var(--pf-v5-global--warning-color--100)'}\n                        value={subtotals?.stale}\n                        apply={apply}\n                        filter={{ filter: { stale: true } }}\n                    />\n                </GridItem>\n            </Grid>\n        </Main>\n    );\n};\n\nStatusCard.propTypes = {\n    title: propTypes.string,\n    Icon: propTypes.elementType,\n    value: propTypes.number,\n    color: propTypes.string,\n    apply: propTypes.func,\n    filter: propTypes.object\n};\n\nSystemsStatusReport.propTypes = {\n    apply: propTypes.func,\n    queryParams: propTypes.object\n};\n\nexport default SystemsStatusReport;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport messages from '../../Messages';\nimport { defaultReducers } from '../../store';\nimport { changeSystemsMetadata, changeTags, systemSelectAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchSystems\n} from '../../Utilities/api';\nimport { systemsListDefaultFilters, NO_ADVISORIES_TEXT } from '../../Utilities/constants';\nimport {\n    arrayFromObj, persistantParams, filterSelectedActiveSystemIDs\n} from '../../Utilities/Helpers';\nimport { useBulkSelectConfig, useGetEntities, useOnExport,\n    useRemoveFilter, useRemediationDataProvider, useOnSelect, ID_API_ENDPOINTS\n} from '../../Utilities/hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport { buildFilterConfig, buildActiveFiltersConfig } from '../../Utilities/SystemsHelpers';\nimport { combineReducers } from 'redux';\nimport { systemsColumnsMerger } from '../../Utilities/SystemsHelpers';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport propTypes from 'prop-types';\n\nconst SystemsTable = ({\n    apply,\n    patchSetState,\n    openAssignSystemsModal,\n    openUnassignSystemsModal,\n    setSearchParams,\n    activateRemediationModal,\n    decodedParams\n}) => {\n    const store = useStore();\n    const inventory = useRef(null);\n\n    const dispatch = useDispatch();\n    const [isRemediationLoading, setRemediationLoading] = useState(false);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const areAllSelected = useSelector(\n        ({ SystemsStore }) => SystemsStore?.areAllSelected\n    );\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const { hasAccess: hasTemplateAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    const applyMetadata = (metadata) => {\n        dispatch(changeSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const [deleteFilters] = useRemoveFilter(\n        { search, ...filter },\n        apply,\n        systemsListDefaultFilters\n    );\n    const filterConfig = buildFilterConfig(search, filter, apply);\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systems,\n            queryParams,\n            selectionDispatcher: systemSelectAction,\n            totalItems\n        }\n    );\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh) {\n            onSelect('none');\n            // timestamp is used to force inventory to refresh\n            // if it wasn't there inventory might ignore request to refresh because parameters are the same\n            inventory?.current?.onRefreshData({ timestamp: Date.now() });\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    const onExport = useOnExport(\n        'systems',\n        queryParams,\n        {\n            csv: exportSystemsCSV,\n            json: exportSystemsJSON\n        }, dispatch\n    );\n\n    const getEntities = useGetEntities(\n        fetchSystems,\n        apply,\n        {},\n        setSearchParams,\n        applyMetadata,\n        applyGlobalFilter\n    );\n\n    const remediationDataProvider = useRemediationDataProvider(\n        selectedRows,\n        setRemediationLoading,\n        'systems',\n        areAllSelected\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const bulkSelectConfig = useBulkSelectConfig(\n        selectedCount,\n        onSelect,\n        { total_items: totalItems },\n        systems\n    );\n\n    return (\n        <InventoryTable\n            ref={inventory}\n            isFullView\n            autoRefresh\n            initialLoading\n            hideFilters={{ all: true, tags: false, hostGroupFilter: false, operatingSystem: false }}\n            columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, systemsListColumns)}\n            showTags\n            customFilters={{\n                patchParams: {\n                    search,\n                    filter,\n                    systemProfile,\n                    selectedTags\n                }\n            }}\n            paginationProps={{\n                isDisabled: totalItems === 0\n            }}\n            onLoad={({ mergeWithEntities }) => {\n                store.replaceReducer(combineReducers({\n                    ...defaultReducers,\n                    ...mergeWithEntities(\n                        inventoryEntitiesReducer(systemsListColumns(), modifyInventory),\n                        persistantParams({ page, perPage, sort, search }, decodedParams)\n                    )\n                }));\n            }}\n            getEntities={getEntities}\n            tableProps={{\n                actionResolver: (row) =>\n                    systemsRowActions(\n                        activateRemediationModal,\n                        openAssignSystemsModal,\n                        openUnassignSystemsModal,\n                        row,\n                        hasTemplateAccess\n                    ),\n                canSelectAll: false,\n                variant: TableVariant.compact,\n                className: 'patchCompactInventory',\n                isStickyHeader: true\n            }}\n            bulkSelect={bulkSelectConfig}\n            exportConfig={{\n                isDisabled: totalItems === 0,\n                onSelect: onExport\n            }}\n            actionsConfig={{\n                actions: [\n                    <AsyncRemediationButton\n                        key='remediate-multiple-systems'\n                        remediationProvider={remediationDataProvider}\n                        isDisabled={\n                            arrayFromObj(selectedRows).length === 0 || isRemediationLoading\n                        }\n                        isLoading={isRemediationLoading}\n                        patchNoAdvisoryText={NO_ADVISORIES_TEXT}\n                    />,\n                    {\n                        key: 'assign-multiple-systems',\n                        label: intl.formatMessage(messages.titlesTemplateAssign),\n                        onClick: () => openAssignSystemsModal(selectedRows),\n                        props: { isDisabled: !hasTemplateAccess || selectedCount === 0 }\n                    },\n                    {\n                        key: 'remove-multiple-systems',\n                        label: intl.formatMessage(messages.titlesTemplateRemoveMultipleButton),\n                        onClick: () => openUnassignSystemsModal(filterSelectedActiveSystemIDs(selectedRows)),\n                        props: { isDisabled: !hasTemplateAccess || selectedCount === 0 }\n                    }\n                ]\n            }}\n            filterConfig={filterConfig}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n    );\n};\n\nSystemsTable.propTypes = {\n    apply: propTypes.func.isRequired,\n    patchSetState: propTypes.object.isRequired,\n    openAssignSystemsModal: propTypes.func.isRequired,\n    openUnassignSystemsModal: propTypes.func.isRequired,\n    setSearchParams: propTypes.func.isRequired,\n    activateRemediationModal: propTypes.func.isRequired,\n    decodedParams: propTypes.func.isRequired\n};\nexport default SystemsTable;\n","import React, { useEffect, useState } from 'react';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { changeSystemsParams, clearInventoryReducer } from '../../store/Actions/Actions';\nimport { usePatchSetState } from '../../Utilities/hooks';\nimport { decodeQueryparams } from '../../Utilities/Helpers';\nimport { useActivateRemediationModal } from './SystemsListAssets';\nimport SystemsStatusReport from '../../PresentationalComponents/StatusReports/SystemsStatusReport';\nimport PatchSetWrapper from '../../PresentationalComponents/PatchSetWrapper/PatchSetWrapper';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport SystemsTable from './SystemsTable';\nimport { useSearchParams } from 'react-router-dom';\n\nconst SystemsMainContent = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const dispatch = useDispatch();\n    const [isRemediationOpen, setRemediationOpen] = useState(false);\n    const decodedParams = decodeQueryparams('?' + searchParams.toString());\n    const [remediationIssues, setRemediationIssues] = useState([]);\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const { hasError, code } = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const metadata = useSelector(\n        ({ SystemsStore }) => SystemsStore?.metadata || {}\n    );\n\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const apply = (queryParams) => {\n        dispatch(changeSystemsParams(queryParams));\n    };\n\n    useEffect(() => {\n        apply(decodedParams);\n        return () => dispatch(clearInventoryReducer());\n    }, []);\n\n    const {\n        patchSetState, setPatchSetState, openUnassignSystemsModal, openAssignSystemsModal\n    } = usePatchSetState(selectedRows);\n\n    const activateRemediationModal = useActivateRemediationModal(\n        setRemediationIssues,\n        setRemediationOpen\n    );\n\n    if (hasError || metadata?.has_systems === false) {\n        return <ErrorHandler code={code} metadata={metadata}/>;\n    }\n\n    return (\n        <React.Fragment>\n            <SystemsStatusReport apply={apply} queryParams={queryParams} />\n            <PatchSetWrapper\n                patchSetState={patchSetState}\n                setPatchSetState={setPatchSetState}\n                totalItems={metadata?.total_items}\n            />\n            {isRemediationOpen &&\n                    <RemediationWizard\n                        data={remediationIssues}\n                        isRemediationOpen\n                        setRemediationOpen={setRemediationOpen}\n                    />\n                    || null\n            }\n            <Main>\n                <SystemsTable\n                    apply={apply}\n                    patchSetState={patchSetState}\n                    openAssignSystemsModal={openAssignSystemsModal}\n                    openUnassignSystemsModal={openUnassignSystemsModal}\n                    setSearchParams={setSearchParams}\n                    activateRemediationModal={activateRemediationModal}\n                    decodedParams={decodeQueryparams}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default SystemsMainContent;\n","import React, { useEffect } from 'react';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { DEFAULT_PATCH_TITLE } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport SystemsMainContent from './SystemsMainContent';\n\nconst SystemsPage = () => {\n    const chrome = useChrome();\n    useEffect(()=>{\n        chrome.updateDocumentTitle(`${intl.formatMessage(messages.titlesSystems)}${DEFAULT_PATCH_TITLE}`);\n    }, [chrome, intl]);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'} />\n            <SystemsMainContent />\n        </React.Fragment>\n    );\n};\n\nexport default SystemsPage;\n","import { createAdvisorySystemsRows, createSystemsRows, createPatchSetDetailRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows, fetchRejected } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state, lastAction) => {\n    // this is pretty scuffed, but trust me it cannot be solved more elegantly because\n    // single item select actions are triggered by Inventory and contain only system id\n    // but we also need to match available_evra for each selected system for remediations\n    // this does not happen with bulk select action because they are implemented by Patchman\n    // the id-evra mapping is cached to minimize O(n^2) time complexity of id-evra matching\n    if (lastAction === 'SELECT_ENTITY') {\n        let idToEvraMapping = state.packageEvraCache;\n\n        if (idToEvraMapping === undefined) {\n            idToEvraMapping = {};\n            state.rows.forEach(row => idToEvraMapping[row.id] = row.available_evra);\n            state.packageEvraCache = idToEvraMapping;\n        }\n\n        state.selectedRows = state.selectedRows ? Object.fromEntries(\n            Object.entries(state.selectedRows).map(([id, value]) =>\n                value === true ? [id, idToEvraMapping[id]] : [id, value]\n            )\n        ) : state.selectedRows;\n    }\n\n    if (lastAction === 'LOAD_ENTITIES_FULFILLED') {\n        state.packageEvraCache = undefined;\n    }\n\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyTemplateDetailSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createPatchSetDetailRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyAdvisorySystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createAdvisorySystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState, action.type);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection, action.type);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["CardTitle","_a","children","className","component","props","__rest","cardId","registerTitleId","Component","titleId","css","cardTitle","Object","assign","cardTitleText","id","undefined","displayName","PackageIconConfig","name","height","width","svgPath","yOffset","xOffset","PackageIcon","__assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","BaseInvTable","store","Cmp","Suspense","fallback","ScalprumComponent","history","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","size","RemediationWizard","_ref","data","setRemediationOpen","React","AsyncComponent","setOpen","StatusCard","title","color","Icon","value","filter","Card","isCompact","isFullHeight","style","marginTop","CardBody","Flex","flex","default","flexWrap","FlexItem","spacer","alignSelf","PfIcon","Skeleton","Button","variant","onClick","SystemsStatusReport","_ref2","_queryParams$filter2","_queryParams$filter2$","_queryParams$filter3","queryParams","_React$useState","_React$useState2","_slicedToArray","subtotals","setSubtotals","_useSelector","useSelector","_ref3","GlobalFilterStore","selectedTags","selectedGlobalTags","systemProfile","_queryParams$filter","fetchSystems","os","concat","_toConsumableArray","limit","then","result","_result$meta","meta","_unused","fetchResource","Main","paddingBottom","Grid","hasGutter","span","GridItem","lg","md","intl","formatMessage","messages","labelsStatusSystemsUpToDate","CheckCircleIcon","patched","packages_updatable","labelsStatusSystemsWithPatchesAvailable","unpatched","labelsStatusStaleSystems","ExclamationTriangleIcon","stale","SystemsTable","patchSetState","openAssignSystemsModal","openUnassignSystemsModal","setSearchParams","activateRemediationModal","decodedParams","useStore","inventory","useRef","dispatch","useDispatch","_useState","useState","_useState2","isRemediationLoading","setRemediationLoading","systems","entities","rows","shallowEqual","totalItems","total","selectedRows","_ref4","areAllSelected","_ref5","SystemsStore","_ref6","hasTemplateAccess","usePermissionsWithContext","hasAccess","search","page","perPage","sort","_useRemoveFilter","useRemoveFilter","_objectSpread","systemsListDefaultFilters","deleteFilters","filterConfig","buildFilterConfig","activeFiltersConfig","buildActiveFiltersConfig","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","systemSelectAction","useEffect","_inventory$current","shouldRefresh","current","onRefreshData","timestamp","Date","now","onExport","useOnExport","csv","exportSystemsCSV","json","exportSystemsJSON","getEntities","useGetEntities","metadata","changeSystemsMetadata","tags","changeTags","remediationDataProvider","useRemediationDataProvider","selectedCount","arrayFromObj","bulkSelectConfig","useBulkSelectConfig","total_items","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","hostGroupFilter","operatingSystem","columns","defaultColumns","systemsColumnsMerger","systemsListColumns","showTags","customFilters","patchParams","paginationProps","isDisabled","onLoad","_ref7","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","modifyInventory","persistantParams","tableProps","actionResolver","row","systemsRowActions","canSelectAll","TableVariant","compact","isStickyHeader","bulkSelect","exportConfig","actionsConfig","actions","AsyncRemediationButton","key","remediationProvider","isLoading","patchNoAdvisoryText","NO_ADVISORIES_TEXT","label","titlesTemplateAssign","titlesTemplateRemoveMultipleButton","filterSelectedActiveSystemIDs","isRequired","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","isRemediationOpen","decodeQueryparams","toString","_useState3","_useState4","remediationIssues","setRemediationIssues","status","hasError","code","changeSystemsParams","clearInventoryReducer","_usePatchSetState","usePatchSetState","setPatchSetState","useActivateRemediationModal","has_systems","ErrorHandler","PatchSetWrapper","chrome","useChrome","updateDocumentTitle","titlesSystems","DEFAULT_PATCH_TITLE","Header","titlesPatchSystems","headerOUIA","SystemsMainContent","initialState","offset","state","loaded","createSystemsRows","modifyPackageSystems","lastAction","idToEvraMapping","packageEvraCache","forEach","available_evra","fromEntries","entries","map","createPackageSystemsRows","modifyTemplateDetailSystems","createPatchSetDetailRows","modifyAdvisorySystems","createAdvisorySystemsRows","inventoryModifier","action","newState","type","fetchRejected","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}