{"version":3,"sources":["webpack:///./src/PresentationalComponents/Filters/SystemStaleFilter.js","webpack:///./src/PresentationalComponents/Filters/SystemsUpdatableFilter.js","webpack:///./src/PresentationalComponents/StatusReports/SystemsStatusReport.js","webpack:///./src/SmartComponents/Systems/Systems.js"],"names":["apply","currentFilter","currentValue","stale","staleMap","React","staleSystems","value","label","toString","currentValueStringType","Array","isArray","map","filterByStale","filter","intl","messages","type","conditionalFilterType","filterValues","onChange","event","items","placeholder","packages_updatable","filterByUpdatableSystems","packagesListUpdatableTypes","StatusCard","title","color","Icon","Card","isCompact","style","marginRight","CardTitle","marginTop","CardBody","className","Flex","flex","default","flexWrap","FlexItem","spacer","alignSelf","size","isFilled","Skeleton","width","Button","variant","onClick","SystemsStatusreport","subtotals","metadata","Main","paddingBottom","Grid","hasGutter","span","GridItem","CheckCircleIcon","patched","PackageIcon","unpatched","ExclamationTriangleIcon","propTypes","pageTitle","setPageTitle","history","useHistory","dispatch","useDispatch","isRemediationLoading","setRemediationLoading","RemediationModalCmp","setRemediationModalCmp","decodedParams","decodeQueryparams","location","search","systems","useSelector","entities","rows","shallowEqual","totalItems","total","selectedRows","status","queryParams","SystemsStore","systemProfile","selectedTags","page","perPage","sort","showRemediationModal","data","resolvedData","RemediationModal","changeSystemsParams","clearInventoryReducer","useRemoveFilter","systemsListDefaultFilters","deleteFilters","filterConfig","searchFilter","staleFilter","systemsUpdatableFilter","osVersionFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","onSelect","useOnSelect","fetchSystems","limit","then","filterRemediatableSystems","toSelect","payload","selectedCount","arrayFromObj","length","onExport","useOnExport","csv","exportSystemsCSV","json","exportSystemsJSON","prepareRemediationPairs","fetchApplicableAdvisoriesApi","fetchViewAdvisoriesSystems","advisories","advisory","id","getEntities","useGetEntities","changeSystemsMetadata","Header","headerOUIA","SystemsStatusReport","hasError","ErrorHandler","code","InventoryTable","disableDefaultColumns","isFullView","autoRefresh","initialLoading","hideFilters","all","customFilters","patchParams","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","modifyInventory","persistantParams","actions","systemsRowActions","tableProps","areActionsDisabled","rowData","applicableAdvisories","applicable_advisories","every","typeSum","canSelectAll","TableVariant","isStickyHeader","bulkSelect","useBulkSelectConfig","total_items","exportConfig","isDisabled","dedicatedAction","PatchRemediationButton","remediationProviderWithPairs","removeUndefinedObjectKeys","transformPairs","remediationIdentifiers","isLoading","ouia"],"mappings":"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","file":"js/Systems.ae88a9a357db54494f91.js","sourcesContent":["import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { staleSystems } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsStaleFilter = (apply, currentFilter = {}) => {\n\n    let { stale: currentValue } = currentFilter;\n\n    const staleMap = React.useMemo(\n        () =>\n            staleSystems.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n\n    const currentValueStringType = (\n        currentValue\n            && (\n                Array.isArray(currentValue)\n                    && currentValue.map(value => value.toString())\n                    || [currentValue.toString()]\n            )\n    );\n\n    const filterByStale = value => {\n        apply({ filter: { stale: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStale),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStale(value);\n            },\n            items: staleMap,\n            value: currentValueStringType,\n            placeholder: intl.formatMessage(messages.labelsFiltersStalePlaceholder)\n        }\n    };\n};\n\nexport default systemsStaleFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { packagesListUpdatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsUpdatableFilter = (apply, currentFilter = {}) => {\n\n    let { packages_updatable: currentValue } = currentFilter;\n\n    const filterByUpdatableSystems = value => {\n        apply({ filter: { packages_updatable: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersSystemsUpdatable),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByUpdatableSystems(value);\n            },\n            items: packagesListUpdatableTypes,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersSystemsUpdatablePlaceholder)\n        }\n    };\n};\n\nexport default systemsUpdatableFilter;\n","import { CheckCircleIcon, PackageIcon, ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Button, Skeleton,\n    Card, Grid, GridItem, CardBody, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\n\nconst StatusCard = ({ title, color, Icon, value, filter, apply }) => {\n    return (\n        <Card isCompact style={{ marginRight: 'var(--pf-global--spacer--sm)' }}>\n            <CardTitle style={{ marginTop: '0px' }}>{title}</CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                    <FlexItem\n                        spacer={{ default: 'spacerMd' }}\n                        alignSelf={{ default: 'alignSelfCenter' }}\n                    >\n                        <Icon color={color} size='md'/>\n                    </FlexItem>\n                    <FlexItem isFilled spacer={{ default: 'spacerNone' }}>\n                        {\n                            typeof(value) === 'undefined'\n                            &&  <Skeleton width=\"24px\" />\n                                    ||  <Button\n                                        variant=\"link\"\n                                        onClick={() => apply(filter)}\n                                        className='patch-status-report-text'>\n                                        {value}\n                                    </Button>\n                        }\n                    </FlexItem>\n                </Flex>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst SystemsStatusreport = ({ metadata: { subtotals }, apply }) => (\n    <Main style={{ paddingBottom: 0 }}>\n\n        <Grid hasGutter span={3}>\n            <GridItem>\n                <StatusCard\n                    title={intl.formatMessage(messages.labelsStatusSystemsUpToDate)}\n                    Icon={CheckCircleIcon}\n                    color={'var(--pf-global--success-color--100)'}\n                    value={subtotals?.patched}\n                    apply={apply}\n                    filter={{ filter: { packages_updatable: 'eq:0' } }}\n                />\n            </GridItem>\n            <GridItem>\n                <StatusCard\n                    title={intl.formatMessage(messages.labelsStatusSystemsWithPatchesAvailable)}\n                    Icon={PackageIcon}\n                    color={'var(--pf-global--primary-color--100)'}\n                    value={subtotals?.unpatched}\n                    apply={apply}\n                    filter={{ filter: { packages_updatable: 'gt:0' } }}\n                />\n            </GridItem>\n            <GridItem>\n                <StatusCard\n                    title={intl.formatMessage(messages.labelsStatusStaleSystems)}\n                    Icon={ExclamationTriangleIcon}\n                    color={'var(--pf-global--warning-color--100)'}\n                    value={subtotals?.stale}\n                    apply={apply}\n                    filter={{ filter: { stale: true } }}\n                />\n            </GridItem>\n        </Grid>\n    </Main>\n);\n\nStatusCard.propTypes = {\n    title: propTypes.string,\n    Icon: propTypes.elementType,\n    value: propTypes.string,\n    color: propTypes.string,\n    apply: propTypes.func,\n    filter: propTypes.object\n};\n\nSystemsStatusreport.propTypes = {\n    metadata: propTypes.object,\n    apply: propTypes.func\n};\n\nexport default SystemsStatusreport;\n","import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport staleFilter from '../../PresentationalComponents/Filters/SystemStaleFilter';\nimport osVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport systemsUpdatableFilter from '../../PresentationalComponents/Filters/SystemsUpdatableFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changeSystemsParams, clearInventoryReducer, changeSystemsMetadata } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchApplicableAdvisoriesApi,\n    fetchSystems, fetchViewAdvisoriesSystems\n} from '../../Utilities/api';\nimport { remediationIdentifiers, systemsListDefaultFilters } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips,\n\n    decodeQueryparams, filterRemediatableSystems, persistantParams, remediationProviderWithPairs, removeUndefinedObjectKeys,\n    transformPairs\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useBulkSelectConfig, useGetEntities, useOnExport,\n    useOnSelect, useRemoveFilter\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport PatchRemediationButton from '../Remediation/PatchRemediationButton';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\nimport SystemsStatusReport from '../../PresentationalComponents/StatusReports/SystemsStatusReport';\n\nconst Systems = () => {\n    const pageTitle = intl.formatMessage(messages.titlesSystems);\n\n    setPageTitle(pageTitle);\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n    const metadata = useSelector(\n        ({ SystemsStore }) => SystemsStore?.metadata || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => dispatch(clearInventoryReducer());\n    }, []);\n    async function showRemediationModal(data) {\n        setRemediationLoading(true);\n        const resolvedData = await data;\n        setRemediationModalCmp(() => () => <RemediationModal data={resolvedData} />);\n        setRemediationLoading(false);\n    }\n\n    function apply(queryParams) {\n        dispatch(changeSystemsParams(queryParams));\n    }\n\n    const applyMetadata = (metadata) => {\n        dispatch(changeSystemsMetadata(metadata));\n    };\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply, systemsListDefaultFilters);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            staleFilter(apply, filter),\n            systemsUpdatableFilter(apply, filter),\n            osVersionFilter(filter, apply)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n        onDelete: deleteFilters,\n        deleteTitle: intl.formatMessage(messages.labelsFiltersReset)\n    };\n\n    const fetchAllData = (queryParams) =>\n        fetchSystems({ ...queryParams, limit: -1 }).then(filterRemediatableSystems);\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllData, selectRows);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport('systems', queryParams, {\n        csv: exportSystemsCSV,\n        json: exportSystemsJSON\n    }, dispatch);\n\n    const areActionsDisabled = (rowData) => {\n        const { applicable_advisories: applicableAdvisories } = rowData;\n        return applicableAdvisories && applicableAdvisories.every(typeSum => typeSum === 0);\n    };\n\n    const prepareRemediationPairs = (systems) => {\n        return fetchApplicableAdvisoriesApi({ limit: -1 }).then(\n            ({ data }) => fetchViewAdvisoriesSystems(\n                {\n                    advisories: data.map(advisory => advisory.id),\n                    systems\n                }\n            ));\n    };\n\n    const getEntities = useGetEntities(fetchSystems, apply, {}, history, applyMetadata);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'} />\n            <RemediationModalCmp />\n            <SystemsStatusReport metadata={metadata} apply={apply}/>\n            <Main>\n                {status.hasError && <ErrorHandler code={status.code} /> ||\n                    (\n                        <InventoryTable\n                            disableDefaultColumns\n                            isFullView\n                            autoRefresh\n                            initialLoading\n                            hideFilters={{ all: true }}\n                            customFilters={{\n                                patchParams: {\n                                    search,\n                                    filter,\n                                    systemProfile,\n                                    selectedTags\n                                }\n                            }}\n                            onLoad={({ mergeWithEntities }) => {\n                                register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(systemsListColumns, modifyInventory),\n                                        persistantParams({ page, perPage, sort, search }, decodedParams)\n                                    )\n                                });\n                            }}\n                            getEntities={getEntities}\n                            actions={systemsRowActions(showRemediationModal)}\n                            tableProps={{\n                                areActionsDisabled,\n                                canSelectAll: false,\n                                variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                            }}\n                            bulkSelect={useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                            exportConfig={{\n                                isDisabled: totalItems === 0,\n                                onSelect: onExport\n                            }}\n                            filterConfig={filterConfig}\n                            activeFiltersConfig={activeFiltersConfig}\n                            dedicatedAction={(\n                                <PatchRemediationButton\n                                    onClick={() =>\n                                        showRemediationModal(\n                                            remediationProviderWithPairs(\n                                                removeUndefinedObjectKeys(selectedRows),\n                                                prepareRemediationPairs,\n                                                transformPairs,\n                                                remediationIdentifiers.advisory)\n                                        )}\n                                    isDisabled={arrayFromObj(selectedRows).length === 0 || isRemediationLoading}\n                                    isLoading={isRemediationLoading}\n                                    ouia={'toolbar-remediation-button'}\n                                />\n                            )}\n                        />\n\n                    )\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n"],"sourceRoot":""}