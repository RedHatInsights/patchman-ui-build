{"version":3,"file":"js/AdvisoryyPage.1650489994003.d6b647639368ab5b5998.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js","webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Spinner/Spinner.js","webpack:///./src/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/SmartComponents/AdvisoryDetail/CvesModal.js","webpack:///./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack:///./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack:///./src/SmartComponents/AdvisorySystems/AdvisorySystems.js","webpack:///./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye } from \"@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye.js\";\nimport { Spinner } from \"@patternfly/react-core/dist/esm/components/Spinner/Spinner.js\";\nimport InventoryLoadError from './InventoryLoadError';\n\nvar BaseInvTable = function BaseInvTable(props) {\n  var history = useHistory();\n  var store = useStore();\n  return /*#__PURE__*/React.createElement(Suspense, {\n    fallback: props.fallback\n  }, /*#__PURE__*/React.createElement(ScalprumComponent, _extends({\n    history: history,\n    store: store,\n    appName: \"inventory\",\n    module: \"./InventoryTable\",\n    scope: \"inventory\",\n    ErrorComponent: /*#__PURE__*/React.createElement(InventoryLoadError, _extends({\n      component: \"InventoryDetailHead\",\n      history: history,\n      store: store\n    }, props)),\n    ref: props.innerRef\n  }, props)));\n};\n\nBaseInvTable.propTypes = {\n  fallback: PropTypes.node,\n  innerRef: PropTypes.object\n};\n/**\n * Inventory sub component.\n *\n * This component shows systems table connected to redux.\n */\n\nvar InvTable = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(BaseInvTable, _extends({\n    innerRef: ref\n  }, props));\n});\nInvTable.propTypes = {\n  /** React Suspense fallback component. <a href=\"https://reactjs.org/docs/code-splitting.html#reactlazy\" target=\"_blank\">Learn more</a>. */\n  fallback: PropTypes.node\n};\nInvTable.defaultProps = {\n  fallback: /*#__PURE__*/React.createElement(Bullseye, {\n    className: \"pf-u-p-lg\"\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    size: \"xl\"\n  }))\n};\nexport default InvTable;","import React from 'react';\nimport { osFilterTypes } from '../../Utilities/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst osVersionFilter = (currentFilter = {}, apply) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = osFilterTypes.slice().reverse();;\n\n    let { os: currentValue } = currentFilter;\n    const currentOsVersionsArray = typeof currentValue === 'string' && currentValue.split(',') || [];\n\n    const filterByOsType = (_, value) => {\n        if (currentValue && !currentValue.includes(value)) {\n            apply({ filter: { os: `${currentOsVersionsArray.join(',')},${value}` } });\n        }\n        else if (currentValue && currentValue.includes(value)) {\n            const remainingOs = currentOsVersionsArray.filter(os => os !== value);\n\n            apply({ filter: { os: remainingOs.length > 0 && `${remainingOs.join(',')}` || undefined } });\n        } else {\n            apply({ filter: { os: value !== '' && value || undefined  } });\n        }\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: intl.formatMessage(messages.labelsFiltersOsVersion),\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={SelectVariant.checkbox}\n                        typeAheadAriaLabel={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        onToggle={onToggle}\n                        onSelect={filterByOsType}\n                        selections={currentOsVersionsArray}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-os-version-filter'}\n                        placeholderText={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        {...(numOptions < versionFromNewestToOldest.length\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                key={index}\n                                value={option.value}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n};\n\nexport default osVersionFilter;\n","import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}\n                        data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                        data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                    >{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { paths } from '../../Routes';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history, headerOUIA }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={paths.advisories.to}\n                title={paths.advisories.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.advisories.title}`}\n            />\n            <Tab\n                eventKey={paths.systems.to}\n                title={paths.systems.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.systems.title}`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object,\n    headerOUIA: propTypes.string\n};\n\nexport default withRouter(HeaderTabs);\n","import {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <PageHeaderTitle title={title} />\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA = {headerOUIA}/>}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string\n};\n\nexport default Header;\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport \"../../Spinner/./spinner.css\";\n\nvar Spinner = function Spinner(_ref) {\n  var centered = _ref.centered,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, [\"centered\", \"className\"]);\n\n  var spinnerClasses = classNames('ins-c-spinner', _defineProperty({}, \"ins-m-center\", centered), className);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"status\",\n    className: spinnerClasses\n  }, props), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"pf-u-screen-reader\"\n  }, \"Loading...\"));\n};\n\nSpinner.propTypes = {\n  centered: PropTypes.bool,\n  className: PropTypes.string\n};\nexport default Spinner;","/* eslint-disable react/prop-types */\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nexport const WithLoaderVariants = {\n    spinner: 'spinner',\n    skeleton: 'skeleton'\n};\n\nconst loaderMap = {\n    [WithLoaderVariants.skeleton]: ({ size, isDark }) => (\n        <Skeleton size={size} isDark={isDark} />\n    ),\n    [WithLoaderVariants.spinner]: ({ centered }) => (\n        <Spinner centered={centered} />\n    )\n};\n\nexport const WithLoader = ({ loading, variant, children, ...props }) => {\n    if (loading !== false) {\n        return loaderMap[variant](props);\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    loading: propTypes.bool,\n    variant: propTypes.string,\n    children: propTypes.any\n};\n\nexport default WithLoader;\n","import React, { useState, useMemo } from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport { cvesTableColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCves } from '../../store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport { createCvesRows } from '../../Utilities/DataMappers';\nimport { sortCves } from '..//../Utilities/Helpers';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst CvesModal = ({ cveIds }) =>{\n    const dispatch = useDispatch();\n    const [cves, setCves] = useState([]);\n    const [rows, setRows] = useState([]);\n    const [page, setPage] = useState(1);\n    const [perPage, setPerPage] = useState(10);\n    const [search, setSearch] = useState(undefined);\n    const [sortBy, setSortBy] = useState({\n        direction: SortByDirection.asc,\n        index: 0\n    });\n\n    const data = useSelector(({ CvesListStore }) => CvesListStore.rows);\n\n    const status = useSelector(\n        ({ CvesListStore }) => CvesListStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchCves({ cveIds }));\n    }, []);\n\n    React.useMemo(() => {\n        setRows(cves.slice((page - 1) * perPage, page * perPage));\n    }, [cves, page, perPage, sortBy]);\n\n    useMemo(() => {\n        const sortedCves = (search !== undefined && search !== '')\n            && data.filter(\n                cve => {\n                    const { attributes: { synopsis } } = cve;\n                    return synopsis && search && (synopsis.toLowerCase().includes(search.toLowerCase()));\n                }\n            ) || data;\n\n        setCves(createCvesRows((sortedCves.length !== 0 || search) && sortedCves || data));\n    }, [search, data]);\n\n    const handleClose = () => {\n        setRows(undefined);\n    };\n\n    const handleFilter = ({ search }) =>{\n        setPage(page);\n        setSearch(search);\n    };\n\n    const handlePageChange = (_, page) => {\n        setPage(page);\n    };\n\n    const handlePerPageChange = (_, perPage) => {\n        setPage(1);\n        setPerPage(perPage);\n    };\n\n    const handleSort = (_, index, direction) => {\n        const { sortBy, sortedCves } = sortCves(cves, index, direction);\n\n        setSortBy(sortBy);\n        setCves(sortedCves);\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant='small'\n                title={intl.formatMessage(messages.labelsCves)}\n                isOpen={Boolean(rows)}\n                onClose={handleClose}\n            >\n                <TableView\n                    columns={cvesTableColumns}\n                    onSetPage={handlePageChange}\n                    onPerPageSelect={handlePerPageChange}\n                    apply={handleFilter}\n                    tableOUIA={'cves-table'}\n                    paginationOUIA={'cves-pagination'}\n                    onSort={handleSort}\n                    sortBy={sortBy}\n                    store={{\n                        rows,\n                        metadata: { limit: perPage, offset: (page - 1) * perPage, total_items: cves && cves.length },\n                        status, queryParams: { filter: {}, search }\n                    }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(handleFilter, search, '',\n                                intl.formatMessage(messages.labelsFiltersCvesSearchPlaceHolder))\n                        ]\n                    }}\n                />\n            </Modal>\n        </React.Fragment>\n    );\n\n};\n\nCvesModal.propTypes = {\n    cveIds: propTypes.array\n};\n\nexport default CvesModal;\n","import { Split, SplitItem, Title } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Split className='infobox' hasGutter>\n            <SplitItem isFilled>\n                <Flex flex={{ default: 'column' }}>\n                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                        <Title headingLevel='h5'>\n                            {intl.formatMessage(messages.labelsColumnsSeverity)}\n                        </Title>\n                    </FlexItem>\n                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                        <Flex flex={{ default: 'row' }}>\n                            <FlexItem>\n                                <SecurityIcon size='sm' color={severity.color} />\n                            </FlexItem>\n                            <FlexItem>\n                                {severity.label}\n                            </FlexItem>\n                        </Flex>\n                    </FlexItem>\n                </Flex>\n            </SplitItem>\n        </Split>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import {\n    Button, Grid, GridItem, Stack, StackItem, Text, TextContent,\n    FlexItem, TextVariants, Flex, Split, SplitItem, Title\n} from '@patternfly/react-core';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport messages from '../../Messages';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport CvesModal from '../../SmartComponents/AdvisoryDetail/CvesModal';\nimport { getSeverityById, isRHAdvisory, truncateDescription } from '../../Utilities/Helpers';\nimport { intl } from '../../Utilities/IntlProvider';\nimport RebootRequired from '../Snippets/RebootRequired';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\nimport ExternalLink from '../Snippets/ExternalLink';\nimport AdvisoryType from '../AdvisoryType/AdvisoryType';\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const [CvesInfoModal, setCvesModal] = useState(() => () => null);\n    const [wordLength, setWordLength] = useState(1000);\n    const severityObject = getSeverityById(attributes.severity);\n    const cves = attributes.cves;\n\n    const showCvesModal = () => {\n        setCvesModal(() => () => <CvesModal cveIds={cves} />);\n    };\n\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                attributes.description && truncateDescription(attributes.description, wordLength, setWordLength)\n                            }\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsPublicDate, {\n                                        date: processDate(\n                                            attributes.public_date\n                                        )\n                                    })}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsModifiedDate, {\n                                        date: processDate(\n                                            attributes.modified_date\n                                        )\n                                    })}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        {isRHAdvisory(attributes.id) &&\n                            <StackItem>\n                                <ExternalLink link={`https://access.redhat.com/errata/${attributes.id}`}\n                                    text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n                            </StackItem>\n                        }\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                <Flex flex={{ default: 'column' }}>\n                    {attributes.advisory_type_name && (<FlexItem>\n                        <Split className='infobox' hasGutter>\n                            <SplitItem isFilled>\n                                <Flex flex={{ default: 'column' }}>\n                                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                                        <Title headingLevel='h5'>\n                                            {intl.formatMessage(messages.titlesAdvisoryType)}\n                                        </Title>\n                                    </FlexItem>\n                                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                                        <AdvisoryType\n                                            type={attributes.advisory_type_name}\n                                        />\n                                    </FlexItem>\n                                </Flex>\n                            </SplitItem>\n                        </Split>\n                    </FlexItem>\n                    )}\n                    {severityObject.value !== 0 && (<FlexItem>\n                        <AdvisorySeverityInfo severity={severityObject}/>\n                    </FlexItem>\n                    )}\n                    {attributes.reboot_required && (<FlexItem spacer={{ default: 'spacerMd' }}>\n                        <RebootRequired />\n                    </FlexItem>)}\n                </Flex>\n            </GridItem>\n            {cves && cves.length !== 0 && (\n                <GridItem md={4} sm={12}>\n                    <TextContent>\n                        <Text component={TextVariants.h3}>\n                            {intl.formatMessage(messages.labelsCves)}\n                        </Text>\n                        <Button variant='link' style={{ padding: 0 }} onClick={showCvesModal} >\n                            {intl.formatMessage(messages.labelsCvesButton, { cvesCount: cves.length })}\n                        </Button>\n                    </TextContent>\n                </GridItem>\n            )}\n            <CvesInfoModal />\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport osVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changeAffectedSystemsParams, clearAdvisorySystemsReducer, clearInventoryReducer } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { exportAdvisorySystemsCSV, exportAdvisorySystemsJSON, fetchAdvisorySystems } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips, decodeQueryparams, filterRemediatableSystems,\n    persistantParams, remediationProvider, removeUndefinedObjectKeys, systemsColumnsMerger\n} from '../../Utilities/Helpers';\nimport {\n    useBulkSelectConfig, useGetEntities, useOnExport, useOnSelect, useRemoveFilter\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { systemsListColumns, systemsRowActions } from '../Systems/SystemsListAssets';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\n\nconst AdvisorySystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const [isRemediationOpen, setRemediationOpen] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const history = useHistory();\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const queryParams = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore?.queryParams || {}\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => {\n            dispatch(clearInventoryReducer());\n            dispatch(clearAdvisorySystemsReducer());\n        };\n    }, []);\n\n    function apply(params) {\n        dispatch(changeAffectedSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            osVersionFilter(filter, apply)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n        onDelete: deleteFilters\n    };\n\n    async function showRemediationModal(data) {\n        const resolvedData = await data;\n        setRemediationModalCmp(() =>\n            () => <RemediationWizard\n                data={resolvedData}\n                isRemediationOpen\n                setRemediationOpen={setRemediationOpen} />);\n        setRemediationOpen(!isRemediationOpen);\n    }\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const fetchAllData = () =>\n        fetchAdvisorySystems({ ...queryParams, id: advisoryName, limit: -1 }).then(filterRemediatableSystems);\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllData, selectRows);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const getEntites = useGetEntities(fetchAdvisorySystems, apply, { id: advisoryName }, history);\n\n    const onExport = useOnExport(advisoryName, queryParams, {\n        csv: exportAdvisorySystemsCSV,\n        json: exportAdvisorySystemsJSON\n    }, dispatch);\n\n    const remediationDataProvider = () => remediationProvider(\n        advisoryName,\n        removeUndefinedObjectKeys(selectedRows),\n        remediationIdentifiers.advisory\n    );\n\n    return (\n        <React.Fragment>\n            {isRemediationOpen && <RemediationModalCmp /> || null}\n            {status.hasError && <ErrorHandler code={status.code} /> ||\n                <InventoryTable\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    ignoreRefresh\n                    hideFilters={{ all: true, tags: false }}\n                    columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, false)}\n                    showTags\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    paginationProps={{\n                        isDisabled: totalItems === 0\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        register({\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(systemsListColumns(false), modifyInventory),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        });\n                    }}\n                    getEntities={getEntites}\n                    actions={systemsRowActions(showRemediationModal)}\n                    tableProps={{\n                        canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig={activeFiltersConfig}\n                    exportConfig={{\n                        isDisabled: totalItems === 0,\n                        onSelect: onExport\n                    }}\n                    bulkSelect={\n                        onSelect && useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)\n                    }\n                    dedicatedAction={(\n                        <AsyncRemediationButton\n                            remediationProvider={remediationDataProvider}\n                            isDisabled={\n                                arrayFromObj(selectedRows).length === 0\n                            }\n                        />\n                    )}\n\n                />\n            }\n        </React.Fragment>\n    );\n};\n\nAdvisorySystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AdvisorySystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { paths } from '../../Routes';\nimport { clearAdvisoryDetailStore, clearEntitiesStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport AdvisorySystems from '../AdvisorySystems/AdvisorySystems';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst AdvisoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [advisoryName] = React.useState(match.params.advisoryId);\n\n    const pageTitle = `${advisoryName} - ${intl.formatMessage(messages.titlesAdvisories)}`;\n    setPageTitle(pageTitle);\n\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearEntitiesStore());\n            dispatch(clearAdvisoryDetailStore());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                headerOUIA={'advisory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchAdvisories),\n                        to: paths.advisories.to,\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable /> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        {status.hasError\n                            && < ErrorHandler />\n                            || (!status.isLoading && <AdvisorySystems advisoryName={advisoryName} />)}\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisoryDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(AdvisoryDetail);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n","import { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            newState.status = { isLoading: true, hasError: true };\n            return newState;\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["BaseInvTable","props","history","useHistory","store","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","component","ref","innerRef","propTypes","InvTable","defaultProps","className","size","currentFilter","apply","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","osFilterTypes","reverse","currentValue","os","currentOsVersionsArray","split","filterByOsType","_","value","includes","filter","join","remainingOs","length","undefined","onToggle","onViewMoreClick","type","conditionalFilterType","label","intl","messages","filterValues","children","Select","variant","SelectVariant","typeAheadAriaLabel","onSelect","selections","placeholderText","loadingVariant","text","onClick","style","maxHeight","overflow","slice","map","option","index","SelectOption","key","HeaderBreadcrumbs","items","headerOUIA","Breadcrumb","Boolean","item","BreadcrumbItem","title","isActive","to","Link","PropTypes","HeaderTabs","Tabs","event","tabString","push","activeKey","location","pathname","Tab","eventKey","paths","withRouter","Header","showTabs","breadcrumbs","PageHeader","PageHeaderTitle","Spinner","_ref","centered","spinnerClasses","role","WithLoaderVariants","spinner","skeleton","loaderMap","isDark","Skeleton","WithLoader","loading","CvesModal","cveIds","dispatch","useDispatch","useState","cves","setCves","rows","setRows","page","setPage","perPage","setPerPage","search","setSearch","direction","SortByDirection","sortBy","setSortBy","data","useSelector","CvesListStore","status","fetchCves","useMemo","sortedCves","cve","synopsis","attributes","toLowerCase","createCvesRows","handleFilter","Modal","onClose","TableView","columns","cvesTableColumns","onSetPage","onPerPageSelect","tableOUIA","paginationOUIA","onSort","sortCves","metadata","limit","offset","total_items","queryParams","filterConfig","searchFilter","AdvisorySeverityInfo","severity","Split","hasGutter","SplitItem","isFilled","Flex","flex","default","FlexItem","spacer","Title","headingLevel","color","AdvisoryHeader","isLoading","CvesInfoModal","setCvesModal","wordLength","setWordLength","severityObject","getSeverityById","Grid","minHeight","GridItem","md","sm","Stack","StackItem","whiteSpace","description","truncateDescription","public_date","date","processDate","modified_date","isRHAdvisory","id","ExternalLink","link","advisory_type_name","AdvisoryType","reboot_required","RebootRequired","TextContent","Text","TextVariants","Button","padding","cvesCount","AdvisorySystems","advisoryName","isRemediationOpen","setRemediationOpen","RemediationModalCmp","setRemediationModalCmp","decodedParams","decodeQueryparams","systems","entities","shallowEqual","totalItems","total","AdvisorySystemsStore","selectedRows","systemProfile","selectedTags","sort","params","changeAffectedSystemsParams","clearInventoryReducer","clearAdvisorySystemsReducer","useRemoveFilter","deleteFilters","osVersionFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","resolvedData","RemediationWizard","useOnSelect","fetchAdvisorySystems","then","filterRemediatableSystems","toSelect","payload","selectedCount","arrayFromObj","getEntites","useGetEntities","onExport","useOnExport","csv","exportAdvisorySystemsCSV","json","exportAdvisorySystemsJSON","hasError","ErrorHandler","code","InventoryTable","isFullView","autoRefresh","initialLoading","ignoreRefresh","hideFilters","all","tags","defaultColumns","systemsColumnsMerger","showTags","customFilters","patchParams","paginationProps","isDisabled","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","modifyInventory","persistantParams","getEntities","actions","systemsRowActions","tableProps","canSelectAll","TableVariant","isStickyHeader","exportConfig","bulkSelect","useBulkSelectConfig","dedicatedAction","AsyncRemediationButton","remediationProvider","removeUndefinedObjectKeys","remediationIdentifiers","AdvisoryDetail","match","advisoryId","pageTitle","setPageTitle","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearEntitiesStore","clearAdvisoryDetailStore","clearNotifications","Unavailable","Main","initialState","state","loaded","createSystemsRows","modifyPackageSystems","createPackageSystemsRows","inventoryModifier","action","newState","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}