{"version":3,"file":"js/InventoryDetail.eebba1bbe00fa07d7e96.js","mappings":"yPAoBA,QAPyB,SAAUA,GAC/B,IAAIC,EAAYD,EAAGC,UAAWC,EAdI,SAAUC,EAAGC,GAC/C,IAAIC,EAAI,CAAC,EACT,IAAK,IAAIC,KAAKH,EAAOI,OAAOC,UAAUC,eAAeC,KAAKP,EAAGG,IAAMF,EAAEO,QAAQL,GAAK,IAC9ED,EAAEC,GAAKH,EAAEG,IACb,GAAS,MAALH,GAAqD,mBAAjCI,OAAOK,sBACtB,KAAIC,EAAI,EAAb,IAAgBP,EAAIC,OAAOK,sBAAsBT,GAAIU,EAAIP,EAAEQ,OAAQD,IAC3DT,EAAEO,QAAQL,EAAEO,IAAM,GAAKN,OAAOC,UAAUO,qBAAqBL,KAAKP,EAAGG,EAAEO,MACvER,EAAEC,EAAEO,IAAMV,EAAEG,EAAEO,IAF4B,CAItD,OAAOR,CACX,CAI0CW,CAAOhB,EAAI,CAAC,cAIlD,OAHA,IAAAiB,YAAU,WACNC,QAAQC,MAAM,sDAAsDC,OAAOnB,EAAW,KAAMC,EAChG,GAAG,KACK,UAAM,MAAO,CAAEmB,SAAU,EAAC,SAAK,KAAM,CAAEA,SAAU,wCAAyC,UAAM,KAAM,CAAEA,SAAU,CAAC,kBAAmBpB,MAAe,SAAK,OAAQ,CAAEoB,SAAU,wDAC1L,C,qGCbMC,EAAkB,SAAHC,GAA4C,IAAtCC,EAAaD,EAAbC,cAAeC,EAAgBF,EAAhBE,iBACtC,OAAQC,IAAAA,cAAAA,IAAAA,SAAA,KACFF,EAAcG,4BAA+BD,IAAAA,cAACE,EAAAA,EAAoB,CAChEC,0BAA2BL,EAC3BM,4BAA6BL,EAC7BM,WAAYP,EAAcO,aAE5BP,EAAcQ,sBAChBN,IAAAA,cAACO,EAAAA,EAAc,CAACF,WAAYP,EAAcO,WAAYG,iBAAkBT,IAEhF,EAEAH,EAAgBa,UAAY,CACxBX,cAAeW,IAAAA,OACfV,iBAAkBU,IAAAA,MAEtB,S,kPCLaC,EAA8B,SAACC,EAAaC,EAAcC,GAAI,OAAMb,IAAAA,cAACc,EAAAA,EAAQ,KACrFD,EAAKE,cACFC,EAAAA,EAASL,GACT,CAAEC,aAAAA,EAAcK,EAAG,mBAAAC,EAAAC,UAAA/B,OAAIgC,EAAM,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAANF,EAAME,GAAAH,UAAAG,GAAA,OAAKtB,IAAAA,cAAA,SAAIoB,EAAW,IAE9C,ECbLlB,EAAuB,SAAHL,GAA8E,IAAA0B,EAAA1B,EAAxEM,0BAAAA,OAAyB,IAAAoB,EAAG,CAAC,EAACA,EAAEnB,EAA2BP,EAA3BO,4BAA6BS,EAAIhB,EAAJgB,KACjFR,EAA2CF,EAA3CE,WAAYJ,EAA+BE,EAA/BF,2BACpBuB,GAAqDC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1DI,EAAmBF,EAAA,GAAEG,EAAqBH,EAAA,GACjDI,GAA4CL,EAAAA,EAAAA,WAAS,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAnDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAElCG,EAAoB,SAACC,GACvB/B,EAA4B,CACxBH,4BAA6BA,EAC7BI,WAAY,GACZ8B,cAAAA,GAER,EAEMC,EAAmB,WACrBF,GAAkB,EACtB,EAEMG,ECd4B,SAACH,EAAmBN,GACtD,IAAMU,GAAWC,EAAAA,EAAAA,MACXC,EAAoB,eAAA3C,GAAA4C,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,OAAAD,IAAAA,MAAA,SAAAE,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,GACJC,EAAAA,EAAAA,IAA2B,CAAEC,cAAepB,IAAsB,OAGjE,MAHVgB,EAAAK,KAGDC,SACPhB,GAAkB,GAClBI,GACIa,EAAAA,EAAAA,KACIC,EAAAA,EAAAA,KAAqCxB,aAAmB,EAAnBA,EAAqBxC,SAAU,GAAGiE,WAGlF,wBAAAT,EAAAU,OAAA,GAAAX,EAAA,KACJ,kBAZyB,OAAA9C,EAAA0D,MAAA,KAAApC,UAAA,KAc1B,OAAOqB,CACX,CDH+BgB,CAAuBtB,EAAmBN,IAErErC,EAAAA,EAAAA,YAAU,WACN0C,GAAkB,GDvBc,SAAC5B,GACrC,OAAOoD,EAAAA,EAAAA,IAAa,CAChBC,OAAQ,EAAG,wBAAyB,OACpCC,OAAQ,CAAEC,MAAO,EAAC,GAAM,MACzBC,MAAK,SAACC,GACL,OAAOzD,EAAWsD,QAAO,SAAAI,GAAQ,OAC7BD,aAAsB,EAAtBA,EAAwBE,KAAKC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,KAAOJ,CAAQ,GAAC,GAE3E,GACJ,CCgBQK,CAAyB/D,GAAYwD,MAAK,SAAAQ,GACtCxC,EAAsBwC,GACtBpC,GAAkB,EACtB,GACJ,GAAG,CAAC5B,IAEJ,IAAMiE,EAA8BjE,EAAWjB,OAASwC,EAAoBxC,OAE5E,OACIY,IAAAA,cAACuE,EAAAA,EAAK,CACFC,QAAS,QACTC,OAAQtE,EAA0BF,2BAClCyE,MAAO7D,EAAKE,cAAcC,EAAAA,EAAAA,0BAC1B2D,QAASvC,EACTwC,iBAAiB,UACjBC,QAAS,CACL7E,IAAAA,cAAC8E,EAAAA,GAAM,CACHC,IAAI,UACJP,QAAQ,SACRQ,QAAS3C,EACT4C,WAAYjD,GAAiD,IAA/BJ,EAAoBxC,QAEjDyB,EAAKE,cAAcC,EAAAA,EAAAA,eAExBhB,IAAAA,cAAC8E,EAAAA,GAAM,CAACC,IAAI,SAASP,QAAQ,OAAOQ,QAAS5C,GACxCvB,EAAKE,cAAcC,EAAAA,EAAAA,iBAI5BhB,IAAAA,cAACkF,EAAAA,EAAI,CAACC,WAAS,GACVnD,EACKhC,IAAAA,cAACoF,EAAAA,EAAQ,MACTpF,IAAAA,cAACqF,EAAAA,SAAQ,KACNzD,EAAoBxC,OAAS,GAC1BsB,EAA4B,+BAAgCkB,EAAoBxC,OAAQyB,GAE3FyD,EAA8B,GAC3B5D,EAA4B,6BAA8B4D,EAA6BzD,KAOnH,EAEAX,EAAqBO,UAAY,CAC7BI,KAAMJ,IAAAA,IACNL,4BAA6BK,IAAAA,KAC7BN,0BAA2BM,IAAAA,QAE/B,SAAe6E,EAAAA,EAAAA,IAAWpF,E,mRElFtBqF,EAAsC,WAStC,OARAA,EAAW1G,OAAO2G,QAAU,SAAS7G,GACjC,IAAK,IAAIF,EAAGU,EAAI,EAAGsG,EAAItE,UAAU/B,OAAQD,EAAIsG,EAAGtG,IAE5C,IAAK,IAAIP,KADTH,EAAI0C,UAAUhC,GACON,OAAOC,UAAUC,eAAeC,KAAKP,EAAGG,KACzDD,EAAEC,GAAKH,EAAEG,IAEjB,OAAOD,CACX,EACO4G,EAAShC,MAAMmC,KAAMvE,UAChC,EAUIwE,EAAoB,SAAUnH,GAC9B,IAAIoH,GAAU,IAAAC,cACVC,GAAQ,UACRC,EAAMvH,EAAMD,UAChB,OAAQ,SAAKwH,EAAKR,EAAS,CAAES,UAAW,IAAWxH,EAAMwH,UAAW,cAAgB,CAAErG,UAAU,SAAK,EAAAsG,SAAUV,EAAS,CAAEW,SAAU1H,EAAM0H,UAAY,CAAEvG,UAAU,SAAK,EAAAwG,kBAAmBZ,EAAS,CAAEK,QAASA,EAASE,MAAOA,EAAOM,QAAS,YAAaC,OAAQ,kBAAmBC,MAAO,YAAaC,gBAAgB,SAAKC,EAAA,EAAoBjB,EAAS,CAAEhH,UAAW,sBAAuBqH,QAASA,EAASE,MAAOA,GAAStH,IAASiI,IAAKjI,EAAMkI,UAAYlI,SACtc,EACAmH,EAAkBlF,UAAY,CAC1ByF,SAAU,SACVQ,SAAU,WACVnI,UAAW,WACXyH,UAAW,YAEf,IAAIW,EAAgB,gBAAiB,SAAUnI,EAAOiI,GAAO,OAAO,SAAKd,EAAmBJ,EAAS,CAAEmB,SAAUD,GAAOjI,GAAS,IACjImI,EAAclG,UAAY,CACtByF,SAAU,SACV3H,UAAW,WACXyH,UAAW,YAEfW,EAAcC,aAAe,CACzBV,UAAW,SAAK,EAAAW,SAAUtB,EAAS,CAAES,UAAW,aAAe,CAAErG,UAAU,SAAK,EAAAmH,QAAS,CAAEC,KAAM,UACjGxI,UAAW,WAEf,UC1CA,IAAI,EAAsC,WAStC,OARA,EAAWM,OAAO2G,QAAU,SAAS7G,GACjC,IAAK,IAAIF,EAAGU,EAAI,EAAGsG,EAAItE,UAAU/B,OAAQD,EAAIsG,EAAGtG,IAE5C,IAAK,IAAIP,KADTH,EAAI0C,UAAUhC,GACON,OAAOC,UAAUC,eAAeC,KAAKP,EAAGG,KACzDD,EAAEC,GAAKH,EAAEG,IAEjB,OAAOD,CACX,EACO,EAAS4E,MAAMmC,KAAMvE,UAChC,EAUI6F,EAA0B,SAAUxI,GACpC,IAAIoH,GAAU,IAAAC,cACVC,GAAQ,UACRC,EAAMvH,EAAMD,UAChB,OAAQ,SAAKwH,EAAK,EAAS,CAAEC,UAAW,IAAWxH,EAAMwH,UAAW,cAAgB,CAAErG,UAAU,SAAK,EAAAsG,SAAU,EAAS,CAAEC,SAAU1H,EAAM0H,UAAY,CAAEvG,UAAU,SAAK,EAAAwG,kBAAmB,EAAS,CAAEP,QAASA,EAASE,MAAOA,EAAOM,QAAS,YAAaC,OAAQ,wBAAyBC,MAAO,YAAaC,gBAAgB,SAAKC,EAAA,EAAoB,EAAS,CAAEjI,UAAW,sBAAuBqH,QAASA,EAASE,MAAOA,GAAStH,IAASiI,IAAKjI,EAAMkI,UAAYlI,SAC5c,EACAwI,EAAwBvG,UAAY,CAChCyF,SAAU,SACVQ,SAAU,WACVnI,UAAW,WACXyH,UAAW,YAEf,IAAIiB,EAAsB,gBAAiB,SAAUzI,EAAOiI,GAAO,OAAO,SAAKO,EAAyB,EAAS,CAAEE,WAAYT,GAAOjI,GAAS,IAC/IyI,EAAoBxG,UAAY,CAC5ByF,SAAU,SACV3H,UAAW,WACXyH,UAAW,YAEfiB,EAAoBL,aAAe,CAC/BV,UAAW,SAAK,EAAAW,SAAU,EAAS,CAAEb,UAAW,aAAe,CAAErG,UAAU,SAAK,EAAAmH,QAAS,CAAEC,KAAM,UACjGxI,UAAW,WAEf,U,4sBCoFA,QAzGwB,WACpB,IAAQ4I,GAAgBC,EAAAA,EAAAA,aAAhBD,YACFrB,GAAQuB,EAAAA,EAAAA,MACRC,GAASC,EAAAA,EAAAA,KAETjF,GAAWC,EAAAA,EAAAA,MAEjBiF,GAAwDC,EAAAA,EAAAA,KACpD,SAAA5H,GAAoB,OAAAA,EAAjB6H,iBAAyC,IADxCC,EAAiBH,EAAjBG,kBAAmBC,EAAYJ,EAAZI,aAAcC,EAAUL,EAAVK,WAInBC,GAAgBL,EAAAA,EAAAA,KAClC,SAAAM,GAAA,IAAAC,EAAGC,EAAaF,EAAbE,cAAa,OAA4B,QAA5BD,EAAOC,aAAa,EAAbA,EAAeC,cAAM,IAAAF,EAAAA,EAAI,CAAC,CAAC,IAD9CG,aAIRC,GAAgGC,EAAAA,EAAAA,KAAxFvI,EAAasI,EAAbtI,cAAeC,EAAgBqI,EAAhBrI,iBAAkBuI,EAAwBF,EAAxBE,yBAA0BC,EAAwBH,EAAxBG,0BAEnEhJ,EAAAA,EAAAA,YAAU,WAEN,OADA+C,GAASkG,EAAAA,EAAAA,IAAyBrB,IAC3B,WACH7E,GAASmG,EAAAA,EAAAA,MACb,CACJ,GAAG,CAAC3I,EAAcqC,gBAElB,IAAMuG,EAAYZ,GAAe,GAAJpI,OAAOoI,EAAW,OAAApI,OAAMmB,EAAAA,EAAAA,cAAmBG,EAAAA,EAAAA,iBACxE2H,EAAAA,EAAAA,IAAaD,GAEb,IAIME,GAAoBC,EAAAA,EAAAA,IAAeC,EAAAA,GAAAA,UAAwBxB,GAEjE,OACItH,IAAAA,cAAC2G,EAAa,CACVoC,OAAQ,SAAAC,GAAyB,IAAtBC,EAAeD,EAAfC,gBACPnD,EAAMoD,gBAAeC,EAAAA,EAAAA,IAAeC,EAAAA,EAAC,CAAC,EAC/BC,EAAAA,GACAJ,EAAgBvB,EAAAA,KAE3B,EACAP,YAAaA,GAEbnH,IAAAA,cAACJ,EAAAA,EAAe,CAACE,cAAeA,EAAeC,iBAAkBA,IACjEC,IAAAA,cAACsJ,EAAAA,EAAM,CACH5E,MAAM,GACN6E,WAAY,oBACZC,YAAa,CACT,CACI9E,MAAO7D,EAAAA,EAAAA,cAAmBG,EAAAA,EAAAA,oBAC1ByI,GAAI,WACJC,UAAU,GAEd5B,GAAe,CACXpD,MAAOoD,EACP4B,UAAU,KAIlB1J,IAAAA,cAACiH,EAAmB,CAChB0C,UAAQ,EACRC,UAAQ,EACRzC,YAAaA,EACbtC,QAAS+D,GAAqB,CAC1B,CACIlE,MAAO7D,EAAAA,EAAAA,cAAmBG,EAAAA,EAAAA,sBAC1B+D,IAAK,qBACLC,QAxCG,WACvBsD,EAAyBnB,EAC7B,GAwCoB,CACIzC,MAAO7D,EAAAA,EAAAA,cAAmBG,EAAAA,EAAAA,oCAC1B+D,IAAK,uBACLE,YAAa2C,EACb5C,QAAS,kBAAMuD,EAAyB,CAACpB,GAAa,IAG9D0C,QAAS,IAET7J,IAAAA,cAACkF,EAAAA,EAAI,KACA0C,GAAgB5H,IAAAA,cAACc,EAAAA,EAAQ,KACtBd,IAAAA,cAAC8J,EAAAA,EAAW,KACR9J,IAAAA,cAAC+J,EAAAA,EAAI,KACAlJ,EAAAA,EAAAA,cAAmBG,EAAAA,EAAAA,uBAAgC,IACpDhB,IAAAA,cAACgK,EAAAA,KAAI,CAACP,GAAI,CAAEQ,SAAU,cAAFvK,OAAgBmI,IAAgB7B,UAAU,cACzD4B,MAKjB5H,IAAAA,cAACc,EAAAA,EAAQ,KACJ6G,GACI3H,IAAAA,cAACkK,EAAAA,EAAK,CAAClE,UAAU,aAAamE,UAAQ,EAAC3F,QAAQ,OAC5CE,MAAO7D,EAAAA,EAAAA,cAAmBG,EAAAA,EAAAA,0BAOlDhB,IAAAA,cAACoK,EAAAA,EAAI,KACDpK,IAAAA,cAACqK,EAAAA,EAAY,CAAClD,YAAaA,KAG3C,C,uEChFA,QAlCyB,SAACmD,GACtB,IAAA9I,GAA0CC,EAAAA,EAAAA,UAAS,CAC/CnB,sBAAsB,EACtBL,4BAA4B,EAC5BkC,eAAe,EACf9B,WAAY,KACdqB,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GALK1B,EAAa4B,EAAA,GAAE3B,EAAgB2B,EAAA,GA8BtC,MAAO,CAAE5B,cAAAA,EAAeC,iBAAAA,EAAkBuI,yBAvBT,SAACvE,GAC9BhE,EAAiB,CACbO,sBAAsB,EACtBD,WAAgC,iBAAb0D,GAAsC,KAAbA,EACtC,CAACA,IACDwG,EAAAA,EAAAA,IAA8BD,GACpCnI,eAAe,GAGvB,EAcoEoG,yBAZnC,SAAClI,GAC9BN,EAAiB,CACbE,4BAA4B,EAC5BI,WAAAA,EACA8B,eAAe,GAEvB,EAM8FqI,sBAJhE,SAACC,GAC3B1K,EAAiB,CAAEO,sBAAsB,EAAMmK,WAAAA,GACnD,EAGJ,C","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./src/PresentationalComponents/PatchSetWrapper/PatchSetWrapper.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/DetailWrapper.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryDetailHead.js","webpack:///./src/SmartComponents/SystemDetail/InventoryDetail.js","webpack:///./src/Utilities/usePatchSetState.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport PatchSetWizard from '../../SmartComponents/PatchSetWizard/PatchSetWizard';\nimport UnassignSystemsModal from '../../SmartComponents/Modals/UnassignSystemsModal';\n\nconst PatchSetWrapper = ({ patchSetState, setPatchSetState }) => {\n    return (<>\n        {(patchSetState.isUnassignSystemsModalOpen) && <UnassignSystemsModal\n            unassignSystemsModalState={patchSetState}\n            setUnassignSystemsModalOpen={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n        />}\n        {(patchSetState.isPatchSetWizardOpen) &&\n        <PatchSetWizard systemsIDs={patchSetState.systemsIDs} setBaselineState={setPatchSetState} />}\n    </>);\n};\n\nPatchSetWrapper.propTypes = {\n    patchSetState: propTypes.object,\n    setPatchSetState: propTypes.func\n};\nexport default PatchSetWrapper;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../../Utilities/constants';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalToggle(true);\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseDetailWrapper = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./DetailWrapper\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseDetailWrapper.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar DetailWrapper = React.forwardRef(function (props, ref) { return _jsx(BaseDetailWrapper, __assign({ innerRef: ref }, props)); });\nDetailWrapper.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nDetailWrapper.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default DetailWrapper;\n//# sourceMappingURL=DetailWrapper.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInventoryDetailHead = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryDetailHead\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInventoryDetailHead.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InventoryDetailHead = React.forwardRef(function (props, ref) { return _jsx(BaseInventoryDetailHead, __assign({ innerProps: ref }, props)); });\nInventoryDetailHead.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInventoryDetailHead.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InventoryDetailHead;\n//# sourceMappingURL=InventoryDetailHead.js.map","import React, { useEffect } from 'react';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useSelector, useDispatch, useStore } from 'react-redux';\nimport { combineReducers } from 'redux';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { defaultReducers } from '../../store';\nimport { SystemDetailStore } from '../../store/Reducers/SystemDetailStore';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { setPageTitle, useFeatureFlag } from '../../Utilities/Hooks';\nimport { InventoryDetailHead, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Alert, Grid, GridItem, TextContent, Text } from '@patternfly/react-core';\nimport { fetchSystemDetailsAction } from '../../store/Actions/Actions';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';;\nimport PatchSetWrapper from '../../PresentationalComponents/PatchSetWrapper/PatchSetWrapper';\nimport usePatchSetState from '../../Utilities/usePatchSetState';\nimport { featureFlags } from '../../Utilities/constants';\nimport { Link, useParams } from 'react-router-dom';\nimport SystemDetail from './SystemDetail';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst InventoryDetail = () => {\n    const { inventoryId } = useParams();\n    const store = useStore();\n    const chrome = useChrome();\n\n    const dispatch = useDispatch();\n\n    const { hasThirdPartyRepo, patchSetName, patchSetId } = useSelector(\n        ({ SystemDetailStore }) => SystemDetailStore\n    );\n\n    const { display_name: displayName } = useSelector(\n        ({ entityDetails }) => entityDetails?.entity ?? {}\n    );\n\n    const { patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal } = usePatchSetState();\n\n    useEffect(() => {\n        dispatch(fetchSystemDetailsAction(inventoryId));\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, [patchSetState.shouldRefresh]);\n\n    const pageTitle = displayName && `${displayName} - ${intl.formatMessage(messages.titlesSystems)}`;\n    setPageTitle(pageTitle);\n\n    const openPatchSetWizard = () => {\n        openPatchSetAssignWizard(inventoryId);\n    };\n\n    const isPatchSetEnabled = useFeatureFlag(featureFlags.patch_set, chrome);\n\n    return (\n        <DetailWrapper\n            onLoad={({ mergeWithDetail }) => {\n                store.replaceReducer(combineReducers({\n                    ...defaultReducers,\n                    ...mergeWithDetail(SystemDetailStore)\n                }));\n            }}\n            inventoryId={inventoryId}\n        >\n            <PatchSetWrapper patchSetState={patchSetState} setPatchSetState={setPatchSetState} />\n            <Header\n                title=\"\"\n                headerOUIA={'inventory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchSystems),\n                        to: '/systems',\n                        isActive: false\n                    },\n                    displayName && {\n                        title: displayName,\n                        isActive: true\n                    }\n                ]}\n            >\n                <InventoryDetailHead\n                    hideBack\n                    showTags\n                    inventoryId={inventoryId}\n                    actions={isPatchSetEnabled && [\n                        {\n                            title: intl.formatMessage(messages.titlesTemplateAssign),\n                            key: 'assign-to-template',\n                            onClick: openPatchSetWizard\n                        },\n                        {\n                            title: intl.formatMessage(messages.titlesTemplateRemoveMultipleButton),\n                            key: 'remove-from-template',\n                            isDisabled: !patchSetName,\n                            onClick: () => openUnassignSystemsModal([inventoryId])\n                        }]}\n                    //FIXME: remove this prop after inventory detail gets rid of activeApps in redux\n                    appList={[]}\n                >\n                    <Grid>\n                        {patchSetName && <GridItem>\n                            <TextContent>\n                                <Text>\n                                    {intl.formatMessage(messages.labelsColumnsTemplate)}:\n                                    <Link to={{ pathname: `/templates/${patchSetId}` }} className=\"pf-u-ml-xs\">\n                                        {patchSetName}\n                                    </Link>\n                                </Text>\n                            </TextContent>\n                        </GridItem>}\n                        <GridItem>\n                            {hasThirdPartyRepo &&\n                                (<Alert className='pf-u-mt-md' isInline variant=\"info\"\n                                    title={intl.formatMessage(messages.textThirdPartyInfo)}>\n                                </Alert>)\n                            }\n                        </GridItem>\n                    </Grid>\n                </InventoryDetailHead>\n            </Header>\n            <Main>\n                <SystemDetail inventoryId={inventoryId} />\n            </Main>\n        </DetailWrapper>);\n};\n\nexport default InventoryDetail;\n","import { useState } from 'react';\nimport {\n    filterSelectedActiveSystemIDs\n} from './Helpers';\n\n/**\n* Manages unified state for patch set wizard and unassign modal.\n* @param {Object} [selectedRows] selected rows object to be removed.\n* @returns {patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal}\n*/\nconst usePatchSetState = (selectedRows) => {\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const openPatchSetAssignWizard = (systemID) => {\n        setPatchSetState({\n            isPatchSetWizardOpen: true,\n            systemsIDs: typeof systemID === 'string' && systemID !== ''\n                ? [systemID]\n                : filterSelectedActiveSystemIDs(selectedRows),\n            shouldRefresh: false\n        }\n        );\n    };\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openPatchSetEditModal = (patchSetID) => {\n        setPatchSetState({ isPatchSetWizardOpen: true, patchSetID });\n    };\n\n    return { patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal };\n};\n\nexport default usePatchSetState;\n"],"names":["_a","component","props","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","error","concat","children","PatchSetWrapper","_ref","patchSetState","setPatchSetState","React","isUnassignSystemsModalOpen","UnassignSystemsModal","unassignSystemsModalState","setUnassignSystemsModalOpen","systemsIDs","isPatchSetWizardOpen","PatchSetWizard","setBaselineState","propTypes","renderUnassignModalMessages","bodyMessage","systemsCount","intl","GridItem","formatMessage","messages","b","_len","arguments","chunks","Array","_key","_ref$unassignSystemsM","_useState","useState","_useState2","_slicedToArray","systemsWithPatchSet","setSystemWithPatchSet","_useState3","_useState4","systemsLoading","setSystemsLoading","handleModalToggle","shouldRefresh","handleModalClose","handleUnassignment","dispatch","useDispatch","handleSystemsRemoval","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","unassignSystemFromPatchSet","inventory_ids","sent","status","addNotification","patchSetUnassignSystemsNotifications","success","stop","apply","useUnassignSystemsHook","fetchSystems","limit","filter","stale","then","allSystemsWithPatchSet","systemID","data","some","system","id","filterSystemsWithoutSets","result","systemsWithoutPatchSetCount","Modal","variant","isOpen","title","onClose","titleIconVariant","actions","Button","key","onClick","isDisabled","Grid","hasGutter","Skeleton","Fragment","injectIntl","__assign","assign","n","this","BaseDetailWrapper","history","useHistory","store","Cmp","className","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","InventoryLoadError","ref","innerRef","DetailWrapper","defaultProps","Bullseye","Spinner","size","BaseInventoryDetailHead","InventoryDetailHead","innerProps","inventoryId","useParams","useStore","chrome","useChrome","_useSelector","useSelector","SystemDetailStore","hasThirdPartyRepo","patchSetName","patchSetId","displayName","_ref2","_entityDetails$entity","entityDetails","entity","display_name","_usePatchSetState","usePatchSetState","openPatchSetAssignWizard","openUnassignSystemsModal","fetchSystemDetailsAction","clearNotifications","pageTitle","setPageTitle","isPatchSetEnabled","useFeatureFlag","featureFlags","onLoad","_ref3","mergeWithDetail","replaceReducer","combineReducers","_objectSpread","defaultReducers","Header","headerOUIA","breadcrumbs","to","isActive","hideBack","showTags","appList","TextContent","Text","Link","pathname","Alert","isInline","Main","SystemDetail","selectedRows","filterSelectedActiveSystemIDs","openPatchSetEditModal","patchSetID"],"sourceRoot":""}