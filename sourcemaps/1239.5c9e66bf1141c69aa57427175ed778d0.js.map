{"version":3,"file":"js/1239.ead64177c4235673caff.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/AdvisoryType/AdvisoryType.js","webpack:///./src/PresentationalComponents/Filters/SearchFilter.js","webpack:///./src/PresentationalComponents/Filters/SystemStaleFilter.js","webpack:///./src/PresentationalComponents/Filters/SystemsUpdatableFilter.js","webpack:///./src/PresentationalComponents/Snippets/EmptyStates.js","webpack:///./src/PresentationalComponents/Snippets/NoRegisteredSystems.js","webpack:///./src/PresentationalComponents/Snippets/ErrorHandler.js","webpack:///./src/PresentationalComponents/Snippets/ExternalLink.js","webpack:///./src/PresentationalComponents/Snippets/RebootRequired.js","webpack:///./src/SmartComponents/Remediation/AsyncRemediationButton.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.js","webpack:///./src/PresentationalComponents/Snippets/Label.js","webpack:///./src/PresentationalComponents/Snippets/DescriptionWithLink.js","webpack:///./src/Utilities/DataMappers.js","webpack:///./src/Utilities/Hooks.js","webpack:///./src/SmartComponents/PatchSetDetail/PatchSetDetailAssets.js","webpack:///./src/Utilities/SystemsHelpers.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { Split, SplitItem } from '@patternfly/react-core';\n\nconst AdvisoryType = ({ type }) => {\n    const advisoryType =\n        advisoryTypes.find(item => item.value === type) || advisoryTypes[3];\n    return (\n        <Split hasGutter>\n            <SplitItem>{advisoryType.icon}</SplitItem>\n            <SplitItem isFilled>{advisoryType.label}</SplitItem>\n        </Split>\n    );\n};\n\nAdvisoryType.propTypes = {\n    type: PropTypes.string\n};\n\nexport default AdvisoryType;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport debounce from 'lodash/debounce';\nimport { useState, useEffect, useCallback } from 'react';\n\nconst searchFilter = (apply, search, title, placeholder) => {\n    const [searchValue, setSearchValue] = useState(search);\n    const debouncedRequest = useCallback(\n        debounce(value => apply({ search: value }), 400),\n        []\n    );\n\n    useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: title,\n        filterValues: {\n            'aria-label': 'search-field',\n            onChange: (event, value) => {\n                setSearchValue(value);\n                debouncedRequest(value);\n            },\n            placeholder,\n            value: searchValue\n        }\n    };\n};\n\nexport default searchFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { staleSystems } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsStaleFilter = (apply, currentFilter = {}) => {\n\n    let { stale: currentValue } = currentFilter;\n\n    const staleMap = React.useMemo(\n        () =>\n            staleSystems.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n\n    const currentValueStringType = (\n        currentValue\n            && (\n                Array.isArray(currentValue)\n                    && currentValue.map(value => value.toString())\n                    || [currentValue.toString()]\n            )\n    );\n\n    const filterByStale = value => {\n        apply({ filter: { stale: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStale),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStale(value);\n            },\n            items: staleMap,\n            value: currentValueStringType,\n            placeholder: intl.formatMessage(messages.labelsFiltersStalePlaceholder)\n        }\n    };\n};\n\nexport default systemsStaleFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { packagesListUpdatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsUpdatableFilter = (apply, currentFilter = {}) => {\n\n    let { packages_updatable: currentValue } = currentFilter;\n\n    const filterByUpdatableSystems = value => {\n        apply({ filter: { packages_updatable: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersUpdatable),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByUpdatableSystems(value);\n            },\n            items: packagesListUpdatableTypes,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersUpdatablePlaceholder)\n        }\n    };\n};\n\nexport default systemsUpdatableFilter;\n","import {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nexport const EmptyAdvisoryList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingAdvisories)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptyPackagesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingPackages)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptyCvesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingCve)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptySystemsList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingSystems)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptyPatchSetList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingTemplate)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const NoPatchSetList = ({ Button }) => (\n    <EmptyState variant={EmptyStateVariant.large}>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoTemplate)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.statesNoTemplateBody)}\n            <br />\n            <br />\n            {/*\n            <a href={TEMPLATES_DOCS_LINK} target=\"__blank\" rel=\"noopener noreferrer\">\n                {intl.formatMessage(messages.statesNoTemplateLink)} <ExternalLinkAltIcon />\n            </a>\n            <br />\n            <br />\n            */}\n            <Button />\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nNoPatchSetList.propTypes = {\n    Button: PropTypes.node\n};\n\nexport const NoAppliedSystems = ({ onButtonClick }) => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.templateNoAppliedSystemsTitle)}\n        </Title>\n        <EmptyStateBody>\n            <Button type=\"primary\" onClick={onButtonClick}>\n                {intl.formatMessage(messages.templateNoAppliedSystemsButton)}\n            </Button>\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nNoAppliedSystems.propTypes = {\n    onButtonClick: PropTypes.func\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { DisconnectedIcon } from '@patternfly/react-icons';\n\nconst NoRegisteredSystems = ({ titleText, bodyText, buttonText }) => (\n    <EmptyState>\n        <EmptyStateIcon icon={DisconnectedIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {titleText}\n        </Title>\n        <EmptyStateBody>{bodyText}</EmptyStateBody>\n        <Button\n            variant=\"primary\"\n            component=\"a\"\n            href=\"https://access.redhat.com/products/red-hat-insights#getstarted\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"pf-u-mt-lg\"\n        >\n            {buttonText}\n        </Button>\n    </EmptyState>\n);\n\nNoRegisteredSystems.propTypes = {\n    titleText: propTypes.string,\n    bodyText: propTypes.string,\n    buttonText: propTypes.string\n};\n\nNoRegisteredSystems.defaultProps = {\n    titleText: 'Do more with your Red Hat Enterprise Linux environment',\n    bodyText:\n    `Connect your systems to keep your Red Hat environment running efficiently,\n     with security and compliance with various standards.`,\n    buttonText: 'Learn more about connecting your systems'\n};\nexport default NoRegisteredSystems;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport { LockIcon } from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\n//TODO: use the shared component from platform\nimport NoRegisteredSystems from './NoRegisteredSystems';\n//import { NoRegisteredSystems } from '@redhat-cloud-services/frontend-components/NoRegisteredSystems';\n\nconst ErrorHandler = ({ code, ErrorState, EmptyState, metadata = {} }) => {\n    switch (code) {\n        case 204:\n            return <NotConnected />;\n\n        case 400:\n            return <Unavailable />;\n\n        case 401:\n            return <NotAuthorized\n                icon={LockIcon}\n                title={intl.formatMessage(messages.labelsNotAuthorizedTitle)}\n                description={intl.formatMessage(messages.labelsNotAuthorizedDescription)}\n                prevPageButtonText={intl.formatMessage(messages.labelsReturnToPreviousPage)}\n                toLandingPageText={intl.formatMessage(messages.labelsReturnToLandingPage)}\n            />;\n\n        case 403:\n            return <NotAuthorized\n                icon={LockIcon}\n                title={intl.formatMessage(messages.labelsNotAuthorizedTitle)}\n                description={intl.formatMessage(messages.labelsNotAuthorizedDescription)}\n                prevPageButtonText={intl.formatMessage(messages.labelsReturnToPreviousPage)}\n                toLandingPageText={intl.formatMessage(messages.labelsReturnToLandingPage)}\n            />;\n\n        case 404:\n            return <InvalidObject />;\n\n        case 500:\n        case 502:\n        case 503:\n            return <Unavailable />;\n\n        default:\n            return ErrorState && <ErrorState />\n                || EmptyState && <EmptyState />\n                || !metadata.has_systems && <NoRegisteredSystems />\n                || <SkeletonTable colSize={5} rowSize={20} /> ;\n    }\n};\n\nErrorHandler.propTypes = {\n    code: propTypes.number,\n    ErrorState: propTypes.element,\n    EmptyState: propTypes.element,\n    metadata: propTypes.object.isRequired\n};\n\nexport default ErrorHandler;\n","import { Flex, FlexItem } from '@patternfly/react-core';\nimport ExternalLinkSquareAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-square-alt-icon';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst ExternalLink = ({ link, text }) => {\n    return (\n        <a\n            href={link}\n            target=\"__blank\"\n        >\n            <Flex flex={{ default: 'inlineFlex' }}>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    {text}\n                </FlexItem>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    <ExternalLinkSquareAltIcon />\n                </FlexItem>\n            </Flex>\n        </a>\n\n    );\n};\n\nExternalLink.propTypes = {\n    link: propTypes.string,\n    text: propTypes.string\n};\n\nexport default ExternalLink;\n","\nimport React from 'react';\nimport {\n    Title, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { PowerOffIcon } from '@patternfly/react-icons';\n\nconst RebootRequired = () =>  (\n    <Flex flex={{ default: 'column' }}>\n        <FlexItem spacer={{ default: 'spacerNone' }}>\n            <Title headingLevel=\"h6\">\n                {intl.formatMessage(messages.labelsColumnsReboot)}\n            </Title>\n        </FlexItem>\n        <FlexItem spacer={{ default: 'spacerSm' }}>\n            <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                <FlexItem><PowerOffIcon size=\"sm\" color={'var(--pf-global--danger-color--100)'} /> </FlexItem>\n                <FlexItem isFilled>{intl.formatMessage(messages.textRebootIsRequired)}</FlexItem>\n            </Flex>\n        </FlexItem>\n    </Flex>\n);\n\nexport default RebootRequired;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Spinner } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AsyncRemediationButton = ({ remediationProvider, isDisabled, isLoading }) => {\n    const dispatch = useDispatch();\n\n    const handleRemediationSuccess = res => {\n        dispatch(addNotification(res.getNotification()));\n    };\n\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationButton\"\n            fallback={<Spinner size=\"lg\" />}\n            dataProvider={remediationProvider}\n            onRemediationCreated={handleRemediationSuccess}\n            isDisabled={isDisabled}\n            buttonProps={{ isLoading }}\n        >\n            {intl.formatMessage(messages.labelsRemediate)}\n        </AsyncComponent>\n    );\n};\n\nAsyncRemediationButton.propTypes = {\n    remediationProvider: propTypes.func,\n    isDisabled: propTypes.bool,\n    isLoading: propTypes.bool\n};\n\nexport default AsyncRemediationButton;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { fetchApplicableSystemAdvisoriesApi } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    createAdvisoriesIcons, createUpgradableColumn,\n    remediationProvider, createOSColumn, createPackagesColumn\n} from '../../Utilities/Helpers';\nimport './SystemsListAssets.scss';\nimport { sortable } from '@patternfly/react-table';\n\nexport const systemsListColumns = () => [\n    {\n        key: 'operating_system',\n        title: 'OS',\n        renderFunc: value => createOSColumn(value),\n        props: {\n            width: 5\n        }\n    },\n    {\n        key: 'baseline_name',\n        title: 'Template',\n        renderFunc: (value, _, row) => value\n            ? <Link to={{ pathname: `/templates/${row.baseline_id}` }}>{value}</Link>\n            : 'No template',\n        props: {\n            width: 5\n        }\n    },\n    {\n        key: 'applicable_advisories',\n        title: 'Installable advisories',\n        props: {\n            width: 15\n        },\n        renderFunc: value => createAdvisoriesIcons(value)\n    },\n    {\n        key: 'packages_installed',\n        title: 'Installed packages',\n        renderFunc: (packageCount, systemID) => createPackagesColumn(packageCount, systemID),\n        props: {\n            width: 10\n        }\n    }\n];\n\nexport const advisorySystemsColumns = () => [\n    {\n        key: 'os',\n        title: 'OS',\n        renderFunc: value => createOSColumn(value),\n        props: {\n            width: 5\n        }\n    },\n    {\n        key: 'baseline_name',\n        title: 'Template',\n        renderFunc: (value, _, row) => value\n            ? <Link to={{ pathname: `/templates/${row.baseline_id}` }}>{value}</Link>\n            : 'No template',\n        props: {\n            width: 5\n        }\n    },\n    {\n        key: 'status',\n        title: 'Status',\n        props: {\n            width: 5,\n            isStatic: true\n        },\n        transforms: [sortable]\n    }\n];\n\nexport const packageSystemsColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        props: {\n            width: 40\n        }\n    },\n    {\n        key: 'tags',\n        title: 'Tags',\n        props: { width: 10, isStatic: true }\n    },\n    {\n        key: 'installed_evra',\n        title: 'Installed version',\n        props: {\n            width: 15\n        }\n    },\n    {\n        key: 'available_evra',\n        title: 'Latest version',\n        props: {\n            width: 15\n        }\n    },\n    {\n        key: 'upgradable',\n        title: 'Status',\n        props: {\n            width: 20,\n            isStatic: true\n        },\n        renderFunc: value => createUpgradableColumn(value)\n    }\n];\n\nconst isRemediationDisabled = (row) => {\n    const { applicable_advisories: applicableAdvisories } = row || {};\n    return applicableAdvisories && applicableAdvisories.every(typeSum => typeSum === 0);\n};\n\nconst isPatchSetRemovalDisabled = (row) => {\n    const { baseline_name: baselineName } = row || {};\n    return !baselineName || (typeof baselineName === 'string' && baselineName === '');\n};\n\nexport const systemsRowActions = (\n    showRemediationModal,\n    showTemplateAssignSystemsModal,\n    openUnassignSystemsModal,\n    row\n) => {\n    return [\n        {\n            title: 'Apply all applicable advisories',\n            isDisabled: isRemediationDisabled(row),\n            onClick: (event, rowId, rowData) => {\n                fetchApplicableSystemAdvisoriesApi({\n                    id: rowData.id,\n                    limit: 10000\n                }).then(res =>\n                    showRemediationModal(\n                        remediationProvider(\n                            res.data.map(item => item.id),\n                            rowData.id,\n                            remediationIdentifiers.advisory\n                        )\n                    )\n                );\n            }\n        },\n        ...(showTemplateAssignSystemsModal ? [{\n            title: 'Assign to a template',\n            onClick: (event, rowId, rowData) => {\n                showTemplateAssignSystemsModal({ [rowData.id]: true });\n            }\n        },\n        {\n            title: 'Remove from a template',\n            isDisabled: isPatchSetRemovalDisabled(row),\n            onClick: (event, rowId, rowData) => {\n                openUnassignSystemsModal([rowData.id]);\n            }\n        }\n        ] : [])\n    ];\n};\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport './Label.scss';\n\nconst Label = ({ children }) => {\n    return <span className={'patchman-label'}>{children}</span>;\n};\n\nLabel.propTypes = {\n    children: propTypes.any\n};\n\nexport default Label;\n","import {\n    Text, TextContent, TextList,\n    TextListItem, TextListItemVariants, TextListVariants, TextVariants\n} from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { entityTypes } from '../../Utilities/constants';\nimport { getSeverityById, handlePatchLink, isRHAdvisory, truncate } from '../../Utilities/Helpers';\nimport { intl } from '../../Utilities/IntlProvider';\nimport ExternalLink from './ExternalLink';\nimport Label from './Label';\nimport RebootRequired from '../Snippets/RebootRequired';\n\nexport const DescriptionWithLink = ({ row }) => {\n    const severityObject = getSeverityById(row.attributes.severity);\n    return (\n        <TextContent className='patch-advisory-description'>\n            {\n                row.attributes.cve_count > 0 &&\n                (<TextList component={TextListVariants.dl} style={{ '--pf-c-content--dl--RowGap': '0.5rem' }}>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsSeverity)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        <SecurityIcon size=\"sm\" color={severityObject.color} />  {severityObject.label}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsCves)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        {row.attributes.cve_count}\n                    </TextListItem>\n                </TextList>)\n            }\n            <Label>{intl.formatMessage(messages.labelsDescription)}</Label>\n            <Text component={TextVariants.p} style={{ whiteSpace: 'pre-line' }}>\n                {truncate(row.attributes.description.replace(\n                    new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n                    ''\n                ), 570, handlePatchLink(entityTypes.advisories, row.id, intl.formatMessage(messages.linksReadMore)))}\n            </Text>\n            {\n                row.attributes.reboot_required && <RebootRequired/>\n            }\n            {isRHAdvisory(row.id) && <ExternalLink link={`https://access.redhat.com/errata/${row.id}`}\n                text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />}\n        </TextContent>);\n};\n\nDescriptionWithLink.propTypes = {\n    row: propTypes.shape({\n        id: propTypes.string,\n        attributes: propTypes.object,\n        reboot_required: propTypes.bool\n    })\n};\n","import { TextContent, TextListItem, TextListItemVariants } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport messages from '../Messages';\nimport AdvisoryType from '../PresentationalComponents/AdvisoryType/AdvisoryType';\nimport { DescriptionWithLink } from '../PresentationalComponents/Snippets/DescriptionWithLink';\nimport {\n    EmptyAdvisoryList, EmptyCvesList, EmptyPackagesList,\n    EmptyPatchSetList, EmptySystemsList\n} from '../PresentationalComponents/Snippets/EmptyStates';\nimport { SystemUpToDate } from '../PresentationalComponents/Snippets/SystemUpToDate';\nimport { advisorySeverities, entityTypes } from './constants';\nimport { createUpgradableColumn, handleLongSynopsis, handlePatchLink } from './Helpers';\nimport { intl } from './IntlProvider';\n\nexport const createAdvisoriesRows = (rows, expandedRows, selectedRows) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        {\n                            title: handleLongSynopsis(row.attributes.synopsis)\n                        },\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type_name}\n                                />\n                            )\n                        },\n                        {\n                            title: handlePatchLink(\n                                entityTypes.advisories,\n                                row.id,\n                                row.attributes.applicable_systems\n                            )\n                        },\n                        {\n                            title: row.attributes.reboot_required &&\n                                intl.formatMessage(messages.labelsRebootRequired)\n                                || intl.formatMessage(messages.labelsRebootNotRequired)\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2,\n                    isExpandedRow: true\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 5 },\n                        title: <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemAdvisoriesRows = (\n    rows,\n    expandedRows,\n    selectedRows,\n    metadata\n) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    disableSelection: row.attributes.status === 'Applicable',\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        {\n                            title: handleLongSynopsis(row.attributes.synopsis)\n                        },\n                        {\n                            title: row.attributes.status\n                        },\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type_name}\n                                />\n                            )\n                        },\n                        {\n                            title: row.attributes.reboot_required &&\n                                intl.formatMessage(messages.labelsRebootRequired)\n                                || intl.formatMessage(messages.labelsRebootNotRequired)\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2,\n                    isExpandedRow: true\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 6 },\n                        title: !metadata.search && (metadata.filter && Object.keys(metadata.filter).length === 0)\n                            && <SystemUpToDate />\n                            || <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows.map(({ id, ...rest }) => {\n            const {\n                packages_installed: installedPckg,\n                rhba_count: rhba,\n                rhsa_count: rhsa,\n                rhea_count: rhea,\n                other_count: other,\n                os,\n                rhsm,\n                tags,\n                last_upload: lastUpload\n            } = rest;\n            return {\n                id,\n                ...rest,\n                key: Math.random().toString() + id,\n                packages_installed: installedPckg,\n                applicable_advisories: [\n                    rhea || 0,\n                    rhba || 0,\n                    rhsa || 0,\n                    other || 0\n                ],\n                operating_system: {\n                    osName: os || 'N/A',\n                    rhsm\n                },\n                selected: selectedRows[id] !== undefined,\n                tags,\n                updated: lastUpload\n            };\n        });\n    return data || [];\n};\n\nexport const createPackageSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows &&\n        rows.map(row => {\n            return {\n                id: row.id,\n                key: Math.random().toString() + row.id,\n                display_name: row.display_name,\n                installed_evra: row.installed_evra,\n                available_evra: row.updatable && row.available_evra || row.installed_evra,\n                disableSelection: !row.updatable,\n                updatable: row.updatable,\n                upgradable: row.updatable,\n                selected: selectedRows[row.id] !== undefined,\n                tags: row.tags\n            };\n        });\n    return data || [];\n};\n\nexport const createAdvisorySystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows.map(({ id, ...rest }) => {\n            const {\n                packages_installed: installedPckg,\n                rhba_count: rhba,\n                rhsa_count: rhsa,\n                rhea_count: rhea,\n                other_count: other,\n                os,\n                rhsm,\n                tags,\n                last_upload: lastUpload,\n                status\n            } = rest;\n            return {\n                id,\n                ...rest,\n                key: Math.random().toString() + id,\n                packages_installed: installedPckg,\n                applicable_advisories: [\n                    rhea || 0,\n                    rhba || 0,\n                    rhsa || 0,\n                    other || 0\n                ],\n                os: {\n                    osName: os.osName || os || 'N/A',\n                    rhsm\n                },\n                selected: selectedRows[id] !== undefined,\n                tags,\n                updated: lastUpload,\n                disableSelection: status !== 'Installable'\n            };\n        });\n    return data || [];\n};\n\nexport const createSystemPackagesRows = (rows, selectedRows = {}) => {\n    if (rows && rows.length !== 0) {\n        return rows.map(pkg => {\n            const pkgNEVRA = `${pkg.name}-${pkg.evra}`;\n            const pkgUpdates = pkg.updates || [];\n            const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n\n            return {\n                id: pkgNEVRA,\n                key: pkgNEVRA,\n                selected: selectedRows[pkgNEVRA] !== undefined,\n                disableSelection: !latestUpdate,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.evra },\n                    { title: (latestUpdate && latestUpdate.evra) || pkg.evra },\n                    { title: createUpgradableColumn(pkg.updatable) },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createPackagesRows = (rows) => {\n    if (rows && rows.length !== 0) {\n        return rows.map(pkg => {\n            return {\n                id: pkg.name,\n                key: pkg.name,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.systems_installed },\n                    { title: pkg.systems_updatable },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createCvesRows = (rows) => {\n    if (rows.length !== 0) {\n        return rows.map(cve => {\n            const { attributes, id } = cve;\n            const severityObject = advisorySeverities.filter(severity => severity.label === attributes.impact)[0];\n\n            return {\n                id,\n                key: id,\n                cells: [\n                    {\n                        title: (\n                            <a href={`${document.baseURI}insights/vulnerability/cves/${attributes.synopsis}`}>\n                                {attributes.synopsis}\n                            </a>)\n                    },\n                    {\n                        title: (<TextContent>\n                            <TextListItem component={TextListItemVariants.dd}>\n                                <SecurityIcon size=\"sm\" color={severityObject.color} />  {severityObject.label}\n                            </TextListItem>\n                        </TextContent>),\n                        value: severityObject.label\n                    },\n                    { title: parseFloat(attributes.cvss_score).toFixed(1) }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 4 },\n                        title: <EmptyCvesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemsRowsReview = (rows, selectedRows) => {\n    if (rows.length !== 0) {\n        return rows.map(system => {\n            const { attributes, id } = system;\n\n            return {\n                id,\n                key: id,\n                selected: selectedRows[system.id] !== undefined,\n                cells: [\n                    {\n                        title: attributes.display_name\n                    },\n                    {\n                        title: attributes.os || 'N/A'\n                    },\n                    {\n                        title: attributes.baseline_name || 'No template'\n                    },\n                    {\n                        title: processDate(attributes.last_upload)\n                    }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 4 },\n                        title: <EmptySystemsList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createPatchSetRows = (rows, selectedRows = {}, filters) => {\n\n    const data =\n        rows &&\n        rows.map(row => {\n            return {\n                id: row.id,\n                displayName: row.name,\n                key: row.id,\n                selected: selectedRows[row.id] !== undefined,\n                cells: [\n                    {\n                        title: (\n                            <Link to={{ pathname: `/templates/${row.id}` }}>\n                                {row.name}\n                            </Link>\n                        )\n                    },\n                    { title: row.systems || intl.formatMessage(messages.labelsTemplateNoSystems) },\n                    { title: processDate(row.last_edited) },\n                    { title: processDate(row.published) },\n                    { title: row.creator }\n                ]\n            };\n        });\n\n    return data?.length > 0 ? data :\n        (filters.search || Object.keys(filters.filter).length) ?\n            [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 6 },\n                            title: <EmptyPatchSetList />\n                        }\n                    ]\n                }\n            ] : [];\n};\n\nexport const createPatchSetDetailRows = (rows) => {\n    const data =\n        rows &&\n        rows.map(row => {\n            row = { ...row, ...row.attributes };\n\n            return {\n                ...row,\n                id: row.inventory_id,\n                display_name: row.display_name,\n                key: row.inventory_id,\n                os: {\n                    osName: row.os,\n                    rhsm: row.rhsm\n                },\n                last_upload: row.last_upload,\n                tags: row.tags\n            };\n        });\n\n    return data;\n};\n","import React, { useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport isDeepEqualReact from 'fast-deep-equal/react';\nimport { Spinner } from '@patternfly/react-core';\nimport messages from '../Messages';\nimport { defaultCompoundSortValues, exportNotifications } from './constants';\nimport {\n    convertLimitOffset, getLimitFromPageSize,\n    getOffsetFromPageLimit, encodeURLParams, mapGlobalFilters, convertDateToISO, objUndefinedToFalse, objOnlyWithTrue\n} from './Helpers';\nimport { intl } from './IntlProvider';\nimport { multiValueFilters } from '../Utilities/constants';\nimport { assignSystemToPatchSet, updatePatchSets } from './api';\nimport { createSystemsSortBy } from './SystemsHelpers';\n// eslint-disable-next-line no-unused-vars\nimport { useFlag, useFlagsStatus } from '@unleash/proxy-client-react';\n\nexport const useSetPage = (limit, callback) => {\n    const onSetPage = React.useCallback((_, page) =>\n        callback({ offset: getOffsetFromPageLimit(page, limit) })\n    );\n    return onSetPage;\n};\n\nexport const useHandleRefresh = (metadata, callback) => {\n    const handleRefresh = React.useCallback(({ page, per_page: perPage }) => {\n        const offset = getOffsetFromPageLimit(page, perPage);\n        const limit = getLimitFromPageSize(perPage);\n        (metadata.offset !== offset || metadata.limit !== limit) &&\n            callback({\n                ...(metadata.offset !== offset && { offset }),\n                ...(metadata.limit !== limit && { limit })\n            });\n    });\n    return handleRefresh;\n};\n\nexport const usePagePerPage = (limit, offset) => {\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(limit, offset),\n        [limit, offset]\n    );\n    return [page, perPage];\n};\n\nexport const usePerPageSelect = callback => {\n    const onPerPageSelect = React.useCallback((_, perPage) =>\n        callback({ limit: getLimitFromPageSize(perPage), offset: 0 })\n    );\n    return onPerPageSelect;\n};\n\nexport const useSortColumn = (columns, callback, offset = 0, compoundSortValues = defaultCompoundSortValues) => {\n    const onSort = React.useCallback((_, index, direction) => {\n        let columnName = columns[index - offset].key;\n        const compoundKey = compoundSortValues[columnName];\n        if (compoundKey) {\n            columnName = compoundKey[direction];\n        }\n        else if (direction === SortByDirection.desc) {\n            columnName = '-' + columnName;\n        }\n\n        callback({ sort: columnName });\n    });\n    return onSort;\n};\n\nexport const useRemoveFilter = (filters, callback, defaultFilters = { filter: {} }) => {\n    const removeFilter = React.useCallback((selected, resetFilters, shouldReset) => {\n        let newParams = { filter: {} };\n        selected.forEach(selectedItem => {\n            let { id: categoryId, chips } = selectedItem;\n\n            if (categoryId !== 'search' && !multiValueFilters.includes(categoryId)) {\n                let activeFilter = filters[categoryId];\n                const toRemove = chips.map(item => item.id?.toString());\n                if (Array.isArray(activeFilter)) {\n                    newParams.filter[categoryId] = activeFilter.filter(\n                        item => !toRemove.includes(item.toString())\n                    );\n                } else {\n                    newParams.filter[categoryId] = undefined;\n                }\n            } else if (multiValueFilters.includes(categoryId)) {\n                const filterValues = filters[categoryId] &&\n                    (typeof(filters[categoryId]) === 'string' && filters[categoryId].split(',')\n                        || filters[categoryId]) || [];\n\n                newParams.filter[categoryId] = (filterValues.length !== 1)\n                    && filterValues.filter(filterValue => !chips.find(chip => chip.value === filterValue)).join(',') || undefined;\n            }\n            else {\n                newParams.search = '';\n            }\n\n        });\n\n        if (shouldReset) {\n            newParams = resetFilters(newParams);\n        }\n\n        callback({ ...newParams });\n    });\n\n    const deleteFilterGroup = (__, filters) => {\n        removeFilter(filters);\n    };\n\n    const deleteFilters = (__, selected, shouldReset) => {\n        const resetFilters = (currentFilters) => {\n            if (Object.keys(defaultFilters.filter).length > 0) {\n                currentFilters.filter = { ...currentFilters.filter, ...defaultFilters.filter };\n            }\n\n            return currentFilters;\n        };\n\n        removeFilter(selected, resetFilters, shouldReset);\n    };\n\n    return [deleteFilters, deleteFilterGroup];\n};\n\nexport const setPageTitle = (title) => {\n    if (title) {\n        document.title = `${title} - Patch | Red Hat Insights`;\n    }\n};\n\nexport const useDeepCompareEffect = (effect, deps) => {\n    const ref = React.useRef(undefined);\n\n    if (!ref.current || !isDeepEqualReact(deps, ref.current)) {\n        ref.current = deps;\n    }\n\n    React.useEffect(effect, ref.current);\n};\n\nexport const useBulkSelectConfig = (selectedCount, onSelect, metadata, rows, onCollapse) => {\n    const [isBulkLoading, setBulkLoading] = React.useState(false);\n\n    return ({\n        items: [{\n            title: intl.formatMessage(messages.labelsBulkSelectNone),\n            onClick: () => {\n                onSelect('none');\n            }\n        }, {\n            title: intl.formatMessage(messages.labelsBulkSelectPage,\n                { count: onCollapse && rows.length / 2 || rows.length }\n            ),\n            onClick: () => {\n                onSelect('page');\n            }\n        },\n        {\n            title: intl.formatMessage(messages.labelsBulkSelectAll, { count: metadata.total_items }),\n            onClick: () => {\n                setBulkLoading(true);\n                onSelect('all', null, null, setBulkLoading);\n            }\n        }],\n        onSelect: () => {\n            let action = 'none';\n            if (selectedCount === 0) {\n                setBulkLoading(true);\n                action = 'all';\n            }\n\n            onSelect(action, null, null, setBulkLoading);\n        },\n        toggleProps: {\n            'data-ouia-component-type': 'bulk-select-toggle-button',\n            children: isBulkLoading ? [\n                <React.Fragment key='sd'>\n                    <Spinner size=\"sm\" />\n                    {`     ${selectedCount} selected`}\n                </React.Fragment>\n            ] : `     ${selectedCount} selected`\n        },\n        checked: selectedCount === 0 ? false : selectedCount === metadata.total_items ? true : null,\n        isDisabled: metadata.total_items === 0 && selectedCount === 0\n    });\n};\n\nexport const useGetEntities = (fetchApi, apply, config, history, applyMetadata, applyGlobalFilter) => {\n    const { id, packageName } = config || {};\n    const getEntities = async (\n        _items,\n        { orderBy, orderDirection, page, per_page: perPage, patchParams, filters }\n    ) => {\n\n        const { selectedTags: activeTags = [] } = patchParams;\n        const { selectedTags } = mapGlobalFilters(filters.tagFilters);\n\n        const sort = createSystemsSortBy(orderBy, orderDirection, packageName);\n\n        const items = await fetchApi({\n            page,\n            perPage,\n            ...patchParams,\n            selectedTags: [...activeTags, ...selectedTags],\n            sort,\n            ...id && { id } || {},\n            ...packageName && { package_name: packageName } || {}\n        });\n\n        apply({\n            page,\n            perPage,\n            sort,\n            metadata: items.meta\n        });\n\n        applyMetadata && applyMetadata(items.meta);\n        applyGlobalFilter && applyGlobalFilter(selectedTags);\n\n        history.push(encodeURLParams({\n            page,\n            perPage,\n            sort,\n            ...patchParams\n        }));\n\n        return {\n            results: items.data.map(row => ({ ...row, ...row.attributes, id: row.id ?? row.inventory_id })),\n            total: items.meta?.total_items\n        };\n    };\n\n    return getEntities;\n};\n\nexport const useOnExport = (prefix, queryParams, formatHandlers, dispatch) => {\n    const onExport = React.useCallback((_, format) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const filename = `${prefix}-${date}`;\n        dispatch(addNotification(exportNotifications(format).pending));\n        formatHandlers[format](queryParams, prefix).then(data => {\n            dispatch(addNotification(exportNotifications(format).success));\n            downloadFile(data, filename, format);\n        }).catch(() => dispatch(addNotification(exportNotifications().error)));\n    });\n    return onExport;\n};\n\nexport const usePatchSetApi = (wizardState, setWizardState, patchSetID) => {\n    const handleApiResponse = (response) => response\n    .then(() => {\n        setWizardState({ ...wizardState, submitted: true, failed: false, requestPending: false });\n    })\n    .catch((error) => {\n        setWizardState({ ...wizardState, submitted: true, failed: true, requestPending: false, error });\n    });\n\n    const onSubmit = React.useCallback((formValues) => {\n        const { name, description, toDate, id } = formValues.existing_patch_set || formValues;\n        const formattedDate = convertDateToISO(toDate);\n\n        const { systems } = formValues;\n\n        const requestConfig = {\n            name,\n            description,\n            inventory_ids: (patchSetID || id) ? objUndefinedToFalse(systems) : objOnlyWithTrue(systems),\n            ...formattedDate && { config: { to_time: formattedDate } }\n        };\n\n        setWizardState({ ...wizardState, submitted: true, failed: false, requestPending: true });\n\n        const response = (patchSetID || id)\n            ? updatePatchSets(requestConfig, patchSetID || id)\n            : assignSystemToPatchSet(requestConfig);\n\n        handleApiResponse(response);\n    });\n    return onSubmit;\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const useFeatureFlag = (flag, chrome) => {\n\n    //Unleash flag provider has no full implementation yet. Use when it is ready\n    // const { flagsReady } = useFlagsStatus();\n    // const flagStatus = useFlag(flag);\n    return chrome.isBeta();\n};\n\n/***\n * Pushes new URL params together location state into the history\n * @param {object} [queryParams] query params to build the URL params\n * @returns {historyPusher} function to trigger the push\n */\nexport const usePushUrlParams = (queryParams) => {\n    const history = useHistory();\n    const location = useLocation();\n\n    const historyPusher = useCallback(() => {\n        history.push({ pathname: location.pathname, search: encodeURLParams(queryParams), state: location.state });\n    }, [JSON.stringify(queryParams), location.state, location.pathname]);\n\n    return historyPusher;\n};\n\n/***\n * Returns readly available user entitelments\n * @returns {getEntitlements} function that returns entitlements\n */\nexport const useEntitlements = () => {\n    const chrome = useChrome();\n    const getEntitlements = useCallback(async () => {\n        const user = await chrome.auth.getUser();\n        return user.entitlements;\n    });\n\n    return getEntitlements;\n};\n","import { sortable } from '@patternfly/react-table/dist/js';\nimport { createAdvisoriesIcons, createOSColumn } from '../../Utilities/Helpers';\n\nexport const patchSetDetailColumns = [\n    {\n        key: 'os',\n        title: 'OS',\n        renderFunc: value => createOSColumn(value),\n        transforms: [sortable]\n    },\n    {\n        key: 'installable_rhsa_count',\n        title: 'Installable advisories',\n        renderFunc: (_a, _b, row) => createAdvisoriesIcons([\n            row.installable_rhea_count,\n            row.installable_rhba_count,\n            row.installable_rhsa_count,\n            row.installable_other_count\n        ], 'installable'),\n        transforms: [sortable]\n    },\n    {\n        key: 'applicable_rhsa_count',\n        title: 'Applicable advisories',\n        transforms: [sortable],\n        renderFunc: (_a, _b, row) => createAdvisoriesIcons([\n            row.applicable_rhea_count,\n            row.applicable_rhba_count,\n            row.applicable_rhsa_count,\n            row.applicable_other_count\n        ])\n    }\n];\n","import React from 'react';\nimport searchFilter from '../PresentationalComponents/Filters/SearchFilter';\nimport staleFilter from '../PresentationalComponents/Filters/SystemStaleFilter';\nimport systemsUpdatableFilter from '../PresentationalComponents/Filters/SystemsUpdatableFilter';\nimport { buildFilterChips, templateDateFormat } from './Helpers';\nimport { intl } from './IntlProvider';\nimport messages from '../Messages';\nimport { packageSystemsColumns } from '../SmartComponents/Systems/SystemsListAssets';\nimport { defaultCompoundSortValues } from './constants';\nimport { patchSetDetailColumns } from '../SmartComponents/PatchSetDetail/PatchSetDetailAssets';\nimport { Link } from 'react-router-dom';\n\nexport const buildFilterConfig = (search, filter, apply, osFilterConfig) => ({\n    items: [\n        searchFilter(\n            apply,\n            search,\n            intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n            intl.formatMessage(\n                messages.labelsFiltersSystemsSearchPlaceholder\n            )\n        ),\n        staleFilter(apply, filter),\n        systemsUpdatableFilter(apply, filter),\n        ...osFilterConfig\n    ]\n});\n\nexport const buildActiveFiltersConfig = (filter, search, deleteFilters) => ({\n    filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n    onDelete: deleteFilters,\n    deleteTitle: intl.formatMessage(messages.labelsFiltersReset)\n});\n\nexport const systemsColumnsMerger = (defaultColumns, additionalColumns) => {\n    let lastSeen = defaultColumns.filter(({ key }) => key === 'updated');\n    lastSeen = [{ ...lastSeen[0], key: 'last_upload', sortKey: 'last_upload' }];\n\n    let nameAndTag = defaultColumns.filter(({ key }) => key === 'display_name' || key === 'tags');\n\n    return [...nameAndTag, ...additionalColumns(), lastSeen[0]];\n};\n\nexport const templateSystemsColumnsMerger = (defaultColumns) => {\n    let lastSeen = defaultColumns.filter(({ key }) => key === 'updated');\n    lastSeen = [{ ...lastSeen[0], key: 'last_upload', sortKey: 'last_upload', renderFunc: value => templateDateFormat(value) }];\n\n    let name = defaultColumns.filter(({ key }) => key === 'display_name');\n    let tag = defaultColumns.filter(({ key }) => key === 'tags');\n\n    name = [{\n        ...name[0],\n        renderFunc: (displayName, id) => <Link to={{ pathname: `/systems/${id}` }}>{displayName}</Link>\n    }];\n\n    return [...name, ...tag, ...patchSetDetailColumns, lastSeen[0]];\n};\n\nexport const createSystemsSortBy = (orderBy, orderDirection, hasLastUpload) => {\n    orderBy = (orderBy === 'updated' && !hasLastUpload) && 'last_upload' ||\n        (orderBy === 'updated' && hasLastUpload) && packageSystemsColumns[0].key || orderBy;\n\n    let sort = `${orderDirection === 'ASC' ? '' : '-'}${orderBy}`;\n\n    //if orderBy is for a compound column reset sort value to relative compound sort value\n    Object.keys(defaultCompoundSortValues).forEach(col => {\n        if (col === orderBy) {\n            sort = defaultCompoundSortValues[col][orderDirection.toLowerCase()];\n        }\n    });\n\n    return sort;\n};\n"],"names":["AdvisoryType","_ref","type","advisoryType","advisoryTypes","item","value","React","Split","hasGutter","SplitItem","icon","isFilled","label","propTypes","PropTypes","apply","search","title","placeholder","_useState","useState","_useState2","_slicedToArray","searchValue","setSearchValue","debouncedRequest","useCallback","debounce","useEffect","conditionalFilterType","filterValues","onChange","event","currentValue","arguments","length","undefined","stale","staleMap","staleSystems","toString","currentValueStringType","Array","isArray","map","intl","messages","filter","filterByStale","items","packages_updatable","filterByUpdatableSystems","packagesListUpdatableTypes","EmptyAdvisoryList","EmptyState","variant","EmptyStateVariant","Title","headingLevel","size","EmptyStateBody","EmptyPackagesList","EmptyStateIcon","SearchIcon","EmptyCvesList","EmptySystemsList","EmptyPatchSetList","NoPatchSetList","Button","PlusCircleIcon","NoAppliedSystems","_ref2","onButtonClick","onClick","NoRegisteredSystems","titleText","bodyText","buttonText","DisconnectedIcon","component","href","target","rel","className","defaultProps","ErrorHandler","code","ErrorState","_ref$metadata","metadata","NotConnected","Unavailable","NotAuthorized","LockIcon","description","prevPageButtonText","toLandingPageText","InvalidObject","has_systems","SkeletonTable","colSize","rowSize","ExternalLink","link","text","Flex","flex","default","FlexItem","spacer","ExternalLinkSquareAltIcon","style","flexWrap","PowerOffIcon","color","AsyncRemediationButton","remediationProvider","isDisabled","isLoading","dispatch","useDispatch","AsyncComponent","appName","module","fallback","Spinner","dataProvider","onRemediationCreated","res","addNotification","getNotification","buttonProps","systemsListColumns","key","renderFunc","createOSColumn","props","width","_","row","Link","to","pathname","concat","baseline_id","createAdvisoriesIcons","packageCount","systemID","createPackagesColumn","advisorySystemsColumns","isStatic","transforms","sortable","packageSystemsColumns","composed","createUpgradableColumn","isRemediationDisabled","applicableAdvisories","applicable_advisories","every","typeSum","isPatchSetRemovalDisabled","baselineName","baseline_name","systemsRowActions","showRemediationModal","showTemplateAssignSystemsModal","openUnassignSystemsModal","rowId","rowData","fetchApplicableSystemAdvisoriesApi","id","limit","then","data","remediationIdentifiers","_toConsumableArray","_defineProperty","Label","children","DescriptionWithLink","severityObject","getSeverityById","attributes","severity","TextContent","cve_count","TextList","TextListVariants","TextListItem","TextListItemVariants","SecurityIcon","Text","TextVariants","whiteSpace","truncate","replace","RegExp","handlePatchLink","entityTypes","reboot_required","RebootRequired","isRHAdvisory","createAdvisoriesRows","rows","expandedRows","selectedRows","_flatMap","index","isOpen","selected","cells","handleLongSynopsis","synopsis","advisory_type_name","applicable_systems","processDate","public_date","parent","isExpandedRow","heightAuto","colSpan","createSystemAdvisoriesRows","disableSelection","status","Object","keys","SystemUpToDate","createSystemsRows","rest","_objectWithoutProperties","_excluded","installedPckg","packages_installed","rhba","rhba_count","rhsa","rhsa_count","rhea","rhea_count","other","other_count","os","rhsm","tags","lastUpload","last_upload","_objectSpread","Math","random","operating_system","osName","updated","createPackageSystemsRows","display_name","installed_evra","available_evra","updatable","upgradable","createAdvisorySystemsRows","_excluded2","createSystemPackagesRows","pkg","pkgNEVRA","name","evra","pkgUpdates","updates","latestUpdate","summary","createPackagesRows","systems_installed","systems_updatable","createCvesRows","cve","advisorySeverities","impact","document","baseURI","parseFloat","cvss_score","toFixed","createSystemsRowsReview","system","createPatchSetRows","filters","displayName","systems","last_edited","published","creator","createPatchSetDetailRows","inventory_id","useSetPage","callback","page","offset","getOffsetFromPageLimit","usePerPageSelect","perPage","getLimitFromPageSize","useSortColumn","columns","compoundSortValues","defaultCompoundSortValues","direction","columnName","compoundKey","SortByDirection","sort","useRemoveFilter","defaultFilters","removeFilter","resetFilters","shouldReset","newParams","forEach","selectedItem","categoryId","chips","multiValueFilters","split","filterValue","find","chip","join","activeFilter","toRemove","_item$id","includes","__","currentFilters","setPageTitle","useDeepCompareEffect","effect","deps","ref","current","isDeepEqualReact","useBulkSelectConfig","selectedCount","onSelect","onCollapse","_React$useState","_React$useState2","isBulkLoading","setBulkLoading","count","total_items","action","toggleProps","checked","useGetEntities","fetchApi","config","history","applyMetadata","applyGlobalFilter","packageName","getEntities","_ref4","_asyncToGenerator","_regeneratorRuntime","_callee","_items","_ref3","_items$meta","orderBy","orderDirection","patchParams","_patchParams$selected","activeTags","_mapGlobalFilters","selectedTags","_context","prev","next","per_page","mapGlobalFilters","tagFilters","createSystemsSortBy","package_name","sent","meta","push","encodeURLParams","abrupt","results","_row$id","total","stop","_x","_x2","useOnExport","prefix","queryParams","formatHandlers","format","date","Date","toISOString","filename","exportNotifications","pending","success","downloadFile","error","usePatchSetApi","wizardState","setWizardState","patchSetID","formValues","_ref5","existing_patch_set","toDate","formattedDate","convertDateToISO","requestConfig","inventory_ids","objUndefinedToFalse","objOnlyWithTrue","to_time","submitted","failed","requestPending","updatePatchSets","assignSystemToPatchSet","usePushUrlParams","useHistory","location","useLocation","state","JSON","stringify","patchSetDetailColumns","_a","_b","installable_rhea_count","installable_rhba_count","installable_rhsa_count","installable_other_count","applicable_rhea_count","applicable_rhba_count","applicable_rhsa_count","applicable_other_count","buildFilterConfig","osFilterConfig","searchFilter","staleFilter","systemsUpdatableFilter","buildActiveFiltersConfig","deleteFilters","buildFilterChips","onDelete","deleteTitle","systemsColumnsMerger","defaultColumns","additionalColumns","lastSeen","sortKey","nameAndTag","templateSystemsColumnsMerger","templateDateFormat","tag","hasLastUpload","col","toLowerCase"],"sourceRoot":""}