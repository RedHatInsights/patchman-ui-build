{"version":3,"file":"js/Advisories.c8cd47ee4585d0de402a.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/Card.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/CardBody.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/CardTitle.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Card/card.mjs","webpack:///./src/PresentationalComponents/Filters/PublishDateFilter.js","webpack:///./src/PresentationalComponents/Filters/RebootFilter.js","webpack:///./src/PresentationalComponents/Filters/TypeFilter.js","webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./src/PresentationalComponents/Snippets/SystemUpToDate.js","webpack:///./src/PresentationalComponents/TableView/TableFooter.js","webpack:///./src/PresentationalComponents/TableView/TableView.js","webpack:///./src/PresentationalComponents/TableView/TableViewAssets.js","webpack:///./src/PresentationalComponents/StatusReports/AdvisoriesStatusReport.js","webpack:///./src/SmartComponents/Advisories/Advisories.js","webpack:///./src/Utilities/useOnSelect.js","webpack:///./src/Utilities/useRemediationDataProvider.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Card = exports.CardContext = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst helpers_1 = require(\"../../helpers\");\nexports.CardContext = React.createContext({\n    cardId: '',\n    registerTitleId: () => { },\n    isExpanded: false\n});\nconst Card = (_a) => {\n    var { children = null, id = '', className = '', component = 'article', isHoverable = false, isCompact = false, isSelectable = false, isSelectableRaised = false, isSelected = false, isDisabledRaised = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true, hasSelectableInput = false, selectableInputAriaLabel, onSelectableInputChange = () => { } } = _a, props = tslib_1.__rest(_a, [\"children\", \"id\", \"className\", \"component\", \"isHoverable\", \"isCompact\", \"isSelectable\", \"isSelectableRaised\", \"isSelected\", \"isDisabledRaised\", \"isFlat\", \"isExpanded\", \"isRounded\", \"isLarge\", \"isFullHeight\", \"isPlain\", \"ouiaId\", \"ouiaSafe\", \"hasSelectableInput\", \"selectableInputAriaLabel\", \"onSelectableInputChange\"]);\n    const Component = component;\n    const ouiaProps = helpers_1.useOUIAProps(exports.Card.displayName, ouiaId, ouiaSafe);\n    const [titleId, setTitleId] = React.useState('');\n    const [ariaProps, setAriaProps] = React.useState();\n    if (isCompact && isLarge) {\n        // eslint-disable-next-line no-console\n        console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n        isLarge = false;\n    }\n    const getSelectableModifiers = () => {\n        if (isDisabledRaised) {\n            return react_styles_1.css(card_1.default.modifiers.nonSelectableRaised);\n        }\n        if (isSelectableRaised) {\n            return react_styles_1.css(card_1.default.modifiers.selectableRaised, isSelected && card_1.default.modifiers.selectedRaised);\n        }\n        if (isSelectable || isHoverable) {\n            return react_styles_1.css(card_1.default.modifiers.selectable, isSelected && card_1.default.modifiers.selected);\n        }\n        return '';\n    };\n    const containsCardTitleChildRef = React.useRef(false);\n    const registerTitleId = (id) => {\n        setTitleId(id);\n        containsCardTitleChildRef.current = !!id;\n    };\n    React.useEffect(() => {\n        if (selectableInputAriaLabel) {\n            setAriaProps({ 'aria-label': selectableInputAriaLabel });\n        }\n        else if (titleId) {\n            setAriaProps({ 'aria-labelledby': titleId });\n        }\n        else if (hasSelectableInput && !containsCardTitleChildRef.current) {\n            setAriaProps({});\n            // eslint-disable-next-line no-console\n            console.warn('If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed');\n        }\n    }, [hasSelectableInput, selectableInputAriaLabel, titleId]);\n    return (React.createElement(exports.CardContext.Provider, { value: {\n            cardId: id,\n            registerTitleId,\n            isExpanded\n        } },\n        hasSelectableInput && (React.createElement(\"input\", Object.assign({ className: \"pf-screen-reader\", id: `${id}-input` }, ariaProps, { type: \"checkbox\", checked: isSelected, onChange: event => onSelectableInputChange(id, event), disabled: isDisabledRaised, tabIndex: -1 }))),\n        React.createElement(Component, Object.assign({ id: id, className: react_styles_1.css(card_1.default.card, isCompact && card_1.default.modifiers.compact, isExpanded && card_1.default.modifiers.expanded, isFlat && card_1.default.modifiers.flat, isRounded && card_1.default.modifiers.rounded, isLarge && card_1.default.modifiers.displayLg, isFullHeight && card_1.default.modifiers.fullHeight, isPlain && card_1.default.modifiers.plain, getSelectableModifiers(), className), tabIndex: isSelectable || isSelectableRaised ? '0' : undefined }, props, ouiaProps), children)));\n};\nexports.Card = Card;\nexports.Card.displayName = 'Card';\n//# sourceMappingURL=Card.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CardBody = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst CardBody = (_a) => {\n    var { children = null, className = '', component = 'div', isFilled = true } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\", \"isFilled\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(card_1.default.cardBody, !isFilled && card_1.default.modifiers.noFill, className) }, props), children));\n};\nexports.CardBody = CardBody;\nexports.CardBody.displayName = 'CardBody';\n//# sourceMappingURL=CardBody.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CardTitle = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst Card_1 = require(\"./Card\");\nconst CardTitle = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\"]);\n    const { cardId, registerTitleId } = React.useContext(Card_1.CardContext);\n    const Component = component;\n    const titleId = cardId ? `${cardId}-title` : '';\n    React.useEffect(() => {\n        registerTitleId(titleId);\n        return () => registerTitleId('');\n    }, [registerTitleId, titleId]);\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(card_1.default.cardTitle, className), id: titleId || undefined }, props), children));\n};\nexports.CardTitle = CardTitle;\nexports.CardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","import './card.css';\nexport default {\n  \"card\": \"pf-c-card\",\n  \"cardActions\": \"pf-c-card__actions\",\n  \"cardBody\": \"pf-c-card__body\",\n  \"cardExpandableContent\": \"pf-c-card__expandable-content\",\n  \"cardFooter\": \"pf-c-card__footer\",\n  \"cardHeader\": \"pf-c-card__header\",\n  \"cardHeaderToggle\": \"pf-c-card__header-toggle\",\n  \"cardHeaderToggleIcon\": \"pf-c-card__header-toggle-icon\",\n  \"cardSrInput\": \"pf-c-card__sr-input\",\n  \"cardTitle\": \"pf-c-card__title\",\n  \"divider\": \"pf-c-divider\",\n  \"modifiers\": {\n    \"hoverable\": \"pf-m-hoverable\",\n    \"selectable\": \"pf-m-selectable\",\n    \"selected\": \"pf-m-selected\",\n    \"hoverableRaised\": \"pf-m-hoverable-raised\",\n    \"selectableRaised\": \"pf-m-selectable-raised\",\n    \"nonSelectableRaised\": \"pf-m-non-selectable-raised\",\n    \"selectedRaised\": \"pf-m-selected-raised\",\n    \"compact\": \"pf-m-compact\",\n    \"displayLg\": \"pf-m-display-lg\",\n    \"flat\": \"pf-m-flat\",\n    \"plain\": \"pf-m-plain\",\n    \"rounded\": \"pf-m-rounded\",\n    \"expanded\": \"pf-m-expanded\",\n    \"fullHeight\": \"pf-m-full-height\",\n    \"toggleRight\": \"pf-m-toggle-right\",\n    \"noOffset\": \"pf-m-no-offset\",\n    \"noFill\": \"pf-m-no-fill\",\n    \"overpassFont\": \"pf-m-overpass-font\"\n  },\n  \"themeDark\": \"pf-theme-dark\"\n};","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { publicDateOptions } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { public_date: currentValue } = currentFilter;\n\n    const filterByPublicDate = value => {\n        apply({ filter: { public_date: (value !== 'all' && value) || '' } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersPublishDate),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublicDate(value);\n            },\n            items: publicDateOptions,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersPublishDatePlaceholder)\n        }\n    };\n};\n\nexport default publishDateFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { rebootRequired } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst rebootFilter = (apply, currentFilter = {}) => {\n    let { reboot_required: currentValue } = currentFilter;\n\n    const rebootMap = React.useMemo(\n        () =>\n            rebootRequired.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n\n    const currentValueStringType = (\n        currentValue\n        && (\n            Array.isArray(currentValue)\n            && currentValue.map(value => value.toString())\n            || [currentValue.toString()]\n        )\n    );\n\n    const filterByReboot = value => {\n        apply({ filter: { reboot_required: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersReboot),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByReboot(value);\n            },\n            items: rebootMap,\n            value: currentValueStringType,\n            placeholder: intl.formatMessage(messages.labelsFiltersRebootPlaceholder)\n        }\n    };\n};\n\nexport default rebootFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst typeFilter = (apply, currentFilter = {}) => {\n    const advisoryTypesMap = React.useMemo(\n        () =>\n            advisoryTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { advisory_type_name: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersType),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: advisoryTypesMap,\n            value: currentFilter.advisory_type_name,\n            placeholder: intl.formatMessage(messages.labelsFiltersTypePlaceholder)\n        }\n    };\n};\n\nexport default typeFilter;\n","import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}\n                        data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                        data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                    >{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history, headerOUIA }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={'/advisories'}\n                title={'Applicable advisories'}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-Applicable advisories'`}\n            />\n            <Tab\n                eventKey={'/systems/'}\n                title={'Systems'}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-Systems`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object,\n    headerOUIA: propTypes.string\n};\n\nexport default withRouter(HeaderTabs);\n","import { Split, SplitItem } from '@patternfly/react-core';\nimport {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA, actions }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <Split>\n                    <SplitItem>\n                        <PageHeaderTitle title={title} />\n                    </SplitItem>\n                    <SplitItem isFilled />\n                    <SplitItem>\n                        {actions}\n                    </SplitItem>\n                </Split>\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA={headerOUIA} />}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string,\n    actions: PropTypes.node\n};\n\nexport default Header;\n","import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const SystemUpToDate = () => (\n    <Bullseye>\n        <EmptyState style={{ paddingTop: 40 }}>\n            <EmptyStateIcon icon={()=><CheckCircleIcon size='xl' color={'var(--pf-global--success-color--200)' }\n                style={{ marginBottom: 15 }} />}/>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                {intl.formatMessage(messages.statesNoApplicableAdvisories)}\n            </Title>\n            <EmptyStateBody>\n                {intl.formatMessage(messages.statesSystemUpToDate)}\n            </EmptyStateBody>\n        </EmptyState>\n    </Bullseye>\n);\n","import { Pagination, PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TableFooter = ({ isLoading, page, perPage, onSetPage, totalItems, onPerPageSelect, paginationOUIA }) => {\n    return (\n        <>\n            {isLoading ? (\n                <div className=\"pf-c-pagination pf-m-bottom\">\n                    <Skeleton fontSize=\"xl\" width=\"350px\" style={{ margin: 10 }} />\n                </div>\n            ) :\n                <Pagination\n                    itemCount={totalItems}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    widgetId={`pagination-options-menu-bottom`}\n                    variant={PaginationVariant.bottom}\n                    ouiaId={paginationOUIA}\n                    isDisabled={totalItems === 0}\n                />\n            }\n        </>\n    );\n};\n\nTableFooter.propTypes = {\n    isLoading: PropTypes.bool,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalItems: PropTypes.number,\n    paginationOUIA: PropTypes.string\n};\n\nexport default TableFooter;\n","import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport AsyncRemediationButton from '../../SmartComponents/Remediation/AsyncRemediationButton';\nimport { arrayFromObj, buildFilterChips, convertLimitOffset } from '../../Utilities/Helpers';\nimport { useRemoveFilter, useBulkSelectConfig } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableFooter from './TableFooter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { Skeleton, ToolbarItem } from '@patternfly/react-core';\n\nconst TableView = ({\n    columns,\n    store: {\n        rows,\n        metadata,\n        status,\n        queryParams: { filter, search }\n    },\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    onExport,\n    filterConfig,\n    sortBy,\n    remediationProvider,\n    selectedRows,\n    compact,\n    apply,\n    tableOUIA,\n    paginationOUIA,\n    errorState,\n    emptyState,\n    defaultFilters,\n    searchChipLabel,\n    ToolbarButton,\n    actionsConfig,\n    isRemediationLoading,\n    actionsToggle\n}) => {\n\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n\n    const [deleteFilters] = useRemoveFilter(filter, apply, defaultFilters);\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n    const { code, hasError, isLoading } = status;\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, metadata, rows, onCollapse);\n\n    return (\n        <React.Fragment>\n            {\n                (<React.Fragment>\n                    {(hasError || metadata.has_systems === false)\n                        ? <ErrorHandler code={code} ErrorState={errorState} EmptyState={emptyState} metadata={metadata} />\n                        : <React.Fragment>\n                            <PrimaryToolbar\n                                pagination={isLoading\n                                    ? <Skeleton fontSize=\"xl\" width=\"200px\" style={{ margin: 10 }} />\n                                    : {\n                                        itemCount: metadata.total_items,\n                                        page,\n                                        perPage,\n                                        isCompact: true,\n                                        onSetPage,\n                                        onPerPageSelect,\n                                        ouiaId: `top-${paginationOUIA}`,\n                                        isDisabled: metadata.total_items === 0\n                                    }}\n                                filterConfig={filterConfig}\n                                activeFiltersConfig={{\n                                    filters: buildFilterChips(filter, search, searchChipLabel),\n                                    onDelete: deleteFilters,\n                                    deleteTitle: intl.formatMessage(defaultFilters\n                                        && messages.labelsFiltersReset || messages.labelsFiltersClear)\n                                }}\n                                actionsConfig={{\n                                    actions: [remediationProvider && (\n                                        <AsyncRemediationButton\n                                            remediationProvider={remediationProvider}\n                                            isDisabled={\n                                                Object.values(selectedRows).filter(isSelected => isSelected).length === 0\n                                                || isRemediationLoading\n                                            }\n                                            isLoading={isRemediationLoading}\n                                        />\n                                    )]\n                                }}\n                                exportConfig={{\n                                    isDisabled: metadata.total_items === 0,\n                                    onSelect: onExport\n                                }}\n                                bulkSelect={onSelect && bulkSelectConfig}\n                            >\n                                {ToolbarButton && <ToolbarItem>\n                                    <ToolbarButton />\n                                </ToolbarItem>}\n                            </PrimaryToolbar>\n                            {isLoading\n                                ? <SkeletonTable\n                                    colSize={columns?.length ?? 5}\n                                    rowSize={20}\n                                    variant={compact && TableVariant.compact}\n                                />\n                                : <Table\n                                    aria-label=\"Patch table view\"\n                                    cells={columns}\n                                    onSelect={metadata.total_items && onSelect}\n                                    rows={rows}\n                                    onCollapse={metadata.total_items && onCollapse}\n                                    canSelectAll={false}\n                                    onSort={metadata.total_items && onSort}\n                                    ouiaId={tableOUIA}\n                                    sortBy={metadata.total_items && sortBy}\n                                    isStickyHeader\n                                    variant={compact && TableVariant.compact}\n                                    actions={actionsConfig}\n                                    actionsToggle={actionsToggle}\n                                >\n                                    <TableHeader />\n                                    <TableBody />\n                                </Table>\n                            }\n                            <TableFooter\n                                isLoading={isLoading}\n                                totalItems={metadata.total_items}\n                                perPage={perPage}\n                                page={page}\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                paginationOUIA={`bottom-${paginationOUIA}`}\n                            />\n                        </React.Fragment>\n                    }\n                </React.Fragment>)\n            }\n        </React.Fragment>\n    );\n};\n\nTableView.propTypes = {\n    columns: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    onExport: PropTypes.func,\n    remediationProvider: PropTypes.func,\n    selectedRows: PropTypes.object,\n    apply: PropTypes.func,\n    sortBy: PropTypes.object,\n    filterConfig: PropTypes.object,\n    store: PropTypes.object,\n    compact: PropTypes.bool,\n    tableOUIA: PropTypes.string,\n    paginationOUIA: PropTypes.string,\n    errorState: PropTypes.element,\n    emptyState: PropTypes.element,\n    defaultFilters: PropTypes.object,\n    searchChipLabel: PropTypes.string,\n    ToolbarButton: PropTypes.node,\n    actionsConfig: PropTypes.array,\n    isRemediationLoading: PropTypes.bool,\n    actionsToggle: PropTypes.func\n};\n\nexport default TableView;\n","import { cellWidth, expandable, sortable } from '@patternfly/react-table/dist/js';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nexport const advisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSynopsis),\n        transforms: [sortable],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        key: 'applicable_systems'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(15)],\n        key: 'public_date'\n    }\n];\n\nexport const systemAdvisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: 'Synopsis',\n        transforms: [sortable, cellWidth(35)],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(15)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable, cellWidth(20)],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(30)],\n        key: 'public_date'\n    }\n];\n\nexport const systemPackagesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(20)],\n        key: 'name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsInstalledVersion),\n        transforms: [sortable, cellWidth(15)],\n        key: 'evra'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsLatestVersion),\n        transforms: [cellWidth(15)],\n        key: 'latest_update'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [cellWidth(10)],\n        key: 'updatable'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        key: 'summary'\n    }\n];\n\nexport const packagesColumns = [\n    {\n        key: 'name',\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(25)]\n    },\n    {\n        key: 'systems_installed',\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'systems_updatable',\n        title: intl.formatMessage(messages.labelsColumnsUpgradable),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'summary',\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        props: {\n            width: 30\n        }\n    }\n];\n\nexport const cvesTableColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsCveID),\n        transforms: [sortable, cellWidth(40)],\n        key: 'synopsis'\n    },\n    {\n        key: 'impact',\n        title: intl.formatMessage(messages.labelsColumnsSeverity),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    },\n    {\n        key: 'cvss',\n        title: intl.formatMessage(messages.labelsColumnsCVSS),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    }\n];\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PowerOffIcon, SecurityIcon } from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { fetchApplicableAdvisoriesApi } from '../../Utilities/api';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Card, Grid, GridItem, CardBody, Title, Split, SplitItem\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { handlePatchLink, handleLongSynopsis } from '../../Utilities/Helpers';\nimport { entityTypes, advisorySeverities } from '../../Utilities/constants';\nimport AdvisoryType from '../AdvisoryType/AdvisoryType';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst StatusCard = ({ advisory: { attributes, id } }) =>\n    (\n        <Card isFullHeight>\n            <CardTitle>\n                {handlePatchLink(entityTypes.advisories, id)}\n            </CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Grid>\n                    <GridItem>\n                        <Grid>\n                            <GridItem lg={6} md={12} sm={6}>\n                                <Grid>\n                                    <GridItem>\n                                        <AdvisoryType\n                                            type={attributes.advisory_type_name}\n                                        />\n                                    </GridItem>\n                                    <GridItem>\n                                        {processDate(attributes.public_date)}\n                                    </GridItem>\n                                    {attributes.os_name && (<GridItem>\n                                        {attributes.os_name}\n                                    </GridItem>)}\n                                </Grid>\n                            </GridItem>\n                            <GridItem lg={6} className='adjustableElement' sm={6}>\n                                <Grid>\n                                    {attributes.severity && (<GridItem>\n                                        <Split hasGutter>\n                                            <GridItem >\n                                                <SecurityIcon size=\"sm\" color={advisorySeverities[attributes.severity].color} />\n                                            </GridItem>\n                                            <GridItem isFilled>{advisorySeverities[attributes.severity].label}</GridItem>\n                                        </Split>\n                                    </GridItem>)}\n                                    {attributes.reboot_required && (\n                                        <GridItem>\n                                            <Split hasGutter>\n                                                <SplitItem><PowerOffIcon color='var(--pf-global--palette--red-100)' /></SplitItem>\n                                                <SplitItem isFilled style={{ flexWrap: 'nowrap' }}>\n                                                    {intl.formatMessage(messages.textRebootIsRequired)}\n                                                </SplitItem>\n                                            </Split>\n                                        </GridItem>\n                                    )}\n                                </Grid>\n                            </GridItem>\n                        </Grid>\n                    </GridItem>\n\n                    <GridItem>\n                        {handlePatchLink(\n                            entityTypes.advisories,\n                            id,\n                            intl.formatMessage(\n                                messages.labelsApplicableSystemsCount,\n                                { systemsCount: attributes.applicable_systems }\n                            )\n                        )}\n                    </GridItem>\n                    <GridItem>\n                        {handleLongSynopsis(attributes.synopsis)}\n                    </GridItem>\n                </Grid>\n            </CardBody>\n        </Card>\n    );\n\nconst AdvisoriesStatusBar = () => {\n    const [advisories, setAdvisories] = React.useState({});\n    React.useEffect(async () => {\n        setAdvisories(\n            await fetchApplicableAdvisoriesApi({ limit: 4, sort: '-advisory_type_name,-applicable_systems' })\n        );\n    }, []);\n\n    return advisories.data && advisories.data.length && (\n        <Main style={{ paddingBottom: 0, paddingTop: 0 }}>\n\n            <Title headingLevel=\"h3\" className='pf-u-my-md'>\n                {intl.formatMessage(messages.titlesMostImpactfulAdvisories)}\n            </Title>\n\n            <Grid hasGutter>\n                {advisories.data.map(advisory =>\n                    (<GridItem key={advisory.id} lg={3} md={3} sm={12}>\n                        <StatusCard\n                            advisory={advisory}\n                        />\n                    </GridItem>)\n                )\n                }\n            </Grid>\n        </Main>\n    ) || null;\n};\n\nStatusCard.propTypes = {\n    advisory: propTypes.object\n};\nexport default AdvisoriesStatusBar;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport rebootFilter from '../../PresentationalComponents/Filters/RebootFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { advisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport {\n    changeAdvisoryListParams, expandAdvisoryRow,\n    fetchApplicableAdvisories, selectAdvisoryRow\n} from '../../store/Actions/Actions';\nimport { exportAdvisoriesCSV, exportAdvisoriesJSON } from '../../Utilities/api';\nimport { createAdvisoriesRows } from '../../Utilities/DataMappers';\nimport {\n    createSortBy, decodeQueryparams,\n    encodeURLParams, getRowIdByIndexExpandable\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useOnExport,\n    usePerPageSelect, useSetPage, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport AdvisoriesStatusReport from '../../PresentationalComponents/StatusReports/AdvisoriesStatusReport';\nimport useRemediationProvier from '../../Utilities/useRemediationDataProvider';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\n\nconst Advisories = ({ history }) => {\n    const pageTitle = intl.formatMessage(messages.titlesAdvisories);\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const advisories = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.rows\n    );\n    const expandedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.status\n    );\n    const areAllSelected = useSelector(\n        ({ SystemsStore }) => SystemsStore?.areAllSelected\n    );\n\n    const rows = React.useMemo(\n        () => createAdvisoriesRows(advisories, expandedRows, selectedRows),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    useEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchApplicableAdvisories(queryParams));\n        }\n    }, [JSON.stringify(queryParams), firstMount]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const onSelect = useOnSelect(\n        rows,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.advisories,\n            queryParams,\n            selectionDispatcher: selectAdvisoryRow\n        }\n    );\n\n    const onSort = useSortColumn(advisoriesColumns, apply, 2);\n    const sortBy = React.useMemo(\n        () => createSortBy(advisoriesColumns, metadata.sort, 2),\n        [metadata.sort]\n    );\n\n    const onExport = useOnExport('advisories', queryParams, {\n        csv: exportAdvisoriesCSV,\n        json: exportAdvisoriesJSON\n    }, dispatch);\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeAdvisoryListParams(params));\n    }\n\n    const remediationDataProvider = useRemediationProvier(selectedRows, setRemediationLoading, 'advisories', areAllSelected);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchAdvisories)} headerOUIA={'advisories'} />\n            <AdvisoriesStatusReport/>\n            <Main>\n                <TableView\n                    columns={advisoriesColumns}\n                    compact\n                    onCollapse={onCollapse}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    onExport={onExport}\n                    selectedRows={selectedRows}\n                    onSelect={onSelect}\n                    sortBy={sortBy}\n                    remediationProvider={remediationDataProvider}\n                    apply={apply}\n                    remediationButtonOUIA={'toolbar-remediation-button'}\n                    tableOUIA={'advisories-table'}\n                    paginationOUIA={'advisories-pagination'}\n                    store={{ rows, metadata, status, queryParams }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle),\n                                intl.formatMessage(messages.labelsFiltersSearchAdvisoriesPlaceholder)\n                            ),\n                            typeFilter(apply, queryParams.filter),\n                            publishDateFilter(apply, queryParams.filter),\n                            rebootFilter(apply, queryParams.filter)\n                        ]\n                    }}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle)}\n                    isRemediationLoading={isRemediationLoading}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisories.propTypes = {\n    history: propTypes.object\n};\n\nexport default withRouter(Advisories);\n","import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchIDs } from './api';\nimport { toggleAllSelectedAction } from '../store/Actions/Actions';\nimport { isObject } from './Helpers';\n\nexport const ID_API_ENDPOINTS = {\n    advisories: '/ids/advisories',\n    systems: '/ids/systems',\n    templates: '/baselines',\n    advisorySystems: (advisoryID) => `/ids/advisories/${advisoryID}/systems`,\n    systemAdvisories: (systemID) => `/ids/systems/${systemID}/advisories`,\n    packageSystems: (packageName) => `/packages/${packageName}/systems`,\n    systemPackages: (systemID) => `/systems/${systemID}/packages`\n};\n\nconst useFetchAllIDs = (\n    endpoint,\n    apiResponseTransformer\n) =>\n    useCallback((queryParams) =>\n        fetchIDs(endpoint, { ...queryParams, limit: -1 })\n        .then(response =>\n            apiResponseTransformer ? apiResponseTransformer(response) : response\n        ),\n    []\n    );\n\nconst useCreateSelectedRow = (transformKey, constructFilename) =>\n    useCallback((rows, toSelect = []) => {\n        const { ids, data } = rows;\n        const shouldUseOnlyIDs = Array.isArray(ids);\n        const items = shouldUseOnlyIDs ? ids : data;\n\n        items.forEach((item) => {\n            const id = shouldUseOnlyIDs ? item : item.id;\n\n            //expanded rows does not have ID and should be disabled for selection\n            if (!(isObject(item) && item.isExpandedRow)) {\n                toSelect.push(\n                    {\n                        id: transformKey ? transformKey(item) : id,\n                        selected: constructFilename ? constructFilename(item) : id\n                    }\n                );\n            }\n        });\n\n        return toSelect;\n    });\n\nconst createSelectors = (\n    createSelectedRow,\n    dispatchSelection,\n    toggleAllSystemsSelected\n) => {\n    const selectNone = (rows) => {\n        const toSelect = [];\n        Object.keys(rows).forEach(id => {\n            toSelect.push(\n                {\n                    id,\n                    selected: false\n                }\n            );\n        });\n\n        dispatchSelection(toSelect);\n        toggleAllSystemsSelected(false);\n    };\n\n    const selectPage = (pageRows) => {\n        if (Array.isArray(pageRows)) {\n            pageRows = pageRows.filter(row => !row.disableCheckbox);\n        }\n\n        dispatchSelection(createSelectedRow({ data: pageRows }));\n    };\n\n    const selectAll = (fetchIDs, queryParams) => {\n        return fetchIDs(queryParams).then(response => {\n            dispatchSelection(createSelectedRow(response));\n            toggleAllSystemsSelected(true);\n        });\n    };\n\n    return { selectNone, selectPage, selectAll };\n};\n\nexport const useOnSelect = (rawData, selectedRows, config) => {\n    const {\n        endpoint,\n        queryParams,\n        selectionDispatcher,\n        constructFilename,\n        transformKey,\n        apiResponseTransformer,\n        //TODO: get rid of this custom selector\n        customSelector\n    } = config;\n\n    const dispatch = useDispatch();\n    const fetchIDs = useFetchAllIDs(endpoint, apiResponseTransformer);\n    const createSelectedRow = useCreateSelectedRow(transformKey, constructFilename);\n\n    const toggleAllSystemsSelected = (flagState) => {\n        dispatch(toggleAllSelectedAction(flagState));\n    };\n\n    const dispatchSelection = (toSelect) => {\n        if (customSelector) {\n            customSelector(toSelect);\n        } else {\n            dispatch(selectionDispatcher(toSelect));\n        }\n    };\n\n    const { selectNone, selectPage, selectAll } = createSelectors(\n        createSelectedRow,\n        dispatchSelection,\n        toggleAllSystemsSelected\n    );\n\n    const onSelect = useCallback(\n        async (event, selected, rowId, setBulkLoading = () => {}) => {\n            switch (event) {\n                case 'none': {\n                    selectNone(selectedRows);\n                    break;\n                }\n\n                case 'page': {\n                    selectPage(rawData);\n                    break;\n                }\n\n                case 'all': {\n                    selectAll(fetchIDs, queryParams)\n                    .then(() => setBulkLoading(false));\n                    break;\n                }\n\n                default: {\n                    dispatchSelection([{\n                        id: transformKey ? transformKey(rawData[rowId]) : rawData[rowId].id,\n                        selected: selected && (constructFilename ? constructFilename(rawData[rowId]) : true)\n                    }]);\n                }\n            }\n        });\n\n    return onSelect;\n};\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n    removeUndefinedObjectKeys\n} from './Helpers';\n\nconst initializeWorker = () => {\n    const worker = new Worker(new URL('./RemediationPairs.js', import.meta.url));\n    return [worker, () => worker.terminate()];\n};\n\nconst deligateWorkerTask = (worker, task) => {\n    worker.postMessage(task);\n\n    //waits web worker response\n    return new Promise((resolve, reject) => {\n        worker.onmessage = ({ data: { status, error, result } } = {}) => {\n            if (status === 'resolved')  {\n                resolve(result);\n            }\n\n            reject(error);\n        };\n    });\n};\n\nexport const prepareRemediationPairs = async (task, dispatch) => {\n    const [worker, terminateWorker] = initializeWorker();\n    const deligatedTask = deligateWorkerTask(worker, task);\n\n    const response = await deligatedTask.catch(err =>\n        dispatch(\n            addNotification(\n                {\n                    title: `There was an error while processing.`,\n                    description: err,\n                    variant: 'danger'\n                }\n            )\n        ));\n\n    terminateWorker();\n\n    //displays NoDataModal when there is no patch updates available\n    return response?.issues?.length ? response : false;\n};\n\n/**\n* Provides remediation data, systems with all of their corresponding issues.\n* @param {Function} [setRemediationLoading] function to toggle remediation loading state\n* @param {Array} [selectedRows] array of systems to calculate\n* @returns {handleSystemsRemoval}\n*/\nconst useRemediationDataProvider = (selectedRows, setRemediationLoading, remediationType, areAllSelected) => {\n    const dispatch = useDispatch();\n    const remediationDataProvider = async () => {\n        setRemediationLoading(true);\n\n        //Auth token must be added to webworker request as webworker does not have access\n        //to default token by platform\n        const authToken = await window.insights.chrome.auth.getToken();\n        const remediationPairs = await prepareRemediationPairs(\n            {\n                payload: removeUndefinedObjectKeys(selectedRows),\n                remediationType,\n                areAllSelected,\n                authToken\n            },\n            dispatch\n        );\n\n        setRemediationLoading(false);\n\n        return remediationPairs;\n    };\n\n    return remediationDataProvider;\n};\n\nexport default useRemediationDataProvider;\n"],"names":["Object","defineProperty","exports","value","Card","CardContext","tslib_1","React","__importStar","card_1","__importDefault","react_styles_1","helpers_1","createContext","cardId","registerTitleId","isExpanded","_a","children","id","className","component","isHoverable","isCompact","isSelectable","isSelectableRaised","isSelected","isDisabledRaised","isFlat","isRounded","isLarge","isFullHeight","isPlain","ouiaId","ouiaSafe","hasSelectableInput","selectableInputAriaLabel","onSelectableInputChange","props","__rest","Component","ouiaProps","useOUIAProps","displayName","titleId","setTitleId","useState","ariaProps","setAriaProps","console","warn","containsCardTitleChildRef","useRef","useEffect","current","createElement","Provider","assign","type","checked","onChange","event","disabled","tabIndex","css","default","card","modifiers","compact","expanded","flat","rounded","displayLg","fullHeight","plain","nonSelectableRaised","selectableRaised","selectedRaised","selectable","selected","undefined","isFilled","cardBody","noFill","Card_1","useContext","cardTitle","apply","currentFilter","currentValue","public_date","filterByPublicDate","filter","label","intl","messages","conditionalFilterType","filterValues","items","publicDateOptions","placeholder","reboot_required","rebootMap","rebootRequired","toString","currentValueStringType","Array","isArray","map","filterByReboot","advisoryTypesMap","advisoryTypes","filterByType","advisory_type_name","HeaderBreadcrumbs","headerOUIA","Breadcrumb","Boolean","item","BreadcrumbItem","key","title","isActive","to","Link","propTypes","PropTypes","HeaderTabs","history","Tabs","onSelect","tabString","push","activeKey","location","pathname","Tab","eventKey","withRouter","Header","showTabs","breadcrumbs","actions","PageHeader","Split","SplitItem","PageHeaderTitle","SystemUpToDate","style","paddingTop","icon","size","color","marginBottom","Title","headingLevel","TableFooter","isLoading","page","perPage","onSetPage","totalItems","onPerPageSelect","paginationOUIA","Skeleton","fontSize","width","margin","Pagination","itemCount","widgetId","variant","PaginationVariant","isDisabled","TableView","columns","store","rows","metadata","status","queryParams","search","onCollapse","onSort","onExport","filterConfig","sortBy","remediationProvider","selectedRows","tableOUIA","errorState","emptyState","defaultFilters","searchChipLabel","ToolbarButton","actionsConfig","isRemediationLoading","actionsToggle","convertLimitOffset","limit","offset","useRemoveFilter","deleteFilters","selectedCount","arrayFromObj","length","code","hasError","bulkSelectConfig","useBulkSelectConfig","has_systems","ErrorHandler","ErrorState","EmptyState","PrimaryToolbar","pagination","total_items","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","AsyncRemediationButton","values","exportConfig","bulkSelect","ToolbarItem","SkeletonTable","colSize","rowSize","TableVariant","Table","cells","canSelectAll","isStickyHeader","TableHeader","TableBody","advisoriesColumns","cellFormatters","expandable","transforms","sortable","cellWidth","systemAdvisoriesColumns","systemPackagesColumns","packagesColumns","cvesTableColumns","StatusCard","advisory","attributes","CardTitle","handlePatchLink","entityTypes","CardBody","Grid","GridItem","lg","md","sm","AdvisoryType","processDate","os_name","severity","hasGutter","advisorySeverities","flexWrap","systemsCount","applicable_systems","handleLongSynopsis","synopsis","advisories","setAdvisories","fetchApplicableAdvisoriesApi","sort","data","Main","paddingBottom","Advisories","pageTitle","setPageTitle","dispatch","useDispatch","firstMount","setFirstMount","useSelector","AdvisoryListStore","expandedRows","areAllSelected","SystemsStore","createAdvisoriesRows","setRemediationLoading","clearNotifications","decodeQueryparams","encodeURLParams","fetchApplicableAdvisories","JSON","stringify","_","rowId","expandAdvisoryRow","getRowIdByIndexExpandable","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","selectAdvisoryRow","useSortColumn","createSortBy","useOnExport","csv","exportAdvisoriesCSV","json","exportAdvisoriesJSON","useSetPage","usePerPageSelect","params","changeAdvisoryListParams","remediationDataProvider","useRemediationProvier","AdvisoriesStatusReport","remediationButtonOUIA","searchFilter","typeFilter","publishDateFilter","rebootFilter","systems","templates","advisorySystems","advisoryID","systemAdvisories","systemID","packageSystems","packageName","systemPackages","rawData","config","constructFilename","transformKey","apiResponseTransformer","customSelector","fetchIDs","useCallback","then","response","useFetchAllIDs","createSelectedRow","toSelect","ids","shouldUseOnlyIDs","forEach","isObject","isExpandedRow","useCreateSelectedRow","dispatchSelection","toggleAllSystemsSelected","selectNone","keys","selectPage","pageRows","row","disableCheckbox","selectAll","createSelectors","flagState","toggleAllSelectedAction","setBulkLoading","initializeWorker","worker","Worker","URL","terminate","deligateWorkerTask","task","postMessage","Promise","resolve","reject","onmessage","error","result","prepareRemediationPairs","terminateWorker","deligatedTask","err","addNotification","description","issues","remediationType","window","insights","chrome","auth","getToken","authToken","payload","removeUndefinedObjectKeys","remediationPairs"],"sourceRoot":""}