{"version":3,"file":"js/Systems.1654609312606.517591eb88199655fb0f.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/Card.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/CardBody.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/CardTitle.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Skeleton/Skeleton.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/package-icon.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Skeleton/skeleton.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js","webpack:///./src/PresentationalComponents/StatusReports/SystemsStatusReport.js","webpack:///./src/SmartComponents/Systems/Systems.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Card = exports.CardContext = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst helpers_1 = require(\"../../helpers\");\nexports.CardContext = React.createContext({\n    cardId: '',\n    isExpanded: false\n});\nconst Card = (_a) => {\n    var { children = null, id = '', className = '', component = 'article', isHoverable = false, isCompact = false, isSelectable = false, isSelectableRaised = false, isSelected = false, isDisabledRaised = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true } = _a, props = tslib_1.__rest(_a, [\"children\", \"id\", \"className\", \"component\", \"isHoverable\", \"isCompact\", \"isSelectable\", \"isSelectableRaised\", \"isSelected\", \"isDisabledRaised\", \"isFlat\", \"isExpanded\", \"isRounded\", \"isLarge\", \"isFullHeight\", \"isPlain\", \"ouiaId\", \"ouiaSafe\"]);\n    const Component = component;\n    const ouiaProps = helpers_1.useOUIAProps(exports.Card.displayName, ouiaId, ouiaSafe);\n    if (isCompact && isLarge) {\n        // eslint-disable-next-line no-console\n        console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n        isLarge = false;\n    }\n    const getSelectableModifiers = () => {\n        if (isDisabledRaised) {\n            return react_styles_1.css(card_1.default.modifiers.nonSelectableRaised);\n        }\n        if (isSelectableRaised) {\n            return react_styles_1.css(card_1.default.modifiers.selectableRaised, isSelected && card_1.default.modifiers.selectedRaised);\n        }\n        if (isSelectable || isHoverable) {\n            return react_styles_1.css(card_1.default.modifiers.selectable, isSelected && card_1.default.modifiers.selected);\n        }\n        return '';\n    };\n    return (React.createElement(exports.CardContext.Provider, { value: {\n            cardId: id,\n            isExpanded\n        } },\n        React.createElement(Component, Object.assign({ id: id, className: react_styles_1.css(card_1.default.card, isCompact && card_1.default.modifiers.compact, isExpanded && card_1.default.modifiers.expanded, isFlat && card_1.default.modifiers.flat, isRounded && card_1.default.modifiers.rounded, isLarge && card_1.default.modifiers.displayLg, isFullHeight && card_1.default.modifiers.fullHeight, isPlain && card_1.default.modifiers.plain, getSelectableModifiers(), className), tabIndex: isSelectable || isSelectableRaised ? '0' : undefined }, props, ouiaProps), children)));\n};\nexports.Card = Card;\nexports.Card.displayName = 'Card';\n//# sourceMappingURL=Card.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CardBody = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst CardBody = (_a) => {\n    var { children = null, className = '', component = 'div', isFilled = true } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\", \"isFilled\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(card_1.default.cardBody, !isFilled && card_1.default.modifiers.noFill, className) }, props), children));\n};\nexports.CardBody = CardBody;\nexports.CardBody.displayName = 'CardBody';\n//# sourceMappingURL=CardBody.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CardTitle = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst CardTitle = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(card_1.default.cardTitle, className) }, props), children));\n};\nexports.CardTitle = CardTitle;\nexports.CardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Skeleton = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst skeleton_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Skeleton/skeleton\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst Skeleton = (_a) => {\n    var { className, width, height, fontSize, shape, screenreaderText } = _a, props = tslib_1.__rest(_a, [\"className\", \"width\", \"height\", \"fontSize\", \"shape\", \"screenreaderText\"]);\n    const fontHeightClassName = fontSize\n        ? Object.values(skeleton_1.default.modifiers).find(key => key === `pf-m-text-${fontSize}`)\n        : undefined;\n    return (React.createElement(\"div\", Object.assign({}, props, { className: react_styles_1.css(skeleton_1.default.skeleton, fontSize && fontHeightClassName, shape === 'circle' && skeleton_1.default.modifiers.circle, shape === 'square' && skeleton_1.default.modifiers.square, className) }, ((width || height) && {\n        style: Object.assign({ '--pf-c-skeleton--Width': width ? width : undefined, '--pf-c-skeleton--Height': height ? height : undefined }, props.style)\n    })),\n        React.createElement(\"span\", { className: \"pf-u-screen-reader\" }, screenreaderText)));\n};\nexports.Skeleton = Skeleton;\nexports.Skeleton.displayName = 'Skeleton';\n//# sourceMappingURL=Skeleton.js.map","\"use strict\"\nexports.__esModule = true;\nexports.PackageIconConfig = {\n  name: 'PackageIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M567.7,1010.49707 L951.5,818.498238 C994.7,796.698371 1024,752.39864 1024,703.998934 L1024,320.001265 C1024,271.601559 995.6,227.10183 952.2,205.501961 L568.6,13.5031267 C550.8,4.60318072 531.4,0.103208049 512,-0.00152855358 C492.3,-0.0967907365 472.5,4.40318194 454.4,13.5031267 L70.8,205.501961 C27.4,227.10183 0,271.50156 0,319.801267 L0.9,703.998934 C0.9,752.39864 28.3,796.79837 71.6,818.398239 L455.2,1010.39707 C464.3,1014.89705 488.1,1023.99699 511.9,1023.99699 C535.5,1023.99699 558.8,1014.99704 567.7,1010.49707 Z M512.5,630.899377 L672.5,550.899863 L672.5,645.29929 L736.5,613.299484 L736.5,518.900058 L896,438.900543 L896.5,712.698881 L512.5,904.697715 L512.5,630.899377 Z M145.1,304.101362 L294.9,228.60182 C295.3,228.801819 295.6,229.001818 296,229.201817 L661.9,412.300705 L512.5,487.600248 L145.1,304.101362 Z M512.5,118.902487 L881.3,301.701377 L733.1,376.400923 L366,192.702038 L512.5,118.902487 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PackageIcon = require('../createIcon').createIcon(exports.PackageIconConfig);\nexports[\"default\"] = exports.PackageIcon;","\"use strict\";\nexports.__esModule = true;\nrequire('./skeleton.css');\nexports.default = {\n  \"modifiers\": {\n    \"circle\": \"pf-m-circle\",\n    \"square\": \"pf-m-square\",\n    \"widthSm\": \"pf-m-width-sm\",\n    \"widthMd\": \"pf-m-width-md\",\n    \"widthLg\": \"pf-m-width-lg\",\n    \"width_25\": \"pf-m-width-25\",\n    \"width_33\": \"pf-m-width-33\",\n    \"width_50\": \"pf-m-width-50\",\n    \"width_66\": \"pf-m-width-66\",\n    \"width_75\": \"pf-m-width-75\",\n    \"heightSm\": \"pf-m-height-sm\",\n    \"heightMd\": \"pf-m-height-md\",\n    \"heightLg\": \"pf-m-height-lg\",\n    \"height_25\": \"pf-m-height-25\",\n    \"height_33\": \"pf-m-height-33\",\n    \"height_50\": \"pf-m-height-50\",\n    \"height_66\": \"pf-m-height-66\",\n    \"height_75\": \"pf-m-height-75\",\n    \"height_100\": \"pf-m-height-100\",\n    \"text_4xl\": \"pf-m-text-4xl\",\n    \"text_3xl\": \"pf-m-text-3xl\",\n    \"text_2xl\": \"pf-m-text-2xl\",\n    \"textXl\": \"pf-m-text-xl\",\n    \"textLg\": \"pf-m-text-lg\",\n    \"textMd\": \"pf-m-text-md\",\n    \"textSm\": \"pf-m-text-sm\"\n  },\n  \"skeleton\": \"pf-c-skeleton\"\n};","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (React.createElement(Cmp, { className: classNames(props.className, 'inventory') },\n        React.createElement(Suspense, { fallback: props.fallback },\n            React.createElement(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: React.createElement(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)))));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return React.createElement(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (React.createElement(Bullseye, { className: \"pf-u-p-lg\" },\n        React.createElement(Spinner, { size: \"xl\" }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React from 'react';\nimport propTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Button } from '@patternfly/react-core';\n\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { removePatchSetApi } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../../Utilities/constants';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen }) => {\n    const dispatch = useDispatch();\n\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n\n    const handleModalOpen = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleUnassignment = async () => {\n        const result = await removePatchSetApi({ inventory_ids: systemsIDs });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalOpen(true);\n            dispatch(addNotification(patchSetUnassignSystemsNotifications(systemsIDs?.length || 0).success));\n        }\n    };\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title=\"Remove systems\"\n            onClose={handleModalOpen}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={handleUnassignment}>\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalOpen}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {intl.formatMessage(\n                messages.textUnassignSystemsStatement,\n                { systemIDs: <b>{systemsIDs ? systemsIDs.length : 0}</b> }\n            )}\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default UnassignSystemsModal;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { CheckCircleIcon, PackageIcon, ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Button, Skeleton,\n    Card, Grid, GridItem, CardBody, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { fetchSystems } from '../../Utilities/api';\n\nconst StatusCard = ({ title, color, Icon, value, filter, apply }) => {\n    return (\n        <Card isCompact isFullHeight>\n            <CardTitle style={{ marginTop: '0px' }}>{title}</CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                    <FlexItem\n                        spacer={{ default: 'spacerMd' }}\n                        alignSelf={{ default: 'alignSelfCenter' }}\n                    >\n                        <Icon color={color} size='md'/>\n                    </FlexItem>\n                    <FlexItem isFilled spacer={{ default: 'spacerNone' }}>\n                        {\n                            typeof(value) === 'undefined'\n                            &&  <Skeleton width=\"24px\" />\n                                    ||  <Button\n                                        variant=\"link\"\n                                        onClick={() => apply(filter)}\n                                        className='patch-status-report-text'>\n                                        {value}\n                                    </Button>\n                        }\n                    </FlexItem>\n                </Flex>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst SystemsStatusreport = ({ apply, queryParams }) => {\n    const [subtotals, setSubtotals] = React.useState({});\n\n    const { selectedTags, selectedGlobalTags, systemProfile } = useSelector(({ GlobalFilterStore }) => GlobalFilterStore);\n\n    const res = useMemo(async () =>{\n        setSubtotals({});\n\n        let result;\n\n        try {\n            result = await fetchSystems({ filter: {\n                os: queryParams?.filter?.os\n            },\n            selectedTags: [...selectedTags, ...selectedGlobalTags],\n            systemProfile,\n            limit: 1\n            });\n        }\n        catch {\n            result = [];\n        }\n\n        return result;\n    }, [\n        queryParams?.filter?.os?.length, queryParams?.filter?.os !== undefined,\n        selectedTags?.length, selectedTags !== undefined,\n        selectedGlobalTags?.length, selectedGlobalTags !== undefined,\n        systemProfile,\n        queryParams?.subtotals !== undefined\n    ]);\n\n    res.then((result)=> {\n        setSubtotals(result.meta?.subtotals);\n    });\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Grid hasGutter span={12} >\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsUpToDate)}\n                        Icon={CheckCircleIcon}\n                        color={'var(--pf-global--success-color--100)'}\n                        value={subtotals?.patched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'eq:0' } }}\n                    />\n                </GridItem>\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsWithPatchesAvailable)}\n                        Icon={PackageIcon}\n                        color={'var(--pf-global--primary-color--100)'}\n                        value={subtotals?.unpatched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'gt:0' } }}\n                    />\n                </GridItem>\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusStaleSystems)}\n                        Icon={ExclamationTriangleIcon}\n                        color={'var(--pf-global--warning-color--100)'}\n                        value={subtotals?.stale}\n                        apply={apply}\n                        filter={{ filter: { stale: true } }}\n                    />\n                </GridItem>\n            </Grid>\n        </Main>\n    );\n};\n\nStatusCard.propTypes = {\n    title: propTypes.string,\n    Icon: propTypes.elementType,\n    value: propTypes.string,\n    color: propTypes.string,\n    apply: propTypes.func,\n    filter: propTypes.object\n};\n\nSystemsStatusreport.propTypes = {\n    apply: propTypes.func,\n    queryParams: propTypes.object\n};\n\nexport default SystemsStatusreport;\n","import React, { useEffect } from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Button } from '@patternfly/react-core';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport staleFilter from '../../PresentationalComponents/Filters/SystemStaleFilter';\nimport osVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport systemsUpdatableFilter from '../../PresentationalComponents/Filters/SystemsUpdatableFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changeSystemsParams, clearInventoryReducer, changeSystemsMetadata, changeTags } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchApplicableAdvisoriesApi,\n    fetchSystems, fetchViewAdvisoriesSystems\n} from '../../Utilities/api';\nimport { remediationIdentifiers, systemsListDefaultFilters, featureFlags } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips,\n    decodeQueryparams, filterRemediatableSystems, persistantParams, remediationProviderWithPairs, removeUndefinedObjectKeys,\n    transformPairs, systemsColumnsMerger, filterSelectedActiveSystemIDs\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useBulkSelectConfig, useGetEntities, useOnExport,\n    useOnSelect, useRemoveFilter, useFeatureFlag\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\nimport SystemsStatusReport from '../../PresentationalComponents/StatusReports/SystemsStatusReport';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport UnassignSystemsModal from '../Modals/UnassignSystemsModal';\n\nconst Systems = () => {\n    const pageTitle = intl.formatMessage(messages.titlesSystems);\n\n    setPageTitle(pageTitle);\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [isRemediationOpen, setRemediationOpen] = React.useState(false);\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const [unassignSystemsModalState, setUnassignSystemsModalState] = React.useState({\n        isUnassignSystemsModalOpen: false,\n        systemsIDs: []\n    });\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const [patchSetState, setBaselineState] = React.useState({\n        isOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const isPatchSetEnabled = useFeatureFlag(featureFlags.patch_set);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => dispatch(clearInventoryReducer());\n    }, []);\n\n    async function showRemediationModal(data) {\n        const resolvedData = await data;\n        setRemediationModalCmp(() =>\n            () => <RemediationWizard\n                data={resolvedData}\n                isRemediationOpen\n                setRemediationOpen={setRemediationOpen} />);\n        setRemediationOpen(!isRemediationOpen);\n    }\n\n    function showBaselineModal(rowData) {\n        setBaselineState({ isOpen: true, systemsIDs: [rowData.id] });\n    }\n\n    function apply(queryParams) {\n        dispatch(changeSystemsParams(queryParams));\n    }\n\n    const applyMetadata = (metadata) => {\n        dispatch(changeSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply, systemsListDefaultFilters);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            staleFilter(apply, filter),\n            systemsUpdatableFilter(apply, filter),\n            osVersionFilter(filter, apply)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n        onDelete: deleteFilters,\n        deleteTitle: intl.formatMessage(messages.labelsFiltersReset)\n    };\n\n    const fetchAllData = () =>\n        fetchSystems({ ...queryParams, limit: -1 }).then(filterRemediatableSystems);\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllData, selectRows);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport('systems', queryParams, {\n        csv: exportSystemsCSV,\n        json: exportSystemsJSON\n    }, dispatch);\n\n    const prepareRemediationPairs = (systems) => {\n        return fetchApplicableAdvisoriesApi({ limit: -1 }).then(\n            ({ data }) => fetchViewAdvisoriesSystems(\n                {\n                    advisories: data.map(advisory => advisory.id),\n                    systems\n                }\n            ));\n    };\n\n    const getEntities = useGetEntities(fetchSystems, apply, {}, history, applyMetadata, applyGlobalFilter);\n\n    const remediationDataProvider = () => {\n        setRemediationLoading(true);\n        return remediationProviderWithPairs(\n            removeUndefinedObjectKeys(selectedRows),\n            prepareRemediationPairs,\n            transformPairs,\n            remediationIdentifiers.advisory\n        ).then(result => {\n            setRemediationLoading(false);\n            return result;\n        });\n    };\n\n    const assignMultipleSystems = () => {\n        setBaselineState({ isOpen: true, systemsIDs: Object.keys(selectedRows) });\n    };\n\n    useEffect(() => patchSetState.shouldRefresh && onSelect('none'), [patchSetState.shouldRefresh]);\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setUnassignSystemsModalState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'} />\n            <SystemsStatusReport apply={apply} queryParams={queryParams}/>\n            <UnassignSystemsModal\n                unassignSystemsModalState={unassignSystemsModalState}\n                setUnassignSystemsModalOpen={setUnassignSystemsModalState}\n                systemsIDs={unassignSystemsModalState.systemsIDs}\n            />\n            {(patchSetState.isOpen && isPatchSetEnabled) &&\n                <PatchSetWizard systemsIDs={patchSetState.systemsIDs} setBaselineState={setBaselineState}/>}\n            {isRemediationOpen && <RemediationModalCmp /> || null}\n            <Main>\n                {status.hasError && <ErrorHandler code={status.code} /> ||\n                    (\n                        <InventoryTable\n                            isFullView\n                            autoRefresh\n                            initialLoading\n                            hideFilters={{ all: true, tags: false }}\n                            columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, true)}\n                            showTags\n                            customFilters={{\n                                patchParams: {\n                                    search,\n                                    filter,\n                                    systemProfile,\n                                    selectedTags\n                                },\n                                shouldRefresh: patchSetState.shouldRefresh === true\n                            }}\n                            paginationProps={{\n                                isDisabled: totalItems === 0\n                            }}\n                            onLoad={({ mergeWithEntities }) => {\n                                register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(systemsListColumns(isPatchSetEnabled), modifyInventory),\n                                        persistantParams({ page, perPage, sort, search }, decodedParams)\n                                    )\n                                });\n                            }}\n                            getEntities={getEntities}\n                            actions={systemsRowActions(\n                                showRemediationModal, showBaselineModal, isPatchSetEnabled, openUnassignSystemsModal\n                            )}\n                            tableProps={{\n                                actionResolver: (row) => systemsRowActions(\n                                    showRemediationModal, showBaselineModal, isPatchSetEnabled, openUnassignSystemsModal, row\n                                ),\n                                canSelectAll: false,\n                                variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                            }}\n                            bulkSelect={useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                            exportConfig={{\n                                isDisabled: totalItems === 0,\n                                onSelect: onExport\n                            }}\n                            actionsConfig={{\n                                actions: [\n                                    <Button onClick={assignMultipleSystems}\n                                        key='assign-multiple-systems'\n                                        isDisabled={selectedCount === 0}>\n                                        {intl.formatMessage(messages.titlesPatchSetAssign)}\n                                    </Button>,\n                                    {\n                                        key: 'remove-multiple-systems',\n                                        label: intl.formatMessage(messages.titlesPatchSetRemoveMultipleButton),\n                                        onClick: () => openUnassignSystemsModal(filterSelectedActiveSystemIDs(selectedRows)),\n                                        props: { isDisabled: selectedCount === 0 }\n                                    }\n                                ] }\n                            }\n                            filterConfig={filterConfig}\n                            activeFiltersConfig={activeFiltersConfig}\n                            dedicatedAction={(\n                                <AsyncRemediationButton\n                                    remediationProvider={remediationDataProvider}\n                                    isDisabled={\n                                        arrayFromObj(selectedRows).length === 0\n                                    }\n                                    isLoading={isRemediationLoading}\n                                />\n                            )}\n                        />\n                    )\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n","import { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            newState.status = { isLoading: true, hasError: true };\n            return newState;\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["exports","tslib_1","React","__importStar","card_1","__importDefault","react_styles_1","helpers_1","createContext","cardId","isExpanded","_a","children","id","className","component","isHoverable","isCompact","isSelectable","isSelectableRaised","isSelected","isDisabledRaised","isFlat","isRounded","isLarge","isFullHeight","isPlain","ouiaId","ouiaSafe","props","__rest","Component","ouiaProps","useOUIAProps","console","warn","createElement","value","Object","assign","css","default","card","modifiers","compact","expanded","flat","rounded","displayLg","fullHeight","plain","nonSelectableRaised","selectableRaised","selectedRaised","selectable","selected","tabIndex","undefined","isFilled","cardBody","noFill","cardTitle","skeleton_1","width","height","fontSize","shape","screenreaderText","fontHeightClassName","values","find","key","skeleton","circle","square","style","name","svgPath","yOffset","xOffset","__esModule","__assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","BaseInvTable","history","useHistory","store","Cmp","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","UnassignSystemsModal","unassignSystemsModalState","setUnassignSystemsModalOpen","dispatch","useDispatch","systemsIDs","isUnassignSystemsModalOpen","handleModalOpen","shouldRefresh","handleUnassignment","removePatchSetApi","inventory_ids","status","addNotification","patchSetUnassignSystemsNotifications","success","Modal","variant","isOpen","title","onClose","titleIconVariant","actions","Button","onClick","intl","messages","systemIDs","RemediationWizard","data","setRemediationOpen","setOpen","StatusCard","color","Icon","filter","Card","CardTitle","marginTop","CardBody","Flex","flex","flexWrap","FlexItem","spacer","alignSelf","Skeleton","SystemsStatusreport","queryParams","subtotals","setSubtotals","useSelector","GlobalFilterStore","selectedTags","selectedGlobalTags","systemProfile","useMemo","fetchSystems","os","limit","result","then","meta","Main","paddingBottom","Grid","hasGutter","span","GridItem","md","CheckCircleIcon","patched","packages_updatable","PackageIcon","unpatched","ExclamationTriangleIcon","stale","pageTitle","setPageTitle","isRemediationOpen","isRemediationLoading","setRemediationLoading","setUnassignSystemsModalState","RemediationModalCmp","setRemediationModalCmp","patchSetState","setBaselineState","isPatchSetEnabled","useFeatureFlag","featureFlags","decodedParams","decodeQueryparams","location","search","systems","entities","rows","shallowEqual","totalItems","total","selectedRows","SystemsStore","page","perPage","sort","showRemediationModal","resolvedData","showBaselineModal","rowData","changeSystemsParams","clearInventoryReducer","useRemoveFilter","systemsListDefaultFilters","deleteFilters","filterConfig","items","searchFilter","staleFilter","systemsUpdatableFilter","osVersionFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","onSelect","useOnSelect","filterRemediatableSystems","toSelect","type","payload","selectedCount","arrayFromObj","onExport","useOnExport","csv","exportSystemsCSV","json","exportSystemsJSON","prepareRemediationPairs","fetchApplicableAdvisoriesApi","fetchViewAdvisoriesSystems","advisories","map","advisory","getEntities","useGetEntities","metadata","changeSystemsMetadata","tags","changeTags","useEffect","openUnassignSystemsModal","Header","headerOUIA","SystemsStatusReport","PatchSetWizard","hasError","ErrorHandler","code","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","columns","defaultColumns","systemsColumnsMerger","showTags","customFilters","patchParams","paginationProps","isDisabled","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","modifyInventory","persistantParams","systemsRowActions","tableProps","actionResolver","row","canSelectAll","TableVariant","isStickyHeader","bulkSelect","useBulkSelectConfig","total_items","exportConfig","actionsConfig","keys","label","filterSelectedActiveSystemIDs","dedicatedAction","AsyncRemediationButton","remediationProvider","remediationProviderWithPairs","removeUndefinedObjectKeys","transformPairs","remediationIdentifiers","isLoading","initialState","offset","state","loaded","createSystemsRows","modifyPackageSystems","createPackageSystemsRows","inventoryModifier","action","newState","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}