{"version":3,"sources":["webpack:///./src/PresentationalComponents/PackageHeader/PackageHeader.js","webpack:///./src/PresentationalComponents/Filters/VersionFilter.js","webpack:///./src/SmartComponents/PackageSystems/PackageSystems.js","webpack:///./src/SmartComponents/PackageDetail/PackageDetail.js"],"names":["PackageHeader","attributes","isLoading","Grid","hasGutter","style","minHeight","GridItem","md","sm","WithLoader","loading","variant","WithLoaderVariants","centered","Stack","StackItem","whiteSpace","preserveNewlines","description","propTypes","apply","filter","packageVersions","React","isOpen","setOpen","numOptions","setNumOptions","isSet","installed_evra","installedEvra","split","versionList","data","sort","map","version","value","evra","disabled","type","conditionalFilterType","label","filterValues","children","Select","length","SelectVariant","typeAheadAriaLabel","onToggle","onSelect","_","selection","config","includes","existingVersions","concat","filteredOutEvras","join","undefined","selections","placeholderText","loadingVariant","text","onClick","maxHeight","overflow","slice","option","index","SelectOption","isDisabled","key","PackageSystems","packageName","dispatch","useDispatch","history","useHistory","RemediationModalCmp","setRemediationModalCmp","setPackageVersions","decodedParams","decodeQueryparams","location","search","systems","useSelector","entities","rows","shallowEqual","status","totalItems","total","selectedRows","queryParams","PackageSystemsStore","isRemediationLoading","setRemediationLoading","systemProfile","selectedTags","page","perPage","params","changePackageSystemsParams","fetchPackageVersions","package_name","clearInventoryReducer","useRemoveFilter","deleteFilters","filterConfig","items","searchFilter","intl","messages","statusFilter","versionFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","resolvedData","RemediationModal","useOnSelect","fetchPackageSystems","limit","then","filterRemediatablePackageSystems","toSelect","payload","system","available_evra","selectedCount","arrayFromObj","onExport","useOnExport","csv","exportPackageSystemsCSV","json","exportPackageSystemsJSON","prepareRemediationPairs","pairs","removeUndefinedObjectKeys","forEach","push","getEntites","useGetEntities","hasError","ErrorHandler","code","InventoryTable","disableDefaultColumns","isFullView","autoRefresh","initialLoading","hideFilters","all","getEntities","customFilters","patchParams","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","packageSystemsColumns","modifyPackageSystems","persistantParams","tableProps","canSelectAll","TableVariant","className","isStickyHeader","Fragment","PrimaryToolbar","bulkSelect","useBulkSelectConfig","total_items","dedicatedAction","PatchRemediationButton","showRemediationModal","remediationProviderWithPairs","transformPairs","remediationIdentifiers","ouia","exportConfig","PackageDetail","match","pageTitle","setPageTitle","packageDetails","PackageDetailStore","fetchPackageDetails","clearPackageDetailStore","Header","title","headerOUIA","breadcrumbs","to","paths","isActive","Unavailable","id","Main","TextContent","Text","component","TextVariants","withRouter"],"mappings":"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","file":"js/PackageDetail.27ce503c3ee72e63fd6b.js","sourcesContent":["import { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { preserveNewlines } from '../../Utilities/Helpers';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\n\nconst PackageHeader = ({ attributes, isLoading }) => {\n    return (\n        <Grid hasGutter style={{ minHeight: 50 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                preserveNewlines(attributes.description)\n                            }\n                        </StackItem>\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n\n        </Grid>\n    );\n};\n\nPackageHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default PackageHeader;\n","import React from 'react';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nconst VersionFilter = (apply, filter, packageVersions) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n\n    const isSet = filter && filter.installed_evra;\n    const installedEvra = isSet &&\n        (typeof(filter.installed_evra) === 'string' && filter.installed_evra.split(',')\n        || filter.installed_evra);\n    const versionList = packageVersions.data && packageVersions.data.sort().map(version => ({ value: version.evra }))\n        || [{ value: 'No version is available', disabled: true }];\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onSelect = (_, selection) => {\n        const config = { filter: {} };\n        if (!installedEvra || (installedEvra && !installedEvra.includes(selection))) {\n            const existingVersions = isSet && filter.installed_evra !== '' && filter.installed_evra.concat(',') || '';\n\n            config.filter = { installed_evra: `${existingVersions}${selection}` };\n        } else {\n            const filteredOutEvras = installedEvra.length !== 1\n                && installedEvra.filter(evra => !evra.includes(selection)).join(',') || undefined;\n\n            config.filter = { installed_evra: filteredOutEvras };\n        }\n\n        apply(config);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionList.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: 'Version',\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={versionList.length > 0 && SelectVariant.checkbox || SelectVariant.typeaheadMulti}\n                        typeAheadAriaLabel=\"Filter by package version\"\n                        onToggle={onToggle}\n                        onSelect={onSelect}\n                        selections={installedEvra}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-version-filter'}\n                        placeholderText=\"Filter by package version\"\n                        {...(numOptions < versionList.length\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionList.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                isDisabled={option.disabled}\n                                key={index}\n                                value={option.value}\n                                {...(option.description && { description: option.description })}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n\n};\n\nexport default VersionFilter;\n","import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changePackageSystemsParams, clearInventoryReducer } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyPackageSystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { fetchPackageSystems, exportPackageSystemsCSV,\n    exportPackageSystemsJSON, fetchPackageVersions } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips, decodeQueryparams, filterRemediatablePackageSystems,\n    removeUndefinedObjectKeys, persistantParams, remediationProviderWithPairs, transformPairs\n} from '../../Utilities/Helpers';\nimport { useBulkSelectConfig, useGetEntities, useOnExport, useOnSelect, useRemoveFilter } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport PatchRemediationButton from '../Remediation/PatchRemediationButton';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { packageSystemsColumns } from '../Systems/SystemsListAssets';\nimport versionFilter from '../../PresentationalComponents/Filters/VersionFilter';\nimport { useHistory } from 'react-router-dom';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { Fragment } from 'react';\n\nconst PackageSystems = ({ packageName }) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const [packageVersions, setPackageVersions] = React.useState([]);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const queryParams = useSelector(\n        ({ PackageSystemsStore }) => PackageSystemsStore?.queryParams || {}\n    );\n\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const { systemProfile, selectedTags,\n        filter, search, sort, page, perPage } = queryParams;\n\n    React.useEffect(async () => {\n        apply(decodedParams);\n        setPackageVersions(await fetchPackageVersions({ package_name: packageName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearInventoryReducer());\n        };\n    }, []);\n\n    function apply(params) {\n        dispatch(changePackageSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ ...filter, search }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            statusFilter(apply, filter),\n            versionFilter(apply, filter, packageVersions)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: deleteFilters\n    };\n\n    async function showRemediationModal(data) {\n        setRemediationLoading(true);\n        const resolvedData = await data;\n        setRemediationModalCmp(() => () => <RemediationModal data={resolvedData} />);\n        setRemediationLoading(false);\n    }\n\n    ;\n\n    const constructFilename = (system) => {\n        return `${packageName}-${system.available_evra}`;\n    };\n\n    const fetchAllData = () => {\n        return fetchPackageSystems({\n            ...queryParams,\n            package_name: packageName,\n            limit: -1 })\n        .then(filterRemediatablePackageSystems);\n    };\n\n    const selectRows = (toSelect) => {\n        dispatch({ type: 'SELECT_ENTITY', payload: toSelect });\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows,\n        fetchAllData, selectRows, constructFilename);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport(packageName, queryParams, {\n        csv: exportPackageSystemsCSV,\n        json: exportPackageSystemsJSON\n    }, dispatch);\n\n    const prepareRemediationPairs = () => {\n        let pairs = {};\n        removeUndefinedObjectKeys(selectedRows).forEach(system => {\n            if (pairs[selectedRows[system]]) {\n                pairs[selectedRows[system]].push(system);\n            }\n            else {\n                pairs[selectedRows[system]] = [system];\n            }\n        });\n        return { data: pairs };\n    };\n\n    const getEntites = useGetEntities(fetchPackageSystems, apply, { packageName }, history);\n    return (\n        <React.Fragment>\n            {status.hasError && <ErrorHandler code={status.code} /> || (\n                <InventoryTable\n                    disableDefaultColumns\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    hideFilters={{ all: true }}\n                    getEntities={getEntites}\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        register({\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(packageSystemsColumns, modifyPackageSystems),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        });\n\n                    }}\n                    tableProps={{\n                        canSelectAll: false,\n                        onSelect, variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                >\n                    <Fragment>\n                        {status.isLoading !== undefined && <PrimaryToolbar\n                            className=\"patch-systems-primary-toolbar\"\n                            filterConfig={filterConfig}\n                            activeFiltersConfig={activeFiltersConfig}\n                            bulkSelect={useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                            dedicatedAction={(\n                                <PatchRemediationButton\n                                    onClick={() =>\n                                        showRemediationModal(\n                                            remediationProviderWithPairs(\n                                                removeUndefinedObjectKeys(selectedRows),\n                                                prepareRemediationPairs,\n                                                transformPairs,\n                                                remediationIdentifiers.package)\n\n                                        )}\n                                    isDisabled={arrayFromObj(selectedRows).length === 0 || isRemediationLoading}\n                                    isLoading={isRemediationLoading}\n                                    ouia={'toolbar-remediation-button'}\n                                    exportConfig={{\n                                        isDisabled: totalItems === 0,\n                                        onSelect: onExport\n                                    }}\n                                />)}\n                        />}\n                        <RemediationModalCmp />\n\n                    </Fragment>\n\n                </InventoryTable>\n            )}\n        </React.Fragment>\n    );\n};\n\nPackageSystems.propTypes = {\n    packageName: propTypes.string\n};\n\nexport default PackageSystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport PackageHeader from '../../PresentationalComponents/PackageHeader/PackageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { paths } from '../../Routes';\nimport PackageSystems from '../../SmartComponents/PackageSystems/PackageSystems';\nimport { clearPackageDetailStore, fetchPackageDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst PackageDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [packageName] = React.useState(match.params.packageName);\n    const pageTitle = `${packageName} - ${intl.formatMessage(messages.titlesPackages)}`;\n    setPageTitle(pageTitle);\n    const packageDetails = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore\n    );\n    const status = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchPackageDetails({ packageName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearPackageDetailStore());\n        };\n    }, []);\n\n    const { attributes } = packageDetails.data;\n\n    return (\n        <React.Fragment>\n            <Header\n                title={packageName}\n                headerOUIA={'package-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchPackages),\n                        to: paths.packages.to,\n                        isActive: false\n                    },\n                    {\n                        title: packageName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable/> :\n                    <PackageHeader\n                        attributes={{ ...attributes, id: packageName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        <PackageSystems packageName={packageName}></PackageSystems>\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nPackageDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(PackageDetail);\n"],"sourceRoot":""}