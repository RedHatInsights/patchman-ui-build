{"version":3,"file":"js/Packages.f31251c4d09dcb586c84.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./src/PresentationalComponents/Snippets/SystemUpToDate.js","webpack:///./src/PresentationalComponents/TableView/TableFooter.js","webpack:///./src/PresentationalComponents/TableView/TableView.js","webpack:///./src/PresentationalComponents/TableView/TableViewAssets.js","webpack:///./src/PresentationalComponents/Filters/PackagesListStatusFilter.js","webpack:///./src/SmartComponents/Packages/Packages.js"],"sourcesContent":["import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}\n                        data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                        data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                    >{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history, headerOUIA }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={'/advisories'}\n                title={'Applicable advisories'}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-Applicable advisories'`}\n            />\n            <Tab\n                eventKey={'/systems/'}\n                title={'Systems'}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-Systems`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object,\n    headerOUIA: propTypes.string\n};\n\nexport default withRouter(HeaderTabs);\n","import { Split, SplitItem } from '@patternfly/react-core';\nimport {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA, actions }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <Split>\n                    <SplitItem>\n                        <PageHeaderTitle title={title} />\n                    </SplitItem>\n                    <SplitItem isFilled />\n                    <SplitItem>\n                        {actions}\n                    </SplitItem>\n                </Split>\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA={headerOUIA} />}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string,\n    actions: PropTypes.node\n};\n\nexport default Header;\n","import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const SystemUpToDate = () => (\n    <Bullseye>\n        <EmptyState style={{ paddingTop: 40 }}>\n            <EmptyStateIcon icon={()=><CheckCircleIcon size='xl' color={'var(--pf-global--success-color--200)' }\n                style={{ marginBottom: 15 }} />}/>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                {intl.formatMessage(messages.statesNoApplicableAdvisories)}\n            </Title>\n            <EmptyStateBody>\n                {intl.formatMessage(messages.statesSystemUpToDate)}\n            </EmptyStateBody>\n        </EmptyState>\n    </Bullseye>\n);\n","import { Pagination, PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TableFooter = ({ isLoading, page, perPage, onSetPage, totalItems, onPerPageSelect, paginationOUIA }) => {\n    return (\n        <>\n            {isLoading ? (\n                <div className=\"pf-c-pagination pf-m-bottom\">\n                    <Skeleton fontSize=\"xl\" width=\"350px\" style={{ margin: 10 }} />\n                </div>\n            ) :\n                <Pagination\n                    itemCount={totalItems}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    widgetId={`pagination-options-menu-bottom`}\n                    variant={PaginationVariant.bottom}\n                    ouiaId={paginationOUIA}\n                    isDisabled={totalItems === 0}\n                />\n            }\n        </>\n    );\n};\n\nTableFooter.propTypes = {\n    isLoading: PropTypes.bool,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalItems: PropTypes.number,\n    paginationOUIA: PropTypes.string\n};\n\nexport default TableFooter;\n","import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport AsyncRemediationButton from '../../SmartComponents/Remediation/AsyncRemediationButton';\nimport { arrayFromObj, buildFilterChips, convertLimitOffset } from '../../Utilities/Helpers';\nimport { useRemoveFilter, useBulkSelectConfig } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableFooter from './TableFooter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { Skeleton, ToolbarItem } from '@patternfly/react-core';\n\nconst TableView = ({\n    columns,\n    store: {\n        rows,\n        metadata,\n        status,\n        queryParams: { filter, search }\n    },\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    onExport,\n    filterConfig,\n    sortBy,\n    remediationProvider,\n    selectedRows,\n    compact,\n    apply,\n    tableOUIA,\n    paginationOUIA,\n    errorState,\n    emptyState,\n    defaultFilters,\n    searchChipLabel,\n    CreatePatchSetButton,\n    actionsConfig,\n    isRemediationLoading,\n    actionsToggle\n}) => {\n\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n\n    const [deleteFilters] = useRemoveFilter(filter, apply, defaultFilters);\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n    const { code, hasError, isLoading } = status;\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, metadata, rows, onCollapse);\n\n    return (\n        <React.Fragment>\n            {\n                (<React.Fragment>\n                    {(hasError || metadata.has_systems === false)\n                        ? <ErrorHandler code={code} ErrorState={errorState} EmptyState={emptyState} metadata={metadata} />\n                        : <React.Fragment>\n                            <PrimaryToolbar\n                                pagination={isLoading\n                                    ? <Skeleton fontSize=\"xl\" width=\"200px\" style={{ margin: 10 }} />\n                                    : {\n                                        itemCount: metadata.total_items,\n                                        page,\n                                        perPage,\n                                        isCompact: true,\n                                        onSetPage,\n                                        onPerPageSelect,\n                                        ouiaId: `top-${paginationOUIA}`,\n                                        isDisabled: metadata.total_items === 0\n                                    }}\n                                filterConfig={filterConfig}\n                                activeFiltersConfig={{\n                                    filters: buildFilterChips(filter, search, searchChipLabel),\n                                    onDelete: deleteFilters,\n                                    deleteTitle: intl.formatMessage(defaultFilters\n                                        && messages.labelsFiltersReset || messages.labelsFiltersClear)\n                                }}\n                                actionsConfig={{\n                                    actions: [remediationProvider && (\n                                        <AsyncRemediationButton\n                                            remediationProvider={remediationProvider}\n                                            isDisabled={\n                                                Object.values(selectedRows).filter(isSelected => isSelected).length === 0\n                                                || isRemediationLoading\n                                            }\n                                            isLoading={isRemediationLoading}\n                                        />\n                                    )]\n                                }}\n                                exportConfig={{\n                                    isDisabled: metadata.total_items === 0,\n                                    onSelect: onExport\n                                }}\n                                bulkSelect={onSelect && bulkSelectConfig}\n                            >\n                                {CreatePatchSetButton && <ToolbarItem>\n                                    <CreatePatchSetButton />\n                                </ToolbarItem>}\n                            </PrimaryToolbar>\n                            {isLoading\n                                ? <SkeletonTable\n                                    colSize={columns?.length ?? 5}\n                                    rowSize={20}\n                                    variant={compact && TableVariant.compact}\n                                />\n                                : <Table\n                                    aria-label=\"Patch table view\"\n                                    cells={columns}\n                                    onSelect={metadata.total_items && onSelect}\n                                    rows={rows}\n                                    onCollapse={metadata.total_items && onCollapse}\n                                    canSelectAll={false}\n                                    onSort={metadata.total_items && onSort}\n                                    ouiaId={tableOUIA}\n                                    sortBy={metadata.total_items && sortBy}\n                                    isStickyHeader\n                                    variant={compact && TableVariant.compact}\n                                    actions={actionsConfig}\n                                    actionsToggle={actionsToggle}\n                                >\n                                    <TableHeader />\n                                    <TableBody />\n                                </Table>\n                            }\n                            <TableFooter\n                                isLoading={isLoading}\n                                totalItems={metadata.total_items}\n                                perPage={perPage}\n                                page={page}\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                paginationOUIA={`bottom-${paginationOUIA}`}\n                            />\n                        </React.Fragment>\n                    }\n                </React.Fragment>)\n            }\n        </React.Fragment>\n    );\n};\n\nTableView.propTypes = {\n    columns: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    onExport: PropTypes.func,\n    remediationProvider: PropTypes.func,\n    selectedRows: PropTypes.object,\n    apply: PropTypes.func,\n    sortBy: PropTypes.object,\n    filterConfig: PropTypes.object,\n    store: PropTypes.object,\n    compact: PropTypes.bool,\n    tableOUIA: PropTypes.string,\n    paginationOUIA: PropTypes.string,\n    errorState: PropTypes.element,\n    emptyState: PropTypes.element,\n    defaultFilters: PropTypes.object,\n    searchChipLabel: PropTypes.string,\n    CreatePatchSetButton: PropTypes.element,\n    actionsConfig: PropTypes.array,\n    isRemediationLoading: PropTypes.bool,\n    actionsToggle: PropTypes.func\n};\n\nexport default TableView;\n","import { cellWidth, expandable, sortable } from '@patternfly/react-table/dist/js';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nexport const advisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSynopsis),\n        transforms: [sortable],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        key: 'applicable_systems'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(15)],\n        key: 'public_date'\n    }\n];\n\nexport const systemAdvisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: 'Synopsis',\n        transforms: [sortable, cellWidth(35)],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(15)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable, cellWidth(20)],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(30)],\n        key: 'public_date'\n    }\n];\n\nexport const systemPackagesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(20)],\n        key: 'name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsInstalledVersion),\n        transforms: [sortable, cellWidth(15)],\n        key: 'evra'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsLatestVersion),\n        transforms: [cellWidth(15)],\n        key: 'latest_update'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [cellWidth(10)],\n        key: 'updatable'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        key: 'summary'\n    }\n];\n\nexport const packagesColumns = [\n    {\n        key: 'name',\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(25)]\n    },\n    {\n        key: 'systems_installed',\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'systems_updatable',\n        title: intl.formatMessage(messages.labelsColumnsUpgradable),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'summary',\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        props: {\n            width: 30\n        }\n    }\n];\n\nexport const cvesTableColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsCveID),\n        transforms: [sortable, cellWidth(40)],\n        key: 'synopsis'\n    },\n    {\n        key: 'impact',\n        title: intl.formatMessage(messages.labelsColumnsSeverity),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    },\n    {\n        key: 'cvss',\n        title: intl.formatMessage(messages.labelsColumnsCVSS),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    }\n];\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { packagesListUpdatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst packagesListStatusFilter = (apply, currentFilter = {}) => {\n\n    let { systems_updatable: currentValue } = currentFilter;\n\n    const filterByType = value => {\n        apply({ filter: { systems_updatable: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersUpdatable),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: packagesListUpdatableTypes,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersUpdatablePlaceholder)\n        }\n    };\n};\n\nexport default packagesListStatusFilter;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport packagesListStatusFilter from '../../PresentationalComponents/Filters/PackagesListStatusFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { packagesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changePackagesListParams, fetchPackagesAction } from '../../store/Actions/Actions';\nimport { exportPackagesCSV, exportPackagesJSON } from '../../Utilities/api';\nimport { packagesListDefaultFilters } from '../../Utilities/constants';\nimport { createPackagesRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams } from '../../Utilities/Helpers';\nimport { setPageTitle, useOnExport, usePerPageSelect,\n    useSetPage, useSortColumn, useDeepCompareEffect } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { useHistory } from 'react-router-dom';\n\nconst Packages = () => {\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const history = useHistory();\n    const pageTitle = 'Packages';\n    setPageTitle(pageTitle);\n    const packageRows = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.rows\n    );\n    const rows = React.useMemo(() => createPackagesRows(packageRows), [packageRows]);\n\n    const status = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.status\n    );\n    const metadata = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.queryParams\n    );\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchPackagesAction(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    function apply(params) {\n        dispatch(changePackagesListParams(params));\n    }\n\n    const onExport = useOnExport('packages', queryParams, {\n        csv: exportPackagesCSV,\n        json: exportPackagesJSON\n    }, dispatch);\n\n    const onSort = useSortColumn(packagesColumns, apply);\n    const sortBy = React.useMemo(\n        () => createSortBy(packagesColumns, metadata.sort, 0),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchPackages)} headerOUIA={'packages'} />\n            <Main>\n                <TableView\n                    columns={packagesColumns}\n                    store={{ rows, metadata, status, queryParams }}\n                    onSort={onSort}\n                    onExport={onExport}\n                    sortBy={sortBy}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    compact\n                    apply={apply}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersPackagesSearchTitle),\n                                intl.formatMessage(messages.labelsFiltersPackagesSearchPlaceHolder)\n                            ),\n                            packagesListStatusFilter(apply, queryParams.filter)\n                        ]\n                    }}\n                    remediationButtonOUIA={'toolbar-remediation-button'}\n                    tableOUIA={'package-details-table'}\n                    paginationOUIA={'package-details-pagination'}\n                    defaultFilters={packagesListDefaultFilters}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersPackagesSearchTitle)}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Packages;\n"],"names":["HeaderBreadcrumbs","items","headerOUIA","Breadcrumb","filter","Boolean","map","item","BreadcrumbItem","key","title","isActive","to","Link","propTypes","PropTypes","HeaderTabs","history","Tabs","onSelect","event","tabString","push","activeKey","location","pathname","className","Tab","eventKey","withRouter","Header","showTabs","breadcrumbs","children","actions","PageHeader","Split","SplitItem","PageHeaderTitle","isFilled","SystemUpToDate","style","paddingTop","icon","size","color","marginBottom","Title","headingLevel","intl","messages","TableFooter","isLoading","page","perPage","onSetPage","totalItems","onPerPageSelect","paginationOUIA","Skeleton","fontSize","width","margin","Pagination","itemCount","widgetId","variant","PaginationVariant","ouiaId","isDisabled","TableView","columns","store","rows","metadata","status","queryParams","search","onCollapse","onSort","onExport","filterConfig","sortBy","remediationProvider","selectedRows","compact","apply","tableOUIA","errorState","emptyState","defaultFilters","searchChipLabel","CreatePatchSetButton","actionsConfig","isRemediationLoading","actionsToggle","React","convertLimitOffset","limit","offset","useRemoveFilter","deleteFilters","selectedCount","arrayFromObj","length","code","hasError","bulkSelectConfig","useBulkSelectConfig","has_systems","ErrorHandler","ErrorState","EmptyState","PrimaryToolbar","pagination","total_items","isCompact","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","AsyncRemediationButton","Object","values","isSelected","exportConfig","bulkSelect","ToolbarItem","SkeletonTable","colSize","rowSize","TableVariant","Table","cells","canSelectAll","isStickyHeader","TableHeader","TableBody","advisoriesColumns","cellFormatters","expandable","transforms","sortable","cellWidth","systemAdvisoriesColumns","systemPackagesColumns","packagesColumns","props","cvesTableColumns","currentFilter","currentValue","systems_updatable","filterByType","value","label","type","conditionalFilterType","filterValues","onChange","packagesListUpdatableTypes","placeholder","dispatch","useDispatch","firstMount","setFirstMount","useHistory","setPageTitle","packageRows","useSelector","PackagesListStore","createPackagesRows","params","changePackagesListParams","useDeepCompareEffect","decodeQueryparams","encodeURLParams","fetchPackagesAction","useOnExport","csv","exportPackagesCSV","json","exportPackagesJSON","useSortColumn","createSortBy","sort","useSetPage","usePerPageSelect","Main","searchFilter","packagesListStatusFilter","remediationButtonOUIA","packagesListDefaultFilters"],"sourceRoot":""}