{"version":3,"file":"js/874.1649438558254.4d3ea428f31bc7dde75a.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js","webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/SelectExistingSets.js","webpack:///./src/SmartComponents/PatchSetWizard/WizardAssets.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ConfigurationFields.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ConfigurationStepFields.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/NameField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ToDateField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/DescriptionField.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewSystems.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewPatchSet.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/RequestProgress.js","webpack:///./src/SmartComponents/PatchSetWizard/PatchSetWizard.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import React from 'react';\nimport { osFilterTypes } from '../../Utilities/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst osVersionFilter = (currentFilter = {}, apply) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = osFilterTypes.slice().reverse();;\n\n    let { os: currentValue } = currentFilter;\n    const currentOsVersionsArray = typeof currentValue === 'string' && currentValue.split(',') || [];\n\n    const filterByOsType = (_, value) => {\n        if (currentValue && !currentValue.includes(value)) {\n            apply({ filter: { os: `${currentOsVersionsArray.join(',')},${value}` } });\n        }\n        else if (currentValue && currentValue.includes(value)) {\n            const remainingOs = currentOsVersionsArray.filter(os => os !== value);\n\n            apply({ filter: { os: remainingOs.length > 0 && `${remainingOs.join(',')}` || undefined } });\n        } else {\n            apply({ filter: { os: value !== '' && value || undefined  } });\n        }\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: intl.formatMessage(messages.labelsFiltersOsVersion),\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={SelectVariant.checkbox}\n                        typeAheadAriaLabel={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        onToggle={onToggle}\n                        onSelect={filterByOsType}\n                        selections={currentOsVersionsArray}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-os-version-filter'}\n                        placeholderText={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        {...(numOptions < versionFromNewestToOldest.length\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                key={index}\n                                value={option.value}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n};\n\nexport default osVersionFilter;\n","import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}\n                        data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                        data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                    >{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { paths } from '../../Routes';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history, headerOUIA }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={paths.advisories.to}\n                title={paths.advisories.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.advisories.title}`}\n            />\n            <Tab\n                eventKey={paths.systems.to}\n                title={paths.systems.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.systems.title}`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object,\n    headerOUIA: propTypes.string\n};\n\nexport default withRouter(HeaderTabs);\n","import {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <PageHeaderTitle title={title} />\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA = {headerOUIA}/>}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string\n};\n\nexport default Header;\n","import React, { useState, useMemo, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Select, SelectOption, SelectVariant, FormGroup, Spinner } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { fetchPatchSetsAction, changePatchSetsParams, clearPatchSetsAction } from '../../../store/Actions/Actions';\n\nconst SelectExistingSets = ({ setSelectedPatchSet, selectedSets, systems }) => {\n    const dispatch = useDispatch();\n    const formOptions = useFormApi();\n    const [isOpen, setOpen] = useState(true);\n\n    const rows = useSelector(({ PatchSetsStore }) => PatchSetsStore.rows);\n    const queryParams = useSelector(({ PatchSetsStore }) => PatchSetsStore.queryParams);\n    const status = useSelector(({ PatchSetsStore }) => PatchSetsStore.status);\n\n    useEffect(() => {\n        dispatch(fetchPatchSetsAction({ ...queryParams, limit: 10 }));\n\n        return () => dispatch(clearPatchSetsAction());\n    }, [queryParams.page]);\n\n    const patchOptions = useMemo(() =>{\n        if (status.isLoading) {\n            return [<SelectOption key='loading'><Spinner size=\"md\"/></SelectOption>];\n        }\n\n        return rows.map(set => <SelectOption key={set.id} value={set.name} />);\n    }, [rows, status.isLoading]);\n\n    const handleOpen = () => {\n        setOpen(!isOpen);\n    };\n\n    const handleSelect = (_, selected) =>{\n        setOpen(false);\n        setSelectedPatchSet(selected);\n\n        const selectedSet = rows.filter(set => set.name === selected);\n        if (selectedSet.length === 1) {\n            formOptions.change('existing_patch_set', { name: selectedSet[0]?.name, systems, id: selectedSet[0]?.id });\n        }\n\n    };\n\n    const onViewMoreClick = () => {\n        dispatch(changePatchSetsParams({ ...queryParams, page: queryParams.page + 1 }));\n    };\n\n    return (\n        <FormGroup fieldId=\"existing_patch_set\" label=\"Choose a Patch set\" isRequired>\n            <Select\n                variant={SelectVariant.single}\n                aria-label=\"Select Input\"\n                onSelect={handleSelect}\n                placeholderText=\"Select an option\"\n                selections={selectedSets}\n                onToggle={handleOpen}\n                isOpen={isOpen}\n                isDisabled={false}\n                loadingVariant={{\n                    text: 'View more',\n                    onClick: onViewMoreClick\n                }}\n            >\n                {patchOptions}\n            </Select>\n        </FormGroup >\n    );\n};\n\nSelectExistingSets.propTypes = {\n    setSelectedPatchSet: propTypes.func,\n    selectedSets: propTypes.array,\n    systems: propTypes.array\n};\nexport default SelectExistingSets;\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const reviewSystemColumns = [{\n    key: 'display_name',\n    title: 'Name',\n    props: {\n        width: 40\n    }\n},\n{\n    title: 'OS',\n    key: 'os',\n    props: {\n        width: 60\n    }\n}\n];\n\nexport const configurationFields = [\n    {\n        name: 'configuration-step',\n        component: 'configuration-step'\n    },\n    {\n        name: 'existing_patch_set',\n        component: componentTypes.TEXT_FIELD,\n        hidden: true\n    }\n];\n\nexport const nameComponent = [{\n    name: 'name',\n    component: 'nameField',\n    validate: [{ type: validatorTypes.REQUIRED }]\n}];\n\nexport const descriptionComponent = [{\n    name: 'description',\n    component: 'descriptionField'\n}];\n\nexport const toDateComponent = [{\n    name: 'toDate',\n    component: 'toDateField',\n    validate: [{ type: validatorTypes.REQUIRED }]\n}];\n\nexport const schema = (patchSetID) => ({\n    fields: [\n        {\n            component: componentTypes.WIZARD,\n            name: 'patch-set-wizard',\n            isDynamic: true,\n            inModal: true,\n            showTitles: true,\n            title: intl.formatMessage(messages.patchSetTitle),\n            description: intl.formatMessage(messages.patchSetDescription),\n            fields: [\n                {\n                    name: 'patch-set-config',\n                    title: intl.formatMessage(patchSetID && messages.patchSetEditSet || messages.patchSetNewSet),\n                    fields: configurationFields,\n                    nextStep: 'systems'\n                },\n                {\n                    name: 'systems',\n                    title: intl.formatMessage(messages.patchSetSelectSystems),\n                    fields: [\n                        {\n                            name: 'systems',\n                            component: 'review-systems',\n                            validate: [{ type: 'validate-systems' }]\n                        }\n                    ],\n                    nextStep: 'review'\n                },\n                {\n                    name: 'review',\n                    title: intl.formatMessage(messages.patchSetReviewSet),\n                    fields: [\n                        {\n                            name: 'review',\n                            component: 'review-patch-set'\n                        }\n                    ]\n                }\n\n            ]\n\n        }\n    ]\n});\n\nexport const validatorMapper = {\n    'validate-systems': () => (system) => {\n        if (system === undefined) {\n            return;\n        }\n        else if (Object.keys(system).length > 0) {\n            return;\n        } else {\n            return intl.formatMessage(messages.patchSetNoSystemSelected);\n        }\n    }\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Grid, GridItem, Spinner } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { nameComponent, descriptionComponent, toDateComponent } from '../WizardAssets';\nconst  ConfigurationFields = ({ isLoading }) =>{\n    const { renderForm } = useFormApi();\n\n    return isLoading ? <Spinner size='md' /> : (\n        <Grid hasGutter>\n            <GridItem lg={12} md={12}>\n                {renderForm(nameComponent)}\n            </GridItem>\n            <GridItem lg={12} md={12}>\n                {renderForm(descriptionComponent)}\n            </GridItem>\n            <GridItem lg={6} md={6}>\n                {renderForm(toDateComponent)}\n            </GridItem>\n        </Grid>\n    );\n};\n\nConfigurationFields.propTypes = {\n    isLoading: propTypes.bool\n};\nexport default ConfigurationFields;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    Radio,\n    TextVariants\n} from '@patternfly/react-core';\nimport SelectExistingSets from '../InputFields/SelectExistingSets';\nimport ConfigurationFields from '../InputFields/ConfigurationFields';\n\nimport { convertIsoToDate } from '../../../Utilities/Helpers';\n\nconst ConfigurationStepFields = ({ systemsIDs, patchSetID }) => {\n\n    const formOptions = useFormApi();\n    const shouldShowRadioButtons = (!patchSetID && systemsIDs?.length !== 0) || false;\n\n    const [shouldApplyExisting, setShouldApplyExisting] = useState(false);\n    const [shouldCreateNew, setShouldCreateNew] = useState(true);\n    const [selectedPatchSet, setSelectedPatchSet] = useState([]);\n\n    const { patchSet, status } = useSelector(({ SpecificPatchSetReducer }) => SpecificPatchSetReducer, shallowEqual);\n\n    const handleRadioChange = () => {\n        setShouldCreateNew(!shouldCreateNew);\n        setShouldApplyExisting(!shouldApplyExisting);\n    };\n\n    useEffect(() => {\n        if (patchSetID) {\n            const { name, description, config: { to_time: toDate } } = patchSet;\n\n            formOptions.change('name', name);\n            formOptions.change('description', description);\n            formOptions.change('toDate', convertIsoToDate(toDate));\n        }\n    }, [patchSet]);\n\n    return (\n        <Stack hasGutter>\n            {shouldShowRadioButtons && <TextContent style={{ marginTop: '-15px' }}>\n                <Text component={TextVariants.p}>\n                    You selected <b>{systemsIDs.length} systems</b>\n                </Text>\n            </TextContent>}\n            <StackItem>\n                <Stack hasGutter>\n                    {shouldShowRadioButtons && (<><StackItem>\n                        <Radio\n                            isChecked={shouldApplyExisting}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label=\"Add to existing patch set\"\n                            id=\"existing-set\"\n                            value=\"\"\n                        />\n                    </StackItem>\n                    <StackItem>\n                        {shouldApplyExisting ? <SelectExistingSets\n                            setSelectedPatchSet={setSelectedPatchSet}\n                            selectedSets={selectedPatchSet}\n                            systems={systemsIDs}\n                        /> : null}\n                    </StackItem>\n                    <StackItem>\n                        <Radio\n                            isChecked={shouldCreateNew}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label={'Create new patch set'}\n                            id=\"new-set\"\n                            value=\"\"\n                        />\n                    </StackItem></>) || null}\n                    <StackItem>\n                        {shouldCreateNew ? <ConfigurationFields\n                            isLoading={patchSetID && status.isLoading}\n                        /> : null}\n                    </StackItem>\n                </Stack>\n            </StackItem>\n        </Stack>\n    );\n};\n\nConfigurationStepFields.propTypes = {\n    systemsIDs: propTypes.array,\n    patchSetID: propTypes.string\n};\nexport default ConfigurationStepFields;\n","import React, { useState, useEffect } from 'react';\nimport {\n    FormGroup,\n    TextInput\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nconst NameField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [name, setName] = useState(values?.name);\n\n    useEffect(() => {\n        setName(values.name);\n    }, [values.name]);\n\n    return (\n        <FormGroup fieldId=\"name\" label=\"Name\" isRequired>\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={name}\n                onChange={(val) => {\n                    input.onChange(val);\n                    setName(val);\n                }}\n                aria-label=\"name\"\n                autoFocus\n            />\n        </FormGroup>\n    );\n};\n\nexport default NameField;\n","import React, { useState, useEffect } from 'react';\nimport {\n    FormGroup,\n    DatePicker,\n    Flex,\n    FlexItem\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nconst ToDateField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [toDate, setToDate] = useState(values?.toDate);\n\n    useEffect(() => {\n        setToDate(values.toDate);\n    }, [values.toDate]);\n\n    return (\n        <FormGroup fieldId=\"toDate\" label=\"Patch set date\" isRequired>\n            <Flex>\n                <FlexItem lg={2} md={2}>\n                    Upto\n                </FlexItem>\n                <FlexItem lg={10} md={10}>\n                    <DatePicker\n                        isRequired\n                        value={toDate}\n                        onChange={(val) => {\n                            input.onChange(val);\n                            setToDate(val);\n                        }}\n                        aria-label=\"toDate\"\n                    />\n                </FlexItem>\n            </Flex>\n        </FormGroup>\n    );\n};\n\nexport default ToDateField;\n","import React, { useState, useEffect } from 'react';\nimport { FormGroup, TextInput } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nconst DescriptionField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [description, setDescription] = useState(values?.description);\n\n    useEffect(() => {\n        setDescription(values.description);\n    }, [values.description]);\n\n    return (\n        <FormGroup fieldId=\"description\" label=\"Description\">\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={description}\n                onChange={(val) => {\n                    input.onChange(val);\n                    setDescription(val);\n                }}\n                aria-label=\"description\"\n            />\n        </FormGroup>\n    );\n};\n\nexport default DescriptionField;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport searchFilter from '../../../PresentationalComponents/Filters/SearchFilter';\nimport osVersionFilter from '../../../PresentationalComponents/Filters/OsVersionFilter';\nimport { Text, TextContent, Stack, StackItem, TextVariants } from '@patternfly/react-core';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nimport { createSortBy, buildSelectedSystemsObj } from '../../../Utilities/Helpers';\nimport { createSystemsRowsReview } from '../../../Utilities/DataMappers';\nimport { useOnSelect, usePerPageSelect, useSetPage, useSortColumn } from '../../../Utilities/Hooks';\nimport TableView from '../../../PresentationalComponents/TableView/TableView';\nimport { fetchSystems } from '../../../Utilities/api';\nimport { reviewSystemColumns } from '../WizardAssets';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\n\nexport const ReviewSystems = ({ systemsIDs = [], ...props }) => {\n    const { input } = useFieldApi(props);\n    const [isLoading, setLoading] = useState(true);\n    const [rawData, setRawData] = useState([]);\n    const [systems, setSystems] = useState([]);\n    const [selectedRows, setSelectedRows] = useState(buildSelectedSystemsObj(systemsIDs));\n    const [metadata, setMetada] = useState({\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    });\n\n    const [queryParams, setQueryParams] = useState({\n        page: 1,\n        perPage: 20,\n        filter: {}\n    });\n\n    const { assignedSystems } = useSelector(({ SpecificPatchSetReducer }) => SpecificPatchSetReducer, shallowEqual);\n\n    useEffect(() => {\n        fetchSystems({\n            ...queryParams, filter: { ...queryParams.filter,\n                id: systemsIDs.length > 0 ? `in:${systemsIDs.join(',')}` : undefined }\n        }).then(result => {\n            setSystems(createSystemsRowsReview(result.data, buildSelectedSystemsObj([...assignedSystems, ...systemsIDs])));\n            setMetada(result.meta);\n            setRawData(result.data);\n            setLoading(false);\n        });\n    }, [queryParams.filter, queryParams]);\n\n    useEffect(() => {\n        input.onChange(selectedRows);\n\n        setSystems(\n            createSystemsRowsReview(rawData, selectedRows)\n        );\n    }, [selectedRows]);\n\n    useEffect(() => {\n        setSelectedRows({ ...selectedRows, ...buildSelectedSystemsObj(assignedSystems) });\n    }, [assignedSystems]);\n\n    const apply = (params) => {\n        setLoading(true);\n        setQueryParams({ ...queryParams, ...params });\n    };\n\n    const onSort = useSortColumn(reviewSystemColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(reviewSystemColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const fetchAllData = () =>\n        fetchSystems({ ...queryParams,\n            filter: { ...queryParams.filter, ...systemsIDs.length > 0 && { id: `in:${systemsIDs.join(',')}` } }, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        const newSelections = toSelect.reduce((object, system) => {\n            object[system.id] = system.selected ? true : undefined;\n            return object;\n        }, {});\n\n        setSelectedRows({ ...selectedRows, ...newSelections });\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllData, selectRows);\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent style={{ marginTop: '-15px' }}>\n                    <Text component={TextVariants.p}>\n                        You will be able to adjust your selection anytime. A system can have only one patch set,\n                        therefore if you assign a new Patch set to the system, it will be overwritten.\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TableView\n                    columns={reviewSystemColumns}\n                    compact\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    selectedRows={selectedRows}\n                    onSelect={onSelect}\n                    sortBy={sortBy}\n                    apply={apply}\n                    tableOUIA={'patch-set-table'}\n                    paginationOUIA={'patch-set-pagination'}\n                    store={{ rows: systems, metadata, status: { isLoading }, queryParams }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                                intl.formatMessage(messages.labelsFiltersSearch)\n                            ),\n                            osVersionFilter(queryParams.filter, apply)\n                        ]\n                    }}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nReviewSystems.propTypes = {\n    systemsIDs: propTypes.array\n};\n\nexport default ReviewSystems;\n","import React from 'react';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    TextVariants,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst ReviewPatchSet = () => {\n    const formOptions = useFormApi();\n    const { values } = formOptions.getState();\n    const { name, description, toDate } = values.existing_patch_set || values;\n    const { systems } = values;\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent style={{ marginTop: '-15px' }}>\n                    <Text component={TextVariants.p}>\n                        Review the information below and click <b>Finish</b> to complete patch set creation\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TextContent>\n                    <TextList component={TextListVariants.dl}>\n                        <TextListItem component={TextListItemVariants.dt}>Name:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{name}</TextListItem>\n                        <TextListItem component={TextListItemVariants.dt}>Description:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{description}</TextListItem>\n                        <TextListItem component={TextListItemVariants.dt}>Date:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{toDate}</TextListItem>\n                        <TextListItem component={TextListItemVariants.dt}>Selected systems:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>\n                            {systems && Object.values(systems).filter(system => system).length}\n                        </TextListItem>\n                    </TextList>\n                </TextContent>\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default ReviewPatchSet;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title,\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateIcon,\n    EmptyStateBody,\n    Grid,\n    GridItem,\n    HelperText,\n    HelperTextItem,\n    Button\n} from '@patternfly/react-core';\nimport {\n    CheckCircleIcon,\n    ExclamationCircleIcon,\n    InProgressIcon\n} from '@patternfly/react-icons';\n\nconst RequestProgress = ({ onClose, state }) => {\n    const { requestPending, failed } = state;\n\n    return (\n        <EmptyState\n            variant={EmptyStateVariant.large}\n            data-component-ouia-id=\"patch-set-progress\"\n        >\n            <EmptyStateIcon\n                color={\n                    failed\n                        ? 'var(--pf-global--danger-color--100)'\n                        : !requestPending\n                            ? 'var(--pf-global--success-color--100)'\n                            : undefined\n                }\n                icon={\n                    failed\n                        ? ExclamationCircleIcon\n                        : requestPending\n                            ? InProgressIcon\n                            : CheckCircleIcon\n                }\n            />\n            <Title headingLevel=\"h1\" size=\"lg\">\n                {failed\n                    ? 'Something went wrong'\n                    : requestPending\n                        ? 'Configuration in progress'\n                        : 'Patch set configuration successful'}\n            </Title>\n            <EmptyStateBody>\n                <Grid hasGutter>\n                    {(requestPending) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    Please allow a few minutes to set up a patch set.\n                                    You will receive a notification when finished</HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"link\" isInline onClick={onClose}>\n                                    Cancel\n                            </Button>{' '}\n                        </GridItem></>\n                    )}\n                    {(!requestPending && !failed) && (\n                        <GridItem>\n                            <Button variant=\"primary\" onClick={onClose}>Return to application</Button>\n                        </GridItem>\n                    )}\n                    {(!requestPending && failed) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    There was a problem processing the patch set. Please try again. If the problem\n                                    persists, contact <a href='https://www.redhat.com/en/services/support'>Red Hat support</a>\n                                </HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"primary\" onClick={onClose}>Return to application</Button>\n                        </GridItem></>\n                    )}\n                </Grid>\n\n            </EmptyStateBody>\n        </EmptyState>\n    );\n};\n\nRequestProgress.propTypes = {\n    onClose: propTypes.func,\n    state: propTypes.object\n};\n\nexport default RequestProgress;\n","\nimport React, { Fragment, useState, memo, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport DatePicker from '@data-driven-forms/pf4-component-mapper/date-picker';\nimport { Modal, Wizard } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\n\nimport ConfigurationStepFields from './steps/ConfigurationStepFields';\nimport NameField from './InputFields/NameField';\nimport ToDateField from './InputFields/ToDateField';\nimport DescriptionField from './InputFields/DescriptionField';\nimport ReviewSystems from './steps/ReviewSystems';\nimport ReviewPatchSet from './steps/ReviewPatchSet';\nimport { schema, validatorMapper } from './WizardAssets';\nimport RequestProgress from './steps/RequestProgress';\nimport { usePatchSetApi } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { fetchPatchSetAction, clearPatchSetAction, fetchPatchSetSystemsAction } from '../../store/Actions/Actions';\n\nexport const PatchSetWizard = ({ systemsIDs, setBaselineState, patchSetID }) => {\n    const [wizardState, setWizardState] = useState({\n        submitted: false,\n        formValues: {},\n        requestPending: true,\n        failed: false,\n        shouldRefresh: false\n    });\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (patchSetID) {\n            dispatch(fetchPatchSetAction(patchSetID));\n            dispatch(fetchPatchSetSystemsAction(patchSetID, { limit: -1 }));\n        }\n\n        return () => dispatch(clearPatchSetAction());\n    }, []);\n\n    const onSubmit = usePatchSetApi(wizardState, setWizardState, patchSetID);\n\n    const handleWizardClose = () => {\n        const shouldRefresh = !wizardState.failed && wizardState.submitted;\n\n        setBaselineState({ isOpen: false, systemsIDs: [], patchSetID: undefined, shouldRefresh });\n        setWizardState({ formValues: {}, submitted: false });\n    };\n\n    const mapperExtensions = {\n        nameField: {\n            component: NameField\n        },\n        descriptionField: {\n            component: DescriptionField\n        },\n        toDateField: {\n            component: ToDateField\n        },\n        'configuration-step': {\n            component: ConfigurationStepFields,\n            systemsIDs: systemsIDs || [],\n            patchSetID\n        },\n        'review-systems': {\n            component: ReviewSystems,\n            systemsIDs: systemsIDs || []\n        },\n        'review-patch-set': {\n            component: ReviewPatchSet,\n            systemsIDs: systemsIDs || []\n        }\n    };\n\n    return (\n        <Fragment>\n            {!wizardState.submitted &&  (\n                <FormRenderer\n                    schema={schema(patchSetID)}\n                    subscription={{ values: true }}\n                    FormTemplate={(props) => (\n                        <Pf4FormTemplate {...props} showFormControls={false} />\n                    )}\n                    componentMapper={{\n                        [componentTypes.WIZARD]: {\n                            component: WizardMapper,\n                            className: 'patch-set',\n                            'data-ouia-component-id': 'patch-set-wizard'\n                        },\n                        [componentTypes.TEXT_FIELD]: TextField,\n                        [componentTypes.DATE_PICKER]: DatePicker,\n                        ...mapperExtensions\n                    }}\n                    validatorMapper={validatorMapper}\n                    onSubmit={onSubmit}\n                    onCancel={handleWizardClose} />\n            ) || (\n                <Modal\n                    isOpen\n                    variant={'large'}\n                    showClose={false}\n                    className=\"patch-set\"\n                    hasNoBodyWrapper\n                    aria-describedby=\"patch-set-description\"\n                    aria-labelledby=\"patch-set-modal-title\"\n                >\n                    <Wizard\n                        className=\"patch-set\"\n                        title={intl.formatMessage(messages.patchSetTitle)}\n                        description={intl.formatMessage(messages.patchSetDescription)}\n                        steps={[\n                            {\n                                name: 'progress',\n                                component: (\n                                    <RequestProgress\n                                        onClose={handleWizardClose}\n                                        state={wizardState}\n                                    />\n                                ),\n                                isFinishedStep: true\n                            }\n                        ]}\n                        onClose={handleWizardClose}\n                    />\n                </Modal>\n            )}\n        </Fragment>\n    );\n};\n\nPatchSetWizard.propTypes = {\n    setBaselineState: propTypes.func,\n    systemsIDs: propTypes.array,\n    patchSetID: propTypes.string\n};\n\nexport default memo(PatchSetWizard, (prevProps, nextProps) => {\n    return JSON.stringify(prevProps) === JSON.stringify(nextProps);\n});\n","import { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            newState.status = { isLoading: true, hasError: true };\n            return newState;\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["currentFilter","apply","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","osFilterTypes","reverse","currentValue","os","currentOsVersionsArray","split","filterByOsType","_","value","includes","filter","join","remainingOs","length","undefined","onToggle","onViewMoreClick","type","conditionalFilterType","label","intl","messages","filterValues","children","Select","variant","SelectVariant","typeAheadAriaLabel","onSelect","selections","placeholderText","loadingVariant","text","onClick","style","maxHeight","overflow","slice","map","option","index","SelectOption","key","HeaderBreadcrumbs","items","headerOUIA","Breadcrumb","Boolean","item","BreadcrumbItem","title","isActive","to","Link","propTypes","PropTypes","HeaderTabs","history","Tabs","event","tabString","push","activeKey","location","pathname","className","Tab","eventKey","paths","withRouter","Header","showTabs","breadcrumbs","PageHeader","PageHeaderTitle","SelectExistingSets","setSelectedPatchSet","selectedSets","systems","dispatch","useDispatch","formOptions","useFormApi","useState","rows","useSelector","PatchSetsStore","queryParams","status","useEffect","fetchPatchSetsAction","limit","clearPatchSetsAction","page","patchOptions","useMemo","isLoading","Spinner","size","set","id","name","FormGroup","fieldId","isRequired","selected","selectedSet","change","isDisabled","changePatchSetsParams","reviewSystemColumns","props","width","configurationFields","component","componentTypes","hidden","nameComponent","validate","validatorTypes","descriptionComponent","toDateComponent","schema","patchSetID","fields","isDynamic","inModal","showTitles","description","nextStep","validatorMapper","system","Object","keys","ConfigurationFields","renderForm","Grid","hasGutter","GridItem","lg","md","ConfigurationStepFields","systemsIDs","shouldShowRadioButtons","shouldApplyExisting","setShouldApplyExisting","shouldCreateNew","setShouldCreateNew","selectedPatchSet","SpecificPatchSetReducer","shallowEqual","patchSet","handleRadioChange","toDate","config","to_time","convertIsoToDate","Stack","TextContent","marginTop","Text","TextVariants","StackItem","Radio","isChecked","onChange","input","useFieldApi","values","getState","setName","TextInput","val","autoFocus","setToDate","Flex","FlexItem","DatePicker","setDescription","ReviewSystems","setLoading","rawData","setRawData","setSystems","buildSelectedSystemsObj","selectedRows","setSelectedRows","offset","total_items","metadata","setMetada","perPage","setQueryParams","assignedSystems","fetchSystems","then","result","createSystemsRowsReview","data","meta","params","onSort","useSortColumn","sortBy","createSortBy","sort","onSetPage","useSetPage","onPerPageSelect","usePerPageSelect","useOnSelect","toSelect","newSelections","reduce","object","TableView","columns","compact","tableOUIA","paginationOUIA","store","filterConfig","searchFilter","search","osVersionFilter","searchChipLabel","existing_patch_set","TextList","TextListVariants","TextListItem","TextListItemVariants","RequestProgress","onClose","state","requestPending","failed","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","InProgressIcon","CheckCircleIcon","Title","headingLevel","EmptyStateBody","HelperText","HelperTextItem","Button","isInline","href","PatchSetWizard","setBaselineState","submitted","formValues","shouldRefresh","wizardState","setWizardState","fetchPatchSetAction","fetchPatchSetSystemsAction","clearPatchSetAction","onSubmit","usePatchSetApi","handleWizardClose","mapperExtensions","nameField","NameField","descriptionField","DescriptionField","toDateField","ToDateField","ReviewPatchSet","Fragment","subscription","FormTemplate","showFormControls","componentMapper","WizardMapper","TextField","onCancel","Modal","showClose","hasNoBodyWrapper","Wizard","steps","isFinishedStep","memo","prevProps","nextProps","JSON","stringify","initialState","entities","modifyInventory","loaded","hasError","createSystemsRows","modifyPackageSystems","createPackageSystemsRows","inventoryEntitiesReducer","inventoryModifier","action","newState","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}