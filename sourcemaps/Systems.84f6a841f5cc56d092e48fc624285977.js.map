{"version":3,"file":"js/Systems.ca18a3e97a082d2bf8b2.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardBody.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/package-icon.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Card/card.mjs","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/PresentationalComponents/PatchSetWrapper/PatchSetWrapper.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js","webpack:///./src/PresentationalComponents/StatusReports/SystemsStatusReport.js","webpack:///./src/SmartComponents/Systems/Systems.js","webpack:///./src/Utilities/usePatchSetState.js","webpack:///./src/Utilities/useRemediationDataProvider.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport const CardContext = React.createContext({\n    cardId: '',\n    registerTitleId: () => { },\n    isExpanded: false\n});\nexport const Card = (_a) => {\n    var { children = null, id = '', className = '', component = 'article', isHoverable = false, isCompact = false, isSelectable = false, isSelectableRaised = false, isSelected = false, isDisabledRaised = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true, hasSelectableInput = false, selectableInputAriaLabel, onSelectableInputChange = () => { } } = _a, props = __rest(_a, [\"children\", \"id\", \"className\", \"component\", \"isHoverable\", \"isCompact\", \"isSelectable\", \"isSelectableRaised\", \"isSelected\", \"isDisabledRaised\", \"isFlat\", \"isExpanded\", \"isRounded\", \"isLarge\", \"isFullHeight\", \"isPlain\", \"ouiaId\", \"ouiaSafe\", \"hasSelectableInput\", \"selectableInputAriaLabel\", \"onSelectableInputChange\"]);\n    const Component = component;\n    const ouiaProps = useOUIAProps(Card.displayName, ouiaId, ouiaSafe);\n    const [titleId, setTitleId] = React.useState('');\n    const [ariaProps, setAriaProps] = React.useState();\n    if (isCompact && isLarge) {\n        // eslint-disable-next-line no-console\n        console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n        isLarge = false;\n    }\n    const getSelectableModifiers = () => {\n        if (isDisabledRaised) {\n            return css(styles.modifiers.nonSelectableRaised);\n        }\n        if (isSelectableRaised) {\n            return css(styles.modifiers.selectableRaised, isSelected && styles.modifiers.selectedRaised);\n        }\n        if (isSelectable || isHoverable) {\n            return css(styles.modifiers.selectable, isSelected && styles.modifiers.selected);\n        }\n        return '';\n    };\n    const containsCardTitleChildRef = React.useRef(false);\n    const registerTitleId = (id) => {\n        setTitleId(id);\n        containsCardTitleChildRef.current = !!id;\n    };\n    React.useEffect(() => {\n        if (selectableInputAriaLabel) {\n            setAriaProps({ 'aria-label': selectableInputAriaLabel });\n        }\n        else if (titleId) {\n            setAriaProps({ 'aria-labelledby': titleId });\n        }\n        else if (hasSelectableInput && !containsCardTitleChildRef.current) {\n            setAriaProps({});\n            // eslint-disable-next-line no-console\n            console.warn('If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed');\n        }\n    }, [hasSelectableInput, selectableInputAriaLabel, titleId]);\n    return (React.createElement(CardContext.Provider, { value: {\n            cardId: id,\n            registerTitleId,\n            isExpanded\n        } },\n        hasSelectableInput && (React.createElement(\"input\", Object.assign({ className: \"pf-screen-reader\", id: `${id}-input` }, ariaProps, { type: \"checkbox\", checked: isSelected, onChange: event => onSelectableInputChange(id, event), disabled: isDisabledRaised, tabIndex: -1 }))),\n        React.createElement(Component, Object.assign({ id: id, className: css(styles.card, isCompact && styles.modifiers.compact, isExpanded && styles.modifiers.expanded, isFlat && styles.modifiers.flat, isRounded && styles.modifiers.rounded, isLarge && styles.modifiers.displayLg, isFullHeight && styles.modifiers.fullHeight, isPlain && styles.modifiers.plain, getSelectableModifiers(), className), tabIndex: isSelectable || isSelectableRaised ? '0' : undefined }, props, ouiaProps), children)));\n};\nCard.displayName = 'Card';\n//# sourceMappingURL=Card.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nexport const CardBody = (_a) => {\n    var { children = null, className = '', component = 'div', isFilled = true } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"isFilled\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardBody, !isFilled && styles.modifiers.noFill, className) }, props), children));\n};\nCardBody.displayName = 'CardBody';\n//# sourceMappingURL=CardBody.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nexport const CardTitle = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const { cardId, registerTitleId } = React.useContext(CardContext);\n    const Component = component;\n    const titleId = cardId ? `${cardId}-title` : '';\n    React.useEffect(() => {\n        registerTitleId(titleId);\n        return () => registerTitleId('');\n    }, [registerTitleId, titleId]);\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardTitle, className), id: titleId || undefined }, props), children));\n};\nCardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","import { createIcon } from '../createIcon';\n\nexport const PackageIconConfig = {\n  name: 'PackageIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M567.7,1010.49707 L951.5,818.498238 C994.7,796.698371 1024,752.39864 1024,703.998934 L1024,320.001265 C1024,271.601559 995.6,227.10183 952.2,205.501961 L568.6,13.5031267 C550.8,4.60318072 531.4,0.103208049 512,-0.00152855358 C492.3,-0.0967907365 472.5,4.40318194 454.4,13.5031267 L70.8,205.501961 C27.4,227.10183 0,271.50156 0,319.801267 L0.9,703.998934 C0.9,752.39864 28.3,796.79837 71.6,818.398239 L455.2,1010.39707 C464.3,1014.89705 488.1,1023.99699 511.9,1023.99699 C535.5,1023.99699 558.8,1014.99704 567.7,1010.49707 Z M512.5,630.899377 L672.5,550.899863 L672.5,645.29929 L736.5,613.299484 L736.5,518.900058 L896,438.900543 L896.5,712.698881 L512.5,904.697715 L512.5,630.899377 Z M145.1,304.101362 L294.9,228.60182 C295.3,228.801819 295.6,229.001818 296,229.201817 L661.9,412.300705 L512.5,487.600248 L145.1,304.101362 Z M512.5,118.902487 L881.3,301.701377 L733.1,376.400923 L366,192.702038 L512.5,118.902487 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PackageIcon = createIcon(PackageIconConfig);\n\nexport default PackageIcon;","import './card.css';\nexport default {\n  \"card\": \"pf-c-card\",\n  \"cardActions\": \"pf-c-card__actions\",\n  \"cardBody\": \"pf-c-card__body\",\n  \"cardExpandableContent\": \"pf-c-card__expandable-content\",\n  \"cardFooter\": \"pf-c-card__footer\",\n  \"cardHeader\": \"pf-c-card__header\",\n  \"cardHeaderToggle\": \"pf-c-card__header-toggle\",\n  \"cardHeaderToggleIcon\": \"pf-c-card__header-toggle-icon\",\n  \"cardSrInput\": \"pf-c-card__sr-input\",\n  \"cardTitle\": \"pf-c-card__title\",\n  \"divider\": \"pf-c-divider\",\n  \"modifiers\": {\n    \"hoverable\": \"pf-m-hoverable\",\n    \"selectable\": \"pf-m-selectable\",\n    \"selected\": \"pf-m-selected\",\n    \"hoverableRaised\": \"pf-m-hoverable-raised\",\n    \"selectableRaised\": \"pf-m-selectable-raised\",\n    \"nonSelectableRaised\": \"pf-m-non-selectable-raised\",\n    \"selectedRaised\": \"pf-m-selected-raised\",\n    \"compact\": \"pf-m-compact\",\n    \"displayLg\": \"pf-m-display-lg\",\n    \"flat\": \"pf-m-flat\",\n    \"plain\": \"pf-m-plain\",\n    \"rounded\": \"pf-m-rounded\",\n    \"expanded\": \"pf-m-expanded\",\n    \"fullHeight\": \"pf-m-full-height\",\n    \"toggleRight\": \"pf-m-toggle-right\",\n    \"noOffset\": \"pf-m-no-offset\",\n    \"noFill\": \"pf-m-no-fill\",\n    \"overpassFont\": \"pf-m-overpass-font\"\n  },\n  \"themeDark\": \"pf-theme-dark\"\n};","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport PatchSetWizard from '../../SmartComponents/PatchSetWizard/PatchSetWizard';\nimport UnassignSystemsModal from '../../SmartComponents/Modals/UnassignSystemsModal';\n\nconst PatchSetWrapper = ({ patchSetState, setPatchSetState }) => {\n    return (<>\n        {(patchSetState.isUnassignSystemsModalOpen) && <UnassignSystemsModal\n            unassignSystemsModalState={patchSetState}\n            setUnassignSystemsModalOpen={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n        />}\n        {(patchSetState.isPatchSetWizardOpen) &&\n        <PatchSetWizard systemsIDs={patchSetState.systemsIDs} setBaselineState={setPatchSetState} />}\n    </>);\n};\n\nPatchSetWrapper.propTypes = {\n    patchSetState: propTypes.object,\n    setPatchSetState: propTypes.func\n};\nexport default PatchSetWrapper;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { unassignSystemFromPatchSet } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../../Utilities/constants';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await unassignSystemFromPatchSet({ inventory_ids: systemsWithPatchSet });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalToggle(true);\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { CheckCircleIcon, PackageIcon, ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Button, Skeleton,\n    Card, Grid, GridItem, CardBody, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { fetchSystems } from '../../Utilities/api';\n\nconst StatusCard = ({ title, color, Icon, value, filter, apply }) => {\n    return (\n        <Card isCompact isFullHeight>\n            <CardTitle style={{ marginTop: '0px' }}>{title}</CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                    <FlexItem\n                        spacer={{ default: 'spacerMd' }}\n                        alignSelf={{ default: 'alignSelfCenter' }}\n                    >\n                        <Icon color={color} size='md'/>\n                    </FlexItem>\n                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                        {\n                            typeof(value) === 'undefined'\n                            &&  <Skeleton width=\"24px\" />\n                                    ||  <Button\n                                        variant=\"link\"\n                                        onClick={() => apply(filter)}\n                                        className='patch-status-report-text'>\n                                        {value}\n                                    </Button>\n                        }\n                    </FlexItem>\n                </Flex>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst SystemsStatusreport = ({ apply, queryParams }) => {\n    const [subtotals, setSubtotals] = React.useState({});\n\n    const { selectedTags, selectedGlobalTags, systemProfile } = useSelector(({ GlobalFilterStore }) => GlobalFilterStore);\n\n    const res = useMemo(async () =>{\n        setSubtotals({});\n\n        let result;\n\n        try {\n            result = await fetchSystems({ filter: {\n                os: queryParams?.filter?.os\n            },\n            selectedTags: [...selectedTags, ...selectedGlobalTags],\n            systemProfile,\n            limit: 1\n            });\n        }\n        catch {\n            result = [];\n        }\n\n        return result;\n    }, [\n        queryParams?.filter?.os?.length, queryParams?.filter?.os !== undefined,\n        selectedTags?.length, selectedTags !== undefined,\n        selectedGlobalTags?.length, selectedGlobalTags !== undefined,\n        systemProfile,\n        queryParams?.subtotals !== undefined\n    ]);\n\n    res.then((result)=> {\n        setSubtotals(result.meta?.subtotals);\n    });\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Grid hasGutter span={12} >\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsUpToDate)}\n                        Icon={CheckCircleIcon}\n                        color={'var(--pf-global--success-color--100)'}\n                        value={subtotals?.patched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'eq:0' } }}\n                    />\n                </GridItem>\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsWithPatchesAvailable)}\n                        Icon={PackageIcon}\n                        color={'var(--pf-global--primary-color--100)'}\n                        value={subtotals?.unpatched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'gt:0' } }}\n                    />\n                </GridItem>\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusStaleSystems)}\n                        Icon={ExclamationTriangleIcon}\n                        color={'var(--pf-global--warning-color--100)'}\n                        value={subtotals?.stale}\n                        apply={apply}\n                        filter={{ filter: { stale: true } }}\n                    />\n                </GridItem>\n            </Grid>\n        </Main>\n    );\n};\n\nStatusCard.propTypes = {\n    title: propTypes.string,\n    Icon: propTypes.elementType,\n    value: propTypes.number,\n    color: propTypes.string,\n    apply: propTypes.func,\n    filter: propTypes.object\n};\n\nSystemsStatusreport.propTypes = {\n    apply: propTypes.func,\n    queryParams: propTypes.object\n};\n\nexport default SystemsStatusreport;\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { defaultReducers } from '../../store';\nimport { changeSystemsParams, clearInventoryReducer,\n    changeSystemsMetadata, changeTags, systemSelectAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchSystems\n} from '../../Utilities/api';\nimport { systemsListDefaultFilters, featureFlags } from '../../Utilities/constants';\nimport {\n    arrayFromObj, decodeQueryparams, persistantParams, filterSelectedActiveSystemIDs\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useBulkSelectConfig, useGetEntities, useOnExport,\n    useRemoveFilter, useFeatureFlag\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\nimport SystemsStatusReport from '../../PresentationalComponents/StatusReports/SystemsStatusReport';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport { buildFilterConfig, buildActiveFiltersConfig } from '../../Utilities/SystemsHelpers';\nimport useRemediationProvier from '../../Utilities/useRemediationDataProvider';\nimport usePatchSetState from '../../Utilities/usePatchSetState';\nimport PatchSetWrapper from '../../PresentationalComponents/PatchSetWrapper/PatchSetWrapper';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\nimport { combineReducers } from 'redux';\nimport { systemsColumnsMerger } from '../../Utilities/SystemsHelpers';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst Systems = () => {\n    const store = useStore();\n    const chrome = useChrome();\n    const inventory = useRef(null);\n    const pageTitle = intl.formatMessage(messages.titlesSystems);\n\n    setPageTitle(pageTitle);\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [isRemediationOpen, setRemediationOpen] = React.useState(false);\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n\n    const isPatchSetEnabled = useFeatureFlag(featureFlags.patch_set, chrome);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const { hasError, code } = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const metadata = useSelector(\n        ({ SystemsStore }) => SystemsStore?.metadata || {}\n    );\n    const areAllSelected = useSelector(\n        ({ SystemsStore }) => SystemsStore?.areAllSelected\n    );\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => dispatch(clearInventoryReducer());\n    }, []);\n\n    const showRemediationModal = useCallback(async (data) => {\n        const resolvedData = await data;\n        setRemediationModalCmp(() =>\n            () => <RemediationWizard\n                data={resolvedData}\n                isRemediationOpen\n                setRemediationOpen={setRemediationOpen} />);\n        setRemediationOpen(!isRemediationOpen);\n    }, [isRemediationOpen]);\n\n    function apply(queryParams) {\n        dispatch(changeSystemsParams(queryParams));\n    }\n\n    const applyMetadata = (metadata) => {\n        dispatch(changeSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply, systemsListDefaultFilters);\n\n    const osFilterConfig = useOsVersionFilter(filter?.os, apply);\n    const filterConfig = buildFilterConfig(search, filter, apply, osFilterConfig);\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systems,\n            queryParams,\n            selectionDispatcher: systemSelectAction\n        }\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport('systems', queryParams, {\n        csv: exportSystemsCSV,\n        json: exportSystemsJSON\n    }, dispatch);\n\n    const getEntities = useGetEntities(fetchSystems, apply, {}, history, applyMetadata, applyGlobalFilter);\n\n    const {\n        patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal\n    } = usePatchSetState(selectedRows);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh) {\n            onSelect('none');\n            inventory?.current?.onRefreshData();\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    const remediationDataProvider = useRemediationProvier(selectedRows, setRemediationLoading, 'systems', areAllSelected);\n\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'} />\n            {(hasError || metadata?.has_systems === false)\n            && <ErrorHandler code={code} metadata={metadata}/>\n            || <React.Fragment>\n                <SystemsStatusReport apply={apply} queryParams={queryParams} />\n                {isPatchSetEnabled && <PatchSetWrapper patchSetState={patchSetState} setPatchSetState={setPatchSetState} />}\n                {isRemediationOpen && <RemediationModalCmp /> || null}\n                <Main>\n                    <InventoryTable\n                        ref={inventory}\n                        isFullView\n                        autoRefresh\n                        initialLoading\n                        hideFilters={{ all: true, tags: false }}\n                        columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, systemsListColumns, isPatchSetEnabled)}\n                        showTags\n                        customFilters={{\n                            patchParams: {\n                                search,\n                                filter,\n                                systemProfile,\n                                selectedTags\n                            }\n                        }}\n                        paginationProps={{\n                            isDisabled: totalItems === 0\n                        }}\n                        onLoad={({ mergeWithEntities }) => {\n                            store.replaceReducer(combineReducers({\n                                ...defaultReducers,\n                                ...mergeWithEntities(\n                                    inventoryEntitiesReducer(systemsListColumns(isPatchSetEnabled), modifyInventory),\n                                    persistantParams({ page, perPage, sort, search }, decodedParams)\n                                )\n                            }));\n                        }}\n                        getEntities={getEntities}\n                        tableProps={{\n                            actionResolver: (row) =>\n                                systemsRowActions(\n                                    showRemediationModal, openPatchSetAssignWizard,\n                                    isPatchSetEnabled, openUnassignSystemsModal, row\n                                ),\n                            canSelectAll: false,\n                            variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                        }}\n                        bulkSelect={bulkSelectConfig}\n                        exportConfig={{\n                            isDisabled: totalItems === 0,\n                            onSelect: onExport\n                        }}\n                        actionsConfig={{\n                            actions: [\n                                <AsyncRemediationButton\n                                    key='remediate-multiple-systems'\n                                    remediationProvider={remediationDataProvider}\n                                    isDisabled={\n                                        arrayFromObj(selectedRows).length === 0 || isRemediationLoading\n                                    }\n                                    isLoading={isRemediationLoading}\n                                />,\n                                ...isPatchSetEnabled ? [{\n                                    key: 'assign-multiple-systems',\n                                    label: intl.formatMessage(messages.titlesTemplateAssign),\n                                    onClick: openPatchSetAssignWizard,\n                                    props: { isDisabled: selectedCount === 0 }\n                                },\n                                {\n                                    key: 'remove-multiple-systems',\n                                    label: intl.formatMessage(messages.titlesTemplateRemoveMultipleButton),\n                                    onClick: () => openUnassignSystemsModal(filterSelectedActiveSystemIDs(selectedRows)),\n                                    props: { isDisabled: selectedCount === 0 }\n                                }] : []\n                            ]\n                        }}\n                        filterConfig={filterConfig}\n                        activeFiltersConfig={activeFiltersConfig}\n                    />\n                </Main>\n            </React.Fragment>}\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n","import { useState } from 'react';\nimport {\n    filterSelectedActiveSystemIDs\n} from './Helpers';\n\n/**\n* Manages unified state for patch set wizard and unassign modal.\n* @param {Object} [selectedRows] selected rows object to be removed.\n* @returns {patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal}\n*/\nconst usePatchSetState = (selectedRows) => {\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const openPatchSetAssignWizard = (systemID) => {\n        setPatchSetState({\n            isPatchSetWizardOpen: true,\n            systemsIDs: typeof systemID === 'string' && systemID !== ''\n                ? [systemID]\n                : filterSelectedActiveSystemIDs(selectedRows),\n            shouldRefresh: false\n        }\n        );\n    };\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openPatchSetEditModal = (patchSetID) => {\n        setPatchSetState({ isPatchSetWizardOpen: true, patchSetID });\n    };\n\n    return { patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal };\n};\n\nexport default usePatchSetState;\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport {\n    removeUndefinedObjectKeys\n} from './Helpers';\n\nconst initializeWorker = () => {\n    const worker = new Worker(new URL('./RemediationPairs.js', import.meta.url));\n    return [worker, () => worker.terminate()];\n};\n\nconst deligateWorkerTask = (worker, task) => {\n    worker.postMessage(task);\n\n    //waits web worker response\n    return new Promise((resolve, reject) => {\n        worker.onmessage = ({ data: { status, error, result } } = {}) => {\n            if (status === 'resolved')  {\n                resolve(result);\n            }\n\n            reject(error);\n        };\n    });\n};\n\nexport const prepareRemediationPairs = async (task, dispatch) => {\n    const [worker, terminateWorker] = initializeWorker();\n    const deligatedTask = deligateWorkerTask(worker, task);\n\n    const response = await deligatedTask.catch(err =>\n        dispatch(\n            addNotification(\n                {\n                    title: `There was an error while processing.`,\n                    description: err,\n                    variant: 'danger'\n                }\n            )\n        ));\n\n    terminateWorker();\n\n    //displays NoDataModal when there is no patch updates available\n    return response?.issues?.length ? response : false;\n};\n\n/**\n* Provides remediation data, systems with all of their corresponding issues.\n* @param {Function} [setRemediationLoading] function to toggle remediation loading state\n* @param {Array} [selectedRows] array of systems to calculate\n* @returns {handleSystemsRemoval}\n*/\nconst useRemediationDataProvider = (selectedRows, setRemediationLoading, remediationType, areAllSelected) => {\n    const dispatch = useDispatch();\n    const chrome = useChrome();\n    const remediationDataProvider = async () => {\n        setRemediationLoading(true);\n\n        //Auth token must be added to webworker request as webworker does not have access\n        //to default token by platform\n        const authToken = await chrome.auth.getToken();\n        const remediationPairs = await prepareRemediationPairs(\n            {\n                payload: removeUndefinedObjectKeys(selectedRows),\n                remediationType,\n                areAllSelected,\n                authToken\n            },\n            dispatch\n        );\n\n        setRemediationLoading(false);\n\n        return remediationPairs;\n    };\n\n    return remediationDataProvider;\n};\n\nexport default useRemediationDataProvider;\n","import { createAdvisorySystemsRows, createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows, fetchRejected } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyAdvisorySystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createAdvisorySystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["CardContext","cardId","registerTitleId","isExpanded","Card","_a","children","id","className","component","isHoverable","isCompact","isSelectable","isSelectableRaised","isSelected","isDisabledRaised","isFlat","isRounded","isLarge","isFullHeight","isPlain","ouiaId","ouiaSafe","hasSelectableInput","selectableInputAriaLabel","onSelectableInputChange","props","__rest","Component","ouiaProps","displayName","titleId","setTitleId","ariaProps","setAriaProps","console","warn","containsCardTitleChildRef","current","Provider","value","Object","assign","type","checked","onChange","event","disabled","tabIndex","css","undefined","CardBody","isFilled","CardTitle","PackageIconConfig","name","height","width","svgPath","yOffset","xOffset","PackageIcon","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","useEffect","error","concat","__assign","n","arguments","apply","this","BaseInvTable","history","useHistory","store","Cmp","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","PatchSetWrapper","_ref","patchSetState","setPatchSetState","React","isUnassignSystemsModalOpen","UnassignSystemsModal","unassignSystemsModalState","setUnassignSystemsModalOpen","systemsIDs","isPatchSetWizardOpen","PatchSetWizard","setBaselineState","renderUnassignModalMessages","bodyMessage","systemsCount","intl","GridItem","formatMessage","messages","b","_len","chunks","Array","_key","_ref$unassignSystemsM","_useState","useState","_useState2","_slicedToArray","systemsWithPatchSet","setSystemWithPatchSet","_useState3","_useState4","systemsLoading","setSystemsLoading","handleModalToggle","shouldRefresh","handleModalClose","handleUnassignment","dispatch","useDispatch","handleSystemsRemoval","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","unassignSystemFromPatchSet","inventory_ids","sent","status","addNotification","patchSetUnassignSystemsNotifications","success","stop","useUnassignSystemsHook","fetchSystems","limit","filter","stale","then","allSystemsWithPatchSet","systemID","data","some","system","filterSystemsWithoutSets","result","systemsWithoutPatchSetCount","Modal","variant","isOpen","title","onClose","titleIconVariant","actions","Button","key","onClick","isDisabled","Grid","hasGutter","Skeleton","Fragment","injectIntl","RemediationWizard","setRemediationOpen","AsyncComponent","setOpen","StatusCard","color","Icon","style","marginTop","Flex","flex","default","flexWrap","FlexItem","spacer","alignSelf","SystemsStatusreport","_ref2","_queryParams$filter2","_queryParams$filter2$","_queryParams$filter3","queryParams","_React$useState","_React$useState2","subtotals","setSubtotals","_useSelector","useSelector","_ref3","GlobalFilterStore","selectedTags","selectedGlobalTags","systemProfile","useMemo","_queryParams$filter","os","_toConsumableArray","t0","abrupt","_result$meta","meta","Main","paddingBottom","span","md","CheckCircleIcon","patched","packages_updatable","unpatched","ExclamationTriangleIcon","useStore","chrome","useChrome","inventory","useRef","pageTitle","setPageTitle","isRemediationOpen","_React$useState3","_React$useState4","isRemediationLoading","setRemediationLoading","_React$useState5","_React$useState6","RemediationModalCmp","setRemediationModalCmp","isPatchSetEnabled","useFeatureFlag","featureFlags","decodedParams","decodeQueryparams","location","search","systems","entities","rows","shallowEqual","totalItems","total","selectedRows","_ref4","hasError","code","metadata","_ref5","SystemsStore","areAllSelected","_ref6","_ref7","page","perPage","sort","clearInventoryReducer","showRemediationModal","useCallback","_ref8","resolvedData","_x","changeSystemsParams","_useRemoveFilter","useRemoveFilter","_objectSpread","systemsListDefaultFilters","deleteFilters","osFilterConfig","useOsVersionFilter","filterConfig","buildFilterConfig","activeFiltersConfig","buildActiveFiltersConfig","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","systemSelectAction","selectedCount","arrayFromObj","onExport","useOnExport","csv","exportSystemsCSV","json","exportSystemsJSON","getEntities","useGetEntities","changeSystemsMetadata","tags","changeTags","_usePatchSetState","usePatchSetState","openPatchSetAssignWizard","openUnassignSystemsModal","_inventory$current","onRefreshData","remediationDataProvider","useRemediationProvier","bulkSelectConfig","useBulkSelectConfig","total_items","Header","headerOUIA","has_systems","ErrorHandler","SystemsStatusReport","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","columns","defaultColumns","systemsColumnsMerger","systemsListColumns","showTags","customFilters","patchParams","paginationProps","onLoad","_ref9","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","modifyInventory","persistantParams","tableProps","actionResolver","row","systemsRowActions","canSelectAll","TableVariant","isStickyHeader","bulkSelect","exportConfig","actionsConfig","AsyncRemediationButton","remediationProvider","isLoading","label","filterSelectedActiveSystemIDs","openPatchSetEditModal","patchSetID","initializeWorker","worker","Worker","URL","terminate","deligateWorkerTask","task","postMessage","Promise","resolve","reject","onmessage","_ref$data","prepareRemediationPairs","_response$issues","_initializeWorker","_initializeWorker2","terminateWorker","deligatedTask","response","err","description","issues","_x2","remediationType","_callee2","authToken","remediationPairs","_context2","auth","getToken","payload","removeUndefinedObjectKeys","initialState","offset","state","loaded","createSystemsRows","modifyPackageSystems","createPackageSystemsRows","modifyAdvisorySystems","createAdvisorySystemsRows","inventoryModifier","action","newState","fetchRejected","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}