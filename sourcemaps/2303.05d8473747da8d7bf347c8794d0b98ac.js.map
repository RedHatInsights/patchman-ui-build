{"version":3,"file":"js/2303.eebba1bbe00fa07d7e96.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/AdvisoryType/AdvisoryType.js","webpack:///./src/PresentationalComponents/Snippets/EmptyStates.js","webpack:///./src/PresentationalComponents/Snippets/NoRegisteredSystems.js","webpack:///./src/PresentationalComponents/Snippets/ErrorHandler.js","webpack:///./src/PresentationalComponents/Snippets/ExternalLink.js","webpack:///./src/PresentationalComponents/Snippets/RebootRequired.js","webpack:///./src/SmartComponents/Remediation/AsyncRemediationButton.js","webpack:///./src/PresentationalComponents/Snippets/Label.js","webpack:///./src/PresentationalComponents/Snippets/DescriptionWithLink.js","webpack:///./src/Utilities/DataMappers.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { Split, SplitItem } from '@patternfly/react-core';\n\nconst AdvisoryType = ({ type }) => {\n    const advisoryType =\n        advisoryTypes.find(item => item.value === type) || advisoryTypes[3];\n    return (\n        <Split hasGutter>\n            <SplitItem>{advisoryType.icon}</SplitItem>\n            <SplitItem isFilled>{advisoryType.label}</SplitItem>\n        </Split>\n    );\n};\n\nAdvisoryType.propTypes = {\n    type: PropTypes.string\n};\n\nexport default AdvisoryType;\n","import {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { LockIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nexport const EmptyAdvisoryList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingAdvisories)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptyPackagesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingPackages)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptyCvesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingCve)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptySystemsList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingSystems)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptyPatchSetList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingTemplate)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const NoPatchSetList = ({ Button }) => (\n    <EmptyState variant={EmptyStateVariant.large}>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoTemplate)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.statesNoTemplateBody)}\n            <br />\n            <br />\n            {/*\n            <a href={TEMPLATES_DOCS_LINK} target=\"__blank\" rel=\"noopener noreferrer\">\n                {intl.formatMessage(messages.statesNoTemplateLink)} <ExternalLinkAltIcon />\n            </a>\n            <br />\n            <br />\n            */}\n            <Button />\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nNoPatchSetList.propTypes = {\n    Button: PropTypes.node\n};\n\nexport const NoSmartManagement = () => (\n    <EmptyState variant={EmptyStateVariant.large}>\n        <EmptyStateIcon icon={LockIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoSmartManagementHeader)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(\n                messages.statesNoSmartManagementBody,\n                { br: <br></br> }\n            )}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const NoAppliedSystems = ({ onButtonClick }) => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.templateNoAppliedSystemsTitle)}\n        </Title>\n        <EmptyStateBody>\n            <Button type=\"primary\" onClick={onButtonClick}>\n                {intl.formatMessage(messages.templateNoAppliedSystemsButton)}\n            </Button>\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nNoAppliedSystems.propTypes = {\n    onButtonClick: PropTypes.func\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { DisconnectedIcon } from '@patternfly/react-icons';\n\nconst NoRegisteredSystems = ({ titleText, bodyText, buttonText }) => (\n    <EmptyState>\n        <EmptyStateIcon icon={DisconnectedIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {titleText}\n        </Title>\n        <EmptyStateBody>{bodyText}</EmptyStateBody>\n        <Button\n            variant=\"primary\"\n            component=\"a\"\n            href=\"https://access.redhat.com/products/red-hat-insights#getstarted\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"pf-u-mt-lg\"\n        >\n            {buttonText}\n        </Button>\n    </EmptyState>\n);\n\nNoRegisteredSystems.propTypes = {\n    titleText: propTypes.string,\n    bodyText: propTypes.string,\n    buttonText: propTypes.string\n};\n\nNoRegisteredSystems.defaultProps = {\n    titleText: 'Do more with your Red Hat Enterprise Linux environment',\n    bodyText:\n    `Connect your systems to keep your Red Hat environment running efficiently,\n     with security and compliance with various standards.`,\n    buttonText: 'Learn more about connecting your systems'\n};\nexport default NoRegisteredSystems;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport { LockIcon } from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\n//TODO: use the shared component from platform\nimport NoRegisteredSystems from './NoRegisteredSystems';\n//import { NoRegisteredSystems } from '@redhat-cloud-services/frontend-components/NoRegisteredSystems';\n\nconst ErrorHandler = ({ code, ErrorState, EmptyState, metadata = {} }) => {\n    switch (code) {\n        case 204:\n            return <NotConnected />;\n\n        case 400:\n            return <Unavailable />;\n\n        case 401:\n            return <NotAuthorized\n                icon={LockIcon}\n                title={intl.formatMessage(messages.labelsNotAuthorizedTitle)}\n                description={intl.formatMessage(messages.labelsNotAuthorizedDescription)}\n                prevPageButtonText={intl.formatMessage(messages.labelsReturnToPreviousPage)}\n                toLandingPageText={intl.formatMessage(messages.labelsReturnToLandingPage)}\n            />;\n\n        case 403:\n            return <NotAuthorized\n                icon={LockIcon}\n                title={intl.formatMessage(messages.labelsNotAuthorizedTitle)}\n                description={intl.formatMessage(messages.labelsNotAuthorizedDescription)}\n                prevPageButtonText={intl.formatMessage(messages.labelsReturnToPreviousPage)}\n                toLandingPageText={intl.formatMessage(messages.labelsReturnToLandingPage)}\n            />;\n\n        case 404:\n            return <InvalidObject />;\n\n        case 500:\n        case 502:\n        case 503:\n            return <Unavailable />;\n\n        default:\n            return ErrorState && <ErrorState />\n                || EmptyState && <EmptyState />\n                || !metadata.has_systems && <NoRegisteredSystems />\n                || <SkeletonTable colSize={5} rowSize={20} /> ;\n    }\n};\n\nErrorHandler.propTypes = {\n    code: propTypes.number,\n    ErrorState: propTypes.element,\n    EmptyState: propTypes.element,\n    metadata: propTypes.object.isRequired\n};\n\nexport default ErrorHandler;\n","import { Flex, FlexItem } from '@patternfly/react-core';\nimport ExternalLinkSquareAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-square-alt-icon';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst ExternalLink = ({ link, text }) => {\n    return (\n        <a\n            href={link}\n            target=\"__blank\"\n        >\n            <Flex flex={{ default: 'inlineFlex' }}>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    {text}\n                </FlexItem>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    <ExternalLinkSquareAltIcon />\n                </FlexItem>\n            </Flex>\n        </a>\n\n    );\n};\n\nExternalLink.propTypes = {\n    link: propTypes.string,\n    text: propTypes.string\n};\n\nexport default ExternalLink;\n","\nimport React from 'react';\nimport {\n    Title, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { PowerOffIcon } from '@patternfly/react-icons';\n\nconst RebootRequired = () =>  (\n    <Flex flex={{ default: 'column' }}>\n        <FlexItem spacer={{ default: 'spacerNone' }}>\n            <Title headingLevel=\"h6\">\n                {intl.formatMessage(messages.labelsColumnsReboot)}\n            </Title>\n        </FlexItem>\n        <FlexItem spacer={{ default: 'spacerSm' }}>\n            <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                <FlexItem><PowerOffIcon size=\"sm\" color={'var(--pf-global--danger-color--100)'} /> </FlexItem>\n                <FlexItem isFilled>{intl.formatMessage(messages.textRebootIsRequired)}</FlexItem>\n            </Flex>\n        </FlexItem>\n    </Flex>\n);\n\nexport default RebootRequired;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Spinner } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AsyncRemediationButton = ({ remediationProvider, isDisabled, isLoading }) => {\n    const dispatch = useDispatch();\n\n    const handleRemediationSuccess = res => {\n        dispatch(addNotification(res.getNotification()));\n    };\n\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationButton\"\n            fallback={<Spinner size=\"lg\" />}\n            dataProvider={remediationProvider}\n            onRemediationCreated={handleRemediationSuccess}\n            isDisabled={isDisabled}\n            buttonProps={{ isLoading }}\n        >\n            {intl.formatMessage(messages.labelsRemediate)}\n        </AsyncComponent>\n    );\n};\n\nAsyncRemediationButton.propTypes = {\n    remediationProvider: propTypes.func,\n    isDisabled: propTypes.bool,\n    isLoading: propTypes.bool\n};\n\nexport default AsyncRemediationButton;\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport './Label.scss';\n\nconst Label = ({ children }) => {\n    return <span className={'patchman-label'}>{children}</span>;\n};\n\nLabel.propTypes = {\n    children: propTypes.any\n};\n\nexport default Label;\n","import {\n    Text, TextContent, TextList,\n    TextListItem, TextListItemVariants, TextListVariants, TextVariants\n} from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { entityTypes } from '../../Utilities/constants';\nimport { getSeverityById, handlePatchLink, isRHAdvisory, truncate } from '../../Utilities/Helpers';\nimport { intl } from '../../Utilities/IntlProvider';\nimport ExternalLink from './ExternalLink';\nimport Label from './Label';\nimport RebootRequired from '../Snippets/RebootRequired';\n\nexport const DescriptionWithLink = ({ row }) => {\n    const severityObject = getSeverityById(row.attributes.severity);\n    return (\n        <TextContent className='patch-advisory-description'>\n            {\n                row.attributes.cve_count > 0 &&\n                (<TextList component={TextListVariants.dl} style={{ '--pf-c-content--dl--RowGap': '0.5rem' }}>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsSeverity)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        <SecurityIcon size=\"sm\" color={severityObject.color} />  {severityObject.label}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsCves)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        {row.attributes.cve_count}\n                    </TextListItem>\n                </TextList>)\n            }\n            <Label>{intl.formatMessage(messages.labelsDescription)}</Label>\n            <Text component={TextVariants.p} style={{ whiteSpace: 'pre-line' }}>\n                {truncate(row.attributes.description.replace(\n                    new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n                    ''\n                ), 570, handlePatchLink(entityTypes.advisories, row.id, intl.formatMessage(messages.linksReadMore)))}\n            </Text>\n            {\n                row.attributes.reboot_required && <RebootRequired/>\n            }\n            {isRHAdvisory(row.id) && <ExternalLink link={`https://access.redhat.com/errata/${row.id}`}\n                text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />}\n        </TextContent>);\n};\n\nDescriptionWithLink.propTypes = {\n    row: propTypes.shape({\n        id: propTypes.string,\n        attributes: propTypes.object,\n        reboot_required: propTypes.bool\n    })\n};\n","import { TextContent, TextListItem, TextListItemVariants } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport messages from '../Messages';\nimport AdvisoryType from '../PresentationalComponents/AdvisoryType/AdvisoryType';\nimport { DescriptionWithLink } from '../PresentationalComponents/Snippets/DescriptionWithLink';\nimport {\n    EmptyAdvisoryList, EmptyCvesList, EmptyPackagesList,\n    EmptyPatchSetList, EmptySystemsList\n} from '../PresentationalComponents/Snippets/EmptyStates';\nimport { SystemUpToDate } from '../PresentationalComponents/Snippets/SystemUpToDate';\nimport { advisorySeverities, entityTypes } from './constants';\nimport { createAdvisoriesIcons, createUpgradableColumn, handleLongSynopsis, handlePatchLink } from './Helpers';\nimport { intl } from './IntlProvider';\n\nexport const createAdvisoriesRows = (rows, expandedRows, selectedRows) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        {\n                            title: handleLongSynopsis(row.attributes.synopsis)\n                        },\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type_name}\n                                />\n                            )\n                        },\n                        {\n                            title: handlePatchLink(\n                                entityTypes.advisories,\n                                row.id,\n                                row.attributes.applicable_systems\n                            )\n                        },\n                        {\n                            title: row.attributes.reboot_required &&\n                                intl.formatMessage(messages.labelsRebootRequired)\n                                || intl.formatMessage(messages.labelsRebootNotRequired)\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2,\n                    isExpandedRow: true\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 5 },\n                        title: <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemAdvisoriesRows = (\n    rows,\n    expandedRows,\n    selectedRows,\n    metadata\n) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        {\n                            title: handleLongSynopsis(row.attributes.synopsis)\n                        },\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type_name}\n                                />\n                            )\n                        },\n                        {\n                            title: row.attributes.reboot_required &&\n                                intl.formatMessage(messages.labelsRebootRequired)\n                                || intl.formatMessage(messages.labelsRebootNotRequired)\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2,\n                    isExpandedRow: true\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 6 },\n                        title: !metadata.search && (metadata.filter && Object.keys(metadata.filter).length === 0)\n                            && <SystemUpToDate />\n                            || <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows.map(({ id, ...rest }) => {\n            const {\n                packages_installed: installedPckg,\n                rhba_count: rhba,\n                rhsa_count: rhsa,\n                rhea_count: rhea,\n                other_count: other,\n                os,\n                rhsm,\n                tags,\n                last_upload: lastUpload\n            } = rest;\n            return {\n                id,\n                ...rest,\n                key: Math.random().toString() + id,\n                packages_installed: installedPckg,\n                applicable_advisories: [\n                    rhea || 0,\n                    rhba || 0,\n                    rhsa || 0,\n                    other || 0\n                ],\n                operating_system: {\n                    osName: os || 'N/A',\n                    rhsm\n                },\n                selected: selectedRows[id] !== undefined,\n                tags,\n                updated: lastUpload\n            };\n        });\n    return data || [];\n};\n\nexport const createPackageSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows &&\n        rows.map(row => {\n            return {\n                id: row.id,\n                key: Math.random().toString() + row.id,\n                display_name: row.display_name,\n                installed_evra: row.installed_evra,\n                available_evra: row.updatable && row.available_evra || row.installed_evra,\n                disableCheckbox: !row.updatable,\n                updatable: row.updatable,\n                upgradable: row.updatable,\n                selected: selectedRows[row.id] !== undefined,\n                tags: row.tags\n            };\n        });\n    return data || [];\n};\n\nexport const createSystemPackagesRows = (rows, selectedRows = {}) => {\n    if (rows && rows.length !== 0) {\n        return rows.map(pkg => {\n            const pkgNEVRA = `${pkg.name}-${pkg.evra}`;\n            const pkgUpdates = pkg.updates || [];\n            const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n\n            return {\n                id: pkgNEVRA,\n                key: pkgNEVRA,\n                selected: selectedRows[pkgNEVRA] !== undefined,\n                disableCheckbox: !latestUpdate,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.evra },\n                    { title: (latestUpdate && latestUpdate.evra) || pkg.evra },\n                    { title: createUpgradableColumn(pkg.updatable) },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createPackagesRows = (rows) => {\n    if (rows && rows.length !== 0) {\n        return rows.map(pkg => {\n            return {\n                id: pkg.name,\n                key: pkg.name,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.systems_installed },\n                    { title: pkg.systems_updatable },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createCvesRows = (rows) => {\n    if (rows.length !== 0) {\n        return rows.map(cve => {\n            const { attributes, id } = cve;\n            const severityObject = advisorySeverities.filter(severity => severity.label === attributes.impact)[0];\n\n            return {\n                id,\n                key: id,\n                cells: [\n                    {\n                        title: (\n                            <a href={`${document.baseURI}insights/vulnerability/cves/${attributes.synopsis}`}>\n                                {attributes.synopsis}\n                            </a>)\n                    },\n                    {\n                        title: (<TextContent>\n                            <TextListItem component={TextListItemVariants.dd}>\n                                <SecurityIcon size=\"sm\" color={severityObject.color} />  {severityObject.label}\n                            </TextListItem>\n                        </TextContent>),\n                        value: severityObject.label\n                    },\n                    { title: parseFloat(attributes.cvss_score).toFixed(1) }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 4 },\n                        title: <EmptyCvesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemsRowsReview = (rows, selectedRows) => {\n    if (rows.length !== 0) {\n        return rows.map(system => {\n            const { attributes, id } = system;\n\n            return {\n                id,\n                key: id,\n                selected: selectedRows[system.id] !== undefined,\n                cells: [\n                    {\n                        title: attributes.display_name\n                    },\n                    {\n                        title: attributes.os || 'N/A'\n                    },\n                    {\n                        title: attributes.baseline_name || 'No template'\n                    }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 4 },\n                        title: <EmptySystemsList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createPatchSetRows = (rows, selectedRows = {}, filters) => {\n\n    const data =\n        rows &&\n        rows.map(row => {\n            return {\n                id: row.id,\n                displayName: row.name,\n                key: row.id,\n                selected: selectedRows[row.id] !== undefined,\n                cells: [\n                    {\n                        title: (\n                            <Link to={{ pathname: `/templates/${row.id}` }}>\n                                {row.name}\n                            </Link>\n                        )\n                    },\n                    { title: row.systems || intl.formatMessage(messages.labelsTemplateNoSystems) },\n                    { title: processDate(row.last_edited) },\n                    { title: processDate(row.published) },\n                    { title: row.creator }\n                ]\n            };\n        });\n\n    return data?.length > 0 ? data :\n        (filters.search || Object.keys(filters.filter).length) ?\n            [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 6 },\n                            title: <EmptyPatchSetList />\n                        }\n                    ]\n                }\n            ] : [];\n};\n\nexport const createPatchSetDetailRows = (rows) => {\n\n    const data =\n        rows &&\n        rows.map(row => {\n            row = { ...row, ...row.attributes };\n\n            return {\n                id: row.inventory_id,\n                displayName: row.display_name,\n                key: row.inventory_id,\n                cells: [\n                    {\n                        title: (\n                            <Link to={{ pathname: `/systems/${row.inventory_id}` }}>\n                                {row.display_name}\n                            </Link>\n                        )\n                    },\n                    {\n                        title: row.os || 'N/A'\n                    },\n                    {\n                        title: createAdvisoriesIcons([\n                            row.installable_rhea_count,\n                            row.installable_rhba_count,\n                            row.installable_rhsa_count,\n                            row.installable_other_count\n                        ], 'installable')\n                    },\n                    {\n                        title: createAdvisoriesIcons([\n                            row.applicable_rhea_count,\n                            row.applicable_rhba_count,\n                            row.applicable_rhsa_count,\n                            row.applicable_other_count\n                        ])\n                    },\n                    {\n                        title: processDate(row.last_upload)\n                    }\n                ]\n            };\n        });\n\n    return data;\n};\n"],"names":["AdvisoryType","_ref","type","advisoryType","advisoryTypes","item","value","React","Split","hasGutter","SplitItem","icon","isFilled","label","propTypes","PropTypes","EmptyAdvisoryList","EmptyState","variant","EmptyStateVariant","Title","headingLevel","size","intl","messages","EmptyStateBody","EmptyPackagesList","EmptyStateIcon","SearchIcon","EmptyCvesList","EmptySystemsList","EmptyPatchSetList","NoPatchSetList","Button","PlusCircleIcon","NoSmartManagement","LockIcon","br","NoAppliedSystems","_ref2","onButtonClick","onClick","NoRegisteredSystems","titleText","bodyText","buttonText","DisconnectedIcon","component","href","target","rel","className","defaultProps","ErrorHandler","code","ErrorState","_ref$metadata","metadata","NotConnected","Unavailable","NotAuthorized","title","description","prevPageButtonText","toLandingPageText","InvalidObject","has_systems","SkeletonTable","colSize","rowSize","ExternalLink","link","text","Flex","flex","default","FlexItem","spacer","ExternalLinkSquareAltIcon","style","flexWrap","PowerOffIcon","color","AsyncRemediationButton","remediationProvider","isDisabled","isLoading","dispatch","useDispatch","AsyncComponent","appName","module","fallback","Spinner","dataProvider","onRemediationCreated","res","addNotification","getNotification","buttonProps","Label","children","DescriptionWithLink","row","severityObject","getSeverityById","attributes","severity","TextContent","cve_count","TextList","TextListVariants","TextListItem","TextListItemVariants","SecurityIcon","Text","TextVariants","whiteSpace","truncate","replace","RegExp","handlePatchLink","entityTypes","id","reboot_required","RebootRequired","isRHAdvisory","concat","createAdvisoriesRows","rows","expandedRows","selectedRows","length","_flatMap","index","isOpen","selected","undefined","cells","handleLongSynopsis","synopsis","advisory_type_name","applicable_systems","processDate","public_date","parent","isExpandedRow","heightAuto","props","colSpan","createSystemAdvisoriesRows","search","filter","Object","keys","SystemUpToDate","createSystemsRows","arguments","map","rest","_objectWithoutProperties","_excluded","installedPckg","packages_installed","rhba","rhba_count","rhsa","rhsa_count","rhea","rhea_count","other","other_count","os","rhsm","tags","lastUpload","last_upload","_objectSpread","key","Math","random","toString","applicable_advisories","operating_system","osName","updated","createPackageSystemsRows","display_name","installed_evra","available_evra","updatable","disableCheckbox","upgradable","createSystemPackagesRows","pkg","pkgNEVRA","name","evra","pkgUpdates","updates","latestUpdate","createUpgradableColumn","summary","createPackagesRows","systems_installed","systems_updatable","createCvesRows","cve","advisorySeverities","impact","document","baseURI","parseFloat","cvss_score","toFixed","createSystemsRowsReview","system","baseline_name","createPatchSetRows","filters","data","displayName","Link","to","pathname","systems","last_edited","published","creator","createPatchSetDetailRows","inventory_id","createAdvisoriesIcons","installable_rhea_count","installable_rhba_count","installable_rhsa_count","installable_other_count","applicable_rhea_count","applicable_rhba_count","applicable_rhsa_count","applicable_other_count"],"sourceRoot":""}