{"version":3,"sources":["webpack:///./src/SmartComponents/Advisories/Advisories.js"],"names":["Advisories","history","pageTitle","intl","messages","setPageTitle","dispatch","useDispatch","React","firstMount","setFirstMount","advisories","useSelector","AdvisoryListStore","rows","expandedRows","queryParams","selectedRows","metadata","status","createAdvisoriesRows","apply","decodeQueryparams","location","search","push","encodeURLParams","fetchApplicableAdvisories","onCollapse","_","rowId","value","expandAdvisoryRow","getRowIdByIndexExpandable","onSelect","useOnSelect","fetchApplicableAdvisoriesApi","limit","toSelect","selectAdvisoryRow","advisory","id","onSort","useSortColumn","advisoriesColumns","sortBy","createSortBy","sort","onExport","useOnExport","csv","exportAdvisoriesCSV","json","exportAdvisoriesJSON","onSetPage","useSetPage","onPerPageSelect","usePerPageSelect","params","changeAdvisoryListParams","prepareRemediationPairs","issues","fetchSystems","then","data","fetchViewAdvisoriesSystems","systems","map","system","title","headerOUIA","columns","compact","remediationProvider","remediationProviderWithPairs","arrayFromObj","transformPairs","remediationIdentifiers","remediationButtonOUIA","tableOUIA","paginationOUIA","store","filterConfig","items","searchFilter","typeFilter","filter","publishDateFilter","propTypes","withRouter"],"mappings":"0iCA6BA,IAAMA,EAAa,SAAC,GAAgB,IAAdC,EAAc,EAAdA,QACZC,EAAYC,kBAAmBC,uBAErCC,QAAaH,GAEb,IAAMI,GAAWC,mBACjB,EAAoCC,cAAe,GAAnD,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAAaC,kBACf,qBAAGC,kBAA0CC,QAG3CC,GAAeH,kBACjB,qBAAGC,kBAA0CE,gBAE3CC,GAAcJ,kBAChB,qBAAGC,kBAA0CG,eAE3CC,GAAeL,kBACjB,qBAAGC,kBAA0CI,gBAE3CC,GAAWN,kBACb,qBAAGC,kBAA0CK,YAE3CC,GAASP,kBACX,qBAAGC,kBAA0CM,UAG3CL,EAAON,aACT,kBAAMY,QAAqBT,EAAYI,EAAcE,KACrD,CAACN,EAAYI,EAAcE,IAG/BT,eAAgB,WACRC,GACAY,GAAMC,QAAkBrB,EAAQsB,SAASC,SACzCd,GAAc,KAEdT,EAAQwB,MAAKC,QAAgBV,IAC7BV,GAASqB,QAA0BX,OAExC,CAACA,IAEJ,IAAMY,EAAapB,iBAAkB,SAACqB,EAAGC,EAAOC,GAAX,OACjCzB,GACI0B,QAAkB,CACdF,OAAOG,QAA0BtB,EAAYmB,GAC7CC,cAcNG,GAAWC,QAAYrB,EAAMG,GATd,kBACjBmB,QAA6B,EAAD,KAAMpB,GAAN,IAAmBqB,OAAQ,QAExC,SAACC,GAChBhC,GACIiC,QAAkBD,OAIiD,SAACE,GAAD,OAAcA,EAASC,MAE5FC,GAASC,QAAcC,KAAmBvB,EAAO,GACjDwB,EAASrC,aACX,kBAAMsC,QAAaF,KAAmB1B,EAAS6B,KAAM,KACrD,CAAC7B,EAAS6B,OAGRC,GAAWC,QAAY,aAAcjC,EAAa,CACpDkC,IAAKC,KACLC,KAAMC,MACP/C,GAEGgD,GAAYC,QAAWrC,EAASmB,MAAOhB,GACvCmC,GAAkBC,QAAiBpC,GAEzC,SAASA,EAAMqC,GACXpD,GAASqD,QAAyBD,IAGtC,IAAME,EAA0B,SAACC,GAC7B,OAAOC,QAAa,CAAEzB,OAAQ,IAAK0B,MAC/B,gBAAGC,EAAH,EAAGA,KAAH,OAAcC,QACV,CACItD,WAAYkD,EACZK,QAASF,EAAKG,KAAI,SAAAC,GAAM,OAAIA,EAAO3B,YAKnD,OACI,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAQ4B,MAAOlE,kBAAmBC,2BAAiCkE,WAAY,eAC/E,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,QAAS3B,KACT4B,SAAO,EACP5C,WAAYA,EACZ0B,UAAWA,EACXE,gBAAiBA,EACjBd,OAAQA,EACRM,SAAUA,EACV/B,aAAcA,EACdiB,SAAUA,EACVW,OAAQA,EACR4B,oBAAqB,kBACjBC,SACIC,QAAa1D,GACb2C,EACAgB,KACAC,gBAERxD,MAAOA,EACPyD,sBAAuB,6BACvBC,UAAW,mBACXC,eAAgB,wBAChBC,MAAO,CAAEnE,OAAMI,WAAUC,SAAQH,eACjCkE,aAAc,CACVC,MAAO,EACHC,OAAa/D,EAAOL,EAAYQ,OAC5BrB,kBAAmBC,wCACnBD,kBAAmBC,gDAEvBiF,OAAWhE,EAAOL,EAAYsE,SAC9BC,OAAkBlE,EAAOL,EAAYsE,eASjEtF,EAAWwF,UAAY,CACnBvF,QAASuF,YAGb,SAAeC,gBAAWzF","file":"js/Advisories.f7736b7d9605d6e49750.js","sourcesContent":["import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { advisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport {\n    changeAdvisoryListParams, expandAdvisoryRow,\n    fetchApplicableAdvisories, selectAdvisoryRow\n} from '../../store/Actions/Actions';\nimport {\n    exportAdvisoriesCSV, exportAdvisoriesJSON, fetchApplicableAdvisoriesApi,\n    fetchSystems, fetchViewAdvisoriesSystems\n} from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport { createAdvisoriesRows } from '../../Utilities/DataMappers';\nimport {\n    arrayFromObj, createSortBy, decodeQueryparams,\n    encodeURLParams, getRowIdByIndexExpandable, remediationProviderWithPairs, transformPairs\n} from '../../Utilities/Helpers';\nimport { setPageTitle, useOnExport, useOnSelect, usePerPageSelect, useSetPage, useSortColumn } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst Advisories = ({ history }) => {\n    const pageTitle = intl.formatMessage(messages.titlesAdvisories);\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const advisories = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.rows\n    );\n\n    const expandedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.status\n    );\n\n    const rows = React.useMemo(\n        () => createAdvisoriesRows(advisories, expandedRows, selectedRows),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchApplicableAdvisories(queryParams));\n        }\n    }, [queryParams]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const fetchAllData = () =>\n        fetchApplicableAdvisoriesApi({ ...queryParams, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            selectAdvisoryRow(toSelect)\n        );\n    };\n\n    const onSelect = useOnSelect(rows, selectedRows, fetchAllData, selectRows, (advisory) => advisory.id);\n\n    const onSort = useSortColumn(advisoriesColumns, apply, 2);\n    const sortBy = React.useMemo(\n        () => createSortBy(advisoriesColumns, metadata.sort, 2),\n        [metadata.sort]\n    );\n\n    const onExport = useOnExport('advisories', queryParams, {\n        csv: exportAdvisoriesCSV,\n        json: exportAdvisoriesJSON\n    }, dispatch);\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeAdvisoryListParams(params));\n    }\n\n    const prepareRemediationPairs = (issues) => {\n        return fetchSystems({ limit: -1 }).then(\n            ({ data }) => fetchViewAdvisoriesSystems(\n                {\n                    advisories: issues,\n                    systems: data.map(system => system.id)\n                }\n            ));\n    };\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchAdvisories)} headerOUIA={'advisories'} />\n            <Main>\n                <TableView\n                    columns={advisoriesColumns}\n                    compact\n                    onCollapse={onCollapse}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    onExport={onExport}\n                    selectedRows={selectedRows}\n                    onSelect={onSelect}\n                    sortBy={sortBy}\n                    remediationProvider={() =>\n                        remediationProviderWithPairs(\n                            arrayFromObj(selectedRows),\n                            prepareRemediationPairs,\n                            transformPairs,\n                            remediationIdentifiers.advisory)\n                    }\n                    apply={apply}\n                    remediationButtonOUIA={'toolbar-remediation-button'}\n                    tableOUIA={'advisories-table'}\n                    paginationOUIA={'advisories-pagination'}\n                    store={{ rows, metadata, status, queryParams }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle),\n                                intl.formatMessage(messages.labelsFiltersSearchAdvisoriesPlaceholder)\n                            ),\n                            typeFilter(apply, queryParams.filter),\n                            publishDateFilter(apply, queryParams.filter)\n                        ]\n                    }}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisories.propTypes = {\n    history: propTypes.object\n};\n\nexport default withRouter(Advisories);\n"],"sourceRoot":""}