{"version":3,"sources":["webpack:///./src/PresentationalComponents/InfoBox/InfoBox.js","webpack:///./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack:///./src/SmartComponents/AdvisoryDetail/CvesModal.js","webpack:///./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack:///./src/SmartComponents/AdvisorySystems/AdvisorySystems.js","webpack:///./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js"],"names":["InfoBox","title","text","isLoading","content","color","Split","className","hasGutter","WithLoader","variant","WithLoaderVariants","loading","size","SplitItem","style","backgroundColor","Bullseye","isFilled","TextContent","Text","component","TextVariants","propTypes","AdvisorySeverityInfo","severity","Popover","position","enableFlip","headerContent","label","bodyContent","footerContent","href","target","rel","Flex","FlexItem","spacer","default","intl","messages","CvesModal","cveIds","dispatch","useDispatch","useState","cves","setCves","rows","setRows","page","setPage","perPage","setPerPage","undefined","search","setSearch","direction","SortByDirection","index","sortBy","setSortBy","data","useSelector","CvesListStore","status","React","fetchCves","slice","useMemo","sortedCves","filter","cve","synopsis","attributes","toLowerCase","includes","createCvesRows","length","handleFilter","errorState","STATUS_REJECTED","Unavailable","Modal","isOpen","Boolean","onClose","TableView","columns","cvesTableColumns","onSetPage","_","onPerPageSelect","apply","tableOUIA","paginationOUIA","onSort","sortCves","store","metadata","limit","offset","total_items","queryParams","filterConfig","items","searchFilter","AdvisoryHeader","CvesInfoModal","setCvesModal","severityObject","getSeverityById","Grid","minHeight","GridItem","md","sm","centered","Stack","StackItem","whiteSpace","preserveNewlines","description","public_date","date","processDate","modified_date","ExternalLink","link","id","value","Button","padding","onClick","cvesCount","AdvisorySystems","advisoryName","RemediationModalCmp","setRemediationModalCmp","systems","entities","shallowEqual","selectedRows","totalItems","total","params","changeEntitiesParams","clearEntitiesStore","useRemoveFilter","deleteFilters","activeFiltersConfig","filters","buildFilterChips","onDelete","showRemediationModal","RemediationModal","onSelect","useOnSelect","fetchAdvisorySystems","toSelect","type","payload","selectedCount","arrayFromObj","getEntites","useGetEntities","InventoryTable","disableDefaultColumns","isFullView","autoRefresh","initialLoading","ignoreRefresh","hideFilters","all","customFilters","patchParams","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","initialState","getEntities","actions","systemsRowActions","tableProps","canSelectAll","TableVariant","isStickyHeader","bulkSelect","useBulkSelectConfig","dedicatedAction","PatchRemediationButton","isDisabled","remediationProvider","filterSelectedRowIDs","remediationIdentifiers","ouia","AdvisoryDetail","match","advisoryId","pageTitle","setPageTitle","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearAdvisoryDetailStore","Header","headerOUIA","breadcrumbs","to","paths","isActive","STATUS_LOADING","Main","withRouter"],"mappings":"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","file":"js/AdvisoryyPage.016eb01cbfdec6a4f0d1.js","sourcesContent":["import { Text, TextContent, TextVariants, Bullseye, Split, SplitItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\nimport './InfoBox.scss';\n\nconst InfoBox = ({ title, text, isLoading, content, color }) => {\n    return (\n        <Split className=\"infobox\" hasGutter>\n            <WithLoader\n                variant={WithLoaderVariants.skeleton}\n                loading={isLoading}\n                size=\"lg\"\n            >\n                <SplitItem style={{ backgroundColor: color }}>\n                    <Bullseye>{content}</Bullseye>\n                </SplitItem>\n                <SplitItem isFilled>\n                    <TextContent>\n                        <Text component={TextVariants.h6}>{title}</Text>\n                        <Text component={TextVariants.p}>{text}</Text>\n                    </TextContent>\n                </SplitItem>\n            </WithLoader>\n        </Split>\n    );\n};\n\nInfoBox.propTypes = {\n    title: propTypes.string,\n    text: propTypes.any,\n    isLoading: propTypes.bool,\n    content: propTypes.any,\n    color: propTypes.string\n};\n\nexport default InfoBox;\n","import { Text, TextContent, TextVariants, Popover } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Popover\n            position=\"bottom\"\n            enableFlip\n            headerContent={<div>{severity.label + ' severity'}</div>}\n            bodyContent={\n                <TextContent>\n                    <Text component={TextVariants.p}>{severity.text}</Text>\n                </TextContent>\n            }\n            footerContent={\n                <a\n                    href=\"https://access.redhat.com/security/updates/classification/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <Flex>\n                        <FlexItem spacer={{ default: 'spacerSm' }}>\n                            <ExternalLinkSquareAltIcon />\n                        </FlexItem>\n                        <FlexItem spacer={{ default: 'spacerSm' }}>\n                            {intl.formatMessage(messages.linksSearchSecurityRatings)}\n                        </FlexItem>\n                    </Flex>\n                </a>\n            }\n        >\n            <a>{intl.formatMessage(messages.linksLearnMore)}</a>\n        </Popover>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import React, { useState, useMemo } from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport { cvesTableColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCves } from '../../store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport { createCvesRows } from '../../Utilities/DataMappers';\nimport { sortCves } from '..//../Utilities/Helpers';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { STATUS_REJECTED } from '../../Utilities/constants';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst CvesModal = ({ cveIds }) =>{\n    const dispatch = useDispatch();\n    const [cves, setCves] = useState([]);\n    const [rows, setRows] = useState([]);\n    const [page, setPage] = useState(1);\n    const [perPage, setPerPage] = useState(10);\n    const [search, setSearch] = useState(undefined);\n    const [sortBy, setSortBy] = useState({\n        direction: SortByDirection.asc,\n        index: 0\n    });\n\n    const data = useSelector(({ CvesListStore }) => CvesListStore.rows);\n\n    const status = useSelector(\n        ({ CvesListStore }) => CvesListStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchCves({ cveIds }));\n    }, []);\n\n    React.useMemo(() => {\n        setRows(cves.slice((page - 1) * perPage, page * perPage));\n    }, [cves, page, perPage, sortBy]);\n\n    useMemo(() => {\n        const sortedCves = (search !== undefined && search !== '')\n            && data.filter(\n                cve => {\n                    const { attributes: { synopsis } } = cve;\n                    return synopsis && search && (synopsis.toLowerCase().includes(search.toLowerCase()));\n                }\n            ) || data;\n\n        setCves(createCvesRows((sortedCves.length !== 0 || search) && sortedCves || data));\n    }, [search, data]);\n\n    const handleClose = () => {\n        setRows(undefined);\n    };\n\n    const handleFilter = ({ search }) =>{\n        setPage(page);\n        setSearch(search);\n    };\n\n    const handlePageChange = (_, page) => {\n        setPage(page);\n    };\n\n    const handlePerPageChange = (_, perPage) => {\n        setPage(1);\n        setPerPage(perPage);\n    };\n\n    const handleSort = (_, index, direction) => {\n        const { sortBy, sortedCves } = sortCves(cves, index, direction);\n\n        setSortBy(sortBy);\n        setCves(sortedCves);\n    };\n\n    const errorState = status === STATUS_REJECTED && <Unavailable />;\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant='small'\n                title={intl.formatMessage(messages.labelsCves)}\n                isOpen={Boolean(rows)}\n                onClose={handleClose}\n            >\n                <TableView\n                    columns={cvesTableColumns}\n                    onSetPage={handlePageChange}\n                    onPerPageSelect={handlePerPageChange}\n                    apply={handleFilter}\n                    tableOUIA={'cves-table'}\n                    paginationOUIA={'cves-pagination'}\n                    onSort={handleSort}\n                    sortBy={sortBy}\n                    store={{\n                        rows,\n                        metadata: { limit: perPage, offset: (page - 1) * perPage, total_items: cves && cves.length },\n                        status, queryParams: { filter: {}, search }\n                    }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(handleFilter, search, '',\n                                intl.formatMessage(messages.labelsFiltersCvesSearchPlaceHolder))\n                        ]\n                    }}\n                    errorState={errorState}\n                />\n            </Modal>\n        </React.Fragment>\n    );\n\n};\n\nCvesModal.propTypes = {\n    cveIds: propTypes.array\n};\n\nexport default CvesModal;\n","import { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { getSeverityById, preserveNewlines } from '../../Utilities/Helpers';\nimport InfoBox from '../InfoBox/InfoBox';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\nimport ExternalLink from '../Snippets/ExternalLink';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\nimport {\n    TextContent,\n    Text,\n    TextVariants,\n    Button\n} from '@patternfly/react-core';\nimport CvesModal from '../../SmartComponents/AdvisoryDetail/CvesModal';\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const [CvesInfoModal, setCvesModal] = useState(() => () => null);\n    const severityObject = getSeverityById(attributes.severity);\n    const cves = attributes.cves;\n\n    const showCvesModal = () => {\n        setCvesModal(() => () => <CvesModal cveIds={cves} />);\n    };\n\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                preserveNewlines(attributes.description)\n                            }\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsPublicDate, { date: processDate(\n                                        attributes.public_date\n                                    )\n                                    })}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsModifiedDate, { date: processDate(\n                                        attributes.modified_date\n                                    )\n                                    })}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        <StackItem>\n                            <ExternalLink link={`https://access.redhat.com/errata/${attributes.id}`}\n                                text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n                        </StackItem>\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                {severityObject.value !== 0 && (\n                    <InfoBox\n                        isLoading={isLoading}\n                        title={severityObject.label}\n                        color={severityObject.color}\n                        text={\n                            <AdvisorySeverityInfo severity={severityObject} />\n                        }\n                        content={<SecurityIcon size=\"lg\" />}\n                    />\n                )}\n            </GridItem>\n            {cves && cves.length !== 0 && (\n                <GridItem md={4} sm={12}>\n                    <TextContent>\n                        <Text component={TextVariants.h3}>\n                            {intl.formatMessage(messages.labelsCves)}\n                        </Text>\n                        <Button variant='link' style={{ padding: 0 }} onClick = {showCvesModal} >\n                            {intl.formatMessage(messages.labelsCvesButton, { cvesCount: cves.length })}\n                        </Button>\n                    </TextContent>\n                </GridItem>\n            )}\n            <CvesInfoModal/>\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { AnsibeTowerIcon } from '@patternfly/react-icons';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport { register } from '../../store';\nimport { changeEntitiesParams, clearEntitiesStore } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, initialState } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { fetchAdvisorySystems } from '../../Utilities/api';\nimport { STATUS_REJECTED, remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips,\n    remediationProvider, filterSelectedRowIDs\n} from '../../Utilities/Helpers';\nimport {\n    useOnSelect, useRemoveFilter,\n    useBulkSelectConfig, useGetEntities\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport PatchRemediationButton from '../Remediation/PatchRemediationButton';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from '../Systems/SystemsListAssets';\n\nconst AdvisorySystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const queryParams = useSelector(\n        ({ entities }) => entities?.queryParams || {}\n    );\n\n    const { filter, search } = queryParams;\n\n    React.useEffect(() => {\n        return () => dispatch(clearEntitiesStore());\n    }, []);\n\n    function apply(params) {\n        dispatch(changeEntitiesParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ search }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            )\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: deleteFilters\n    };\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const fetchAllData = () =>\n        fetchAdvisorySystems({ ...queryParams, id: advisoryName, limit: -1 });\n\n    const onSelect = useOnSelect(systems,  selectedRows, fetchAllData, selectRows);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const getEntites = useGetEntities(fetchAdvisorySystems, apply, advisoryName);\n\n    return (\n        <React.Fragment>\n            {status === STATUS_REJECTED ? <Unavailable/> : (\n                <InventoryTable\n                    disableDefaultColumns\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    ignoreRefresh\n                    hideFilters={{ all: true }}\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter\n                        }\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        register({\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(systemsListColumns),\n                                initialState\n                            )\n                        });\n                    }}\n                    getEntities={getEntites}\n                    actions={systemsRowActions(showRemediationModal)}\n                    tableProps = {{ canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig = {activeFiltersConfig}\n                    bulkSelect={onSelect && useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                    dedicatedAction={(<PatchRemediationButton\n                        isDisabled={\n                            arrayFromObj(selectedRows).length === 0\n                        }\n                        onClick={() =>\n                            showRemediationModal(\n                                remediationProvider(\n                                    advisoryName,\n                                    filterSelectedRowIDs(selectedRows),\n                                    remediationIdentifiers.advisory\n                                )\n                            )\n                        }\n                        ouia={'toolbar-remediation-button'}\n                        isLoading={false}\n                    >\n                        <AnsibeTowerIcon />&nbsp;{intl.formatMessage(messages.labelsRemediate)}\n                    </PatchRemediationButton>\n                    )}\n                >\n                    <RemediationModalCmp />\n                </InventoryTable>\n            )}\n        </React.Fragment>\n    );\n};\n\nAdvisorySystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AdvisorySystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { paths } from '../../Routes';\nimport { clearAdvisoryDetailStore, clearEntitiesStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { STATUS_LOADING, STATUS_REJECTED } from '../../Utilities/constants';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport AdvisorySystems from '../AdvisorySystems/AdvisorySystems';\n\nconst AdvisoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [advisoryName] = React.useState(match.params.advisoryId);\n\n    const pageTitle = `${advisoryName} - ${intl.formatMessage(messages.titlesAdvisories)}`;\n    setPageTitle(pageTitle);\n\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearEntitiesStore());\n            dispatch(clearAdvisoryDetailStore());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                headerOUIA={'advisory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchAdvisories),\n                        to: paths.advisories.to,\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status === STATUS_REJECTED ? <Unavailable /> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status === STATUS_LOADING}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        <AdvisorySystems advisoryName={advisoryName} />\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisoryDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(AdvisoryDetail);\n"],"sourceRoot":""}