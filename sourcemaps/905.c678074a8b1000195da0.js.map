{"version":3,"sources":["webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js"],"names":["currentFilter","apply","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","osFilterTypes","reverse","currentValue","os","currentOsVersionsArray","split","filterByOsType","_","value","includes","filter","join","remainingOs","length","undefined","onToggle","onViewMoreClick","type","conditionalFilterType","label","intl","messages","filterValues","children","variant","SelectVariant","typeAheadAriaLabel","onSelect","selections","placeholderText","loadingVariant","text","onClick","style","maxHeight","overflow","slice","map","option","index","SelectOption","key"],"mappings":"0VAsEA,QA/DwB,WAA+B,IAA9BA,EAA8B,uDAAd,GAAIC,EAAU,uCAEnD,EAA0BC,cAAe,GAAzC,eAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCF,aAAe,IAAnD,eAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAA4BC,aAAsBC,UAE9CC,EAAiBV,EAArBW,GACAC,EAAiD,iBAAjBF,GAA6BA,EAAaG,MAAM,MAAQ,GAExFC,EAAiB,SAACC,EAAGC,GACvB,GAAIN,IAAiBA,EAAaO,SAASD,GACvCf,EAAM,CAAEiB,OAAQ,CAAEP,GAAI,GAAF,OAAKC,EAAuBO,KAAK,KAAjC,YAAyCH,WAE5D,GAAIN,GAAgBA,EAAaO,SAASD,GAAQ,CACnD,IAAMI,EAAcR,EAAuBM,QAAO,SAAAP,GAAE,OAAIA,IAAOK,KAE/Df,EAAM,CAAEiB,OAAQ,CAAEP,GAAIS,EAAYC,OAAS,GAArB,UAA6BD,EAAYD,KAAK,YAAUG,UAE9ErB,EAAM,CAAEiB,OAAQ,CAAEP,GAAc,KAAVK,GAAgBA,QAASM,MAIjDC,EAAW,SAACpB,GACdC,EAAQD,IAGNqB,EAAkB,WACpBlB,EAAcC,EAA0Bc,SAG5C,MACI,CACII,KAAMC,WACNC,MAAOC,kBAAmBC,4BAC1Bb,MAAO,SACPc,aAAc,CACVC,SACI,kBAAC,KAAD,QACIC,QAASC,yBACTC,mBAAoBN,kBAAmBC,uCACvCN,SAAUA,EACVY,SAAUrB,EACVsB,WAAYxB,EACZT,OAAQA,EACR,kBAAiB,0BACjBkC,gBAAiBT,kBAAmBC,wCAC/BxB,EAAaE,EAA0Bc,QACrC,CAAEiB,eAAgB,CAAEC,KAAM,YAAaC,QAAShB,IAV3D,CAWIiB,MAAO,CAAEC,UAAW,QAASC,SAAU,UAEtCpC,EAA0BqC,MAAM,EAAGvC,GAAYwC,KAAI,SAACC,EAAQC,GAAT,OAChD,kBAAC,EAAAC,aAAD,CACIC,IAAKF,EACL/B,MAAO8B,EAAO9B","file":"js/905.e305f8386cda84a95e76.js","sourcesContent":["import React from 'react';\nimport { osFilterTypes } from '../../Utilities/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst osVersionFilter = (currentFilter = {}, apply) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = osFilterTypes.slice().reverse();;\n\n    let { os: currentValue } = currentFilter;\n    const currentOsVersionsArray = typeof currentValue === 'string' && currentValue.split(',') || [];\n\n    const filterByOsType = (_, value) => {\n        if (currentValue && !currentValue.includes(value)) {\n            apply({ filter: { os: `${currentOsVersionsArray.join(',')},${value}` } });\n        }\n        else if (currentValue && currentValue.includes(value)) {\n            const remainingOs = currentOsVersionsArray.filter(os => os !== value);\n\n            apply({ filter: { os: remainingOs.length > 0 && `${remainingOs.join(',')}` || undefined } });\n        } else {\n            apply({ filter: { os: value !== '' && value || undefined  } });\n        }\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: intl.formatMessage(messages.labelsFiltersOsVersion),\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={SelectVariant.checkbox}\n                        typeAheadAriaLabel={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        onToggle={onToggle}\n                        onSelect={filterByOsType}\n                        selections={currentOsVersionsArray}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-os-version-filter'}\n                        placeholderText={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        {...(numOptions < versionFromNewestToOldest.length\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                key={index}\n                                value={option.value}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n};\n\nexport default osVersionFilter;\n"],"sourceRoot":""}