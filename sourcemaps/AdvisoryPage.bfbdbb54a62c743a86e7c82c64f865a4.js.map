{"version":3,"file":"js/AdvisoryPage.d0deed83945bfb259d04.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Filters/AdvisoryStatusFilter.js","webpack:///./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack:///./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack:///./src/SmartComponents/AdvisorySystems/AdvisorySystems.js","webpack:///./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js"],"sourcesContent":["import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { advisoryStatuses } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst advisoryStatusFilter = (apply, currentFilter = {}) => {\n    const filterByStatus = value => {\n        value.length === 0\n            ? apply({ filter: { status: undefined } })\n            : apply({ filter: { status: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStatus),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: advisoryStatuses,\n            value: !currentFilter.status || Array.isArray(currentFilter.status)\n                ? currentFilter.status\n                : [currentFilter.status],\n            placeholder: intl.formatMessage(messages.labelsColumnsStatusPlaceholder)\n        }\n    };\n};\n\nexport default advisoryStatusFilter;\n","import { Icon, Split, SplitItem, Title } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Split className='infobox' hasGutter>\n            <SplitItem isFilled>\n                <Flex flex={{ default: 'column' }}>\n                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                        <Title headingLevel='h5'>\n                            {intl.formatMessage(messages.labelsColumnsSeverity)}\n                        </Title>\n                    </FlexItem>\n                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                        <Flex flex={{ default: 'row' }}>\n                            <FlexItem>\n                                <Icon size='sm'>\n                                    <SecurityIcon color={severity.color} />\n                                </Icon>\n                            </FlexItem>\n                            <FlexItem>\n                                {severity.label}\n                            </FlexItem>\n                        </Flex>\n                    </FlexItem>\n                </Flex>\n            </SplitItem>\n        </Split>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import {\n    Button, Grid, GridItem, Stack, StackItem, Text, TextContent,\n    FlexItem, TextVariants, Flex, Split, SplitItem, Title\n} from '@patternfly/react-core';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport propTypes from 'prop-types';\nimport React, { useState, lazy, Suspense, Fragment } from 'react';\nimport messages from '../../Messages';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { getSeverityById, isRHAdvisory, truncateDescription } from '../../Utilities/Helpers';\nimport { intl } from '../../Utilities/IntlProvider';\nimport RebootRequired from '../Snippets/RebootRequired';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\nimport ExternalLink from '../Snippets/ExternalLink';\nimport AdvisoryType from '../AdvisoryType/AdvisoryType';\n\nconst CvesModal = lazy(() =>\n    import(\n        /* webpackChunkName: \"CvesModal\" */ '../../SmartComponents/AdvisoryDetail/CvesModal'\n    )\n);\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const [CvesInfoModal, setCvesModal] = useState(() => () => null);\n    const [wordLength, setWordLength] = useState(1000);\n    const severityObject = getSeverityById(attributes.severity);\n    const cves = attributes.cves;\n\n    const showCvesModal = () => {\n        setCvesModal(() => () => <CvesModal cveIds={cves} />);\n    };\n\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                attributes.description && truncateDescription(attributes.description, wordLength, setWordLength)\n                            }\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsPublicDate, {\n                                        date: processDate(\n                                            attributes.public_date\n                                        )\n                                    })}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsModifiedDate, {\n                                        date: processDate(\n                                            attributes.modified_date\n                                        )\n                                    })}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        {isRHAdvisory(attributes.id) &&\n                            <StackItem>\n                                <ExternalLink link={`https://access.redhat.com/errata/${attributes.id}`}\n                                    text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n                            </StackItem>\n                        }\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                <Flex flex={{ default: 'column' }}>\n                    {attributes.advisory_type_name && (<FlexItem>\n                        <Split className='infobox' hasGutter>\n                            <SplitItem isFilled>\n                                <Flex flex={{ default: 'column' }}>\n                                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                                        <Title headingLevel='h5'>\n                                            {intl.formatMessage(messages.titlesAdvisoryType)}\n                                        </Title>\n                                    </FlexItem>\n                                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                                        <AdvisoryType\n                                            type={attributes.advisory_type_name}\n                                        />\n                                    </FlexItem>\n                                </Flex>\n                            </SplitItem>\n                        </Split>\n                    </FlexItem>\n                    )}\n                    {severityObject.value !== 0 && (<FlexItem>\n                        <AdvisorySeverityInfo severity={severityObject}/>\n                    </FlexItem>\n                    )}\n                    {attributes.reboot_required && (<FlexItem spacer={{ default: 'spacerMd' }}>\n                        <RebootRequired />\n                    </FlexItem>)}\n                </Flex>\n            </GridItem>\n            {cves && cves.length !== 0 && (\n                <GridItem md={4} sm={12}>\n                    <TextContent>\n                        <Text component={TextVariants.h3}>\n                            {intl.formatMessage(messages.labelsCves)}\n                        </Text>\n                        <Button variant='link' style={{ padding: 0 }} onClick={showCvesModal} >\n                            {intl.formatMessage(messages.labelsCvesButton, { cvesCount: cves.length })}\n                        </Button>\n                    </TextContent>\n                </GridItem>\n            )}\n            <Suspense fallback={<Fragment/>}>\n                <CvesInfoModal />\n            </Suspense>\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React, { useCallback } from 'react';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport { combineReducers } from 'redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { defaultReducers } from '../../store';\nimport { changeAffectedSystemsParams, clearAdvisorySystemsReducer,\n    clearInventoryReducer, systemSelectAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyAdvisorySystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { exportAdvisorySystemsCSV, exportAdvisorySystemsJSON, fetchAdvisorySystems } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, decodeQueryparams, persistantParams,\n    remediationProvider, removeUndefinedObjectKeys\n} from '../../Utilities/Helpers';\nimport {\n    useBulkSelectConfig, useGetEntities, useOnExport, useRemoveFilter, useOnSelect, ID_API_ENDPOINTS\n} from '../../Utilities/hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { advisorySystemsColumns, systemsRowActions } from '../Systems/SystemsListAssets';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport { systemsColumnsMerger, buildActiveFiltersConfig } from '../../Utilities/SystemsHelpers';\nimport advisoryStatusFilter from '../../PresentationalComponents/Filters/AdvisoryStatusFilter';\nimport { useSearchParams } from 'react-router-dom';\n\nconst AdvisorySystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const store = useStore();\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const [isRemediationOpen, setRemediationOpen] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n\n    const decodedParams = decodeQueryparams('?' + searchParams.toString());\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const queryParams = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore?.queryParams || {}\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const metadata = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore?.metadata || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => {\n            dispatch(clearInventoryReducer());\n            dispatch(clearAdvisorySystemsReducer());\n        };\n    }, []);\n\n    function apply(params) {\n        dispatch(changeAffectedSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            advisoryStatusFilter(apply, filter)\n        ]\n    };\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    const showRemediationModal = useCallback(async (data) => {\n        const resolvedData = await data;\n        setRemediationModalCmp(() =>\n            () => <RemediationWizard\n                data={resolvedData}\n                isRemediationOpen\n                setRemediationOpen={setRemediationOpen} />);\n        setRemediationOpen(!isRemediationOpen);\n    }, [isRemediationOpen]);\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.advisorySystems(advisoryName),\n            queryParams,\n            selectionDispatcher: systemSelectAction,\n            totalItems\n        }\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const getEntites = useGetEntities(fetchAdvisorySystems, apply, { id: advisoryName }, setSearchParams);\n\n    const onExport = useOnExport(advisoryName, queryParams, {\n        csv: exportAdvisorySystemsCSV,\n        json: exportAdvisorySystemsJSON\n    }, dispatch);\n\n    const remediationDataProvider = () => remediationProvider(\n        advisoryName,\n        removeUndefinedObjectKeys(selectedRows),\n        remediationIdentifiers.advisory\n    );\n\n    const bulkSelectConfig = useBulkSelectConfig(\n        selectedCount, onSelect, { total_items: totalItems }, systems, null, queryParams\n    );\n\n    return (\n        <React.Fragment>\n            {isRemediationOpen && <RemediationModalCmp /> || null}\n            {(status.hasError || metadata?.has_systems === false)\n                && <ErrorHandler code={status.code} metadata={metadata} />\n                || <InventoryTable\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    ignoreRefresh\n                    hideFilters={{ all: true, tags: false, operatingSystem: false }}\n                    columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, advisorySystemsColumns)}\n                    showTags\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    paginationProps={{\n                        isDisabled: totalItems === 0\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        store.replaceReducer(combineReducers({\n                            ...defaultReducers,\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(advisorySystemsColumns(false), modifyAdvisorySystems),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        }));\n                    }}\n                    getEntities={getEntites}\n                    tableProps={{\n                        actionResolver: (row) => systemsRowActions(showRemediationModal, undefined, undefined, row),\n                        canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig={activeFiltersConfig}\n                    exportConfig={{\n                        isDisabled: totalItems === 0,\n                        onSelect: onExport\n                    }}\n                    bulkSelect={onSelect && bulkSelectConfig}\n                    dedicatedAction={(\n                        <AsyncRemediationButton\n                            remediationProvider={remediationDataProvider}\n                            isDisabled={\n                                arrayFromObj(selectedRows).length === 0\n                            }\n                        />\n                    )}\n\n                />\n            }\n        </React.Fragment>\n    );\n};\n\nAdvisorySystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AdvisorySystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport messages from '../../Messages';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { clearAdvisoryDetailStore, clearEntitiesStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { intl } from '../../Utilities/IntlProvider';\nimport AdvisorySystems from '../AdvisorySystems/AdvisorySystems';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { DEFAULT_PATCH_TITLE } from '../../Utilities/constants';\n\nconst AdvisoryDetail = () => {\n    const dispatch = useDispatch();\n    const chrome = useChrome();\n    const { advisoryId: advisoryName } = useParams();\n\n    useEffect(()=>{\n        advisoryName &&\n        chrome.updateDocumentTitle(`${advisoryName}\n         - ${intl.formatMessage(messages.titlesAdvisories)} ${DEFAULT_PATCH_TITLE}`);\n    }, [chrome, advisoryName]);\n\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearEntitiesStore());\n            dispatch(clearAdvisoryDetailStore());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                headerOUIA={'advisory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchAdvisories),\n                        to: '/advisories',\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable /> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        <AdvisorySystems advisoryName={advisoryName} />\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default AdvisoryDetail;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n"],"names":["apply","currentFilter","arguments","length","undefined","label","intl","formatMessage","messages","labelsFiltersStatus","type","conditionalFilterType","checkbox","filterValues","onChange","event","value","filter","status","filterByStatus","items","advisoryStatuses","Array","isArray","placeholder","labelsColumnsStatusPlaceholder","AdvisorySeverityInfo","_ref","severity","React","Split","className","hasGutter","SplitItem","isFilled","Flex","flex","default","FlexItem","spacer","Title","headingLevel","labelsColumnsSeverity","Icon","size","SecurityIcon","color","propTypes","CvesModal","lazy","AdvisoryHeader","attributes","isLoading","_useState","useState","_useState2","_slicedToArray","CvesInfoModal","setCvesModal","_useState3","_useState4","wordLength","setWordLength","severityObject","getSeverityById","cves","Grid","style","minHeight","GridItem","md","sm","WithLoader","loading","variant","WithLoaderVariants","spinner","centered","Stack","StackItem","whiteSpace","description","truncateDescription","public_date","labelsPublicDate","date","processDate","modified_date","labelsModifiedDate","isRHAdvisory","id","ExternalLink","link","concat","text","linksViewPackagesAndErrata","advisory_type_name","titlesAdvisoryType","AdvisoryType","reboot_required","RebootRequired","TextContent","Text","component","TextVariants","h3","labelsCves","Button","padding","onClick","cveIds","labelsCvesButton","cvesCount","Suspense","fallback","Fragment","AdvisorySystems","advisoryName","dispatch","useDispatch","store","useStore","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_React$useState","_React$useState2","isRemediationOpen","setRemediationOpen","_React$useState3","_React$useState4","RemediationModalCmp","setRemediationModalCmp","decodedParams","decodeQueryparams","toString","systems","useSelector","_ref2","entities","rows","shallowEqual","_ref3","totalItems","_ref4","total","queryParams","_ref5","AdvisorySystemsStore","selectedRows","_ref6","metadata","_ref7","systemProfile","selectedTags","search","page","perPage","sort","params","changeAffectedSystemsParams","clearInventoryReducer","clearAdvisorySystemsReducer","_useRemoveFilter","useRemoveFilter","_objectSpread","deleteFilters","filterConfig","searchFilter","labelsFiltersSystemsSearchTitle","labelsFiltersSystemsSearchPlaceholder","advisoryStatusFilter","activeFiltersConfig","buildActiveFiltersConfig","showRemediationModal","useCallback","_ref8","_asyncToGenerator","_regeneratorRuntime","_callee","data","resolvedData","_context","prev","next","sent","RemediationWizard","stop","_x","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","advisorySystems","selectionDispatcher","systemSelectAction","selectedCount","arrayFromObj","getEntites","useGetEntities","fetchAdvisorySystems","onExport","useOnExport","csv","exportAdvisorySystemsCSV","json","exportAdvisorySystemsJSON","bulkSelectConfig","useBulkSelectConfig","total_items","hasError","has_systems","ErrorHandler","code","InventoryTable","isFullView","autoRefresh","initialLoading","ignoreRefresh","hideFilters","all","tags","operatingSystem","columns","defaultColumns","systemsColumnsMerger","advisorySystemsColumns","showTags","customFilters","patchParams","paginationProps","isDisabled","onLoad","_ref9","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","modifyAdvisorySystems","persistantParams","getEntities","tableProps","actionResolver","row","systemsRowActions","canSelectAll","TableVariant","compact","isStickyHeader","exportConfig","bulkSelect","dedicatedAction","AsyncRemediationButton","remediationProvider","removeUndefinedObjectKeys","remediationIdentifiers","advisory","chrome","useChrome","useParams","advisoryId","useEffect","updateDocumentTitle","titlesAdvisories","DEFAULT_PATCH_TITLE","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearEntitiesStore","clearAdvisoryDetailStore","clearNotifications","Header","title","headerOUIA","breadcrumbs","titlesPatchAdvisories","to","isActive","Unavailable","Main","h2","titlesAffectedSystems","AsyncComponent","appName","module","setOpen"],"sourceRoot":""}