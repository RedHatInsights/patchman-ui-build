{"version":3,"sources":["webpack:///./src/SmartComponents/Systems/Systems.js"],"names":["pageTitle","intl","messages","setPageTitle","dispatch","useDispatch","React","isRemediationLoading","setRemediationLoading","RemediationModalCmp","setRemediationModalCmp","systems","useSelector","entities","rows","shallowEqual","selectedRows","status","queryParams","totalItems","total","filter","search","showRemediationModal","data","resolvedData","apply","params","changeEntitiesParams","clearEntitiesStore","useRemoveFilter","deleteFilters","filterConfig","items","searchFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","onSelect","useOnSelect","fetchSystems","limit","toSelect","type","payload","selectedCount","arrayFromObj","length","prepareRemediationPairs","fetchApplicableAdvisoriesApi","then","fetchViewAdvisoriesSystems","advisories","map","advisory","id","getEntities","useGetEntities","title","headerOUIA","hasError","code","disableDefaultColumns","isFullView","autoRefresh","initialLoading","hideFilters","all","customFilters","patchParams","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","initialState","bulkSelect","useBulkSelectConfig","total_items","exportConfig","isDisabled","_","format","date","Date","toISOString","replace","split","filename","exportSystemsCSV","downloadFile","exportSystemsJSON","JSON","stringify","actions","systemsRowActions","tableProps","areActionsDisabled","rowData","applicableAdvisories","applicable_advisories","every","typeSum","canSelectAll","variant","TableVariant","className","isStickyHeader","dedicatedAction","onClick","remediationProviderWithPairs","filterSelectedRowIDs","transformPairs","isLoading","ouia"],"mappings":"6kCA+LA,QAlKgB,WACZ,IAAMA,EAAYC,kBAAmBC,oBAErCC,QAAaH,GAEb,IAAMI,GAAWC,mBALC,EAMoCC,cAAe,GANnD,eAMXC,EANW,KAMWC,EANX,OAUdF,cAAe,kBAAM,kBAAM,SAVb,eAQdG,EARc,KASdC,EATc,KAYZC,GAAUC,kBAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAUC,OAAQ,KAAIC,gBAC9DC,GAAeJ,kBACjB,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAUG,eAAgB,MAE1CC,GAASL,kBACX,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAUI,SAAU,MAEpCC,GAAcN,kBAChB,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAUK,cAAe,MAEzCC,GAAaP,kBACf,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAUO,QAAS,KAGjCC,EAAmBH,EAAnBG,OAAQC,EAAWJ,EAAXI,OA1BE,SAgCHC,EAhCG,0EAgClB,WAAoCC,GAApC,8EACIhB,GAAsB,GAD1B,SAE+BgB,EAF/B,OAEUC,EAFV,OAGIf,GAAuB,kBAAM,kBAAM,kBAAC,IAAD,CAAkBc,KAAMC,QAC3DjB,GAAsB,GAJ1B,4CAhCkB,sBAuClB,SAASkB,EAAMC,GACXvB,GAASwB,QAAqBD,IAZlCrB,eAAgB,WACZ,OAAO,kBAAMF,GAASyB,cACvB,IA9Be,OA2CMC,QAAgB,CAAER,UAAUI,GAA7CK,GA3CW,eA6CZC,EAAe,CACjBC,MAAO,EACHC,OAAaR,EAAOJ,EAChBrB,kBAAmBC,qCACnBD,kBAAmBC,8CAKzBiC,EAAsB,CACxBC,SAASC,QAAiBhB,EAAQC,GAClCgB,SAAUP,GAYRQ,GAAWC,QAAY7B,EAAUK,GATlB,kBACjByB,QAAa,EAAD,KAAMvB,GAAN,IAAmBwB,OAAQ,QAExB,SAACC,GAChBvC,EACI,CAAEwC,KAAM,gBAAiBC,QAASF,OAMpCG,EAAgB9B,IAAgB+B,QAAa/B,GAAcgC,OAkB3DC,EAA0B,SAACtC,GAC7B,OAAOuC,QAA6B,CAAER,OAAQ,IAAKS,MAC/C,gBAAG3B,EAAH,EAAGA,KAAH,OAAc4B,QACV,CACIC,WAAY7B,EAAK8B,KAAI,SAAAC,GAAQ,OAAGA,EAASC,MACzC7C,gBAKV8C,GAAcC,OAAejB,KAAcf,GAEjD,OACI,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAQiC,MAAO1D,kBAAmBC,wBAA8B0D,WAAY,YAC5E,kBAACnD,EAAD,MACA,kBAAC,IAAD,KACKQ,EAAO4C,UAAY,kBAAC,IAAD,CAAcC,KAAM7C,EAAO6C,QAEvC,kBAAC,IAAD,CACIC,uBAAqB,EACrBC,YAAU,EACVC,aAAW,EACXC,gBAAc,EACdC,YAAa,CAAEC,KAAK,GACpBC,cAAe,CACXC,YAAa,CACThD,SACAD,WAGRkD,OAAQ,YAA2B,IAAxBC,EAAwB,EAAxBA,mBACPC,OAAS,EAAD,GACDD,GACCE,QAAyBC,MACzBC,SAIZnB,YAAaA,EACboB,YAAYC,QAAoBhC,EAAeP,EAAU,CAAEwC,YAAa5D,GAAcR,GACtFqE,aAAc,CACVC,WAA2B,IAAf9D,EACZoB,SA3DX,SAAC2C,EAAGC,GACjB,IAAMC,GAAO,IAAIC,MAAOC,cAAcC,QAAQ,QAAS,KAAKC,MAAM,KAAK,GAAK,OACtEC,EAAW,WAAH,OAAcL,GACb,QAAXD,GACAO,QAAiBxE,GAAaiC,MAAK,SAAA3B,GAAI,OAAImE,QAAanE,EAAMiE,EAAU,WAGxEG,QAAkB1E,GAAaiC,MAAK,SAAA3B,GAAI,OAAImE,QAAaE,KAAKC,UAAUtE,GAAOiE,EAAU,aAsDzEM,SAASC,QAAkBzE,GAC3BS,aAAcA,EACdG,oBAAuBA,EACvB8D,WAAY,CACRC,mBAtDD,SAACC,GAAY,IACLC,EAAyBD,EAAhDE,sBACR,OAAOD,GAAwBA,EAAqBE,OAAM,SAAAC,GAAO,OAAgB,IAAZA,MAqD7CC,cAAc,EACdC,QAASC,uBAAsBC,UAAW,wBAAyBC,gBAAgB,GACvFC,gBACI,kBAAC,IAAD,CACIC,QAAS,kBACLvF,GACIwF,SACIC,QAAqBhG,GACrBiC,EAAyBgE,QAErChC,WAAkD,KAAtClC,QAAa/B,GAAcgC,QAAgBzC,EACvD2G,UAAW3G,EACX4G,KAAM","file":"js/Systems.ed71e07d0699cd776e32.js","sourcesContent":["import { TableVariant } from '@patternfly/react-table';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport React from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { register } from '../../store';\nimport { changeEntitiesParams, clearEntitiesStore } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, initialState } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchApplicableAdvisoriesApi,\n    fetchSystems, fetchViewAdvisoriesSystems\n} from '../../Utilities/api';\nimport {\n    arrayFromObj, buildFilterChips, remediationProviderWithPairs,\n    transformPairs, filterSelectedRowIDs\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useOnSelect, useRemoveFilter, useBulkSelectConfig, useGetEntities\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport PatchRemediationButton from '../Remediation/PatchRemediationButton';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\n\nconst Systems = () => {\n    const pageTitle = intl.formatMessage(messages.titlesSystems);\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const queryParams = useSelector(\n        ({ entities }) => entities?.queryParams || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const { filter, search } = queryParams;\n\n    React.useEffect(() => {\n        return () => dispatch(clearEntitiesStore());\n    }, []);\n\n    async function showRemediationModal(data) {\n        setRemediationLoading(true);\n        const resolvedData = await data;\n        setRemediationModalCmp(() => () => <RemediationModal data={resolvedData} />);\n        setRemediationLoading(false);\n    }\n\n    function apply(params) {\n        dispatch(changeEntitiesParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ search }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            )\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: deleteFilters\n    };\n\n    const fetchAllData = () =>\n        fetchSystems({ ...queryParams, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const onSelect = useOnSelect(systems,  selectedRows, fetchAllData, selectRows);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = (_, format) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const filename = `systems-${date}`;\n        if (format === 'csv') {\n            exportSystemsCSV(queryParams).then(data => downloadFile(data, filename, 'csv'));\n        }\n        else {\n            exportSystemsJSON(queryParams).then(data => downloadFile(JSON.stringify(data), filename, 'json'));\n        }\n    };\n\n    const areActionsDisabled = (rowData) => {\n        const { applicable_advisories: applicableAdvisories } = rowData;\n        return applicableAdvisories && applicableAdvisories.every(typeSum => typeSum === 0);\n    };\n\n    const prepareRemediationPairs = (systems) => {\n        return fetchApplicableAdvisoriesApi({ limit: -1 }).then(\n            ({ data }) => fetchViewAdvisoriesSystems(\n                {\n                    advisories: data.map(advisory=> advisory.id),\n                    systems\n                }\n            ));\n    };\n\n    const getEntities = useGetEntities(fetchSystems, apply);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'}/>\n            <RemediationModalCmp />\n            <Main>\n                {status.hasError && <ErrorHandler code={status.code} /> ||\n                    (\n                        <InventoryTable\n                            disableDefaultColumns\n                            isFullView\n                            autoRefresh\n                            initialLoading\n                            hideFilters={{ all: true }}\n                            customFilters={{\n                                patchParams: {\n                                    search,\n                                    filter\n                                }\n                            }}\n                            onLoad={({ mergeWithEntities }) => {\n                                register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(systemsListColumns),\n                                        initialState\n                                    )\n                                });\n                            }}\n                            getEntities={getEntities}\n                            bulkSelect={useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                            exportConfig={{\n                                isDisabled: totalItems === 0,\n                                onSelect: onExport\n                            }}\n                            actions={systemsRowActions(showRemediationModal)}\n                            filterConfig={filterConfig}\n                            activeFiltersConfig = {activeFiltersConfig}\n                            tableProps={{\n                                areActionsDisabled,\n                                canSelectAll: false,\n                                variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true }}\n                            dedicatedAction={(\n                                <PatchRemediationButton\n                                    onClick={() =>\n                                        showRemediationModal(\n                                            remediationProviderWithPairs(\n                                                filterSelectedRowIDs(selectedRows),\n                                                prepareRemediationPairs, transformPairs)\n                                        )}\n                                    isDisabled={arrayFromObj(selectedRows).length === 0 || isRemediationLoading}\n                                    isLoading={isRemediationLoading}\n                                    ouia={'toolbar-remediation-button'}\n                                />)}\n\n                        >\n                        </InventoryTable>\n                    )\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n"],"sourceRoot":""}