{"version":3,"file":"js/Systems.1646823017977.b8019b08485ac26b26b1.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js","webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./src/PresentationalComponents/Filters/SystemStaleFilter.js","webpack:///./src/PresentationalComponents/Filters/SystemsUpdatableFilter.js","webpack:///./src/PresentationalComponents/StatusReports/SystemsStatusReport.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/SelectExistingSets.js","webpack:///./src/SmartComponents/PatchSetWizard/WizardAssets.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ConfigurationFields.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ConfigurationStepFields.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/NameField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ToDateField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/DescriptionField.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewSystems.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewPatchSet.js","webpack:///./src/PresentationalComponents/Snippets/ProgressBar.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/RequestProgress.js","webpack:///./src/SmartComponents/PatchSetWizard/PatchSetWizard.js","webpack:///./src/SmartComponents/Systems/Systems.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import React from 'react';\nimport { osFilterTypes } from '../../Utilities/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst osVersionFilter = (currentFilter = {}, apply) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = osFilterTypes.slice().reverse();;\n\n    let { os: currentValue } = currentFilter;\n    const currentOsVersionsArray = typeof currentValue === 'string' && currentValue.split(',') || [];\n\n    const filterByOsType = (_, value) => {\n        if (currentValue && !currentValue.includes(value)) {\n            apply({ filter: { os: `${currentOsVersionsArray.join(',')},${value}` } });\n        }\n        else if (currentValue && currentValue.includes(value)) {\n            const remainingOs = currentOsVersionsArray.filter(os => os !== value);\n\n            apply({ filter: { os: remainingOs.length > 0 && `${remainingOs.join(',')}` || undefined } });\n        } else {\n            apply({ filter: { os: value !== '' && value || undefined  } });\n        }\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: intl.formatMessage(messages.labelsFiltersOsVersion),\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={SelectVariant.checkbox}\n                        typeAheadAriaLabel={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        onToggle={onToggle}\n                        onSelect={filterByOsType}\n                        selections={currentOsVersionsArray}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-os-version-filter'}\n                        placeholderText={intl.formatMessage(messages.labelsFiltersOsVersionPlaceholder)}\n                        {...(numOptions < versionFromNewestToOldest.length\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                key={index}\n                                value={option.value}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n};\n\nexport default osVersionFilter;\n","import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}\n                        data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                        data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                    >{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { paths } from '../../Routes';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history, headerOUIA }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={paths.advisories.to}\n                title={paths.advisories.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.advisories.title}`}\n            />\n            <Tab\n                eventKey={paths.systems.to}\n                title={paths.systems.title}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-${paths.systems.title}`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object,\n    headerOUIA: propTypes.string\n};\n\nexport default withRouter(HeaderTabs);\n","import {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <PageHeaderTitle title={title} />\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA = {headerOUIA}/>}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string\n};\n\nexport default Header;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { staleSystems } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsStaleFilter = (apply, currentFilter = {}) => {\n\n    let { stale: currentValue } = currentFilter;\n\n    const staleMap = React.useMemo(\n        () =>\n            staleSystems.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n\n    const currentValueStringType = (\n        currentValue\n            && (\n                Array.isArray(currentValue)\n                    && currentValue.map(value => value.toString())\n                    || [currentValue.toString()]\n            )\n    );\n\n    const filterByStale = value => {\n        apply({ filter: { stale: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStale),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStale(value);\n            },\n            items: staleMap,\n            value: currentValueStringType,\n            placeholder: intl.formatMessage(messages.labelsFiltersStalePlaceholder)\n        }\n    };\n};\n\nexport default systemsStaleFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { packagesListUpdatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsUpdatableFilter = (apply, currentFilter = {}) => {\n\n    let { packages_updatable: currentValue } = currentFilter;\n\n    const filterByUpdatableSystems = value => {\n        apply({ filter: { packages_updatable: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersUpdatable),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByUpdatableSystems(value);\n            },\n            items: packagesListUpdatableTypes,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersUpdatablePlaceholder)\n        }\n    };\n};\n\nexport default systemsUpdatableFilter;\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { CheckCircleIcon, PackageIcon, ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Button, Skeleton,\n    Card, Grid, GridItem, CardBody, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { fetchSystems } from '../../Utilities/api';\n\nconst StatusCard = ({ title, color, Icon, value, filter, apply }) => {\n    return (\n        <Card isCompact isFullHeight>\n            <CardTitle style={{ marginTop: '0px' }}>{title}</CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                    <FlexItem\n                        spacer={{ default: 'spacerMd' }}\n                        alignSelf={{ default: 'alignSelfCenter' }}\n                    >\n                        <Icon color={color} size='md'/>\n                    </FlexItem>\n                    <FlexItem isFilled spacer={{ default: 'spacerNone' }}>\n                        {\n                            typeof(value) === 'undefined'\n                            &&  <Skeleton width=\"24px\" />\n                                    ||  <Button\n                                        variant=\"link\"\n                                        onClick={() => apply(filter)}\n                                        className='patch-status-report-text'>\n                                        {value}\n                                    </Button>\n                        }\n                    </FlexItem>\n                </Flex>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst SystemsStatusreport = ({ apply, queryParams }) => {\n    const [subtotals, setSubtotals] = React.useState({});\n\n    const { selectedTags, selectedGlobalTags, systemProfile } = useSelector(({ GlobalFilterStore }) => GlobalFilterStore);\n\n    const res = useMemo(async () =>{\n        setSubtotals({});\n\n        const result = await fetchSystems({ filter: {\n            os: queryParams?.filter?.os\n        },\n        selectedTags: [...selectedTags, ...selectedGlobalTags],\n        systemProfile,\n        limit: 1\n        }).catch(() => { });\n\n        return result;\n    }, [\n        queryParams?.filter?.os?.length, queryParams?.filter?.os !== undefined,\n        selectedTags?.length, selectedTags !== undefined,\n        selectedGlobalTags?.length, selectedGlobalTags !== undefined,\n        systemProfile,\n        queryParams?.subtotals !== undefined\n    ]);\n\n    res.then((result)=> {\n        setSubtotals(result.meta?.subtotals);\n    });\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Grid hasGutter span={12} >\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsUpToDate)}\n                        Icon={CheckCircleIcon}\n                        color={'var(--pf-global--success-color--100)'}\n                        value={subtotals?.patched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'eq:0' } }}\n                    />\n                </GridItem>\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsWithPatchesAvailable)}\n                        Icon={PackageIcon}\n                        color={'var(--pf-global--primary-color--100)'}\n                        value={subtotals?.unpatched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'gt:0' } }}\n                    />\n                </GridItem>\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusStaleSystems)}\n                        Icon={ExclamationTriangleIcon}\n                        color={'var(--pf-global--warning-color--100)'}\n                        value={subtotals?.stale}\n                        apply={apply}\n                        filter={{ filter: { stale: true } }}\n                    />\n                </GridItem>\n            </Grid>\n        </Main>\n    );\n};\n\nStatusCard.propTypes = {\n    title: propTypes.string,\n    Icon: propTypes.elementType,\n    value: propTypes.string,\n    color: propTypes.string,\n    apply: propTypes.func,\n    filter: propTypes.object\n};\n\nSystemsStatusreport.propTypes = {\n    apply: propTypes.func,\n    queryParams: propTypes.object\n};\n\nexport default SystemsStatusreport;\n","import React, { useState, useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { Select, SelectOption, SelectVariant, FormGroup } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SelectExistingSets = ({ patchSets, setSelectedPatchSet, selectedSets, systems }) => {\n    const formOptions = useFormApi();\n    const [isOpen, setOpen] = useState(true);\n\n    const patchOptions = useMemo(() =>\n        patchSets.map(set => <SelectOption key={set.id} value={set.name} />),\n    [patchSets]);\n\n    const handleOpen = () => {\n        setOpen(!isOpen);\n    };\n\n    const handleSelect = (_, selected) =>{\n        setOpen(false);\n        setSelectedPatchSet(selected);\n\n        const selectedSet = patchSets.filter(set => set.name === selected);\n        formOptions.change('existing_patch_set', { name: selectedSet[0].name, systems });\n    };\n\n    return (\n        <FormGroup fieldId=\"existing_patch_set\" label=\"Choose a Patch set\" isRequired>\n            <Select\n                variant={SelectVariant.single}\n                aria-label=\"Select Input\"\n                onSelect={handleSelect}\n                placeholderText=\"Select an option\"\n                selections={selectedSets}\n                onToggle={handleOpen}\n                isOpen={isOpen}\n                isDisabled={false}\n            >\n                {patchOptions}\n            </Select>\n        </FormGroup >\n    );\n};\n\nSelectExistingSets.propTypes = {\n    patchSets: propTypes.array,\n    setSelectedPatchSet: propTypes.func,\n    selectedSets: propTypes.array,\n    systems: propTypes.array\n};\nexport default SelectExistingSets;\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const reviewSystemColumns = [{\n    key: 'display_name',\n    title: 'Name',\n    props: {\n        width: 40\n    }\n},\n{\n    title: 'OS',\n    key: 'os',\n    props: {\n        width: 60\n    }\n}\n];\n\nexport const configurationFields = [\n    {\n        name: 'configuration-step',\n        component: 'configuration-step'\n    },\n    {\n        name: 'existing_patch_set',\n        component: componentTypes.TEXT_FIELD,\n        hidden: true\n    }\n];\n\nexport const nameComponent = [{\n    name: 'name',\n    component: 'nameField',\n    validate: [{ type: validatorTypes.REQUIRED }]\n}];\n\nexport const descriptionComponent = [{\n    name: 'description',\n    component: 'descriptionField'\n}];\n\nexport const toDateComponent = [{\n    name: 'toDate',\n    component: 'toDateField',\n    validate: [{ type: validatorTypes.REQUIRED }]\n}];\n\nexport const schema = {\n    fields: [\n        {\n            component: componentTypes.WIZARD,\n            name: 'patch-set-wizard',\n            isDynamic: true,\n            inModal: true,\n            showTitles: true,\n            title: intl.formatMessage(messages.patchSetTitle),\n            description: intl.formatMessage(messages.patchSetDescription),\n            fields: [\n                {\n                    name: 'patch-set-config',\n                    title: intl.formatMessage(messages.patchSetNewSet),\n                    fields: configurationFields,\n                    nextStep: 'systems'\n                },\n                {\n                    name: 'systems',\n                    title: intl.formatMessage(messages.patchSetSelectSystems),\n                    fields: [\n                        {\n                            name: 'systems',\n                            component: 'review-systems',\n                            validate: [{ type: 'validate-systems' }]\n                        }\n                    ],\n                    nextStep: 'review'\n                },\n                {\n                    name: 'review',\n                    title: intl.formatMessage(messages.patchSetReviewSet),\n                    fields: [\n                        {\n                            name: 'review',\n                            component: 'review-patch-set'\n                        }\n                    ]\n                }\n\n            ]\n\n        }\n    ]\n};\n\nexport const validatorMapper = {\n    'validate-systems': () => (system) => {\n        if (system === undefined) {\n            return;\n        }\n        else if (system.length > 0) {\n            return;\n        } else {\n            return intl.formatMessage(messages.patchSetNoSystemSelected);\n        }\n    }\n};\n","import React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { nameComponent, descriptionComponent, toDateComponent } from '../WizardAssets';\nconst  ConfigurationFields = () =>{\n    const { renderForm } = useFormApi();\n\n    return (\n        <Grid hasGutter>\n            <GridItem lg={12} md={12}>\n                {renderForm(nameComponent)}\n            </GridItem>\n            <GridItem lg={12} md={12}>\n                {renderForm(descriptionComponent)}\n            </GridItem>\n            <GridItem lg={6} md={6}>\n                {renderForm(toDateComponent)}\n            </GridItem>\n        </Grid>\n    );\n};\n\nexport default ConfigurationFields;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    Radio,\n    TextVariants\n} from '@patternfly/react-core';\nimport SelectExistingSets from '../InputFields/SelectExistingSets';\nimport ConfigurationFields from '../InputFields/ConfigurationFields';\nimport { fetchPatchSetsAction } from '../../../store/Actions/Actions';\n\nconst ConfigurationStepFields = ({ systemsIDs, ...props }) => {\n    const dispatch = useDispatch();\n    const formOptions = useFormApi();\n    const { input } = useFieldApi(props);\n\n    const [shouldApplyExisting, setShouldApplyExisting] = useState(false);\n    const [shouldCreateNew, setShouldCreateNew] = useState(true);\n    const [selectedPatchSet, setSelectedPatchSet] = useState([]);\n\n    const { rows, loading } = useSelector(({ PatchSetsStore }) => PatchSetsStore, shallowEqual);\n\n    useEffect(() => {\n        (!loading && !rows?.length) && dispatch(fetchPatchSetsAction());\n    }, []);\n\n    const handleRadioChange = () => {\n        setShouldCreateNew(!shouldCreateNew);\n        setShouldApplyExisting(!shouldApplyExisting);\n    };\n\n    return (\n        <Stack hasGutter>\n            <TextContent style={{ marginTop: '-15px' }}>\n                <Text component={TextVariants.p}>\n                    You selected <b>{systemsIDs.length} systems</b>\n                </Text>\n            </TextContent>\n            <StackItem>\n                <Stack hasGutter>\n                    <StackItem>\n                        <Radio\n                            isChecked={shouldApplyExisting}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label=\"Add to existing patch set\"\n                            id=\"existing-set\"\n                            value=\"\"\n                        />\n                    </StackItem>\n                    <StackItem>\n                        {shouldApplyExisting ? <SelectExistingSets\n                            patchSets={rows}\n                            setSelectedPatchSet={setSelectedPatchSet}\n                            selectedSets={selectedPatchSet}\n                            systems={systemsIDs}\n                        /> : null}\n                    </StackItem>\n                    <StackItem>\n                        <Radio\n                            isChecked={shouldCreateNew}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label=\"Create new patch set\"\n                            id=\"new-set\"\n                            value=\"\"\n                        />\n                    </StackItem>\n                    <StackItem>\n                        {shouldCreateNew ? <ConfigurationFields\n                            input={input}\n                            formOptions={formOptions}\n                        /> : null}\n                    </StackItem>\n                </Stack>\n            </StackItem>\n        </Stack>\n    );\n};\n\nConfigurationStepFields.propTypes = {\n    systemsIDs: propTypes.array\n};\nexport default ConfigurationStepFields;\n","import React, { useState } from 'react';\nimport {\n    FormGroup,\n    TextInput\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nconst NameField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [name, setName] = useState(values?.name);\n    return (\n        <FormGroup fieldId=\"name\" label=\"Name\" isRequired>\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={name}\n                onChange={(val) => {\n                    input.onChange(val);\n                    setName(val);\n                }}\n                aria-label=\"name\"\n                autoFocus\n            />\n        </FormGroup>\n    );\n};\n\nexport default NameField;\n","import React, { useState } from 'react';\nimport {\n    FormGroup,\n    DatePicker,\n    Flex,\n    FlexItem\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nconst ToDateField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [toDate, setToDate] = useState(values?.toDate);\n\n    return (\n        <FormGroup fieldId=\"toDate\" label=\"Patch set date\" isRequired>\n            <Flex>\n                <FlexItem lg={2} md={2}>\n                    Upto\n                </FlexItem>\n                <FlexItem lg={10} md={10}>\n                    <DatePicker\n                        isRequired\n                        value={toDate}\n                        onChange={(val) => {\n                            input.onChange(val);\n                            setToDate(val);\n                        }}\n                        aria-label=\"toDate\"\n                    />\n                </FlexItem>\n            </Flex>\n        </FormGroup>\n    );\n};\n\nexport default ToDateField;\n","import React, { useState } from 'react';\nimport { FormGroup, TextInput } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nconst DescriptionField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [description, setDescription] = useState(values?.description);\n\n    return (\n        <FormGroup fieldId=\"description\" label=\"Description\">\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={description}\n                onChange={(val) => {\n                    input.onChange(val);\n                    setDescription(val);\n                }}\n                aria-label=\"description\"\n            />\n        </FormGroup>\n    );\n};\n\nexport default DescriptionField;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport searchFilter from '../../../PresentationalComponents/Filters/SearchFilter';\nimport osVersionFilter from '../../../PresentationalComponents/Filters/OsVersionFilter';\nimport { Text, TextContent, Stack, StackItem, TextVariants } from '@patternfly/react-core';\n\nimport { createSortBy } from '../../../Utilities/Helpers';\nimport { createSystemsRowsReview } from '../../../Utilities/DataMappers';\nimport { useOnSelect, usePerPageSelect, useSetPage, useSortColumn } from '../../../Utilities/Hooks';\nimport TableView from '../../../PresentationalComponents/TableView/TableView';\nimport { fetchSystems } from '../../../Utilities/api';\nimport { reviewSystemColumns } from '../WizardAssets';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\n\nexport const ReviewSystems = ({ systemsIDs, ...props }) => {\n    const { input } = useFieldApi(props);\n    const [isLoading, setLoading] = useState(true);\n    const [rawData, setRawData] = useState([]);\n    const [systems, setSystems] = useState([]);\n    const [selectedRows, setSelectedRows] = useState(() => {\n        const assignedSystemsObject = systemsIDs.reduce((object, system) => {\n            object[system] = true;\n            return object;\n        }, {});\n\n        return assignedSystemsObject;\n    });\n    const [metadata, setMetada] = useState({\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    });\n\n    const [queryParams, setQueryParams] = useState({\n        page: 1,\n        perPage: 20,\n        filter: {}\n    });\n\n    useEffect(() => {\n        fetchSystems({\n            ...queryParams, filter: { ...queryParams.filter, id: `in:${systemsIDs.join(',')}` }\n        }).then(result => {\n            setSystems(createSystemsRowsReview(result.data, selectedRows));\n            setMetada(result.meta);\n            setRawData(result.data);\n            setLoading(false);\n        });\n    }, [queryParams.filter, queryParams]);\n\n    useEffect(() => {\n        const systemIDs = Object.keys(selectedRows).filter((key) => selectedRows[key]);\n        input.onChange(systemIDs);\n\n        setSystems(\n            createSystemsRowsReview(rawData, selectedRows)\n        );\n    }, [selectedRows]);\n\n    const apply = (params) => {\n        setLoading(true);\n        setQueryParams({ ...queryParams, ...params });\n    };\n\n    const onSort = useSortColumn(reviewSystemColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(reviewSystemColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const fetchAllData = () =>\n        fetchSystems({ ...queryParams,\n            filter: { ...queryParams.filter, id: `in:${systemsIDs.join(',')}` }, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        setSelectedRows({ ...selectedRows, [toSelect[0].id]: toSelect[0].selected || undefined });\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllData, selectRows, (system) => system.id);\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent style={{ marginTop: '-15px' }}>\n                    <Text component={TextVariants.p}>\n                        You will be able to adjust your selection anytime. A system can have only one patch set,\n                        therefore if you assign a new Patch set to the system, it will be overwritten.\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TableView\n                    columns={reviewSystemColumns}\n                    compact\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    selectedRows={selectedRows}\n                    onSelect={onSelect}\n                    sortBy={sortBy}\n                    apply={apply}\n                    tableOUIA={'patch-set-table'}\n                    paginationOUIA={'patch-set-pagination'}\n                    store={{ rows: systems, metadata, status: { isLoading }, queryParams }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                                intl.formatMessage(messages.labelsFiltersSearch)\n                            ),\n                            osVersionFilter(queryParams.filter, apply)\n                        ]\n                    }}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nReviewSystems.propTypes = {\n    systemsIDs: propTypes.array\n};\n\nexport default ReviewSystems;\n","import React from 'react';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    TextVariants,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst ReviewPatchSet = () => {\n    const formOptions = useFormApi();\n    const { values } = formOptions.getState();\n    const { name, description, toDate, systems } = values.existing_patch_set || values;\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent style={{ marginTop: '-15px' }}>\n                    <Text component={TextVariants.p}>\n                        Review the information below and click <b>Finish</b> to complete patch set creation\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TextContent>\n                    <TextList component={TextListVariants.dl}>\n                        <TextListItem component={TextListItemVariants.dt}>Name:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{name}</TextListItem>\n                        <TextListItem component={TextListItemVariants.dt}>Description:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{description}</TextListItem>\n                        <TextListItem component={TextListItemVariants.dt}>Date:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{toDate}</TextListItem>\n                        <TextListItem component={TextListItemVariants.dt}>Selected systems:</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{systems?.length}</TextListItem>\n                    </TextList>\n                </TextContent>\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default ReviewPatchSet;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Progress } from '@patternfly/react-core';\n\nconst ProgressBar = ({ percent, failed }) => {\n    let variant;\n    let title;\n\n    if (percent === 100) {\n        title = 'Completed';\n        variant = 'success';\n    } else if (failed) {\n        title = 'Error';\n        variant = 'danger';\n    } else {\n        title = 'In progress';\n        variant = 'info';\n    }\n\n    return (\n        <Progress\n            id={'finished-create-remediation'}\n            value={percent}\n            title={title}\n            variant={variant}\n        />\n    );\n};\n\nProgressBar.propTypes = {\n    percent: propTypes.number,\n    failed: propTypes.bool\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title,\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateIcon,\n    EmptyStateBody,\n    Grid,\n    GridItem,\n    HelperText,\n    HelperTextItem,\n    Button\n} from '@patternfly/react-core';\nimport {\n    CheckCircleIcon,\n    ExclamationCircleIcon,\n    InProgressIcon\n} from '@patternfly/react-icons';\nimport ProgressBar from '../../../PresentationalComponents/Snippets/ProgressBar';\n\nconst RequestProgress = ({ onClose, state }) => {\n    const { percent, failed } = state;\n\n    return (\n        <EmptyState\n            variant={EmptyStateVariant.large}\n            data-component-ouia-id=\"patch-set-progress\"\n        >\n            <EmptyStateIcon\n                color={\n                    failed\n                        ? 'var(--pf-global--danger-color--100)'\n                        : percent === 100\n                            ? 'var(--pf-global--success-color--100)'\n                            : undefined\n                }\n                icon={\n                    failed\n                        ? ExclamationCircleIcon\n                        : percent === 100\n                            ? CheckCircleIcon\n                            : InProgressIcon\n                }\n            />\n            <Title headingLevel=\"h1\" size=\"lg\">\n                {failed\n                    ? 'Error: Unable to create a patch set'\n                    : percent === 100\n                        ? 'Patch Set creation successfull'\n                        : 'Patch Set creation in progress'}\n            </Title>\n            <EmptyStateBody>\n                <Grid hasGutter>\n                    <GridItem>\n                        <ProgressBar percent={percent} failed={failed} />\n                    </GridItem>\n                    {(percent !== 100 && !failed) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    It may take a few minutes to set up a patch set.\n                                    You will receive a notification when finished</HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"link\" isInline onClick={onClose}>\n                                    Cancel\n                            </Button>{' '}\n                        </GridItem></>\n                    )}\n                    {(percent === 100 && !failed) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    It may take a few minutes to set up a patch set.\n                                    You will receive a notification when finished</HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"primary\" onClick={onClose}>Return to application</Button>\n                        </GridItem></>\n                    )}\n                </Grid>\n\n            </EmptyStateBody>\n        </EmptyState>\n    );\n};\n\nRequestProgress.propTypes = {\n    onClose: propTypes.func,\n    state: propTypes.object\n};\n\nexport default RequestProgress;\n","\nimport React, { Fragment, useState, memo } from 'react';\nimport propTypes from 'prop-types';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport DatePicker from '@data-driven-forms/pf4-component-mapper/date-picker';\nimport { Modal, Wizard } from '@patternfly/react-core';\n\nimport ConfigurationStepFields from './steps/ConfigurationStepFields';\nimport NameField from './InputFields/NameField';\nimport ToDateField from './InputFields/ToDateField';\nimport DescriptionField from './InputFields/DescriptionField';\nimport ReviewSystems from './steps/ReviewSystems';\nimport ReviewPatchSet from './steps/ReviewPatchSet';\nimport { schema, validatorMapper } from './WizardAssets';\nimport RequestProgress from './steps/RequestProgress';\nimport { usePatchSetApi } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const PatchSetWizard = ({ systemsIDs, setBaselineState }) => {\n    const [wizardState, setWizardState] = useState({\n        submitted: false,\n        formValues: {},\n        percent: 0,\n        failed: false\n    });\n\n    const onSubmit = usePatchSetApi(wizardState, setWizardState);\n\n    const handleWizardClose = () => {\n        setBaselineState({ isOpen: false, systemsIDs: [] });\n        setWizardState({ formValues: {}, submitted: false });\n    };\n\n    const handleWizardOpen = (formValues) => {\n        setBaselineState({ isOpen: true, systemsIDs });\n        setWizardState({ formValues, submitted: false });\n    };\n\n    const mapperExtensions = {\n        nameField: {\n            component: NameField\n        },\n        descriptionField: {\n            component: DescriptionField\n        },\n        toDateField: {\n            component: ToDateField\n        },\n        'configuration-step': {\n            component: ConfigurationStepFields,\n            systemsIDs: systemsIDs || []\n        },\n        'review-systems': {\n            component: ReviewSystems,\n            systemsIDs: systemsIDs || []\n        },\n        'review-patch-set': {\n            component: ReviewPatchSet,\n            systemsIDs: systemsIDs || []\n        }\n    };\n\n    return (\n        <Fragment>\n            {!wizardState.submitted &&  (\n                <FormRenderer\n                    schema={schema}\n                    subscription={{ values: true }}\n                    FormTemplate={(props) => (\n                        <Pf4FormTemplate {...props} showFormControls={false} />\n                    )}\n                    componentMapper={{\n                        [componentTypes.WIZARD]: {\n                            component: WizardMapper,\n                            className: 'patch-set',\n                            'data-ouia-component-id': 'patch-set-wizard'\n                        },\n                        [componentTypes.TEXT_FIELD]: TextField,\n                        [componentTypes.DATE_PICKER]: DatePicker,\n                        ...mapperExtensions\n                    }}\n                    validatorMapper={validatorMapper}\n                    onSubmit={onSubmit}\n                    onCancel={handleWizardClose} />\n            ) || (\n                <Modal\n                    isOpen\n                    variant={'large'}\n                    showClose={false}\n                    className=\"patch-set\"\n                    hasNoBodyWrapper\n                    aria-describedby=\"patch-set-description\"\n                    aria-labelledby=\"patch-set-modal-title\"\n                >\n                    <Wizard\n                        className=\"patch-set\"\n                        title={intl.formatMessage(messages.patchSetTitle)}\n                        description={intl.formatMessage(messages.patchSetDescription)}\n                        steps={[\n                            {\n                                name: 'progress',\n                                component: (\n                                    <RequestProgress\n                                        onClose={handleWizardClose}\n                                        setWizardOpen={handleWizardOpen}\n                                        state={wizardState}\n                                    />\n                                ),\n                                isFinishedStep: true\n                            }\n                        ]}\n                        onClose={handleWizardClose}\n                    />\n                </Modal>\n            )}\n        </Fragment>\n    );\n};\n\nPatchSetWizard.propTypes = {\n    setBaselineState: propTypes.func,\n    systemsIDs: propTypes.array\n};\n\nexport default memo(PatchSetWizard, (prevProps, nextProps) => {\n    return JSON.stringify(prevProps) === JSON.stringify(nextProps);\n});\n","import React from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport staleFilter from '../../PresentationalComponents/Filters/SystemStaleFilter';\nimport osVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport systemsUpdatableFilter from '../../PresentationalComponents/Filters/SystemsUpdatableFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changeSystemsParams, clearInventoryReducer, changeSystemsMetadata, changeTags } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchApplicableAdvisoriesApi,\n    fetchSystems, fetchViewAdvisoriesSystems\n} from '../../Utilities/api';\nimport { remediationIdentifiers, systemsListDefaultFilters } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips,\n    decodeQueryparams, filterRemediatableSystems, persistantParams, remediationProviderWithPairs, removeUndefinedObjectKeys,\n    transformPairs, systemsColumnsMerger\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useBulkSelectConfig, useGetEntities, useOnExport,\n    useOnSelect, useRemoveFilter\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport PatchRemediationButton from '../Remediation/PatchRemediationButton';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\nimport SystemsStatusReport from '../../PresentationalComponents/StatusReports/SystemsStatusReport';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\n\nconst Systems = () => {\n    const pageTitle = intl.formatMessage(messages.titlesSystems);\n\n    setPageTitle(pageTitle);\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const [patchSetState, setBaselineState] = React.useState({\n        isOpen: false,\n        systemsIDs: []\n    });\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => dispatch(clearInventoryReducer());\n    }, []);\n\n    async function showRemediationModal(data) {\n        setRemediationLoading(true);\n        const resolvedData = await data;\n        setRemediationModalCmp(() => () => <RemediationModal data={resolvedData} />);\n        setRemediationLoading(false);\n    }\n\n    async function showBaselineModal(rowData) {\n        setBaselineState({ isOpen: true, systemsIDs: [rowData.id] });\n    }\n\n    function apply(queryParams) {\n        dispatch(changeSystemsParams(queryParams));\n    }\n\n    const applyMetadata = (metadata) => {\n        dispatch(changeSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply, systemsListDefaultFilters);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            staleFilter(apply, filter),\n            systemsUpdatableFilter(apply, filter),\n            osVersionFilter(filter, apply)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n        onDelete: deleteFilters,\n        deleteTitle: intl.formatMessage(messages.labelsFiltersReset)\n    };\n\n    const fetchAllData = (queryParams) =>\n        fetchSystems({ ...queryParams, limit: -1 }).then(filterRemediatableSystems);\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllData, selectRows);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport('systems', queryParams, {\n        csv: exportSystemsCSV,\n        json: exportSystemsJSON\n    }, dispatch);\n\n    const areActionsDisabled = (rowData) => {\n        const { applicable_advisories: applicableAdvisories } = rowData;\n        return applicableAdvisories && applicableAdvisories.every(typeSum => typeSum === 0);\n    };\n\n    const prepareRemediationPairs = (systems) => {\n        return fetchApplicableAdvisoriesApi({ limit: -1 }).then(\n            ({ data }) => fetchViewAdvisoriesSystems(\n                {\n                    advisories: data.map(advisory => advisory.id),\n                    systems\n                }\n            ));\n    };\n\n    const getEntities = useGetEntities(fetchSystems, apply, {}, history, applyMetadata, applyGlobalFilter);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'} />\n            <RemediationModalCmp />\n            <SystemsStatusReport apply={apply} queryParams={queryParams}/>\n            {patchSetState.isOpen &&\n                <PatchSetWizard systemsIDs={patchSetState.systemsIDs} setBaselineState={setBaselineState}/>}\n            <Main>\n                {status.hasError && <ErrorHandler code={status.code} /> ||\n                    (\n                        <InventoryTable\n\n                            isFullView\n                            autoRefresh\n                            initialLoading\n                            hideFilters={{ all: true, tags: false }}\n                            columns={systemsColumnsMerger}\n                            showTags\n                            customFilters={{\n                                patchParams: {\n                                    search,\n                                    filter,\n                                    systemProfile,\n                                    selectedTags\n                                }\n                            }}\n                            onLoad={({ mergeWithEntities }) => {\n                                register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(systemsListColumns, modifyInventory),\n                                        persistantParams({ page, perPage, sort, search }, decodedParams)\n                                    )\n                                });\n                            }}\n                            getEntities={getEntities}\n                            actions={systemsRowActions(showRemediationModal, showBaselineModal)}\n                            tableProps={{\n                                areActionsDisabled,\n                                canSelectAll: false,\n                                variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                            }}\n                            bulkSelect={useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                            exportConfig={{\n                                isDisabled: totalItems === 0,\n                                onSelect: onExport\n                            }}\n                            filterConfig={filterConfig}\n                            activeFiltersConfig={activeFiltersConfig}\n                            dedicatedAction={(\n                                <PatchRemediationButton\n                                    onClick={() =>\n                                        showRemediationModal(\n                                            remediationProviderWithPairs(\n                                                removeUndefinedObjectKeys(selectedRows),\n                                                prepareRemediationPairs,\n                                                transformPairs,\n                                                remediationIdentifiers.advisory)\n                                        )}\n                                    isDisabled={arrayFromObj(selectedRows).length === 0 || isRemediationLoading}\n                                    isLoading={isRemediationLoading}\n                                    ouia={'toolbar-remediation-button'}\n                                />\n                            )}\n                        />\n                    )\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n","import { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            newState.status = { isLoading: true, hasError: true };\n            return newState;\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["currentFilter","apply","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","osFilterTypes","reverse","currentValue","os","currentOsVersionsArray","split","filterByOsType","_","value","includes","filter","join","remainingOs","length","undefined","onToggle","onViewMoreClick","type","conditionalFilterType","label","intl","messages","filterValues","children","Select","variant","SelectVariant","typeAheadAriaLabel","onSelect","selections","placeholderText","loadingVariant","text","onClick","style","maxHeight","overflow","slice","map","option","index","SelectOption","key","HeaderBreadcrumbs","items","headerOUIA","Breadcrumb","Boolean","item","BreadcrumbItem","title","isActive","to","Link","propTypes","PropTypes","HeaderTabs","history","Tabs","event","tabString","push","activeKey","location","pathname","className","Tab","eventKey","paths","withRouter","Header","showTabs","breadcrumbs","PageHeader","PageHeaderTitle","stale","staleMap","staleSystems","toString","currentValueStringType","Array","isArray","filterByStale","onChange","placeholder","packages_updatable","filterByUpdatableSystems","packagesListUpdatableTypes","StatusCard","color","Icon","Card","isCompact","isFullHeight","CardTitle","marginTop","CardBody","Flex","flex","default","flexWrap","FlexItem","spacer","alignSelf","size","isFilled","Skeleton","width","Button","SystemsStatusreport","queryParams","subtotals","setSubtotals","useSelector","GlobalFilterStore","selectedTags","selectedGlobalTags","systemProfile","useMemo","fetchSystems","limit","result","then","meta","Main","paddingBottom","Grid","hasGutter","span","GridItem","md","CheckCircleIcon","patched","PackageIcon","unpatched","ExclamationTriangleIcon","SelectExistingSets","patchSets","setSelectedPatchSet","selectedSets","systems","formOptions","useFormApi","useState","patchOptions","set","id","name","FormGroup","fieldId","isRequired","selected","selectedSet","change","isDisabled","reviewSystemColumns","props","configurationFields","component","componentTypes","hidden","nameComponent","validate","validatorTypes","descriptionComponent","toDateComponent","schema","fields","isDynamic","inModal","showTitles","description","nextStep","validatorMapper","system","renderForm","lg","ConfigurationStepFields","systemsIDs","dispatch","useDispatch","input","useFieldApi","shouldApplyExisting","setShouldApplyExisting","shouldCreateNew","setShouldCreateNew","selectedPatchSet","PatchSetsStore","shallowEqual","rows","loading","useEffect","fetchPatchSetsAction","handleRadioChange","Stack","TextContent","Text","TextVariants","StackItem","Radio","isChecked","values","getState","setName","TextInput","val","autoFocus","toDate","setToDate","DatePicker","setDescription","ReviewSystems","isLoading","setLoading","rawData","setRawData","setSystems","reduce","object","selectedRows","setSelectedRows","offset","total_items","metadata","setMetada","page","perPage","setQueryParams","createSystemsRowsReview","data","systemIDs","Object","keys","params","onSort","useSortColumn","sortBy","createSortBy","sort","onSetPage","useSetPage","onPerPageSelect","usePerPageSelect","useOnSelect","toSelect","TableView","columns","compact","tableOUIA","paginationOUIA","store","status","filterConfig","searchFilter","search","osVersionFilter","searchChipLabel","existing_patch_set","TextList","TextListVariants","TextListItem","TextListItemVariants","ProgressBar","percent","failed","Progress","RequestProgress","onClose","state","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","ExclamationCircleIcon","InProgressIcon","Title","headingLevel","EmptyStateBody","HelperText","HelperTextItem","isInline","PatchSetWizard","setBaselineState","submitted","formValues","wizardState","setWizardState","onSubmit","usePatchSetApi","handleWizardClose","mapperExtensions","nameField","NameField","descriptionField","DescriptionField","toDateField","ToDateField","ReviewPatchSet","Fragment","subscription","FormTemplate","showFormControls","componentMapper","WizardMapper","TextField","onCancel","Modal","showClose","hasNoBodyWrapper","Wizard","steps","setWizardOpen","isFinishedStep","memo","prevProps","nextProps","JSON","stringify","pageTitle","setPageTitle","useHistory","isRemediationLoading","setRemediationLoading","RemediationModalCmp","setRemediationModalCmp","patchSetState","decodedParams","decodeQueryparams","entities","totalItems","total","SystemsStore","showRemediationModal","resolvedData","RemediationModal","rowData","changeSystemsParams","clearInventoryReducer","useRemoveFilter","systemsListDefaultFilters","deleteFilters","staleFilter","systemsUpdatableFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","filterRemediatableSystems","payload","selectedCount","arrayFromObj","onExport","useOnExport","csv","exportSystemsCSV","json","exportSystemsJSON","prepareRemediationPairs","fetchApplicableAdvisoriesApi","fetchViewAdvisoriesSystems","advisories","advisory","getEntities","useGetEntities","changeSystemsMetadata","tags","changeTags","SystemsStatusReport","hasError","ErrorHandler","code","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","systemsColumnsMerger","showTags","customFilters","patchParams","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","modifyInventory","persistantParams","actions","systemsRowActions","tableProps","areActionsDisabled","applicableAdvisories","applicable_advisories","every","typeSum","canSelectAll","TableVariant","isStickyHeader","bulkSelect","useBulkSelectConfig","exportConfig","dedicatedAction","PatchRemediationButton","remediationProviderWithPairs","removeUndefinedObjectKeys","transformPairs","remediationIdentifiers","ouia","initialState","loaded","createSystemsRows","modifyPackageSystems","createPackageSystemsRows","inventoryModifier","action","newState","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}