{"version":3,"file":"js/Templates.9ef80ce20b5f3780cef3.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/SmartComponents/Modals/DeleteSetModal.js","webpack:///./src/PresentationalComponents/Filters/CreatorFilter.js","webpack:///./src/SmartComponents/PatchSet/PatchSet.js","webpack:///./src/Utilities/usePatchSetState.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Checkbox, Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst DeleteSetModal = ({ isModalOpen, setModalOpen, templateName, onConfirm }) => {\n    const [isCheckboxChecked, setCheckboxChecked] = useState(false);\n\n    const onClose = () => {\n        setModalOpen(false);\n        setCheckboxChecked(false);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.titlesTemplateDeleteModalTitle)}\n            titleIconVariant=\"warning\"\n            isOpen={isModalOpen}\n            onClose={onClose}\n            variant=\"small\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={() => {onClose(); onConfirm();}} isDisabled={!isCheckboxChecked}>\n                    {intl.formatMessage(messages.labelsDelete)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {intl.formatMessage(messages.titlesTemplateDeleteModalText, { templateName, b: (...chunks) => <b>{chunks}</b> })}\n            <Checkbox\n                className=\"pf-u-mt-md\"\n                isChecked={isCheckboxChecked}\n                checked={isCheckboxChecked}\n                onChange={(value) => setCheckboxChecked(value)}\n                label={intl.formatMessage(messages.titlesTemplateDeleteModalCheckbox)}\n                id=\"template-delete-modal-checkbox\"\n            />\n        </Modal>\n    );\n};\n\nDeleteSetModal.propTypes = {\n    isModalOpen: propTypes.bool,\n    setModalOpen: propTypes.func,\n    templateName: propTypes.string,\n    onConfirm: propTypes.func\n};\n\nexport default DeleteSetModal;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst creatorFilter = (apply, currentFilter = {}, items) => {\n    const filterByCreator = value => {\n        value.length === 0\n            ? apply({ filter: { creator: undefined } })\n            : apply({ filter: { creator: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersCreator),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCreator(value);\n            },\n            items: items?.filter(item => item !== null).map(item => ({ value: item, label: item })) ?? [],\n            value: !currentFilter.creator || Array.isArray(currentFilter.creator)\n                ? currentFilter.creator\n                : [currentFilter.creator],\n            placeholder: intl.formatMessage(messages.labelsFiltersCreatorPlaceholder)\n        }\n    };\n};\n\nexport default creatorFilter;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSearchParams } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport creatorFilter from '../../PresentationalComponents/Filters/CreatorFilter';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport {\n    fetchPatchSetsAction, changePatchSetsParams,\n    selectPatchSetRow, clearPatchSetsAction\n} from '../../store/Actions/Actions';\nimport { deletePatchSet } from '../../Utilities/api';\nimport { createPatchSetRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams } from '../../Utilities/Helpers';\nimport { useDeepCompareEffect, usePerPageSelect, useSetPage, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications, addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n    patchSetColumns, CreatePatchSetButton as createPatchSetButton,\n    patchSetRowActions, CustomActionsToggle\n} from './PatchSetAssets';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport { DEFAULT_PATCH_TITLE, patchSetDeleteNotifications } from '../../Utilities/constants';\nimport usePatchSetState from '../../Utilities/usePatchSetState';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport DeleteSetModal from '../Modals/DeleteSetModal';\nimport { NoPatchSetList } from '../../PresentationalComponents/Snippets/EmptyStates';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst PatchSet = () => {\n    const IS_SELECTION_ENABLED = false;\n    const chrome = useChrome();\n    useEffect(()=>{\n        chrome.updateDocumentTitle(`${intl.formatMessage(messages.titlesTemplate)} ${DEFAULT_PATCH_TITLE}`);\n    }, [chrome]);\n\n    const dispatch = useDispatch();\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [isDeleteConfirmModalOpen, setDeleteConfirmModalOpen] = React.useState(false);\n    const [patchSetToDelete, setPatchSetToDelete] = React.useState(null);\n\n    const patchSets = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.rows\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.metadata\n    );\n    const status = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.status\n    );\n\n    const rows = useMemo(\n        () => createPatchSetRows(patchSets, selectedRows, queryParams),\n        [patchSets, selectedRows]\n    );\n\n    function apply(params) {\n        dispatch(changePatchSetsParams(params));\n    }\n\n    const refreshTable = () => {\n        dispatch(fetchPatchSetsAction({ ...queryParams, page: 1, offset: 0 }));\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearPatchSetsAction());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const { patchSetState, setPatchSetState, openPatchSetEditModal } = usePatchSetState(selectedRows);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh === true) {\n            refreshTable();\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams('?' + searchParams.toString()));\n            setFirstMount(false);\n        } else {\n            setSearchParams(encodeURLParams(queryParams));\n            dispatch(fetchPatchSetsAction(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const onSelect = useOnSelect(\n        rows,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.templates,\n            queryParams,\n            selectionDispatcher: selectPatchSetRow\n        }\n    );\n\n    const onSort = useSortColumn(patchSetColumns, apply, 0);\n    const sortBy = React.useMemo(\n        () => createSortBy(patchSetColumns, metadata.sort, 0),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const openPatchDeleteModal = (rowData) => {\n        setDeleteConfirmModalOpen(true);\n        setPatchSetToDelete(rowData);\n    };\n\n    const handlePatchSetDelete = () => {\n        deletePatchSet(patchSetToDelete.id).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetToDelete.displayName).success));\n            refreshTable();\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetToDelete.displayName).error));\n        });\n    };\n\n    const { hasAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n    const CreatePatchSetButton = createPatchSetButton(setPatchSetState, hasAccess);\n    const actionsConfig = patchSetRowActions(openPatchSetEditModal, openPatchDeleteModal);\n\n    //TODO: refactor search filter to be able to wrap this into useMemo\n    const filterConfig = {\n        items: [\n            searchFilter(apply, queryParams.search,\n                intl.formatMessage(messages.labelsFiltersSearchTemplateTitle),\n                intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)\n            ),\n            creatorFilter(apply, queryParams.filter, metadata.creators)\n        ]\n    };\n\n    return (\n        <React.Fragment>\n            <DeleteSetModal\n                templateName={patchSetToDelete?.displayName}\n                isModalOpen={isDeleteConfirmModalOpen}\n                setModalOpen={setDeleteConfirmModalOpen}\n                onConfirm={handlePatchSetDelete}\n            />\n            <Header\n                headerOUIA={'advisories'}\n                title={<span>\n                    {intl.formatMessage(messages.titlesTemplate)}\n                    <Popover\n                        id=\"template-header-title-popover\"\n                        aria-describedby=\"template-header-title-popover\"\n                        aria-labelledby=\"template-header-title-popover\"\n                        hasAutoWidth\n                        maxWidth=\"320px\"\n                        position=\"right\"\n                        enableFlip\n                        headerContent={\n                            intl.formatMessage(messages.templatePopoverHeader)\n                        }\n                        bodyContent={\n                            intl.formatMessage(messages.templatePopoverBody)\n                        }\n                    /*\n                    footerContent={\n                        <a href={TEMPLATES_DOCS_LINK} target=\"__blank\" rel=\"noopener noreferrer\">\n                            {intl.formatMessage(messages.linksLearnMore)} <ExternalLinkAltIcon />\n                        </a>\n                    }\n                    */\n                    >\n                        <OutlinedQuestionCircleIcon\n                            color=\"var(--pf-global--secondary-color--100)\"\n                            className=\"pf-u-ml-sm\"\n                            style={{ verticalAlign: '0', fontSize: 16, cursor: 'pointer' }}\n                        />\n                    </Popover>\n                </span>}\n            />\n            {patchSetState.isPatchSetWizardOpen &&\n                <PatchSetWizard\n                    systemsIDs={patchSetState.systemsIDs}\n                    setBaselineState={setPatchSetState}\n                    patchSetID={patchSetState.patchSetID}\n                />}\n            <Main>\n                {(rows.length === 0 && !status.isLoading)\n                    ? <NoPatchSetList Button={CreatePatchSetButton} />\n                    : <TableView\n                        columns={patchSetColumns}\n                        compact\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        onSort={onSort}\n                        selectedRows={IS_SELECTION_ENABLED ? selectedRows : undefined}\n                        onSelect={IS_SELECTION_ENABLED ? onSelect : undefined}\n                        sortBy={sortBy}\n                        apply={apply}\n                        tableOUIA={'patch-set-table'}\n                        paginationOUIA={'patch-set-pagination'}\n                        store={{ rows, metadata, status, queryParams }}\n                        actionsConfig={patchSets?.length > 0 ? actionsConfig : []}\n                        filterConfig={filterConfig}\n                        searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchTemplateTitle)}\n                        ToolbarButton={CreatePatchSetButton}\n                        actionsToggle={!hasAccess ? CustomActionsToggle : null}\n                    />\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default PatchSet;\n","import { useState } from 'react';\nimport {\n    filterSelectedActiveSystemIDs\n} from './Helpers';\n\n/**\n* Manages unified state for patch set wizard and unassign modal.\n* @param {Object} [selectedRows] selected rows object to be removed.\n* @returns {patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal}\n*/\nconst usePatchSetState = (selectedRows) => {\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        isAssignSystemsModalOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const openPatchSetAssignWizard = (systemID) => {\n        setPatchSetState({\n            isPatchSetWizardOpen: true,\n            systemsIDs: typeof systemID === 'string' && systemID !== ''\n                ? [systemID]\n                : filterSelectedActiveSystemIDs(selectedRows),\n            shouldRefresh: false\n        }\n        );\n    };\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openAssignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isAssignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openPatchSetEditModal = (patchSetID) => {\n        setPatchSetState({ isPatchSetWizardOpen: true, patchSetID });\n    };\n\n    return {\n        patchSetState,\n        setPatchSetState,\n        openPatchSetAssignWizard,\n        openUnassignSystemsModal,\n        openAssignSystemsModal,\n        openPatchSetEditModal\n    };\n};\n\nexport default usePatchSetState;\n"],"names":["OutlinedQuestionCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","OutlinedQuestionCircleIcon","DeleteSetModal","_ref","isModalOpen","setModalOpen","templateName","onConfirm","_useState","useState","_useState2","_slicedToArray","isCheckboxChecked","setCheckboxChecked","onClose","React","Modal","title","intl","formatMessage","messages","titlesTemplateDeleteModalTitle","titleIconVariant","isOpen","variant","actions","Button","key","onClick","isDisabled","labelsDelete","labelsCancel","titlesTemplateDeleteModalText","b","_len","arguments","length","chunks","Array","_key","Checkbox","className","isChecked","checked","onChange","value","label","titlesTemplateDeleteModalCheckbox","id","propTypes","apply","_items$filter$map","currentFilter","undefined","items","labelsFiltersCreator","type","conditionalFilterType","checkbox","filterValues","event","filter","creator","filterByCreator","item","map","isArray","placeholder","labelsFiltersCreatorPlaceholder","chrome","useChrome","useEffect","updateDocumentTitle","concat","titlesTemplate","DEFAULT_PATCH_TITLE","dispatch","useDispatch","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_React$useState","_React$useState2","firstMount","setFirstMount","_React$useState3","_React$useState4","isDeleteConfirmModalOpen","setDeleteConfirmModalOpen","_React$useState5","_React$useState6","patchSetToDelete","setPatchSetToDelete","patchSets","useSelector","PatchSetsStore","rows","queryParams","_ref2","selectedRows","_ref3","metadata","_ref4","status","_ref5","useMemo","createPatchSetRows","params","changePatchSetsParams","refreshTable","fetchPatchSetsAction","_objectSpread","page","offset","clearPatchSetsAction","clearNotifications","_usePatchSetState","usePatchSetState","patchSetState","setPatchSetState","openPatchSetEditModal","shouldRefresh","useDeepCompareEffect","decodeQueryparams","toString","encodeURLParams","useOnSelect","endpoint","ID_API_ENDPOINTS","templates","selectionDispatcher","selectPatchSetRow","onSort","useSortColumn","patchSetColumns","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","hasAccess","usePermissionsWithContext","CreatePatchSetButton","createPatchSetButton","actionsConfig","patchSetRowActions","rowData","filterConfig","searchFilter","search","labelsFiltersSearchTemplateTitle","labelsFiltersSearchTemplatePlaceholder","creatorFilter","creators","displayName","deletePatchSet","then","addNotification","patchSetDeleteNotifications","success","error","Header","headerOUIA","Popover","hasAutoWidth","maxWidth","position","enableFlip","headerContent","templatePopoverHeader","bodyContent","templatePopoverBody","color","style","verticalAlign","fontSize","cursor","isPatchSetWizardOpen","PatchSetWizard","systemsIDs","setBaselineState","patchSetID","Main","isLoading","TableView","columns","compact","onSelect","tableOUIA","paginationOUIA","store","searchChipLabel","ToolbarButton","actionsToggle","CustomActionsToggle","NoPatchSetList","isUnassignSystemsModalOpen","isAssignSystemsModalOpen","openPatchSetAssignWizard","systemID","filterSelectedActiveSystemIDs","openUnassignSystemsModal","openAssignSystemsModal"],"sourceRoot":""}