{"version":3,"file":"js/247.ded726354f9e1b92554e.js","mappings":"0SAgEA,QA3D2B,WAA+B,IAA9BA,EAA8B,uDAAd,GAAIC,EAAU,uCAChDC,GAAWC,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAlB,EAAkBA,EAAUC,gBAA5B,IACvBC,GAAiBH,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAlB,EAAkBA,EAAUG,sBAA5B,IAEnC,GAAgDC,EAAAA,EAAAA,UAAS,IAAzD,eAAOH,EAAP,KAAyBI,EAAzB,KACA,GAA8DC,EAAAA,EAAAA,eAC1D,CACIC,QAAS,YACTC,MAAO,YACPC,OAAQ,sBAJhB,sBAASC,GAAT,aAAwD,CAAC,EAAzD,GAASA,sBAAuBC,EAAhC,EAAgCA,qBAQhCC,EAAAA,EAAAA,YAAU,gBACWC,IAAbf,QAA6Ce,IAAnBX,IAE1BY,EAAAA,EAAAA,MAAsBC,MAAK,YAAiB,IAAdC,EAAc,EAAdA,QAC1BX,GAAqBW,GAAW,IAAIC,KAAI,SAAAC,GACpC,MAA+BA,EAAMC,MAA7BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,MACfC,EAAqB,GAAH,OAAMF,EAAN,YAAeC,GACvC,MAAO,CAAEE,MAAO,GAAF,OAAKJ,EAAL,YAAaG,GAAsBJ,MAAO,GAAF,OAAKI,GAC9D,IACJ,GAER,GAAE,KAEHX,EAAAA,EAAAA,YAAU,YACiB,IAAnBV,GACAG,EAAoBP,EAE3B,GAAE,CAACI,IAEJ,IAAMuB,GAAoC,KAAlB7B,EAAuB,GAAKA,EAAc8B,MAAM,MAEvET,KAAI,SAACU,GAAD,OAAaA,EAAQC,UAAU,EAA/B,IAEL,OAAO,OACCjB,EACE,CACEA,EACI,CACIkB,GAAI,eACJV,MAAOT,EAAsBe,GAC7BK,SAAU,SAACC,EAAOZ,GAEd,IAAMrB,EAAWkC,OAAOC,OAAOd,GAC9Be,SAAQ,SAACpC,GAAD,OAAckC,OAAOG,KAAKrC,EAA1B,IACRmB,KAAI,SAACU,GAAD,qBAAqBA,EAArB,IACJS,WACDvC,EAAM,CAAEwC,OAAQ,CAAEC,GAAIxC,IACzB,GAELG,IAGN,GAEb,C,iJCtDKsC,EAAoB,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAChC,OACI,kBAACC,EAAA,EAAD,KACKF,EAAMH,OAAOM,SAAS1B,KAAI,SAAA2B,GAAI,OAC3B,kBAACC,EAAA,EAAD,CAAgBC,IAAKF,EAAKG,MAAOC,SAAUJ,EAAKI,UAC1CJ,EAAKK,IAAM,kBAAC,EAAAC,KAAD,CAAMD,GAAIL,EAAKK,GACxB,qCAA6BR,EAA7B,eACA,iDAAyCG,EAAKG,QAChDH,EAAKG,QACHH,EAAKG,MANc,IAW1C,EAEDR,EAAkBY,UAAY,CAC1BX,MAAOY,IAAAA,QACHA,IAAAA,MAAgB,CACZJ,SAAUI,IAAAA,KACVH,GAAIG,IAAAA,OACJL,MAAOK,IAAAA,UAGfX,WAAYW,IAAAA,QAGhB,U,0BC7BMC,EAAa,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,QAASb,EAAiB,EAAjBA,WAK3B,OACI,kBAACc,EAAA,GAAD,CACIC,SANe,SAACzB,EAAO0B,GAC3BH,EAAQI,KAAKD,EAChB,EAKOE,UAAWL,EAAQM,SAASC,SAC5BC,UAAW,iBAEX,kBAACC,EAAA,EAAD,CACIC,SAAU,cACVjB,MAAO,wBACP,qCAA6BN,EAA7B,QACA,mCAA2BA,EAA3B,iCAEJ,kBAACsB,EAAA,EAAD,CACIC,SAAU,YACVjB,MAAO,UACP,qCAA6BN,EAA7B,QACA,mCAA2BA,EAA3B,kBAIf,EAEDY,EAAWF,UAAY,CACnBG,QAASH,IAAAA,OACTV,WAAYU,IAAAA,QAGhB,SAAec,EAAAA,EAAAA,YAAWZ,GC7B1B,IAAMa,EAAS,SAAC,GAA2D,IAAzDnB,EAAyD,EAAzDA,MAAOoB,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,SAAU5B,EAAiB,EAAjBA,WACtD,OACI,kBAAC,aAAD,KACI,kBAAC6B,EAAA,EAAD,CACI,qCAA6B7B,EAA7B,iBAEC2B,GAAe,kBAAC,EAAD,CAAmB5B,MAAO4B,EAAa3B,WAAYA,IACnE,kBAAC8B,EAAA,EAAD,CAAiBxB,MAAOA,IACvBsB,GAEJF,GAAY,kBAAC,EAAD,CAAY1B,WAAcA,IAGlD,EAEDyB,EAAOf,UAAY,CACfJ,MAAOK,IAAAA,OACPe,SAAUf,IAAAA,KACVgB,YAAahB,IAAAA,MACbiB,SAAUjB,IAAAA,IACVX,WAAYW,IAAAA,QAGhB,S,6JC1BaoB,EAAiB,kBAC1B,kBAAC,IAAD,KACI,kBAAC,KAAD,CAAYC,MAAO,CAAEC,WAAY,KAC7B,kBAAC,IAAD,CAAgBC,KAAM,kBAAI,kBAAC,UAAD,CAAiBC,KAAK,KAAKC,MAAO,uCACxDJ,MAAO,CAAEK,aAAc,KADL,IAEtB,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKJ,KAAK,MACzBK,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,+BAExB,kBAAC,IAAD,KACKD,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,wBATN,C,mNCFxBC,EAAc,SAAC,GAAyF,IAAvFC,EAAuF,EAAvFA,UAAWC,EAA4E,EAA5EA,KAAMC,EAAsE,EAAtEA,QAASC,EAA6D,EAA7DA,UAAWC,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,gBAAiBC,EAAqB,EAArBA,eACrF,OACI,oCACKN,EACG,yBAAKtB,UAAU,+BACX,kBAAC6B,EAAA,EAAD,CAAUC,SAAS,KAAKC,MAAM,QAAQpB,MAAO,CAAEqB,OAAQ,OAG3D,kBAACC,EAAA,GAAD,CACIC,UAAWR,EACXF,QAASA,EACTD,KAAMA,EACNE,UAAWA,EACXE,gBAAiBA,EACjBQ,SAAQ,iCACRC,QAASC,EAAAA,GAAAA,OACTC,OAAQV,EACRW,WAA2B,IAAfb,IAK/B,EAEDL,EAAYhC,UAAY,CACpBiC,UAAWhC,IAAAA,KACXmC,UAAWnC,IAAAA,KACXqC,gBAAiBrC,IAAAA,KACjBiC,KAAMjC,IAAAA,OACNkC,QAASlC,IAAAA,OACToC,WAAYpC,IAAAA,OACZsC,eAAgBtC,IAAAA,QAGpB,U,0BCxBMkD,EAAY,SAAC,GA8Bb,IA7BFC,EA6BE,EA7BFA,QA6BE,IA5BFC,MACIC,EA2BF,EA3BEA,KACAC,EA0BF,EA1BEA,SACAC,EAyBF,EAzBEA,OAyBF,IAxBEC,YAAevE,EAwBjB,EAxBiBA,OAAQwE,EAwBzB,EAxByBA,OAE3BC,EAsBE,EAtBFA,WACAtD,EAqBE,EArBFA,SACA+B,EAoBE,EApBFA,UACAE,EAmBE,EAnBFA,gBACAsB,EAkBE,EAlBFA,OACAC,EAiBE,EAjBFA,SACAC,EAgBE,EAhBFA,aACAC,EAeE,EAfFA,OACAC,EAcE,EAdFA,oBACAC,EAaE,EAbFA,aACAC,EAYE,EAZFA,QACAxH,EAWE,EAXFA,MACAyH,EAUE,EAVFA,UACA5B,EASE,EATFA,eACA6B,EAQE,EARFA,WACAC,EAOE,EAPFA,WACAC,EAME,EANFA,eACAC,EAKE,EALFA,gBACAC,EAIE,EAJFA,qBACAC,EAGE,EAHFA,cACAC,EAEE,EAFFA,qBACAC,EACE,EADFA,cAGA,EAAwBC,IAAAA,SACpB,kBAAMC,EAAAA,EAAAA,IAAmBtB,EAASuB,MAAOvB,EAASwB,OAAlD,GACA,CAACxB,EAASuB,MAAOvB,EAASwB,SAF9B,eAAO7C,EAAP,KAAaC,EAAb,KAKA,GAAwB6C,EAAAA,EAAAA,IAAgB9F,EAAQxC,EAAO4H,GAAhDW,GAAP,eACMC,EAAgBjB,IAAgBkB,EAAAA,EAAAA,IAAalB,GAAcmB,OACzDC,EAA8B7B,EAA9B6B,KAAMC,EAAwB9B,EAAxB8B,SAAUrD,GAAcuB,EAAdvB,UAClBsD,IAAmBC,EAAAA,EAAAA,IAAoBN,EAAe7E,EAAUkD,EAAUD,EAAMK,GAEtF,OACI,kBAAC,aAAD,KAES,kBAAC,aAAD,KACK2B,IAAqC,IAAzB/B,EAASkC,YACjB,kBAACC,EAAA,EAAD,CAAcL,KAAMA,EAAMM,WAAYvB,EAAYwB,WAAYvB,EAAYd,SAAUA,IACpF,kBAAC,aAAD,KACE,kBAACsC,EAAA,EAAD,CACIC,WAAY7D,GACN,kBAACO,EAAA,EAAD,CAAUC,SAAS,KAAKC,MAAM,QAAQpB,MAAO,CAAEqB,OAAQ,MACvD,CACEE,UAAWU,EAASwC,YACpB7D,KAAAA,EACAC,QAAAA,EACA6D,WAAW,EACX5D,UAAAA,EACAE,gBAAAA,EACAW,OAAQ,OAAF,OAASV,GACfW,WAAqC,IAAzBK,EAASwC,aAE7BjC,aAAcA,EACdmC,oBAAqB,CACjBC,SAASC,EAAAA,EAAAA,IAAiBjH,EAAQwE,EAAQa,GAC1C6B,SAAUnB,EACVoB,YAAavE,EAAAA,EAAAA,cAAmBwC,GACzBvC,EAAAA,EAAAA,oBAA+BA,EAAAA,EAAAA,qBAE1C0C,cAAe,CACX6B,QAAS,CAACtC,GACN,kBAACuC,EAAA,EAAD,CACIvC,oBAAqBA,EACrBd,WAC4E,IAAxErE,OAAOC,OAAOmF,GAAc/E,QAAO,SAAAsH,GAAU,OAAIA,CAAJ,IAAgBpB,QAC1DV,EAEPzC,UAAWyC,MAIvB+B,aAAc,CACVvD,WAAqC,IAAzBK,EAASwC,YACrB1F,SAAUwD,GAEd6C,WAAYrG,GAAYkF,IAEvBf,GAAwB,kBAACmC,EAAA,GAAD,KACrB,kBAACnC,EAAD,QAGPvC,GAAY,kBAAC2E,EAAA,EAAD,CAAeC,QAAS,EAAGC,QAAS,GAAI/D,QAASmB,GAAW6C,EAAAA,aAAAA,UACrE,kBAAC,EAAAC,MAAD,CACI,aAAW,mBACXC,MAAO7D,EACP/C,SAAUkD,EAASwC,aAAe1F,EAClCiD,KAAMA,EACNK,WAAYJ,EAASwC,aAAepC,EACpCuD,cAAc,EACdtD,OAAQL,EAASwC,aAAenC,EAChCX,OAAQkB,EACRJ,OAAQR,EAASwC,aAAehC,EAChCoD,gBAAc,EACdpE,QAASmB,GAAW6C,EAAAA,aAAAA,QACpBT,QAAS7B,EACTE,cAAeA,GAEf,kBAAC,EAAAyC,YAAD,MACA,kBAAC,EAAAC,UAAD,OAGR,kBAAC,EAAD,CACIpF,UAAWA,GACXI,WAAYkB,EAASwC,YACrB5D,QAASA,EACTD,KAAMA,EACNE,UAAWA,EACXE,gBAAiBA,EACjBC,eAAc,iBAAYA,OAQzD,EAEDY,EAAUnD,UAAY,CAClBoD,QAASnD,IAAAA,MACT0D,WAAY1D,IAAAA,KACZI,SAAUJ,IAAAA,KACVmC,UAAWnC,IAAAA,KACXqC,gBAAiBrC,IAAAA,KACjB2D,OAAQ3D,IAAAA,KACR4D,SAAU5D,IAAAA,KACV+D,oBAAqB/D,IAAAA,KACrBgE,aAAchE,IAAAA,OACdvD,MAAOuD,IAAAA,KACP8D,OAAQ9D,IAAAA,OACR6D,aAAc7D,IAAAA,OACdoD,MAAOpD,IAAAA,OACPiE,QAASjE,IAAAA,KACTkE,UAAWlE,IAAAA,OACXsC,eAAgBtC,IAAAA,OAChBmE,WAAYnE,IAAAA,QACZoE,WAAYpE,IAAAA,QACZqE,eAAgBrE,IAAAA,OAChBsE,gBAAiBtE,IAAAA,OACjBuE,qBAAsBvE,IAAAA,QACtBwE,cAAexE,IAAAA,MACfyE,qBAAsBzE,IAAAA,KACtB0E,cAAe1E,IAAAA,MAGnB,S,sgCC7JA,IAAMqH,EAAmB,SAAC,GAA6C,IAA3CC,EAA2C,EAA3CA,WAAYrF,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAASE,EAAgB,EAAhBA,WAInD,OACI,kBAACmF,EAAA,EAAD,CAAMC,eAAgB,CAAEC,QAAS,+BAC7B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAAA,OAAD,CAAQ7E,QAAQ,QAAQ,aAAW,OAAOG,WAAqB,IAAThB,EAAY2F,QALzD,kBAAMN,EAAWrF,EAAO,EAAxB,GAML,kBAAC,UAAD,QAGR,kBAACyF,EAAA,EAAD,KACI,kBAACC,EAAAA,OAAD,CAAQ7E,QAAQ,QAAQ,aAAW,OAC/BG,WAAYb,EAAaH,EAAOC,EAChC0F,QAbK,kBAAMN,EAAWrF,EAAO,EAAxB,GAcL,kBAAC,UAAD,QAKnB,EAEK4F,EAAqB,SAAC,GAAmD,IAAjDC,EAAiD,EAAjDA,oBAAqBC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,QACvDC,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,WACpB,GAA0BpL,EAAAA,EAAAA,WAAS,GAAnC,eAAOqL,EAAP,KAAeC,EAAf,KAEMjF,GAAO1G,EAAAA,EAAAA,KAAY,qBAAG4L,eAAoClF,IAAvC,IACnBG,GAAc7G,EAAAA,EAAAA,KAAY,qBAAG4L,eAAoC/E,WAAvC,IAC1BD,GAAS5G,EAAAA,EAAAA,KAAY,qBAAG4L,eAAoChF,MAAvC,IACrBD,GAAW3G,EAAAA,EAAAA,KAAY,qBAAG4L,eAAoCjF,QAAvC,KAE7B9F,EAAAA,EAAAA,YAAU,kBAAM,WACZyK,GAASO,EAAAA,EAAAA,MACZ,CAFS,GAEP,IAEH,IAAQ/E,GAAWD,GAAe,CAAC,GAA3BC,OACFgF,EAAqC,iBAAXhF,GAAkC,KAAXA,EAAgBA,EAASlE,QAAQkE,IAExFjG,EAAAA,EAAAA,YAAU,WACNyK,GAASS,EAAAA,EAAAA,IAAqB,EAAD,KAAMlF,GAAN,IAAmBsB,OAC5CtB,EAAYsB,QAAWtB,EAAYvB,KAAO,GAAKuB,EAAYtB,WAClE,GAAE,CAACsB,EAAYvB,KAAMwG,IAEtB,IAAME,GAAeC,EAAAA,EAAAA,UAAQ,WACzB,OAAIrF,EAAOvB,UACA,CAAC,kBAAC6G,EAAAA,aAAD,CAAcnJ,IAAI,WAAU,kBAACoJ,EAAAA,QAAD,CAAStH,KAAK,SAG/C6B,aAAP,EAAOA,EAAMxF,KAAI,SAAAkL,GAAG,OAAI,kBAACF,EAAAA,aAAD,CAAcnJ,IAAKqJ,EAAItK,GAAIV,MAAOgL,EAAI/K,MAA1C,GACvB,GAAE,CAACqF,EAAME,EAAOvB,YAMjB,GAAyBhF,EAAAA,EAAAA,WAAS,kBAC9BgM,KAAS,SAAAjL,GAAK,OALHkL,EAKa,CAAExF,OAAQ1F,QAJlCkK,GAASiB,EAAAA,EAAAA,IAAsBD,IADrB,IAACA,CAKG,GAA8B,IADd,IAA3BE,GAAP,eA2BA,OACI,kBAACC,EAAA,EAAD,CAAWC,QAAQ,qBAAqBjL,MAAOyD,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,oBAA8BwH,YAAU,GACtG,kBAACC,EAAAA,OAAD,CACIzG,QAAS0G,EAAAA,cAAAA,OACT,aAAY3H,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,wCAC/B1B,SAxBS,SAACqJ,EAAGC,GACrBpB,GAAQ,GACRR,EAAoB4B,GAEpB,IAC8B,IADxBC,EAActG,EAAKpE,QAAO,SAAA8J,GAAG,OAAIA,EAAI/K,OAAS0L,CAAjB,IACR,IAAvBC,EAAYxE,QACZgD,EAAYyB,OAAO,qBAAsB,CAAE5L,KAAI,UAAE2L,EAAY,UAAd,aAAE,EAAgB3L,KAAMgK,QAAAA,EAASvJ,GAAE,UAAEkL,EAAY,UAAd,aAAE,EAAgBlL,IAG3G,EAgBWoL,gBAAiBhI,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,wCACpCgI,4BAA6BjI,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,wCAChDiI,WAAYhC,EACZiC,SAhCO,WACf1B,GAASD,EACZ,EA+BWA,OAAQA,EACRpF,YAAY,EACZgH,SAhBK,SAACC,EAAOC,GACrBhB,EAAegB,EAClB,EAeWC,iBAAe,EACf1J,UAAU,sBACV2J,OACI,kBAAChD,EAAD,CACIC,WAzBD,SAACrF,GAChBgG,GAASiB,EAAAA,EAAAA,IAAsB,EAAD,KAAM1F,GAAN,IAAmBvB,KAAAA,KACpD,EAwBmBA,KAAMuB,EAAYvB,KAClBC,QAASsB,EAAYtB,QACrBE,WAAYkB,EAASwC,eAI5B6C,GAIhB,EAEDtB,EAAiBtH,UAAY,CACzBuH,WAAYvH,IAAAA,KACZkC,KAAMlC,IAAAA,OACNmC,QAASnC,IAAAA,OACTqC,WAAYrC,IAAAA,QAGhB8H,EAAmB9H,UAAY,CAC3B+H,oBAAqB/H,IAAAA,KACrBgI,aAAchI,IAAAA,MACdiI,QAASjI,IAAAA,OAEb,U,+CC1GA,QAxBsB,SAACuK,GAGnB,GAAIA,GAA8B,iBAAZA,GAAiD,OAAzBA,EAAQC,MAFxC,uDAGV,OAAO1I,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,wBAG9B,IAAM0I,EAAO,IAAIC,KAAKH,GAChBI,EAAYF,EAAKG,UAGjBC,EAAU,IAAIH,KAAK,KAAM,EAAG,GAElC,MAAyB,iBAAdC,GAA0BG,OAAOC,MAAMJ,GACvC7I,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,wBAG1B0I,EAAOI,EACA/I,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,2BAD9B,CAKH,ECtBM,IAAMiJ,EAAsB,CAAC,CAChCrL,IAAK,eACLC,MAAO,OACPuK,MAAO,CACHzH,MAAO,KAGf,CACI9C,MAAO,KACPD,IAAK,KACLwK,MAAO,CACHzH,MAAO,KAGf,CACI/C,IAAK,gBACLC,MAAO,iBACPuK,MAAO,CACHzH,MAAO,MAKFuI,EAAsB,CAC/B,CACIhN,KAAM,oBACNiN,UAAW,qBAEf,CACIjN,KAAM,qBACNiN,UAAWC,EAAAA,EAAAA,WACXC,QAAQ,IAIHC,EAAgB,CAAC,CAC1BpN,KAAM,OACNiN,UAAW,YACXI,SAAU,CAAC,CAAEC,KAAMC,EAAAA,EAAAA,aAGVC,EAAuB,CAAC,CACjCxN,KAAM,cACNiN,UAAW,qBAGFQ,GAAkB,CAAC,CAC5BzN,KAAM,SACNiN,UAAW,cACXI,SAAU,CACN,CAAEC,KAAMC,EAAAA,EAAAA,UACR,CAAED,KAAM,oBAIHI,GAAiB,SAACC,GAC3B,IAAIC,EAAc,GAElB,OAAQD,GACJ,IAAK,SACDC,EAAc/J,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,2BACjC,MACJ,IAAK,OACD8J,EAAc/J,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,cACjC,MACJ,QACI8J,EAAc/J,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,eAGzC,OAAO8J,CACV,EAEYC,GAAS,SAACF,GACnB,MAAQ,CACJG,OAAQ,CACJ,CACIb,UAAWC,EAAAA,EAAAA,OACXlN,KAAM,mBACN+N,WAAW,EACXC,SAAS,EACTC,YAAY,EACZtM,MAAO+L,GAAeC,GACtBO,YAAarK,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,qBAChCgK,OAAQ,CACJ,CACI9N,KAAM,mBACN2B,MAAOkC,EAAAA,EAAAA,cAAkC,SAAf8J,EAAwB7J,EAAAA,EAAAA,aAAwBA,EAAAA,EAAAA,aAC1EgK,OAAQd,EACRmB,SAAU,WAEd,CACInO,KAAM,UACN2B,MAAOkC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,uBAC1BgK,OAAQ,CACJ,CACI9N,KAAM,UACNiN,UAAW,kBAKnBkB,SAAU,UAEd,CACInO,KAAM,SACN2B,MAAOkC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,gBAC1BgK,OAAQ,CACJ,CACI9N,KAAM,SACNiN,UAAW,uBAU1C,EAEYmB,GAAkB,CAC3B,mBAAoB,kBAAM,SAACC,GACvB,IAAMrE,GAAUsE,EAAAA,EAAAA,IAA8BD,GAE9C,YAAgB5O,IAAZuK,GAGKA,EAAQ7C,OAAS,OAFtB,EAKOtD,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,yBAEjC,CAXmB,EAYpB,gBAAiB,kBAAMyK,CAAN,GCvIdC,GAAsB,SAAC,GAAiB,IAAfxK,EAAe,EAAfA,UACpByK,GAAerE,EAAAA,EAAAA,WAAfqE,WAER,OAAOzK,EAAY,kBAAC8G,EAAAA,QAAD,CAAStH,KAAK,OAC7B,kBAACkL,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACC,EAAA,EAAD,CAAUC,GAAI,GAAIC,GAAI,IACjBL,EAAWrB,IAEhB,kBAACwB,EAAA,EAAD,CAAUC,GAAI,GAAIC,GAAI,IACjBL,EAAWjB,IAEhB,kBAACoB,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,GAChBL,EAAWhB,KAI3B,EAEDe,GAAoBzM,UAAY,CAC5BiC,UAAWjC,IAAAA,MAEf,YCRA,IAAMgN,GAA0B,SAAC,GAA+B,IAA7BC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAErC9E,GAAcC,EAAAA,EAAAA,WACd8E,GAA2BD,GAAqC,KAAvBD,aAAA,EAAAA,EAAY7H,UAAiB,EAE5E,GAAsDnI,EAAAA,EAAAA,WAAS,GAA/D,eAAOmQ,EAAP,KAA4BC,EAA5B,KACA,GAA8CpQ,EAAAA,EAAAA,WAAS,GAAvD,eAAOqQ,EAAP,KAAwBC,EAAxB,KACA,GAAgDtQ,EAAAA,EAAAA,UAAS,IAAzD,eAAOuQ,EAAP,KAAyBzF,EAAzB,KAEA,GAA6BnL,EAAAA,EAAAA,KAAY,qBAAG6Q,uBAAH,GAA0DC,EAAAA,IAA3FC,EAAR,EAAQA,SAAUnK,EAAlB,EAAkBA,OAEZoK,EAAoB,WACtBL,GAAoBD,GACpBD,GAAwBD,EAC3B,EAYD,OAVA3P,EAAAA,EAAAA,YAAU,WACN,GAAIyP,EAAY,CACZ,IAAQjP,EAAmD0P,EAAnD1P,KAAMkO,EAA6CwB,EAA7CxB,YAAgC0B,EAAaF,EAAhCG,OAAUC,QAErC3F,EAAYyB,OAAO,OAAQ5L,GAC3BmK,EAAYyB,OAAO,cAAesC,GAClC/D,EAAYyB,OAAO,UAAUmE,EAAAA,EAAAA,IAAiBH,GACjD,CACJ,GAAE,CAACF,IAGA,kBAACM,EAAA,EAAD,CAAOrB,WAAS,GACXO,GAA0B,kBAACe,EAAA,EAAD,CAAa5M,MAAO,CAAE6M,UAAW,UACxD,kBAACC,EAAA,GAAD,CAAMlD,UAAWmD,EAAAA,GAAAA,GACZvM,EAAAA,EAAAA,cACGC,EAAAA,EAAAA,4BACA,CAAEuM,aAAcrB,EAAW7H,OAAQmJ,EAAG,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAe,2BAAIA,EAAnB,MAIlD,kBAACC,EAAA,EAAD,KACI,kBAACR,EAAA,EAAD,CAAOrB,WAAS,GACXO,GAA2B,oCAAE,kBAACsB,EAAA,EAAD,KAC1B,kBAACC,EAAA,EAAD,CACIC,UAAWvB,EACXnP,KAAK,QACLU,SAAUiP,EACVvP,MAAOyD,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,2BAC1BrD,GAAG,uBAGX,kBAAC+P,EAAA,EAAD,KACKrB,EAAsB,kBAAC,EAAD,CACnBrF,oBAAqBA,EACrBC,aAAcwF,EACdvF,QAASgF,IACR,MAET,kBAACwB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,UAAWrB,EACXrP,KAAK,QACLU,SAAUiP,EACVvP,MAAOyD,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,uBAC1BrD,GAAG,oBAES,KACpB,kBAAC+P,EAAA,EAAD,KACKnB,EAAkB,kBAAC,GAAD,CACfrL,UAAWiL,GAAc1J,EAAOvB,YAC/B,QAM5B,EAED+K,GAAwBhN,UAAY,CAChCiN,WAAYjN,IAAAA,MACZkN,WAAYlN,IAAAA,QAEhB,Y,4BC3DA,SA5BkB,SAACmK,GAAU,MACjByE,GAAUC,EAAAA,GAAAA,GAAY1E,GAAtByE,MAEF9P,EAAM,WADQuJ,EAAAA,EAAAA,WACOyG,kBAAf,aAAG,EAAwBhQ,OAEvC,GAAwB7B,EAAAA,EAAAA,UAAS6B,aAAD,EAACA,EAAQb,MAAzC,eAAOA,EAAP,KAAa8Q,EAAb,KAMA,OAJAtR,EAAAA,EAAAA,YAAU,WACNsR,EAAQjQ,EAAOb,KAClB,GAAE,CAACa,EAAOb,OAGP,kBAACoL,EAAA,EAAD,CAAWC,QAAQ,OAAOjL,MAAOyD,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,mBAA6BwH,YAAU,GACvF,kBAACyF,GAAAA,UAAD,CACIzD,KAAK,OACLhC,YAAU,EACVvL,MAAOC,EACPU,SAAU,SAACsQ,GACPL,EAAMjQ,SAASsQ,GACfF,EAAQE,EACX,EACD,aAAW,OACXC,WAAS,IAIxB,E,eCYD,SAnCoB,SAAC/E,GAAU,MACnByE,GAAUC,EAAAA,GAAAA,GAAY1E,GAAtByE,MAEF9P,EAAM,WADQuJ,EAAAA,EAAAA,WACOyG,kBAAf,aAAG,EAAwBhQ,OAEvC,GAA4B7B,EAAAA,EAAAA,UAAS6B,aAAD,EAACA,EAAQ+O,QAA7C,eAAOA,EAAP,KAAesB,EAAf,KAMA,OAJA1R,EAAAA,EAAAA,YAAU,WACN0R,EAAUrQ,EAAO+O,OACpB,GAAE,CAAC/O,EAAO+O,SAGP,kBAACxE,EAAA,EAAD,CAAWC,QAAQ,SAASjL,MAAOyD,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,mBAA6BwH,YAAU,GACzF,kBAAC/B,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,CAAUmF,GAAI,EAAGC,GAAI,GAChBjL,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,mBAExB,kBAAC4F,EAAA,EAAD,CAAUmF,GAAI,GAAIC,GAAI,IAClB,kBAACqC,GAAA,GAAD,CACIpR,MAAO6P,EACPlP,SAAU,SAACsQ,GACPL,EAAMjQ,SAASsQ,GACfE,EAAUF,EACb,EACDI,aAAc,CAAEC,SAAU,SAC1B,aAAW,SACXC,WAAY,CAAC/C,GACbgD,kBAAmB1N,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,4BAM7D,ECZD,GA3ByB,SAACoI,GAAU,MACxByE,GAAUC,EAAAA,GAAAA,GAAY1E,GAAtByE,MAEF9P,EAAM,WADQuJ,EAAAA,EAAAA,WACOyG,kBAAf,aAAG,EAAwBhQ,OAEvC,GAAsC7B,EAAAA,EAAAA,UAAS6B,aAAD,EAACA,EAAQqN,aAAvD,eAAOA,EAAP,KAAoBsD,EAApB,KAMA,OAJAhS,EAAAA,EAAAA,YAAU,WACNgS,EAAe3Q,EAAOqN,YACzB,GAAE,CAACrN,EAAOqN,cAGP,kBAAC9C,EAAA,EAAD,CAAWC,QAAQ,cAAcjL,MAAOyD,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,oBACvD,kBAACiN,GAAAA,UAAD,CACIzD,KAAK,OACLhC,YAAU,EACVvL,MAAOmO,EACPxN,SAAU,SAACsQ,GACPL,EAAMjQ,SAASsQ,GACfQ,EAAeR,EAClB,EACD,aAAW,gBAI1B,E,+uBCVM,IAAMS,GAAgB,SAAC,GAAkC,QAAhCzC,WAAAA,OAAgC,MAAnB,GAAmB,EAAZ9C,GAAY,cACpDyE,GAAUC,EAAAA,GAAAA,GAAY1E,GAAtByE,MAEA9P,GADYuJ,EAAAA,EAAAA,WACWyG,WAAvBhQ,OACF6Q,GAAyBC,EAAAA,EAAAA,IAAwB3C,EAAYnO,aAAb,EAAaA,EAAQmJ,SAE3E,GAAgChL,EAAAA,EAAAA,WAAS,GAAzC,eAAOgF,EAAP,KAAkB4N,EAAlB,KACA,GAA8B5S,EAAAA,EAAAA,UAAS,IAAvC,eAAO6S,EAAP,KAAgBC,EAAhB,KACA,GAA8B9S,EAAAA,EAAAA,UAAS,IAAvC,eAAOgL,EAAP,KAAgB+H,EAAhB,KACA,GAAwC/S,EAAAA,EAAAA,UAAS0S,GAAjD,eAAO1L,EAAP,KAAqBgM,EAArB,KACA,GAA8BhT,EAAAA,EAAAA,UAAS,CACnC6H,MAAO,GACPC,OAAQ,EACRgB,YAAa,IAHjB,eAAOxC,EAAP,KAAiB2M,EAAjB,KAMA,GAAsCjT,EAAAA,EAAAA,UAAS,CAC3CiF,KAAM,EACNC,QAAS,GACTjD,OAAQ,CACJiR,MAAO,EAAC,GAAM,MAJtB,eAAO1M,EAAP,KAAoB2M,EAApB,KAQQC,GAAoBzT,EAAAA,EAAAA,KAAY,qBAAG6Q,uBAAH,GAA0DC,EAAAA,IAA1F2C,iBAER5S,EAAAA,EAAAA,YAAU,YACN6S,EAAAA,GAAAA,IAAa,SACN7M,GADK,IACQvE,OAAQ,SAAKuE,EAAYvE,QAAnB,IAClBR,GAAIuO,EAAW7H,OAAS,EAApB,aAA8B6H,EAAWsD,KAAK,WAAS7S,OAChEE,MAAK,SAAA4S,GACJR,GACIS,EAAAA,GAAAA,IACID,EAAOE,KADY,GAAC,OAEfd,EAAAA,EAAAA,IAAwB,GAAD,gBAAKS,IAAL,QAAyBpD,MAAiBhJ,KAG9EiM,EAAUM,EAAOG,MACjBZ,EAAWS,EAAOE,MAClBb,GAAW,EACd,GACJ,GAAE,CAACpM,EAAYvE,OAAQuE,KAExBhG,EAAAA,EAAAA,YAAU,WACNmR,EAAMjQ,SAASsF,GAEf+L,GACIS,EAAAA,GAAAA,IAAwBX,EAAS7L,GAExC,GAAE,CAACA,KAEJxG,EAAAA,EAAAA,YAAU,WACNwS,EAAgB,SAAKhM,IAAiB2L,EAAAA,EAAAA,IAAwBS,IACjE,GAAE,CAACA,IAEJ,IAAM3T,EAAQ,SAACwM,GACX2G,GAAW,GACXO,GAAe,SAACQ,GAAD,UAAC,SACTA,GACA1H,GAFQ,IAGXhK,OAAQ,SAAK0R,EAAgB1R,QAAWgK,EAAOhK,SAHpC,GAKlB,EAEK2R,GAAiBC,EAAAA,GAAAA,GAAmBrN,EAAYvE,OAAOC,GAAIzC,GAC3DkH,GAASmN,EAAAA,GAAAA,IAAc/F,EAAqBtO,EAAO,GACnDqH,EAASa,IAAAA,SACX,kBAAMoM,EAAAA,EAAAA,IAAahG,EAAqBzH,EAAS0N,KAAM,EAAvD,GACA,CAAC1N,EAAS0N,OAGR7O,GAAY8O,EAAAA,GAAAA,IAAW3N,EAASuB,MAAOpI,GAEvC4F,GAAkB6O,EAAAA,GAAAA,IAAiBzU,GAWnC2D,GAAW+Q,EAAAA,GAAAA,GACbnJ,EACAhE,EACA,CACIoN,SAAUC,GAAAA,EAAAA,QACV7N,YAAa,SACNA,GADI,IAEPvE,OAAQ,SAAKuE,EAAYvE,QAAW+N,EAAW7H,OAAS,GAAK,CAAE1G,GAAI,MAAF,OAAQuO,EAAWsD,KAAK,UAE7FgB,eAlBW,SAACC,GAChB,IAAMC,EAAgBD,EAASE,QAAO,SAACC,EAAQC,GAE3C,OADAD,EAAOC,EAAOlT,MAAMkT,EAAOjI,eAAkBjM,EACtCiU,CACV,GAAE,CAAC,GAEJ1B,EAAgB,SAAKhM,GAAiBwN,GACzC,IAcD,OACI,kBAACxD,EAAA,EAAD,CAAOrB,WAAS,GACZ,kBAAC6B,EAAA,EAAD,KACI,kBAACP,EAAA,EAAD,CAAa5M,MAAO,CAAE6M,UAAW,UAC7B,kBAACC,EAAA,GAAD,CAAMlD,UAAWmD,EAAAA,GAAAA,GACZvM,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,8BAIhC,kBAAC0M,EAAA,EAAD,KACI,kBAACtL,GAAA,EAAD,CACIC,QAAS4H,EACT9G,SAAO,EACP9B,UAAWA,EACXE,gBAAiBA,EACjBsB,OAAQA,EACRK,aAAcA,EACd5D,SAAUA,EACV0D,OAAQA,EACRrH,MAAOA,EACPyH,UAAW,kBACX5B,eAAgB,uBAChBc,MAAO,CAAEC,KAAM2E,EAAS1E,SAAAA,EAAUC,OAAQ,CAAEvB,UAAAA,GAAawB,YAAAA,GACzDK,aAAc,CACVzE,MAAO,EACHwS,EAAAA,GAAAA,GAAanV,EAAO+G,EAAYC,OAC5B5B,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,iCACnBD,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,uBAEvB+P,EAAAA,GAAAA,GAAYpV,EAAO+G,EAAYvE,SAC/B6S,EAAAA,GAAAA,GAAuBrV,EAAO+G,EAAYvE,SANzC,gBAOE2R,KAGXtM,gBAAiBzC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,iCACpCuC,eAAgB0N,GAAAA,MAKnC,EAEDtC,GAAc1P,UAAY,CACtBiN,WAAYjN,IAAAA,OAGhB,Y,4BCpJMiS,GAAqB,SAAC5T,EAAO6T,GAAR,OACvB,kBAAC,EAAAC,SAAD,KACI,kBAACC,GAAA,GAAD,CAAclH,UAAWmH,GAAAA,GAAAA,IACpBvQ,EAAAA,EAAAA,cAAmBC,EAAAA,EAAS1D,IADjC,KAGA,kBAAC+T,GAAA,GAAD,CAAclH,UAAWmH,GAAAA,GAAAA,IACpBH,GANc,EA6C3B,SAlCuB,WACnB,IACQpT,GADYuJ,EAAAA,EAAAA,WACWyG,WAAvBhQ,OACR,EAAsCA,EAAOwT,oBAAsBxT,EAA3Db,EAAR,EAAQA,KAAMkO,EAAd,EAAcA,YAAa0B,EAA3B,EAA2BA,OACnB5F,EAAYnJ,EAAZmJ,QAER,OACI,kBAACgG,EAAA,EAAD,CAAOrB,WAAS,GACZ,kBAAC6B,EAAA,EAAD,KACI,kBAACP,EAAA,EAAD,CAAa5M,MAAO,CAAE6M,UAAW,UAC7B,kBAACC,EAAA,GAAD,CAAMlD,UAAWmD,EAAAA,GAAAA,GACZvM,EAAAA,EAAAA,cACGC,EAAAA,EAAAA,wBACA,CAAEwM,EAAG,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAe,2BAAIA,EAAnB,OAIrB,kBAACC,EAAA,EAAD,KACI,kBAACP,EAAA,EAAD,KACI,kBAACqE,GAAA,GAAD,CAAUrH,UAAWsH,GAAAA,GAAAA,IAChBP,GAAmB,oBAAqBhU,GACxCkO,GAAe8F,GAAmB,oBAAqB9F,GACvD0B,GAAUoE,GAAmB,aAAcpE,GAC3CoE,GACG,wBACAhK,GAAWpJ,OAAOC,OAAOmJ,GAAS/I,QAAO,SAAA0S,GAAM,OAAIA,CAAJ,IAAYxM,WAOtF,E,0HClCKqN,GAAkB,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACxBC,EAAkCD,EAAlCC,eAAgBC,EAAkBF,EAAlBE,OAAQC,EAAUH,EAAVG,MAC1B5K,GAAWC,EAAAA,EAAAA,MAUjB,OARI0K,GACA3K,GACI6K,EAAAA,GAAAA,IRiH2C,CACnDnT,MAAO,mDACPuM,YQlHkC2G,EAAME,ORmHxCjQ,QAAS,YQ7GL,kBAAC6C,GAAA,GAAD,CACI7C,QAASkQ,GAAAA,GAAAA,MACT,yBAAuB,sBAEvB,kBAACC,GAAA,EAAD,CACIxR,MACImR,EACM,sCACCD,OAEGlV,EADA,uCAGd8D,KACIqR,EACMM,GAAAA,QACAP,EACIQ,GAAAA,GACAC,GAAAA,UAGlB,kBAACzR,GAAAA,MAAD,CAAOC,aAAa,KAAKJ,KAAK,MACzBoR,EACK/Q,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,yBACnB6Q,EACI9Q,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,6BACnBD,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,+BAEjC,kBAACuR,GAAA,EAAD,KACI,kBAAC3G,EAAA,EAAD,CAAMC,WAAS,GACTgG,GACE,oCAAE,kBAAC/F,EAAA,EAAD,KACE,kBAAC0G,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAgBzQ,QAAQ,iBACnBjB,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,6BAGrB,kBAAC8K,EAAA,EAAD,KACP,kBAACjF,EAAAA,OAAD,CAAQ7E,QAAQ,OAAO0Q,UAAQ,EAAC5L,QAAS6K,GACpC5Q,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,eACd,OAGf6Q,IAAmBC,GAClB,kBAAChG,EAAA,EAAD,KACI,kBAACjF,EAAAA,OAAD,CAAQ7E,QAAQ,UAAU8E,QAAS6K,GAC9B5Q,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,oBAI7B6Q,GAAkBC,GACjB,oCAAE,kBAAChG,EAAA,EAAD,KACE,kBAAC0G,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAgBzQ,QAAQ,iBACnBjB,EAAAA,EAAAA,cACGC,EAAAA,EAAAA,cACA,CAAE2R,EAAG,SAAClF,GAAD,OAAY,uBAAGmF,KAAK,8CAA8CnF,EAAlE,OAGV,kBAAC3B,EAAA,EAAD,KACP,kBAACjF,EAAAA,OAAD,CAAQ7E,QAAQ,UAAU8E,QAAS6K,GAC9B5Q,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,sBASnD,EAED0Q,GAAgBzS,UAAY,CACxB0S,QAAS1S,IAAAA,KACT2S,MAAO3S,IAAAA,QAGX,Y,ykBCzFO,IAAM4T,GAAiB,SAAC,GAAiD,MAA/C3G,EAA+C,EAA/CA,WAAY4G,EAAmC,EAAnCA,iBAAkB3G,EAAiB,EAAjBA,WAErDtB,EAAaqB,EAAa,SAAYC,EAAa,OAAS,SAClE,GAAsCjQ,EAAAA,EAAAA,UAAS,CAC3C6W,WAAW,EACXC,WAAY,CAAC,EACbnB,gBAAgB,EAChBC,QAAQ,EACRmB,eAAe,IALnB,eAAOC,EAAP,KAAoBC,EAApB,KAQMhM,GAAWC,EAAAA,EAAAA,OAEjB1K,EAAAA,EAAAA,YAAU,WAMN,OALIyP,IACAhF,GAASiM,EAAAA,EAAAA,IAAoBjH,IAC7BhF,GAASkM,EAAAA,EAAAA,IAA2BlH,EAAY,CAAEpI,OAAQ,MAGvD,kBAAMoD,GAASmM,EAAAA,EAAAA,MAAf,CACV,GAAE,IAEH,IAAMC,GAAWC,EAAAA,GAAAA,IAAeN,EAAaC,EAAgBhH,GAEvDsH,EAAoB,WACtB,IAAMR,GAAiBC,EAAYpB,QAAUoB,EAAYH,UAEzDD,EAAiB,CAAEY,sBAAsB,EAAOxH,WAAY,GAAIC,gBAAYxP,EAAWsW,cAAAA,IACvFE,EAAe,CAAEH,WAAY,CAAC,EAAGD,WAAW,GAC/C,EAEKY,EAAmB,CACrBC,UAAW,CACPzJ,UAAW0J,IAEfC,iBAAkB,CACd3J,UAAW4J,IAEfC,YAAa,CACT7J,UAAW8J,IAEfC,kBAAmB,CACf/J,UAAW8B,GACXC,WAAYA,GAAc,GAC1BC,WAAAA,GAEJgI,cAAe,CACXhK,UAAWwE,GACXzC,WAAYA,GAAc,IAE9BkI,eAAgB,CACZjK,UAAWkK,GACXnI,WAAYA,GAAc,KAIlC,OACI,kBAAC,EAAAkF,SAAD,MACM8B,EAAYH,WACV,kBAAC,IAAD,CACIhI,OAAQA,GAAOF,GACfyJ,aAAc,CAAEvW,QAAQ,GACxBwW,aAAc,SAACnL,GAAD,OACV,kBAAC,MAAD,UAAqBA,EAArB,CAA4BoL,kBAAkB,IADpC,EAGdC,gBAAe,mBACVrK,EAAAA,EAAAA,OAAwB,CACrBD,UAAWuK,EAAAA,EACX9U,UAAW,YACX,yBAA0B,sBAJnB,SAMVwK,EAAAA,EAAAA,WAA4BuK,EAAAA,IANlB,SAOVvK,EAAAA,EAAAA,YAA6BiE,EAAAA,GAPnB,GAQRsF,GAEPrI,gBAAiBA,GACjBiI,SAAUA,EACVqB,SAAUnB,KAEd,kBAACoB,EAAAA,MAAD,CACItN,QAAM,EACNvF,QAAS,QACT8S,WAAW,EACXlV,UAAU,YACVmV,kBAAgB,EAChB,mBAAiB,wBACjB,kBAAgB,yBAEhB,kBAACC,EAAA,EAAD,CACIpV,UAAU,YACVf,MAAO+L,GAAeC,GACtBO,YAAarK,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,qBAChCiU,MAAO,CACH,CACI/X,KAAM,WACNiN,UACI,kBAAC,GAAD,CACIwH,QAAS8B,EACT7B,MAAOsB,IAGfgC,gBAAgB,IAGxBvD,QAAS8B,KAMhC,EAEDZ,GAAe5T,UAAY,CACvB6T,iBAAkB7T,IAAAA,KAClBiN,WAAYjN,IAAAA,MACZkN,WAAYlN,IAAAA,QAGhB,UAAekW,EAAAA,EAAAA,MAAKtC,IAAgB,SAACuC,EAAWC,GAC5C,OAAOC,KAAKC,UAAUH,KAAeE,KAAKC,UAAUF,EACvD,G,+tBC3IM,IAAM9E,EAAmB,CAC5BiF,WAAY,kBACZtO,QAAS,eACTuO,UAAW,aACXC,gBAAiB,SAACC,GAAD,gCAAmCA,EAAnC,aACjBC,iBAAkB,SAACC,GAAD,6BAA8BA,EAA9B,gBAClBC,eAAgB,SAACC,GAAD,0BAA8BA,EAA9B,aAChBC,eAAgB,SAACH,GAAD,yBAA0BA,EAA1B,eA4EPxF,EAAc,SAACtB,EAAS7L,EAAc6J,GAC/C,IACIuD,EAQAvD,EARAuD,SACA5N,EAOAqK,EAPArK,YACAuT,EAMAlJ,EANAkJ,oBACAC,EAKAnJ,EALAmJ,kBACAC,EAIApJ,EAJAoJ,aACAC,EAGArJ,EAHAqJ,uBAEA5F,EACAzD,EADAyD,eAGErJ,GAAWC,EAAAA,EAAAA,MACXiP,EAtFa,SACnB/F,EACA8F,GAFmB,OAInBE,EAAAA,EAAAA,cAAY,SAAC5T,GAAD,OACR2T,EAAAA,EAAAA,IAAS/F,EAAD,OAAgB5N,GAAhB,IAA6BqB,OAAQ,KAC5ClH,MAAK,SAAA0Z,GAAQ,OACVH,EAAyBA,EAAuBG,GAAYA,CADlD,GAFN,GAKZ,GATmB,CAsFFC,CAAelG,EAAU8F,GACpCK,EA3EmB,SAACN,EAAcD,GAAf,OACzBI,EAAAA,EAAAA,cAAY,SAAC/T,GAAwB,IAAlBkO,EAAkB,uDAAP,GAClBiG,EAAcnU,EAAdmU,IAAK/G,EAASpN,EAAToN,KACPgH,EAAmBC,MAAMC,QAAQH,GAiBvC,OAhBcC,EAAmBD,EAAM/G,GAEjCmH,SAAQ,SAACpY,GACX,IAAMf,EAAKgZ,EAAmBjY,EAAOA,EAAKf,IAGpCoZ,EAAAA,EAAAA,IAASrY,IAASA,EAAKsY,eACzBvG,EAASjR,KACL,CACI7B,GAAIwY,EAAeA,EAAazX,GAAQf,EACxCiL,SAAUsN,EAAoBA,EAAkBxX,GAAQf,GAIvE,IAEM8S,CACV,GArBwB,CA2ECwG,CAAqBd,EAAcD,GAMvDgB,EAAoB,SAACzG,GACvB0G,QAAQC,IAAI3G,EAAU,YAClBD,EACAA,EAAeC,GAEftJ,EAAS8O,EAAoBxF,GAEpC,EAED,EAnEoB,SACpBgG,EACAS,EACAG,GAgCA,MAAO,CAAEC,WA9BU,SAAC/U,GAChB,IAAMkO,EAAW,GACjB3S,OAAOG,KAAKsE,GAAMuU,SAAQ,SAAAnZ,GACtB8S,EAASjR,KACL,CACI7B,GAAAA,EACAiL,UAAU,GAGrB,IAEDsO,EAAkBzG,GAClB4G,GAAyB,EAC5B,EAiBoBE,WAfF,SAACC,GACZZ,MAAMC,QAAQW,KACdA,EAAWA,EAASrZ,QAAO,SAAAsZ,GAAG,OAAKA,EAAIC,eAAT,KAGlCR,EAAkBT,EAAkB,CAAE9G,KAAM6H,IAC/C,EASgCG,UAPf,SAACtB,EAAU3T,GACzB,OAAO2T,EAAS3T,GAAa7F,MAAK,SAAA0Z,GAC9BW,EAAkBT,EAAkBF,IACpCc,GAAyB,EAC5B,GACJ,EAGJ,CA+BiDO,CAC1CnB,EACAS,GAf6B,SAACW,GAC9B1Q,GAAS2Q,EAAAA,EAAAA,IAAwBD,GACpC,IAWOP,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,WAAYI,EAAhC,EAAgCA,UAM1BrY,GAAWgX,EAAAA,EAAAA,aAAW,mCACxB,WAAOzY,EAAO+K,EAAUmP,GAAxB,mFAA+BC,EAA/B,+BAAgD,WAAQ,EAAxD,KACYna,EADZ,OAEa,SAFb,OAOa,SAPb,OAYa,QAZb,8BAGYyZ,EAAWpU,GAHvB,mCAQYqU,EAAWxI,GARvB,mCAaY4I,EAAUtB,EAAU3T,GACnB7F,MAAK,kBAAMmb,GAAe,EAArB,IAdlB,6BAmBYd,EAAkB,CAAC,CACfvZ,GAAIwY,EAAeA,EAAapH,EAAQgJ,IAAUhJ,EAAQgJ,GAAOpa,GACjEiL,SAAUA,KAAasN,GAAoBA,EAAkBnH,EAAQgJ,QArBrF,4CADwB,2DA4B5B,OAAOzY,CACV,C,oFC7GD,QAlCyB,SAAC4D,GACtB,OAA0ChH,EAAAA,EAAAA,UAAS,CAC/CwX,sBAAsB,EACtBuE,4BAA4B,EAC5BhF,eAAe,EACf/G,WAAY,KAJhB,eAAOgM,EAAP,KAAsBC,EAAtB,KA8BA,MAAO,CAAED,cAAAA,EAAeC,iBAAAA,EAAkBC,yBAvBT,SAACvC,GAC9BsC,EAAiB,CACbzE,sBAAsB,EACtBxH,WAAgC,iBAAb2J,GAAsC,KAAbA,EACtC,CAACA,IACDrK,EAAAA,EAAAA,IAA8BtI,GACpC+P,eAAe,GAGtB,EAcmEoF,yBAZnC,SAACnM,GAC9BiM,EAAiB,CACbF,4BAA4B,EAC5B/L,WAAAA,EACA+G,eAAe,GAEtB,EAM6FqF,sBAJhE,SAACnM,GAC3BgM,EAAiB,CAAEzE,sBAAsB,EAAMvH,WAAAA,GAClD,EAGJ,C","sources":["webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js","webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./src/PresentationalComponents/Snippets/SystemUpToDate.js","webpack:///./src/PresentationalComponents/TableView/TableFooter.js","webpack:///./src/PresentationalComponents/TableView/TableView.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/SelectExistingSets.js","webpack:///./src/Utilities/dateValidator.js","webpack:///./src/SmartComponents/PatchSetWizard/WizardAssets.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ConfigurationFields.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ConfigurationStepFields.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/NameField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/ToDateField.js","webpack:///./src/SmartComponents/PatchSetWizard/InputFields/DescriptionField.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewSystems.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/ReviewPatchSet.js","webpack:///./src/SmartComponents/PatchSetWizard/steps/RequestProgress.js","webpack:///./src/SmartComponents/PatchSetWizard/PatchSetWizard.js","webpack:///./src/Utilities/useOnSelect.js","webpack:///./src/Utilities/usePatchSetState.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { getOperatingSystems } from '../../Utilities/api';\n\nconst useOsVersionFilter = (currentFilter = '', apply) => {\n    const versions = useSelector(({ entities }) => entities?.operatingSystems);\n    const versionsLoaded = useSelector(({ entities }) => entities?.operatingSystemsLoaded);\n\n    const [operatingSystems, setOperatingSystems] = useState([]);\n    const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule(\n        {\n            appName: 'inventory',\n            scope: 'inventory',\n            module: './OsFilterHelpers'\n        }\n    );\n\n    useEffect(() => {\n        if (versions === undefined || versionsLoaded === undefined) {\n            /* explicitly request OS versions from API */\n            getOperatingSystems().then(({ results }) => {\n                setOperatingSystems((results || []).map(entry => {\n                    const { name, major, minor } = entry.value;\n                    const versionStringified = `${major}.${minor}`;\n                    return { label: `${name} ${versionStringified}`, value: `${versionStringified}` };\n                }));\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        if (versionsLoaded === true) {\n            setOperatingSystems(versions);\n        }\n    }, [versionsLoaded]);\n\n    const osVersionValue = (currentFilter === '' ? [] : currentFilter.split(','))\n    // patchman uses \"RHEL \" prefix in values; need to remove\n    .map((version) => version.substring(5));\n\n    return [\n        ...(buildOSFilterConfig\n            ? [\n                buildOSFilterConfig(\n                    {\n                        id: 'rhel_version',\n                        value: toGroupSelectionValue(osVersionValue),\n                        onChange: (event, value) => {\n                            /* `versions` must be of type string, e.g., \"8.9,9.0\" */\n                            const versions = Object.values(value)\n                            .flatMap((versions) => Object.keys(versions))\n                            .map((version) => `RHEL ${version}`)\n                            .toString();\n                            apply({ filter: { os: versions } });\n                        }\n                    },\n                    operatingSystems\n                )\n            ]\n            : [])\n    ];\n};\n\nexport default useOsVersionFilter;\n","import {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items, headerOUIA }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}\n                        data-ouia-component-type={`${headerOUIA}-breadcrumb`}\n                        data-ouia-component-id={`breadcrumb-to-${item.title}`}\n                    >{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    ),\n    headerOUIA: PropTypes.string\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history, headerOUIA }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={'/advisories'}\n                title={'Applicable advisories'}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-Applicable advisories'`}\n            />\n            <Tab\n                eventKey={'/systems/'}\n                title={'Systems'}\n                data-ouia-component-type={`${headerOUIA}-tab`}\n                data-ouia-component-id={`${headerOUIA}-tab-Systems`}\n            />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object,\n    headerOUIA: propTypes.string\n};\n\nexport default withRouter(HeaderTabs);\n","import {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children, headerOUIA }) => {\n    return (\n        <React.Fragment>\n            <PageHeader\n                data-ouia-component-type={`${headerOUIA}-page-header`}\n            >\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} headerOUIA={headerOUIA} />}\n                <PageHeaderTitle title={title} />\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs headerOUIA = {headerOUIA}/>}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any,\n    headerOUIA: PropTypes.string\n};\n\nexport default Header;\n","import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const SystemUpToDate = () => (\n    <Bullseye>\n        <EmptyState style={{ paddingTop: 40 }}>\n            <EmptyStateIcon icon={()=><CheckCircleIcon size='xl' color={'var(--pf-global--success-color--200)' }\n                style={{ marginBottom: 15 }} />}/>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                {intl.formatMessage(messages.statesNoApplicableAdvisories)}\n            </Title>\n            <EmptyStateBody>\n                {intl.formatMessage(messages.statesSystemUpToDate)}\n            </EmptyStateBody>\n        </EmptyState>\n    </Bullseye>\n);\n","import { Pagination, PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TableFooter = ({ isLoading, page, perPage, onSetPage, totalItems, onPerPageSelect, paginationOUIA }) => {\n    return (\n        <>\n            {isLoading ? (\n                <div className=\"pf-c-pagination pf-m-bottom\">\n                    <Skeleton fontSize=\"xl\" width=\"350px\" style={{ margin: 10 }} />\n                </div>\n            ) :\n                <Pagination\n                    itemCount={totalItems}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    widgetId={`pagination-options-menu-bottom`}\n                    variant={PaginationVariant.bottom}\n                    ouiaId={paginationOUIA}\n                    isDisabled={totalItems === 0}\n                />\n            }\n        </>\n    );\n};\n\nTableFooter.propTypes = {\n    isLoading: PropTypes.bool,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalItems: PropTypes.number,\n    paginationOUIA: PropTypes.string\n};\n\nexport default TableFooter;\n","import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport AsyncRemediationButton from '../../SmartComponents/Remediation/AsyncRemediationButton';\nimport { arrayFromObj, buildFilterChips, convertLimitOffset } from '../../Utilities/Helpers';\nimport { useRemoveFilter, useBulkSelectConfig } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableFooter from './TableFooter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { Skeleton, ToolbarItem } from '@patternfly/react-core';\n\nconst TableView = ({\n    columns,\n    store: {\n        rows,\n        metadata,\n        status,\n        queryParams: { filter, search }\n    },\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    onExport,\n    filterConfig,\n    sortBy,\n    remediationProvider,\n    selectedRows,\n    compact,\n    apply,\n    tableOUIA,\n    paginationOUIA,\n    errorState,\n    emptyState,\n    defaultFilters,\n    searchChipLabel,\n    CreatePatchSetButton,\n    actionsConfig,\n    isRemediationLoading,\n    actionsToggle\n}) => {\n\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n\n    const [deleteFilters] = useRemoveFilter(filter, apply, defaultFilters);\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n    const { code, hasError, isLoading } = status;\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, metadata, rows, onCollapse);\n\n    return (\n        <React.Fragment>\n            {\n                (<React.Fragment>\n                    {(hasError || metadata.has_systems === false)\n                        ? <ErrorHandler code={code} ErrorState={errorState} EmptyState={emptyState} metadata={metadata} />\n                        : <React.Fragment>\n                            <PrimaryToolbar\n                                pagination={isLoading\n                                    ? <Skeleton fontSize=\"xl\" width=\"200px\" style={{ margin: 10 }} />\n                                    : {\n                                        itemCount: metadata.total_items,\n                                        page,\n                                        perPage,\n                                        isCompact: true,\n                                        onSetPage,\n                                        onPerPageSelect,\n                                        ouiaId: `top-${paginationOUIA}`,\n                                        isDisabled: metadata.total_items === 0\n                                    }}\n                                filterConfig={filterConfig}\n                                activeFiltersConfig={{\n                                    filters: buildFilterChips(filter, search, searchChipLabel),\n                                    onDelete: deleteFilters,\n                                    deleteTitle: intl.formatMessage(defaultFilters\n                                        && messages.labelsFiltersReset || messages.labelsFiltersClear)\n                                }}\n                                actionsConfig={{\n                                    actions: [remediationProvider && (\n                                        <AsyncRemediationButton\n                                            remediationProvider={remediationProvider}\n                                            isDisabled={\n                                                Object.values(selectedRows).filter(isSelected => isSelected).length === 0\n                                                || isRemediationLoading\n                                            }\n                                            isLoading={isRemediationLoading}\n                                        />\n                                    )]\n                                }}\n                                exportConfig={{\n                                    isDisabled: metadata.total_items === 0,\n                                    onSelect: onExport\n                                }}\n                                bulkSelect={onSelect && bulkSelectConfig}\n                            >\n                                {CreatePatchSetButton && <ToolbarItem>\n                                    <CreatePatchSetButton />\n                                </ToolbarItem>}\n                            </PrimaryToolbar>\n                            {isLoading ? <SkeletonTable colSize={5} rowSize={20} variant={compact && TableVariant.compact}/> :\n                                <Table\n                                    aria-label=\"Patch table view\"\n                                    cells={columns}\n                                    onSelect={metadata.total_items && onSelect}\n                                    rows={rows}\n                                    onCollapse={metadata.total_items && onCollapse}\n                                    canSelectAll={false}\n                                    onSort={metadata.total_items && onSort}\n                                    ouiaId={tableOUIA}\n                                    sortBy={metadata.total_items && sortBy}\n                                    isStickyHeader\n                                    variant={compact && TableVariant.compact}\n                                    actions={actionsConfig}\n                                    actionsToggle={actionsToggle}\n                                >\n                                    <TableHeader />\n                                    <TableBody />\n                                </Table>\n                            }\n                            <TableFooter\n                                isLoading={isLoading}\n                                totalItems={metadata.total_items}\n                                perPage={perPage}\n                                page={page}\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                paginationOUIA={`bottom-${paginationOUIA}`}\n                            />\n                        </React.Fragment>\n                    }\n                </React.Fragment>)\n            }\n        </React.Fragment>\n    );\n};\n\nTableView.propTypes = {\n    columns: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    onExport: PropTypes.func,\n    remediationProvider: PropTypes.func,\n    selectedRows: PropTypes.object,\n    apply: PropTypes.func,\n    sortBy: PropTypes.object,\n    filterConfig: PropTypes.object,\n    store: PropTypes.object,\n    compact: PropTypes.bool,\n    tableOUIA: PropTypes.string,\n    paginationOUIA: PropTypes.string,\n    errorState: PropTypes.element,\n    emptyState: PropTypes.element,\n    defaultFilters: PropTypes.object,\n    searchChipLabel: PropTypes.string,\n    CreatePatchSetButton: PropTypes.element,\n    actionsConfig: PropTypes.array,\n    isRemediationLoading: PropTypes.bool,\n    actionsToggle: PropTypes.func\n};\n\nexport default TableView;\n","import '../../../App.scss';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AngleLeftIcon, AngleRightIcon } from '@patternfly/react-icons';\nimport { Select, SelectOption, SelectVariant, FormGroup, Spinner, Flex, FlexItem, Button } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { fetchPatchSetsAction, changePatchSetsParams, clearPatchSetsAction } from '../../../store/Actions/Actions';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst SelectPagination = ({ changePage, page, perPage, totalItems }) =>{\n    const openNextPage = () => changePage(page + 1);\n    const openPrevPage = () => changePage(page - 1);\n\n    return (\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n            <FlexItem>\n                <Button variant=\"plain\" aria-label=\"prev\" isDisabled={page === 1} onClick={openPrevPage}>\n                    <AngleLeftIcon />\n                </Button>\n            </FlexItem>\n            <FlexItem>\n                <Button variant=\"plain\" aria-label=\"next\"\n                    isDisabled={totalItems < page * perPage}\n                    onClick={openNextPage}>\n                    <AngleRightIcon />\n                </Button>\n            </FlexItem>\n        </Flex>\n    );\n};\n\nconst SelectExistingSets = ({ setSelectedPatchSet, selectedSets, systems }) => {\n    const dispatch = useDispatch();\n    const formOptions = useFormApi();\n    const [isOpen, setOpen] = useState(true);\n\n    const rows = useSelector(({ PatchSetsStore }) => PatchSetsStore.rows);\n    const queryParams = useSelector(({ PatchSetsStore }) => PatchSetsStore.queryParams);\n    const status = useSelector(({ PatchSetsStore }) => PatchSetsStore.status);\n    const metadata = useSelector(({ PatchSetsStore }) => PatchSetsStore.metadata);\n\n    useEffect(() => () => {\n        dispatch(clearPatchSetsAction());\n    }, []);\n\n    const { search } = queryParams || {};\n    const searchDependency = typeof search === 'string' && search !== '' ? search : Boolean(search);\n\n    useEffect(() => {\n        dispatch(fetchPatchSetsAction({ ...queryParams, offset:\n            queryParams.offset + ((queryParams.page - 1) * queryParams.perPage) }));\n    }, [queryParams.page, searchDependency]);\n\n    const patchOptions = useMemo(() =>{\n        if (status.isLoading) {\n            return [<SelectOption key='loading'><Spinner size=\"md\"/></SelectOption>];\n        }\n\n        return rows?.map(set => <SelectOption key={set.id} value={set.name} />);\n    }, [rows, status.isLoading]);\n\n    const apply = (params) => {\n        dispatch(changePatchSetsParams(params));\n    };\n\n    const [searchAdvisory] = useState(() =>\n        debounce(value => apply({ search: value }), 700)\n    );\n\n    const handleOpen = () => {\n        setOpen(!isOpen);\n    };\n\n    const handleSelect = (_, selected) =>{\n        setOpen(false);\n        setSelectedPatchSet(selected);\n\n        const selectedSet = rows.filter(set => set.name === selected);\n        if (selectedSet.length === 1) {\n            formOptions.change('existing_patch_set', { name: selectedSet[0]?.name, systems, id: selectedSet[0]?.id });\n        }\n\n    };\n\n    const changePage = (page) => {\n        dispatch(changePatchSetsParams({ ...queryParams, page }));\n    };\n\n    const onFilter = (props, searchValue) => {\n        searchAdvisory(searchValue);\n    };\n\n    return (\n        <FormGroup fieldId='existing_patch_set' label={intl.formatMessage(messages.textTemplateChoose)} isRequired>\n            <Select\n                variant={SelectVariant.single}\n                aria-label={intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)}\n                onSelect={handleSelect}\n                placeholderText={intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)}\n                inlineFilterPlaceholderText={intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)}\n                selections={selectedSets}\n                onToggle={handleOpen}\n                isOpen={isOpen}\n                isDisabled={false}\n                onFilter={onFilter}\n                hasInlineFilter\n                className='patch-existing-sets'\n                footer={\n                    <SelectPagination\n                        changePage={changePage}\n                        page={queryParams.page}\n                        perPage={queryParams.perPage}\n                        totalItems={metadata.total_items}\n                    />\n                }\n            >\n                {patchOptions}\n            </Select>\n        </FormGroup >\n    );\n};\n\nSelectPagination.propTypes = {\n    changePage: propTypes.func,\n    page: propTypes.number,\n    perPage: propTypes.number,\n    totalItems: propTypes.number\n};\n\nSelectExistingSets.propTypes = {\n    setSelectedPatchSet: propTypes.func,\n    selectedSets: propTypes.array,\n    systems: propTypes.array\n};\nexport default SelectExistingSets;\n","import { intl } from './IntlProvider';\nimport messages from '../Messages';\n\n/*\nvalidates date of a type YYYY-MM-DD with starting limit 1990-01-01.\nregex is used to comply the Patternfly date format.\n*/\nconst dateValidator = (dateStr) => {\n    const regex = /^(\\d{4})-(0[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$/;\n\n    if (dateStr && typeof dateStr === 'string' && dateStr.match(regex) === null) {\n        return intl.formatMessage(messages.labelsErrorInvalidDate);\n    }\n\n    const date = new Date(dateStr);\n    const timestamp = date.getTime();\n\n    //Month had to be set to equal 0 to get the first month of the year.\n    const minDate = new Date(1990, 0, 1);\n\n    if (typeof timestamp !== 'number' || Number.isNaN(timestamp)) {\n        return intl.formatMessage(messages.labelsErrorInvalidDate);\n    }\n\n    if (date < minDate) {\n        return intl.formatMessage(messages.labelsErrorDateLimit);\n    }\n\n    return;\n};\n\nexport default dateValidator;\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { filterSelectedActiveSystemIDs } from '../../Utilities/Helpers';\nimport dateValidator from '../../Utilities/dateValidator';\n\nexport const reviewSystemColumns = [{\n    key: 'display_name',\n    title: 'Name',\n    props: {\n        width: 50\n    }\n},\n{\n    title: 'OS',\n    key: 'os',\n    props: {\n        width: 25\n    }\n},\n{\n    key: 'baseline_name',\n    title: 'Patch template',\n    props: {\n        width: 25\n    }\n}\n];\n\nexport const configurationFields = [\n    {\n        name: 'configurationStep',\n        component: 'configurationStep'\n    },\n    {\n        name: 'existing_patch_set',\n        component: componentTypes.TEXT_FIELD,\n        hidden: true\n    }\n];\n\nexport const nameComponent = [{\n    name: 'name',\n    component: 'nameField',\n    validate: [{ type: validatorTypes.REQUIRED }]\n}];\n\nexport const descriptionComponent = [{\n    name: 'description',\n    component: 'descriptionField'\n}];\n\nexport const toDateComponent = [{\n    name: 'toDate',\n    component: 'toDateField',\n    validate: [\n        { type: validatorTypes.REQUIRED },\n        { type: 'validate-date' }\n    ]\n}];\n\nexport const getWizardTitle = (wizardType) => {\n    let wizardTitle = '';\n\n    switch (wizardType) {\n        case 'assign':\n            wizardTitle = intl.formatMessage(messages.templateTitleAssignSystem);\n            break;\n        case 'edit':\n            wizardTitle = intl.formatMessage(messages.templateEdit);\n            break;\n        default:\n            wizardTitle = intl.formatMessage(messages.templateTitle);\n    }\n\n    return wizardTitle;\n};\n\nexport const schema = (wizardType) =>{\n    return ({\n        fields: [\n            {\n                component: componentTypes.WIZARD,\n                name: 'patch-set-wizard',\n                isDynamic: true,\n                inModal: true,\n                showTitles: true,\n                title: getWizardTitle(wizardType),\n                description: intl.formatMessage(messages.templateDescription),\n                fields: [\n                    {\n                        name: 'patch-set-config',\n                        title: intl.formatMessage(wizardType === 'edit' ? messages.templateEdit : messages.templateNew),\n                        fields: configurationFields,\n                        nextStep: 'systems'\n                    },\n                    {\n                        name: 'systems',\n                        title: intl.formatMessage(messages.templateSelectSystems),\n                        fields: [\n                            {\n                                name: 'systems',\n                                component: 'reviewSystems'\n                                //We can use this later in case UX wantes to prevent patch template s without zero systems\n                                //validate: [{ type: 'validate-systems' }]\n                            }\n                        ],\n                        nextStep: 'review'\n                    },\n                    {\n                        name: 'review',\n                        title: intl.formatMessage(messages.templateReview),\n                        fields: [\n                            {\n                                name: 'review',\n                                component: 'reviewPatchSet'\n                            }\n                        ]\n                    }\n\n                ]\n\n            }\n        ]\n    });\n};\n\nexport const validatorMapper = {\n    'validate-systems': () => (formValueSystems) => {\n        const systems = filterSelectedActiveSystemIDs(formValueSystems);\n\n        if (systems === undefined) {\n            return;\n        }\n        else if (systems.length > 0) {\n            return;\n        } else {\n            return intl.formatMessage(messages.templateNoSystemSelected);\n        }\n    },\n    'validate-date': () => dateValidator\n};\n\nexport const apiFailedNotification = (description) => ({\n    title: 'There was an error while processing your request',\n    description,\n    variant: 'danger'\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Grid, GridItem, Spinner } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { nameComponent, descriptionComponent, toDateComponent } from '../WizardAssets';\n\nconst  ConfigurationFields = ({ isLoading }) =>{\n    const { renderForm } = useFormApi();\n\n    return isLoading ? <Spinner size='md' /> : (\n        <Grid hasGutter>\n            <GridItem lg={12} md={12}>\n                {renderForm(nameComponent)}\n            </GridItem>\n            <GridItem lg={12} md={12}>\n                {renderForm(descriptionComponent)}\n            </GridItem>\n            <GridItem lg={6} md={6}>\n                {renderForm(toDateComponent)}\n            </GridItem>\n        </Grid>\n    );\n};\n\nConfigurationFields.propTypes = {\n    isLoading: propTypes.bool\n};\nexport default ConfigurationFields;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    Radio,\n    TextVariants\n} from '@patternfly/react-core';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\nimport SelectExistingSets from '../InputFields/SelectExistingSets';\nimport ConfigurationFields from '../InputFields/ConfigurationFields';\n\nimport { convertIsoToDate } from '../../../Utilities/Helpers';\n\nconst ConfigurationStepFields = ({ systemsIDs, patchSetID }) => {\n\n    const formOptions = useFormApi();\n    const shouldShowRadioButtons = (!patchSetID && systemsIDs?.length !== 0) || false;\n\n    const [shouldApplyExisting, setShouldApplyExisting] = useState(false);\n    const [shouldCreateNew, setShouldCreateNew] = useState(true);\n    const [selectedPatchSet, setSelectedPatchSet] = useState([]);\n\n    const { patchSet, status } = useSelector(({ SpecificPatchSetReducer }) => SpecificPatchSetReducer, shallowEqual);\n\n    const handleRadioChange = () => {\n        setShouldCreateNew(!shouldCreateNew);\n        setShouldApplyExisting(!shouldApplyExisting);\n    };\n\n    useEffect(() => {\n        if (patchSetID) {\n            const { name, description, config: { to_time: toDate } } = patchSet;\n\n            formOptions.change('name', name);\n            formOptions.change('description', description);\n            formOptions.change('toDate', convertIsoToDate(toDate));\n        }\n    }, [patchSet]);\n\n    return (\n        <Stack hasGutter>\n            {shouldShowRadioButtons && <TextContent style={{ marginTop: '-15px' }}>\n                <Text component={TextVariants.p}>\n                    {intl.formatMessage(\n                        messages.textTemplateSelectedSystems,\n                        { systemsCount: systemsIDs.length, b: (...chunks) => <b>{chunks}</b> }\n                    )}\n                </Text>\n            </TextContent>}\n            <StackItem>\n                <Stack hasGutter>\n                    {shouldShowRadioButtons && (<><StackItem>\n                        <Radio\n                            isChecked={shouldApplyExisting}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label={intl.formatMessage(messages.textTemplateAddToExisting)}\n                            id=\"existing-template\"\n                        />\n                    </StackItem>\n                    <StackItem>\n                        {shouldApplyExisting ? <SelectExistingSets\n                            setSelectedPatchSet={setSelectedPatchSet}\n                            selectedSets={selectedPatchSet}\n                            systems={systemsIDs}\n                        /> : null}\n                    </StackItem>\n                    <StackItem>\n                        <Radio\n                            isChecked={shouldCreateNew}\n                            name=\"radio\"\n                            onChange={handleRadioChange}\n                            label={intl.formatMessage(messages.textTemplateCreateNew)}\n                            id=\"new-template\"\n                        />\n                    </StackItem></>) || null}\n                    <StackItem>\n                        {shouldCreateNew ? <ConfigurationFields\n                            isLoading={patchSetID && status.isLoading}\n                        /> : null}\n                    </StackItem>\n                </Stack>\n            </StackItem>\n        </Stack>\n    );\n};\n\nConfigurationStepFields.propTypes = {\n    systemsIDs: propTypes.array,\n    patchSetID: propTypes.string\n};\nexport default ConfigurationStepFields;\n","import React, { useState, useEffect } from 'react';\nimport {\n    FormGroup,\n    TextInput\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst NameField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [name, setName] = useState(values?.name);\n\n    useEffect(() => {\n        setName(values.name);\n    }, [values.name]);\n\n    return (\n        <FormGroup fieldId=\"name\" label={intl.formatMessage(messages.labelsColumnsName)} isRequired>\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={name}\n                onChange={(val) => {\n                    input.onChange(val);\n                    setName(val);\n                }}\n                aria-label=\"name\"\n                autoFocus\n            />\n        </FormGroup>\n    );\n};\n\nexport default NameField;\n","import React, { useState, useEffect } from 'react';\nimport {\n    FormGroup,\n    DatePicker,\n    Flex,\n    FlexItem\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport dateValidator from '../../../Utilities/dateValidator';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst ToDateField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [toDate, setToDate] = useState(values?.toDate);\n\n    useEffect(() => {\n        setToDate(values.toDate);\n    }, [values.toDate]);\n\n    return (\n        <FormGroup fieldId=\"toDate\" label={intl.formatMessage(messages.templateDateField)} isRequired>\n            <Flex>\n                <FlexItem lg={2} md={2}>\n                    {intl.formatMessage(messages.templateDateUpto)}\n                </FlexItem>\n                <FlexItem lg={10} md={10}>\n                    <DatePicker\n                        value={toDate}\n                        onChange={(val) => {\n                            input.onChange(val);\n                            setToDate(val);\n                        }}\n                        popoverProps={{ position: 'right' }}\n                        aria-label=\"toDate\"\n                        validators={[dateValidator]}\n                        invalidFormatText={intl.formatMessage(messages.labelsErrorInvalidDate)}\n                    />\n                </FlexItem>\n            </Flex>\n        </FormGroup>\n    );\n};\n\nexport default ToDateField;\n","import React, { useState, useEffect } from 'react';\nimport { FormGroup, TextInput } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst DescriptionField = (props) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const values = formOptions.getState()?.values;\n\n    const [description, setDescription] = useState(values?.description);\n\n    useEffect(() => {\n        setDescription(values.description);\n    }, [values.description]);\n\n    return (\n        <FormGroup fieldId=\"description\" label={intl.formatMessage(messages.labelsDescription)}>\n            <TextInput\n                type=\"text\"\n                isRequired\n                value={description}\n                onChange={(val) => {\n                    input.onChange(val);\n                    setDescription(val);\n                }}\n                aria-label=\"description\"\n            />\n        </FormGroup>\n    );\n};\n\nexport default DescriptionField;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport searchFilter from '../../../PresentationalComponents/Filters/SearchFilter';\nimport { Text, TextContent, Stack, StackItem, TextVariants } from '@patternfly/react-core';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nimport { createSortBy, buildSelectedSystemsObj } from '../../../Utilities/Helpers';\nimport { createSystemsRowsReview } from '../../../Utilities/DataMappers';\nimport { usePerPageSelect, useSetPage, useSortColumn } from '../../../Utilities/Hooks';\nimport TableView from '../../../PresentationalComponents/TableView/TableView';\nimport staleFilter from '../../../PresentationalComponents/Filters/SystemStaleFilter';\nimport systemsUpdatableFilter from '../../../PresentationalComponents/Filters/SystemsUpdatableFilter';\nimport { fetchSystems } from '../../../Utilities/api';\nimport { reviewSystemColumns } from '../WizardAssets';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { systemsListDefaultFilters } from '../../../Utilities/constants';\nimport useOsVersionFilter from '../../../PresentationalComponents/Filters/OsVersionFilter';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../../Utilities/useOnSelect';\n\nexport const ReviewSystems = ({ systemsIDs = [], ...props }) => {\n    const { input } = useFieldApi(props);\n    const formOptions = useFormApi();\n    const { values } = formOptions.getState();\n    const defaultSelectedSystems = buildSelectedSystemsObj(systemsIDs, values?.systems);\n\n    const [isLoading, setLoading] = useState(true);\n    const [rawData, setRawData] = useState([]);\n    const [systems, setSystems] = useState([]);\n    const [selectedRows, setSelectedRows] = useState(defaultSelectedSystems);\n    const [metadata, setMetada] = useState({\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    });\n\n    const [queryParams, setQueryParams] = useState({\n        page: 1,\n        perPage: 20,\n        filter: {\n            stale: [true, false]\n        }\n    });\n\n    const { assignedSystems } = useSelector(({ SpecificPatchSetReducer }) => SpecificPatchSetReducer, shallowEqual);\n\n    useEffect(() => {\n        fetchSystems({\n            ...queryParams, filter: { ...queryParams.filter,\n                id: systemsIDs.length > 0 ? `in:${systemsIDs.join(',')}` : undefined }\n        }).then(result => {\n            setSystems(\n                createSystemsRowsReview(\n                    result.data,\n                    { ...buildSelectedSystemsObj([...assignedSystems, ...systemsIDs]), ...selectedRows }\n                )\n            );\n            setMetada(result.meta);\n            setRawData(result.data);\n            setLoading(false);\n        });\n    }, [queryParams.filter, queryParams]);\n\n    useEffect(() => {\n        input.onChange(selectedRows);\n\n        setSystems(\n            createSystemsRowsReview(rawData, selectedRows)\n        );\n    }, [selectedRows]);\n\n    useEffect(() => {\n        setSelectedRows({ ...selectedRows, ...buildSelectedSystemsObj(assignedSystems) });\n    }, [assignedSystems]);\n\n    const apply = (params) => {\n        setLoading(true);\n        setQueryParams((prevQueryParams) => ({\n            ...prevQueryParams,\n            ...params,\n            filter: { ...prevQueryParams.filter, ...params.filter }\n        }));\n    };\n\n    const osFilterConfig = useOsVersionFilter(queryParams.filter.os, apply);\n    const onSort = useSortColumn(reviewSystemColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(reviewSystemColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const selectRows = (toSelect) => {\n        const newSelections = toSelect.reduce((object, system) => {\n            object[system.id] = system.selected ? true : undefined;\n            return object;\n        }, {});\n\n        setSelectedRows({ ...selectedRows, ...newSelections });\n    };\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systems,\n            queryParams: {\n                ...queryParams,\n                filter: { ...queryParams.filter, ...systemsIDs.length > 0 && { id: `in:${systemsIDs.join(',')}` } }\n            },\n            customSelector: selectRows\n        }\n    );\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent style={{ marginTop: '-15px' }}>\n                    <Text component={TextVariants.p}>\n                        {intl.formatMessage(messages.textTemplateReviewSystems)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TableView\n                    columns={reviewSystemColumns}\n                    compact\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    selectedRows={selectedRows}\n                    onSelect={onSelect}\n                    sortBy={sortBy}\n                    apply={apply}\n                    tableOUIA={'patch-set-table'}\n                    paginationOUIA={'patch-set-pagination'}\n                    store={{ rows: systems, metadata, status: { isLoading }, queryParams }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                                intl.formatMessage(messages.labelsFiltersSearch)\n                            ),\n                            staleFilter(apply, queryParams.filter),\n                            systemsUpdatableFilter(apply, queryParams.filter),\n                            ...osFilterConfig\n                        ]\n                    }}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)}\n                    defaultFilters={systemsListDefaultFilters}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nReviewSystems.propTypes = {\n    systemsIDs: propTypes.array\n};\n\nexport default ReviewSystems;\n","import React, { Fragment } from 'react';\nimport {\n    Text,\n    TextContent,\n    Stack,\n    StackItem,\n    TextVariants,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst renderTextListItem = (label, text) => (\n    <Fragment>\n        <TextListItem component={TextListItemVariants.dt}>\n            {intl.formatMessage(messages[label])}:\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n            {text}\n        </TextListItem>\n    </Fragment>\n);\n\nconst ReviewPatchSet = () => {\n    const formOptions = useFormApi();\n    const { values } = formOptions.getState();\n    const { name, description, toDate } = values.existing_patch_set || values;\n    const { systems } = values;\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent style={{ marginTop: '-15px' }}>\n                    <Text component={TextVariants.p}>\n                        {intl.formatMessage(\n                            messages.textPatchTemplateReview,\n                            { b: (...chunks) => <b>{chunks}</b> })}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                <TextContent>\n                    <TextList component={TextListVariants.dl}>\n                        {renderTextListItem('labelsColumnsName', name)}\n                        {description && renderTextListItem('labelsDescription', description)}\n                        {toDate && renderTextListItem('labelsDate', toDate)}\n                        {renderTextListItem(\n                            'labelsSelectedSystems',\n                            systems && Object.values(systems).filter(system => system).length\n                        )}\n                    </TextList>\n                </TextContent>\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default ReviewPatchSet;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title,\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateIcon,\n    EmptyStateBody,\n    Grid,\n    GridItem,\n    HelperText,\n    HelperTextItem,\n    Button\n} from '@patternfly/react-core';\nimport {\n    CheckCircleIcon,\n    ExclamationCircleIcon,\n    InProgressIcon\n} from '@patternfly/react-icons';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { apiFailedNotification } from '../WizardAssets';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst RequestProgress = ({ onClose, state }) => {\n    const { requestPending, failed, error } = state;\n    const dispatch = useDispatch();\n\n    if (failed) {\n        dispatch(\n            addNotification(\n                apiFailedNotification(error.detail)\n            )\n        );\n    }\n\n    return (\n        <EmptyState\n            variant={EmptyStateVariant.large}\n            data-component-ouia-id=\"patch-set-progress\"\n        >\n            <EmptyStateIcon\n                color={\n                    failed\n                        ? 'var(--pf-global--danger-color--100)'\n                        : !requestPending\n                            ? 'var(--pf-global--success-color--100)'\n                            : undefined\n                }\n                icon={\n                    failed\n                        ? ExclamationCircleIcon\n                        : requestPending\n                            ? InProgressIcon\n                            : CheckCircleIcon\n                }\n            />\n            <Title headingLevel=\"h1\" size=\"lg\">\n                {failed\n                    ? intl.formatMessage(messages.textErrorSomethingWrong)\n                    : requestPending\n                        ? intl.formatMessage(messages.textConfigurationInProgress)\n                        : intl.formatMessage(messages.textPatchTemplateSuccessfuly)}\n            </Title>\n            <EmptyStateBody>\n                <Grid hasGutter>\n                    {(requestPending) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    {intl.formatMessage(messages.textPatchTemplatePending)}\n                                </HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"link\" isInline onClick={onClose}>\n                                {intl.formatMessage(messages.labelsCancel)}\n                            </Button>{' '}\n                        </GridItem></>\n                    )}\n                    {(!requestPending && !failed) && (\n                        <GridItem>\n                            <Button variant=\"primary\" onClick={onClose}>\n                                {intl.formatMessage(messages.textReturnToApp)}\n                            </Button>\n                        </GridItem>\n                    )}\n                    {(!requestPending && failed) && (\n                        <><GridItem>\n                            <HelperText>\n                                <HelperTextItem variant=\"indeterminate\">\n                                    {intl.formatMessage(\n                                        messages.templateError,\n                                        { a: (chunks) => <a href=\"https://www.redhat.com/en/services/support\">{chunks}</a> })}\n                                </HelperTextItem>\n                            </HelperText>\n                        </GridItem><GridItem>\n                            <Button variant=\"primary\" onClick={onClose}>\n                                {intl.formatMessage(messages.textReturnToApp)}\n                            </Button>\n                        </GridItem></>\n                    )}\n                </Grid>\n\n            </EmptyStateBody>\n        </EmptyState>\n    );\n};\n\nRequestProgress.propTypes = {\n    onClose: propTypes.func,\n    state: propTypes.object\n};\n\nexport default RequestProgress;\n","\nimport React, { Fragment, useState, memo, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport DatePicker from '@data-driven-forms/pf4-component-mapper/date-picker';\nimport { Modal, Wizard } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\n\nimport ConfigurationStepFields from './steps/ConfigurationStepFields';\nimport NameField from './InputFields/NameField';\nimport ToDateField from './InputFields/ToDateField';\nimport DescriptionField from './InputFields/DescriptionField';\nimport ReviewSystems from './steps/ReviewSystems';\nimport ReviewPatchSet from './steps/ReviewPatchSet';\nimport { schema, validatorMapper, getWizardTitle } from './WizardAssets';\nimport RequestProgress from './steps/RequestProgress';\nimport { usePatchSetApi } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { fetchPatchSetAction, clearPatchSetAction, fetchPatchSetSystemsAction } from '../../store/Actions/Actions';\n\nexport const PatchSetWizard = ({ systemsIDs, setBaselineState, patchSetID }) => {\n    //if system ids exist, those are being assigned. Likewise if patchSetID exists, it is being edited\n    const wizardType = systemsIDs ? 'assign' : (patchSetID ? 'edit' : 'create');\n    const [wizardState, setWizardState] = useState({\n        submitted: false,\n        formValues: {},\n        requestPending: true,\n        failed: false,\n        shouldRefresh: false\n    });\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (patchSetID) {\n            dispatch(fetchPatchSetAction(patchSetID));\n            dispatch(fetchPatchSetSystemsAction(patchSetID, { limit: -1 }));\n        }\n\n        return () => dispatch(clearPatchSetAction());\n    }, []);\n\n    const onSubmit = usePatchSetApi(wizardState, setWizardState, patchSetID);\n\n    const handleWizardClose = () => {\n        const shouldRefresh = !wizardState.failed && wizardState.submitted;\n\n        setBaselineState({ isPatchSetWizardOpen: false, systemsIDs: [], patchSetID: undefined, shouldRefresh });\n        setWizardState({ formValues: {}, submitted: false });\n    };\n\n    const mapperExtensions = {\n        nameField: {\n            component: NameField\n        },\n        descriptionField: {\n            component: DescriptionField\n        },\n        toDateField: {\n            component: ToDateField\n        },\n        configurationStep: {\n            component: ConfigurationStepFields,\n            systemsIDs: systemsIDs || [],\n            patchSetID\n        },\n        reviewSystems: {\n            component: ReviewSystems,\n            systemsIDs: systemsIDs || []\n        },\n        reviewPatchSet: {\n            component: ReviewPatchSet,\n            systemsIDs: systemsIDs || []\n        }\n    };\n\n    return (\n        <Fragment>\n            {!wizardState.submitted &&  (\n                <FormRenderer\n                    schema={schema(wizardType)}\n                    subscription={{ values: true }}\n                    FormTemplate={(props) => (\n                        <Pf4FormTemplate {...props} showFormControls={false} />\n                    )}\n                    componentMapper={{\n                        [componentTypes.WIZARD]: {\n                            component: WizardMapper,\n                            className: 'patch-set',\n                            'data-ouia-component-id': 'patch-set-wizard'\n                        },\n                        [componentTypes.TEXT_FIELD]: TextField,\n                        [componentTypes.DATE_PICKER]: DatePicker,\n                        ...mapperExtensions\n                    }}\n                    validatorMapper={validatorMapper}\n                    onSubmit={onSubmit}\n                    onCancel={handleWizardClose} />\n            ) || (\n                <Modal\n                    isOpen\n                    variant={'large'}\n                    showClose={false}\n                    className=\"patch-set\"\n                    hasNoBodyWrapper\n                    aria-describedby=\"patch-set-description\"\n                    aria-labelledby=\"patch-set-modal-title\"\n                >\n                    <Wizard\n                        className=\"patch-set\"\n                        title={getWizardTitle(wizardType)}\n                        description={intl.formatMessage(messages.templateDescription)}\n                        steps={[\n                            {\n                                name: 'progress',\n                                component: (\n                                    <RequestProgress\n                                        onClose={handleWizardClose}\n                                        state={wizardState}\n                                    />\n                                ),\n                                isFinishedStep: true\n                            }\n                        ]}\n                        onClose={handleWizardClose}\n                    />\n                </Modal>\n            )}\n        </Fragment>\n    );\n};\n\nPatchSetWizard.propTypes = {\n    setBaselineState: propTypes.func,\n    systemsIDs: propTypes.array,\n    patchSetID: propTypes.string\n};\n\nexport default memo(PatchSetWizard, (prevProps, nextProps) => {\n    return JSON.stringify(prevProps) === JSON.stringify(nextProps);\n});\n","import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchIDs } from './api';\nimport { toggleAllSelectedAction } from '../store/Actions/Actions';\nimport { isObject } from './Helpers';\n\nexport const ID_API_ENDPOINTS = {\n    advisories: '/ids/advisories',\n    systems: '/ids/systems',\n    templates: '/baselines',\n    advisorySystems: (advisoryID) => `/ids/advisories/${advisoryID}/systems`,\n    systemAdvisories: (systemID) => `/ids/systems/${systemID}/advisories`,\n    packageSystems: (packageName) => `/packages/${packageName}/systems`,\n    systemPackages: (systemID) => `/systems/${systemID}/packages`\n};\n\nconst useFetchAllIDs = (\n    endpoint,\n    apiResponseTransformer\n) =>\n    useCallback((queryParams) =>\n        fetchIDs(endpoint, { ...queryParams, limit: -1 })\n        .then(response =>\n            apiResponseTransformer ? apiResponseTransformer(response) : response\n        ),\n    []\n    );\n\nconst useCreateSelectedRow = (transformKey, constructFilename) =>\n    useCallback((rows, toSelect = []) => {\n        const { ids, data } = rows;\n        const shouldUseOnlyIDs = Array.isArray(ids);\n        const items = shouldUseOnlyIDs ? ids : data;\n\n        items.forEach((item) => {\n            const id = shouldUseOnlyIDs ? item : item.id;\n\n            //expanded rows does not have ID and should be disabled for selection\n            if (!(isObject(item) && item.isExpandedRow)) {\n                toSelect.push(\n                    {\n                        id: transformKey ? transformKey(item) : id,\n                        selected: constructFilename ? constructFilename(item) : id\n                    }\n                );\n            }\n        });\n\n        return toSelect;\n    });\n\nconst createSelectors = (\n    createSelectedRow,\n    dispatchSelection,\n    toggleAllSystemsSelected\n) => {\n    const selectNone = (rows) => {\n        const toSelect = [];\n        Object.keys(rows).forEach(id => {\n            toSelect.push(\n                {\n                    id,\n                    selected: false\n                }\n            );\n        });\n\n        dispatchSelection(toSelect);\n        toggleAllSystemsSelected(false);\n    };\n\n    const selectPage = (pageRows) => {\n        if (Array.isArray(pageRows)) {\n            pageRows = pageRows.filter(row => !row.disableCheckbox);\n        }\n\n        dispatchSelection(createSelectedRow({ data: pageRows }));\n    };\n\n    const selectAll = (fetchIDs, queryParams) => {\n        return fetchIDs(queryParams).then(response => {\n            dispatchSelection(createSelectedRow(response));\n            toggleAllSystemsSelected(true);\n        });\n    };\n\n    return { selectNone, selectPage, selectAll };\n};\n\nexport const useOnSelect = (rawData, selectedRows, config) => {\n    const {\n        endpoint,\n        queryParams,\n        selectionDispatcher,\n        constructFilename,\n        transformKey,\n        apiResponseTransformer,\n        //TODO: get rid of this custom selector\n        customSelector\n    } = config;\n\n    const dispatch = useDispatch();\n    const fetchIDs = useFetchAllIDs(endpoint, apiResponseTransformer);\n    const createSelectedRow = useCreateSelectedRow(transformKey, constructFilename);\n\n    const toggleAllSystemsSelected = (flagState) => {\n        dispatch(toggleAllSelectedAction(flagState));\n    };\n\n    const dispatchSelection = (toSelect) => {\n        console.log(toSelect, 'toSelect');\n        if (customSelector) {\n            customSelector(toSelect);\n        } else {\n            dispatch(selectionDispatcher(toSelect));\n        }\n    };\n\n    const { selectNone, selectPage, selectAll } = createSelectors(\n        createSelectedRow,\n        dispatchSelection,\n        toggleAllSystemsSelected\n    );\n\n    const onSelect = useCallback(\n        async (event, selected, rowId, setBulkLoading = () => {}) => {\n            switch (event) {\n                case 'none': {\n                    selectNone(selectedRows);\n                    break;\n                }\n\n                case 'page': {\n                    selectPage(rawData);\n                    break;\n                }\n\n                case 'all': {\n                    selectAll(fetchIDs, queryParams)\n                    .then(() => setBulkLoading(false));\n                    break;\n                }\n\n                default: {\n                    dispatchSelection([{\n                        id: transformKey ? transformKey(rawData[rowId]) : rawData[rowId].id,\n                        selected: selected && (constructFilename ? constructFilename(rawData[rowId]) : true)\n                    }]);\n                }\n            }\n        });\n\n    return onSelect;\n};\n","import { useState } from 'react';\nimport {\n    filterSelectedActiveSystemIDs\n} from './Helpers';\n\n/**\n* Manages unified state for patch set wizard and unassign modal.\n* @param {Object} [selectedRows] selected rows object to be removed.\n* @returns {patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal}\n*/\nconst usePatchSetState = (selectedRows) => {\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const openPatchSetAssignWizard = (systemID) => {\n        setPatchSetState({\n            isPatchSetWizardOpen: true,\n            systemsIDs: typeof systemID === 'string' && systemID !== ''\n                ? [systemID]\n                : filterSelectedActiveSystemIDs(selectedRows),\n            shouldRefresh: false\n        }\n        );\n    };\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openPatchSetEditModal = (patchSetID) => {\n        setPatchSetState({ isPatchSetWizardOpen: true, patchSetID });\n    };\n\n    return { patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal };\n};\n\nexport default usePatchSetState;\n"],"names":["currentFilter","apply","versions","useSelector","entities","operatingSystems","versionsLoaded","operatingSystemsLoaded","useState","setOperatingSystems","useLoadModule","appName","scope","module","toGroupSelectionValue","buildOSFilterConfig","useEffect","undefined","getOperatingSystems","then","results","map","entry","value","name","major","minor","versionStringified","label","osVersionValue","split","version","substring","id","onChange","event","Object","values","flatMap","keys","toString","filter","os","HeaderBreadcrumbs","items","headerOUIA","Breadcrumb","Boolean","item","BreadcrumbItem","key","title","isActive","to","Link","propTypes","PropTypes","HeaderTabs","history","Tabs","onSelect","tabString","push","activeKey","location","pathname","className","Tab","eventKey","withRouter","Header","showTabs","breadcrumbs","children","PageHeader","PageHeaderTitle","SystemUpToDate","style","paddingTop","icon","size","color","marginBottom","Title","headingLevel","intl","messages","TableFooter","isLoading","page","perPage","onSetPage","totalItems","onPerPageSelect","paginationOUIA","Skeleton","fontSize","width","margin","Pagination","itemCount","widgetId","variant","PaginationVariant","ouiaId","isDisabled","TableView","columns","store","rows","metadata","status","queryParams","search","onCollapse","onSort","onExport","filterConfig","sortBy","remediationProvider","selectedRows","compact","tableOUIA","errorState","emptyState","defaultFilters","searchChipLabel","CreatePatchSetButton","actionsConfig","isRemediationLoading","actionsToggle","React","convertLimitOffset","limit","offset","useRemoveFilter","deleteFilters","selectedCount","arrayFromObj","length","code","hasError","bulkSelectConfig","useBulkSelectConfig","has_systems","ErrorHandler","ErrorState","EmptyState","PrimaryToolbar","pagination","total_items","isCompact","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","actions","AsyncRemediationButton","isSelected","exportConfig","bulkSelect","ToolbarItem","SkeletonTable","colSize","rowSize","TableVariant","Table","cells","canSelectAll","isStickyHeader","TableHeader","TableBody","SelectPagination","changePage","Flex","justifyContent","default","FlexItem","Button","onClick","SelectExistingSets","setSelectedPatchSet","selectedSets","systems","dispatch","useDispatch","formOptions","useFormApi","isOpen","setOpen","PatchSetsStore","clearPatchSetsAction","searchDependency","fetchPatchSetsAction","patchOptions","useMemo","SelectOption","Spinner","set","debounce","params","changePatchSetsParams","searchAdvisory","FormGroup","fieldId","isRequired","Select","SelectVariant","_","selected","selectedSet","change","placeholderText","inlineFilterPlaceholderText","selections","onToggle","onFilter","props","searchValue","hasInlineFilter","footer","dateStr","match","date","Date","timestamp","getTime","minDate","Number","isNaN","reviewSystemColumns","configurationFields","component","componentTypes","hidden","nameComponent","validate","type","validatorTypes","descriptionComponent","toDateComponent","getWizardTitle","wizardType","wizardTitle","schema","fields","isDynamic","inModal","showTitles","description","nextStep","validatorMapper","formValueSystems","filterSelectedActiveSystemIDs","dateValidator","ConfigurationFields","renderForm","Grid","hasGutter","GridItem","lg","md","ConfigurationStepFields","systemsIDs","patchSetID","shouldShowRadioButtons","shouldApplyExisting","setShouldApplyExisting","shouldCreateNew","setShouldCreateNew","selectedPatchSet","SpecificPatchSetReducer","shallowEqual","patchSet","handleRadioChange","toDate","config","to_time","convertIsoToDate","Stack","TextContent","marginTop","Text","TextVariants","systemsCount","b","chunks","StackItem","Radio","isChecked","input","useFieldApi","getState","setName","TextInput","val","autoFocus","setToDate","DatePicker","popoverProps","position","validators","invalidFormatText","setDescription","ReviewSystems","defaultSelectedSystems","buildSelectedSystemsObj","setLoading","rawData","setRawData","setSystems","setSelectedRows","setMetada","stale","setQueryParams","assignedSystems","fetchSystems","join","result","createSystemsRowsReview","data","meta","prevQueryParams","osFilterConfig","useOsVersionFilter","useSortColumn","createSortBy","sort","useSetPage","usePerPageSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","customSelector","toSelect","newSelections","reduce","object","system","searchFilter","staleFilter","systemsUpdatableFilter","systemsListDefaultFilters","renderTextListItem","text","Fragment","TextListItem","TextListItemVariants","existing_patch_set","TextList","TextListVariants","RequestProgress","onClose","state","requestPending","failed","error","addNotification","detail","EmptyStateVariant","EmptyStateIcon","ExclamationCircleIcon","InProgressIcon","CheckCircleIcon","EmptyStateBody","HelperText","HelperTextItem","isInline","a","href","PatchSetWizard","setBaselineState","submitted","formValues","shouldRefresh","wizardState","setWizardState","fetchPatchSetAction","fetchPatchSetSystemsAction","clearPatchSetAction","onSubmit","usePatchSetApi","handleWizardClose","isPatchSetWizardOpen","mapperExtensions","nameField","NameField","descriptionField","DescriptionField","toDateField","ToDateField","configurationStep","reviewSystems","reviewPatchSet","ReviewPatchSet","subscription","FormTemplate","showFormControls","componentMapper","WizardMapper","TextField","onCancel","Modal","showClose","hasNoBodyWrapper","Wizard","steps","isFinishedStep","memo","prevProps","nextProps","JSON","stringify","advisories","templates","advisorySystems","advisoryID","systemAdvisories","systemID","packageSystems","packageName","systemPackages","selectionDispatcher","constructFilename","transformKey","apiResponseTransformer","fetchIDs","useCallback","response","useFetchAllIDs","createSelectedRow","ids","shouldUseOnlyIDs","Array","isArray","forEach","isObject","isExpandedRow","useCreateSelectedRow","dispatchSelection","console","log","toggleAllSystemsSelected","selectNone","selectPage","pageRows","row","disableCheckbox","selectAll","createSelectors","flagState","toggleAllSelectedAction","rowId","setBulkLoading","isUnassignSystemsModalOpen","patchSetState","setPatchSetState","openPatchSetAssignWizard","openUnassignSystemsModal","openPatchSetEditModal"],"sourceRoot":""}