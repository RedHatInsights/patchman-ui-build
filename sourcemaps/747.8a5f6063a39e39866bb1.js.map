{"version":3,"sources":["webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"names":["initialState","rows","entities","selectedRows","page","perPage","queryParams","sort","metadata","limit","offset","total_items","modifyInventory","columns","state","loaded","lastSeenColumn","filter","key","createSystemsRows","modifyPackageSystems","createPackageSystemsRows","inventoryEntitiesReducer","inventoryModifier","action","newState","type","ActionTypes","changeFilters","selectRows"],"mappings":"y3BAMO,IAAMA,EAAe,CACxBC,KAAM,GACNC,SAAU,GACVC,aAAc,GACdC,KAAM,EACNC,QAAS,GACTC,YAAa,CACTC,KAAM,gBAEVC,SAAU,CACNC,MAAO,GACPC,OAAQ,EACRC,YAAa,IAKRC,EAAkB,SAACC,EAASC,GACrC,GAAIA,EAAMC,OAAQ,CACd,IAAIC,EAAiBF,EAAMD,QAAQI,QAAO,kBAAqB,YAArB,EAAGC,OAG7C,OAFAF,EAAiB,CAAC,EAAD,KAAMA,EAAe,IAArB,IAAyBE,IAAK,iBAE/C,OACOJ,GADP,IAEID,QAAS,GAAF,eACAA,GAAW,KADX,OAEAG,GAAkB,KAEzBf,MAAMkB,QAAkBL,EAAMb,KAAMa,EAAMX,gBAIlD,OAAOW,GAGEM,EAAuB,SAACP,EAASC,GAC1C,OAAIA,EAAMC,OACN,OACOD,GADP,IAEID,UACAZ,MAAMoB,QAAyBP,EAAMb,KAAMa,EAAMX,gBAIlDW,GAGEQ,EAA2B,SAACT,EAASU,GAAV,OAAgC,WAAkC,IAAjCT,EAAiC,uDAAzBd,EAAcwB,EAAW,uCAClGC,EAAW,EAAH,GAAQX,GACpB,OAAQU,EAAOE,MACX,IAAK,0BACD,OAAOH,EAAkBV,EAASC,GAEtC,KAAKa,KACD,OAAOC,QAAcH,EAAUD,GAEnC,IAAK,gBACD,OAAOK,QAAWJ,EAAUD,GAEhC,KAAKG,KACD,OAAOC,QAAcH,EAAUD,GAEnC,IAAK,iBACD,OAAOxB,EAEX,QACI,OAAOc","file":"js/747.c1dbe320d6312562e582.js","sourcesContent":["import * as ActionTypes from '../ActionTypes';\nimport { changeFilters, selectRows } from './HelperReducers';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\n\n// Initial State\nexport const initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: [],\n    page: 1,\n    perPage: 20,\n    queryParams: {\n        sort: '-last_upload'\n    },\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], key: 'last_upload' }];\n\n        return {\n            ...state,\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ],\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, state);\n\n        case ActionTypes.CHANGE_ENTITIES_PARAMS:\n            return changeFilters(newState, action);\n\n        case 'SELECT_ENTITY':\n            return selectRows(newState, action);\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        case 'CLEAR_ENTITIES':\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"sourceRoot":""}