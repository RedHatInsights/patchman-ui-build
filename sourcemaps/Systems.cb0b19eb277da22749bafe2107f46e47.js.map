{"version":3,"file":"js/Systems.1649881894742.23162797b33f181146cb.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/Card.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/CardBody.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/CardTitle.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Skeleton/Skeleton.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/package-icon.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js","webpack:///./src/PresentationalComponents/Filters/SystemStaleFilter.js","webpack:///./src/PresentationalComponents/Filters/SystemsUpdatableFilter.js","webpack:///./src/PresentationalComponents/StatusReports/SystemsStatusReport.js","webpack:///./src/SmartComponents/Remediation/PatchRemediationButton.js","webpack:///./src/SmartComponents/Systems/Systems.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Card = exports.CardContext = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst helpers_1 = require(\"../../helpers\");\nexports.CardContext = React.createContext({\n    cardId: '',\n    isExpanded: false\n});\nconst Card = (_a) => {\n    var { children = null, id = '', className = '', component = 'article', isHoverable = false, isCompact = false, isSelectable = false, isSelectableRaised = false, isSelected = false, isDisabledRaised = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true } = _a, props = tslib_1.__rest(_a, [\"children\", \"id\", \"className\", \"component\", \"isHoverable\", \"isCompact\", \"isSelectable\", \"isSelectableRaised\", \"isSelected\", \"isDisabledRaised\", \"isFlat\", \"isExpanded\", \"isRounded\", \"isLarge\", \"isFullHeight\", \"isPlain\", \"ouiaId\", \"ouiaSafe\"]);\n    const Component = component;\n    const ouiaProps = helpers_1.useOUIAProps(exports.Card.displayName, ouiaId, ouiaSafe);\n    if (isCompact && isLarge) {\n        // eslint-disable-next-line no-console\n        console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n        isLarge = false;\n    }\n    const getSelectableModifiers = () => {\n        if (isDisabledRaised) {\n            return react_styles_1.css(card_1.default.modifiers.nonSelectableRaised);\n        }\n        if (isSelectableRaised) {\n            return react_styles_1.css(card_1.default.modifiers.selectableRaised, isSelected && card_1.default.modifiers.selectedRaised);\n        }\n        if (isSelectable || isHoverable) {\n            return react_styles_1.css(card_1.default.modifiers.selectable, isSelected && card_1.default.modifiers.selected);\n        }\n        return '';\n    };\n    return (React.createElement(exports.CardContext.Provider, { value: {\n            cardId: id,\n            isExpanded\n        } },\n        React.createElement(Component, Object.assign({ id: id, className: react_styles_1.css(card_1.default.card, isCompact && card_1.default.modifiers.compact, isExpanded && card_1.default.modifiers.expanded, isFlat && card_1.default.modifiers.flat, isRounded && card_1.default.modifiers.rounded, isLarge && card_1.default.modifiers.displayLg, isFullHeight && card_1.default.modifiers.fullHeight, isPlain && card_1.default.modifiers.plain, getSelectableModifiers(), className), tabIndex: isSelectable || isSelectableRaised ? '0' : undefined }, props, ouiaProps), children)));\n};\nexports.Card = Card;\nexports.Card.displayName = 'Card';\n//# sourceMappingURL=Card.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CardBody = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst CardBody = (_a) => {\n    var { children = null, className = '', component = 'div', isFilled = true } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\", \"isFilled\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(card_1.default.cardBody, !isFilled && card_1.default.modifiers.noFill, className) }, props), children));\n};\nexports.CardBody = CardBody;\nexports.CardBody.displayName = 'CardBody';\n//# sourceMappingURL=CardBody.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CardTitle = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst CardTitle = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(card_1.default.cardTitle, className) }, props), children));\n};\nexports.CardTitle = CardTitle;\nexports.CardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Skeleton = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst skeleton_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Skeleton/skeleton\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst Skeleton = (_a) => {\n    var { className, width, height, fontSize, shape, screenreaderText } = _a, props = tslib_1.__rest(_a, [\"className\", \"width\", \"height\", \"fontSize\", \"shape\", \"screenreaderText\"]);\n    const fontHeightClassName = fontSize\n        ? Object.values(skeleton_1.default.modifiers).find(key => key === `pf-m-text-${fontSize}`)\n        : undefined;\n    return (React.createElement(\"div\", Object.assign({}, props, { className: react_styles_1.css(skeleton_1.default.skeleton, fontSize && fontHeightClassName, shape === 'circle' && skeleton_1.default.modifiers.circle, shape === 'square' && skeleton_1.default.modifiers.square, className) }, ((width || height) && {\n        style: Object.assign({ '--pf-c-skeleton--Width': width ? width : undefined, '--pf-c-skeleton--Height': height ? height : undefined }, props.style)\n    })),\n        React.createElement(\"span\", { className: \"pf-u-screen-reader\" }, screenreaderText)));\n};\nexports.Skeleton = Skeleton;\nexports.Skeleton.displayName = 'Skeleton';\n//# sourceMappingURL=Skeleton.js.map","\"use strict\"\nexports.__esModule = true;\nexports.PackageIconConfig = {\n  name: 'PackageIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M567.7,1010.49707 L951.5,818.498238 C994.7,796.698371 1024,752.39864 1024,703.998934 L1024,320.001265 C1024,271.601559 995.6,227.10183 952.2,205.501961 L568.6,13.5031267 C550.8,4.60318072 531.4,0.103208049 512,-0.00152855358 C492.3,-0.0967907365 472.5,4.40318194 454.4,13.5031267 L70.8,205.501961 C27.4,227.10183 0,271.50156 0,319.801267 L0.9,703.998934 C0.9,752.39864 28.3,796.79837 71.6,818.398239 L455.2,1010.39707 C464.3,1014.89705 488.1,1023.99699 511.9,1023.99699 C535.5,1023.99699 558.8,1014.99704 567.7,1010.49707 Z M512.5,630.899377 L672.5,550.899863 L672.5,645.29929 L736.5,613.299484 L736.5,518.900058 L896,438.900543 L896.5,712.698881 L512.5,904.697715 L512.5,630.899377 Z M145.1,304.101362 L294.9,228.60182 C295.3,228.801819 295.6,229.001818 296,229.201817 L661.9,412.300705 L512.5,487.600248 L145.1,304.101362 Z M512.5,118.902487 L881.3,301.701377 L733.1,376.400923 L366,192.702038 L512.5,118.902487 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PackageIcon = require('../createIcon').createIcon(exports.PackageIconConfig);\nexports[\"default\"] = exports.PackageIcon;","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { staleSystems } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsStaleFilter = (apply, currentFilter = {}) => {\n\n    let { stale: currentValue } = currentFilter;\n\n    const staleMap = React.useMemo(\n        () =>\n            staleSystems.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n\n    const currentValueStringType = (\n        currentValue\n            && (\n                Array.isArray(currentValue)\n                    && currentValue.map(value => value.toString())\n                    || [currentValue.toString()]\n            )\n    );\n\n    const filterByStale = value => {\n        apply({ filter: { stale: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStale),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStale(value);\n            },\n            items: staleMap,\n            value: currentValueStringType,\n            placeholder: intl.formatMessage(messages.labelsFiltersStalePlaceholder)\n        }\n    };\n};\n\nexport default systemsStaleFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { packagesListUpdatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst systemsUpdatableFilter = (apply, currentFilter = {}) => {\n\n    let { packages_updatable: currentValue } = currentFilter;\n\n    const filterByUpdatableSystems = value => {\n        apply({ filter: { packages_updatable: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersUpdatable),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByUpdatableSystems(value);\n            },\n            items: packagesListUpdatableTypes,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersUpdatablePlaceholder)\n        }\n    };\n};\n\nexport default systemsUpdatableFilter;\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { CheckCircleIcon, PackageIcon, ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport {\n    CardTitle, Button, Skeleton,\n    Card, Grid, GridItem, CardBody, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { fetchSystems } from '../../Utilities/api';\n\nconst StatusCard = ({ title, color, Icon, value, filter, apply }) => {\n    return (\n        <Card isCompact isFullHeight>\n            <CardTitle style={{ marginTop: '0px' }}>{title}</CardTitle>\n            <CardBody className='fonst-size-sm'>\n                <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                    <FlexItem\n                        spacer={{ default: 'spacerMd' }}\n                        alignSelf={{ default: 'alignSelfCenter' }}\n                    >\n                        <Icon color={color} size='md'/>\n                    </FlexItem>\n                    <FlexItem isFilled spacer={{ default: 'spacerNone' }}>\n                        {\n                            typeof(value) === 'undefined'\n                            &&  <Skeleton width=\"24px\" />\n                                    ||  <Button\n                                        variant=\"link\"\n                                        onClick={() => apply(filter)}\n                                        className='patch-status-report-text'>\n                                        {value}\n                                    </Button>\n                        }\n                    </FlexItem>\n                </Flex>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst SystemsStatusreport = ({ apply, queryParams }) => {\n    const [subtotals, setSubtotals] = React.useState({});\n\n    const { selectedTags, selectedGlobalTags, systemProfile } = useSelector(({ GlobalFilterStore }) => GlobalFilterStore);\n\n    const res = useMemo(async () =>{\n        setSubtotals({});\n\n        let result;\n\n        try {\n            result = await fetchSystems({ filter: {\n                os: queryParams?.filter?.os\n            },\n            selectedTags: [...selectedTags, ...selectedGlobalTags],\n            systemProfile,\n            limit: 1\n            });\n        }\n        catch {\n            result = [];\n        }\n\n        return result;\n    }, [\n        queryParams?.filter?.os?.length, queryParams?.filter?.os !== undefined,\n        selectedTags?.length, selectedTags !== undefined,\n        selectedGlobalTags?.length, selectedGlobalTags !== undefined,\n        systemProfile,\n        queryParams?.subtotals !== undefined\n    ]);\n\n    res.then((result)=> {\n        setSubtotals(result.meta?.subtotals);\n    });\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Grid hasGutter span={12} >\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsUpToDate)}\n                        Icon={CheckCircleIcon}\n                        color={'var(--pf-global--success-color--100)'}\n                        value={subtotals?.patched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'eq:0' } }}\n                    />\n                </GridItem>\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusSystemsWithPatchesAvailable)}\n                        Icon={PackageIcon}\n                        color={'var(--pf-global--primary-color--100)'}\n                        value={subtotals?.unpatched}\n                        apply={apply}\n                        filter={{ filter: { packages_updatable: 'gt:0' } }}\n                    />\n                </GridItem>\n                <GridItem span={12} md={3}>\n                    <StatusCard\n                        title={intl.formatMessage(messages.labelsStatusStaleSystems)}\n                        Icon={ExclamationTriangleIcon}\n                        color={'var(--pf-global--warning-color--100)'}\n                        value={subtotals?.stale}\n                        apply={apply}\n                        filter={{ filter: { stale: true } }}\n                    />\n                </GridItem>\n            </Grid>\n        </Main>\n    );\n};\n\nStatusCard.propTypes = {\n    title: propTypes.string,\n    Icon: propTypes.elementType,\n    value: propTypes.string,\n    color: propTypes.string,\n    apply: propTypes.func,\n    filter: propTypes.object\n};\n\nSystemsStatusreport.propTypes = {\n    apply: propTypes.func,\n    queryParams: propTypes.object\n};\n\nexport default SystemsStatusreport;\n","import { Button } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst PatchRemediationButton = ({ onClick, isDisabled, isLoading, ouia, children }) => {\n    return (\n        <Button\n            isDisabled={isDisabled}\n            onClick={onClick}\n            ouiaId={ouia}\n            variant=\"primary\"\n            isLoading={isLoading}\n        >\n            {children}\n        </Button>\n    );\n};\n\nPatchRemediationButton.propTypes = {\n    onClick: propTypes.object,\n    isDisabled: propTypes.bool,\n    isLoading: propTypes.bool,\n    ouia: propTypes.string,\n    children: propTypes.element\n};\n\nexport default PatchRemediationButton;\n","import React, { useEffect } from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Button } from '@patternfly/react-core';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport staleFilter from '../../PresentationalComponents/Filters/SystemStaleFilter';\nimport osVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport systemsUpdatableFilter from '../../PresentationalComponents/Filters/SystemsUpdatableFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changeSystemsParams, clearInventoryReducer, changeSystemsMetadata, changeTags } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchApplicableAdvisoriesApi,\n    fetchSystems, fetchViewAdvisoriesSystems\n} from '../../Utilities/api';\nimport { remediationIdentifiers, systemsListDefaultFilters, featureFlags } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips,\n    decodeQueryparams, filterRemediatableSystems, persistantParams, remediationProviderWithPairs, removeUndefinedObjectKeys,\n    transformPairs, systemsColumnsMerger\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useBulkSelectConfig, useGetEntities, useOnExport,\n    useOnSelect, useRemoveFilter, useFeatureFlag\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\nimport SystemsStatusReport from '../../PresentationalComponents/StatusReports/SystemsStatusReport';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport PatchRemediationButton from '../Remediation/PatchRemediationButton';\n\nconst Systems = () => {\n    const pageTitle = intl.formatMessage(messages.titlesSystems);\n\n    setPageTitle(pageTitle);\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [isRemediationOpen, setRemediationOpen] = React.useState(false);\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const [patchSetState, setBaselineState] = React.useState({\n        isOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const isPatchSetEnabled = useFeatureFlag(featureFlags.patch_set);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => dispatch(clearInventoryReducer());\n    }, []);\n\n    async function showRemediationModal(data) {\n        setRemediationLoading(true);\n        const resolvedData = await data;\n        setRemediationModalCmp(() =>\n            () => <RemediationWizard\n                data={resolvedData}\n                isRemediationOpen\n                setRemediationOpen={setRemediationOpen} />);\n        setRemediationOpen(!isRemediationOpen);\n        setRemediationLoading(false);\n    }\n\n    function showBaselineModal(rowData) {\n        setBaselineState({ isOpen: true, systemsIDs: [rowData.id] });\n    }\n\n    function apply(queryParams) {\n        dispatch(changeSystemsParams(queryParams));\n    }\n\n    const applyMetadata = (metadata) => {\n        dispatch(changeSystemsMetadata(metadata));\n    };\n\n    const applyGlobalFilter = (tags) => {\n        dispatch(changeTags(tags));\n    };\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply, systemsListDefaultFilters);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            staleFilter(apply, filter),\n            systemsUpdatableFilter(apply, filter),\n            osVersionFilter(filter, apply)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n        onDelete: deleteFilters,\n        deleteTitle: intl.formatMessage(messages.labelsFiltersReset)\n    };\n\n    const fetchAllData = (queryParams) =>\n        fetchSystems({ ...queryParams, limit: -1 }).then(filterRemediatableSystems);\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllData, selectRows);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport('systems', queryParams, {\n        csv: exportSystemsCSV,\n        json: exportSystemsJSON\n    }, dispatch);\n\n    const areActionsDisabled = (rowData) => {\n        const { applicable_advisories: applicableAdvisories } = rowData;\n        return applicableAdvisories && applicableAdvisories.every(typeSum => typeSum === 0);\n    };\n\n    const prepareRemediationPairs = (systems) => {\n        return fetchApplicableAdvisoriesApi({ limit: -1 }).then(\n            ({ data }) => fetchViewAdvisoriesSystems(\n                {\n                    advisories: data.map(advisory => advisory.id),\n                    systems\n                }\n            ));\n    };\n\n    const getEntities = useGetEntities(fetchSystems, apply, {}, history, applyMetadata, applyGlobalFilter);\n\n    const remediationDataProvider = () => remediationProviderWithPairs(\n        removeUndefinedObjectKeys(selectedRows),\n        prepareRemediationPairs,\n        transformPairs,\n        remediationIdentifiers.advisory\n    );\n\n    const assignMultipleSystems = () => {\n        setBaselineState({ isOpen: true, systemsIDs: Object.keys(selectedRows) });\n    };\n\n    useEffect(() => patchSetState.shouldRefresh && onSelect('none'), [patchSetState.shouldRefresh]);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'} />\n            <SystemsStatusReport apply={apply} queryParams={queryParams}/>\n            {(patchSetState.isOpen && isPatchSetEnabled) &&\n                <PatchSetWizard systemsIDs={patchSetState.systemsIDs} setBaselineState={setBaselineState}/>}\n            {isRemediationOpen && <RemediationModalCmp /> || null}\n            <Main>\n                {status.hasError && <ErrorHandler code={status.code} /> ||\n                    (\n                        <InventoryTable\n                            isFullView\n                            autoRefresh\n                            initialLoading\n                            hideFilters={{ all: true, tags: false }}\n                            columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, isPatchSetEnabled)}\n                            showTags\n                            customFilters={{\n                                patchParams: {\n                                    search,\n                                    filter,\n                                    systemProfile,\n                                    selectedTags\n                                },\n                                shouldRefresh: patchSetState.shouldRefresh === true\n                            }}\n                            paginationProps={{\n                                isDisabled: totalItems === 0\n                            }}\n                            onLoad={({ mergeWithEntities }) => {\n                                register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(systemsListColumns(isPatchSetEnabled), modifyInventory),\n                                        persistantParams({ page, perPage, sort, search }, decodedParams)\n                                    )\n                                });\n                            }}\n                            getEntities={getEntities}\n                            actions={systemsRowActions(showRemediationModal, showBaselineModal, isPatchSetEnabled)}\n                            tableProps={{\n                                areActionsDisabled,\n                                canSelectAll: false,\n                                variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                            }}\n                            bulkSelect={useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                            exportConfig={{\n                                isDisabled: totalItems === 0,\n                                onSelect: onExport\n                            }}\n                            actionsConfig={isPatchSetEnabled && {\n                                actions: [\n                                    <Button onClick={assignMultipleSystems}\n                                        key='assign-multiple-systems'\n                                        isDisabled={selectedCount === 0}>\n                                        {intl.formatMessage(messages.titlesPatchSetAssignMultipleButton)}\n                                    </Button>]\n                            }}\n                            filterConfig={filterConfig}\n                            activeFiltersConfig={activeFiltersConfig}\n                            dedicatedAction={(\n                                <PatchRemediationButton\n                                    isDisabled={\n                                        arrayFromObj(selectedRows).length === 0\n                                    }\n                                    onClick={() =>\n                                        showRemediationModal(remediationDataProvider())\n                                    }\n                                    ouia={'toolbar-remediation-button'}\n                                    isLoading={isRemediationLoading}\n                                >\n                                    {intl.formatMessage(messages.labelsRemediate)}\n                                </PatchRemediationButton>\n                            )}\n                        />\n                    )\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n"],"names":["exports","tslib_1","React","__importStar","card_1","__importDefault","react_styles_1","helpers_1","createContext","cardId","isExpanded","_a","children","id","className","component","isHoverable","isCompact","isSelectable","isSelectableRaised","isSelected","isDisabledRaised","isFlat","isRounded","isLarge","isFullHeight","isPlain","ouiaId","ouiaSafe","props","__rest","Component","ouiaProps","useOUIAProps","console","warn","createElement","value","Object","assign","css","default","card","modifiers","compact","expanded","flat","rounded","displayLg","fullHeight","plain","nonSelectableRaised","selectableRaised","selectedRaised","selectable","selected","tabIndex","undefined","isFilled","cardBody","noFill","cardTitle","skeleton_1","width","height","fontSize","shape","screenreaderText","fontHeightClassName","values","find","key","skeleton","circle","square","style","name","svgPath","yOffset","xOffset","RemediationWizard","data","setRemediationOpen","appName","module","setOpen","fallback","propTypes","apply","currentFilter","currentValue","stale","staleMap","staleSystems","label","toString","currentValueStringType","Array","isArray","map","filterByStale","filter","intl","messages","type","conditionalFilterType","filterValues","onChange","event","items","placeholder","packages_updatable","filterByUpdatableSystems","packagesListUpdatableTypes","StatusCard","title","color","Icon","Card","CardTitle","marginTop","CardBody","Flex","flex","flexWrap","FlexItem","spacer","alignSelf","size","Skeleton","Button","variant","onClick","SystemsStatusreport","queryParams","subtotals","setSubtotals","useSelector","GlobalFilterStore","selectedTags","selectedGlobalTags","systemProfile","useMemo","fetchSystems","os","limit","result","length","then","meta","Main","paddingBottom","Grid","hasGutter","span","GridItem","md","CheckCircleIcon","patched","PackageIcon","unpatched","ExclamationTriangleIcon","PatchRemediationButton","isDisabled","isLoading","ouia","pageTitle","setPageTitle","history","useHistory","dispatch","useDispatch","isRemediationOpen","isRemediationLoading","setRemediationLoading","RemediationModalCmp","setRemediationModalCmp","isOpen","shouldRefresh","systemsIDs","patchSetState","setBaselineState","isPatchSetEnabled","useFeatureFlag","featureFlags","decodedParams","decodeQueryparams","location","search","systems","entities","rows","shallowEqual","totalItems","total","selectedRows","status","SystemsStore","page","perPage","sort","showRemediationModal","resolvedData","changeSystemsParams","clearInventoryReducer","useRemoveFilter","systemsListDefaultFilters","deleteFilters","filterConfig","searchFilter","staleFilter","systemsUpdatableFilter","osVersionFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","onSelect","useOnSelect","filterRemediatableSystems","toSelect","payload","selectedCount","arrayFromObj","onExport","useOnExport","csv","exportSystemsCSV","json","exportSystemsJSON","prepareRemediationPairs","fetchApplicableAdvisoriesApi","fetchViewAdvisoriesSystems","advisories","advisory","getEntities","useGetEntities","metadata","changeSystemsMetadata","tags","changeTags","useEffect","Header","headerOUIA","SystemsStatusReport","PatchSetWizard","hasError","ErrorHandler","code","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","columns","defaultColumns","systemsColumnsMerger","showTags","customFilters","patchParams","paginationProps","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","modifyInventory","persistantParams","actions","systemsRowActions","rowData","tableProps","areActionsDisabled","applicableAdvisories","applicable_advisories","every","typeSum","canSelectAll","TableVariant","isStickyHeader","bulkSelect","useBulkSelectConfig","total_items","exportConfig","actionsConfig","keys","dedicatedAction","remediationProviderWithPairs","removeUndefinedObjectKeys","transformPairs","remediationIdentifiers"],"sourceRoot":""}