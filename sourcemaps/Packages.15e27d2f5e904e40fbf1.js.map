{"version":3,"sources":["webpack:///./src/PresentationalComponents/Filters/PackagesListStatusFilter.js","webpack:///./src/SmartComponents/Packages/Packages.js"],"names":["apply","currentFilter","currentValue","systems_updatable","filterByType","value","filter","label","intl","messages","type","conditionalFilterType","filterValues","onChange","event","items","packagesListUpdatableTypes","placeholder","dispatch","useDispatch","React","firstMount","setFirstMount","history","useHistory","setPageTitle","packageRows","useSelector","PackagesListStore","rows","createPackagesRows","status","metadata","queryParams","params","changePackagesListParams","useDeepCompareEffect","decodeQueryparams","location","search","push","encodeURLParams","fetchPackagesAction","onExport","useOnExport","csv","exportPackagesCSV","json","exportPackagesJSON","onSort","useSortColumn","packagesColumns","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","Header","title","headerOUIA","Main","TableView","columns","store","compact","filterConfig","searchFilter","packagesListStatusFilter","remediationButtonOUIA","tableOUIA","paginationOUIA","defaultFilters","packagesListDefaultFilters","searchChipLabel"],"mappings":"iVA2BA,QAtBiC,SAACA,GAA8B,IAAvBC,EAAuB,uDAAP,GAE5BC,EAAiBD,EAApCE,kBAEAC,EAAe,SAAAC,GACjBL,EAAM,CAAEM,OAAQ,CAAEH,kBAAmBE,MAGzC,MAAO,CACHE,MAAOC,kBAAmBC,4BAC1BC,KAAMC,aACNC,aAAc,CACVC,SAAU,SAACC,EAAOT,GACdD,EAAaC,IAEjBU,MAAOC,KACPX,MAAOH,EACPe,YAAaT,kBAAmBC,0C,+GC+E5C,QAlFiB,WACb,IAAMS,GAAWC,mBACjB,EAAoCC,cAAe,GAAnD,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAAUC,mBAEhBC,QADkB,YAElB,IAAMC,GAAcC,kBAChB,qBAAGC,kBAA0CC,QAE3CA,EAAOT,aAAc,kBAAMU,QAAmBJ,KAAc,CAACA,IAE7DK,GAASJ,kBACX,qBAAGC,kBAA0CG,UAE3CC,GAAWL,kBACb,qBAAGC,kBAA0CI,YAE3CC,GAAcN,kBAChB,qBAAGC,kBAA0CK,eAajD,SAASjC,EAAMkC,GACXhB,GAASiB,QAAyBD,KAXtCE,SAAqB,WACbf,GACArB,GAAMqC,QAAkBd,EAAQe,SAASC,SACzCjB,GAAc,KAEdC,EAAQiB,MAAKC,QAAgBR,IAC7Bf,GAASwB,QAAoBT,OAElC,CAACA,EAAaZ,IAMjB,IAAMsB,GAAWC,QAAY,WAAYX,EAAa,CAClDY,IAAKC,KACLC,KAAMC,MACP9B,GAEG+B,GAASC,QAAcC,KAAiBnD,GACxCoD,EAAShC,aACX,kBAAMiC,QAAaF,KAAiBnB,EAASsB,KAAM,KACnD,CAACtB,EAASsB,OAERC,GAAYC,QAAWxB,EAASyB,MAAOzD,GACvC0D,GAAkBC,QAAiB3D,GAEzC,OACI,kBAAC,aAAD,KACI,kBAAC4D,EAAA,EAAD,CAAQC,MAAOrD,kBAAmBC,yBAA+BqD,WAAY,aAC7E,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,QAASd,KACTe,MAAO,CAAErC,OAAMG,WAAUD,SAAQE,eACjCgB,OAAQA,EACRN,SAAUA,EACVS,OAAQA,EACRG,UAAWA,EACXG,gBAAiBA,EACjBS,SAAO,EACPnE,MAAOA,EACPoE,aAAc,CACVrD,MAAO,EACHsD,OAAarE,EAAOiC,EAAYM,OAC5B/B,kBAAmBC,sCACnBD,kBAAmBC,6CAEvB6D,EAAyBtE,EAAOiC,EAAY3B,UAGpDiE,sBAAuB,6BACvBC,UAAW,wBACXC,eAAgB,6BAChBC,eAAgBC,KAChBC,gBAAiBpE,kBAAmBC","file":"js/Packages.de347116276bd43b36be.js","sourcesContent":["import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { packagesListUpdatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst packagesListStatusFilter = (apply, currentFilter = {}) => {\n\n    let { systems_updatable: currentValue } = currentFilter;\n\n    const filterByType = value => {\n        apply({ filter: { systems_updatable: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersUpdatable),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: packagesListUpdatableTypes,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersUpdatablePlaceholder)\n        }\n    };\n};\n\nexport default packagesListStatusFilter;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport packagesListStatusFilter from '../../PresentationalComponents/Filters/PackagesListStatusFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { packagesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changePackagesListParams, fetchPackagesAction } from '../../store/Actions/Actions';\nimport { exportPackagesCSV, exportPackagesJSON } from '../../Utilities/api';\nimport { packagesListDefaultFilters } from '../../Utilities/constants';\nimport { createPackagesRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams } from '../../Utilities/Helpers';\nimport { setPageTitle, useOnExport, usePerPageSelect,\n    useSetPage, useSortColumn, useDeepCompareEffect } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { useHistory } from 'react-router-dom';\n\nconst Packages = () => {\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const history = useHistory();\n    const pageTitle = 'Packages';\n    setPageTitle(pageTitle);\n    const packageRows = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.rows\n    );\n    const rows = React.useMemo(() => createPackagesRows(packageRows), [packageRows]);\n\n    const status = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.status\n    );\n    const metadata = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.queryParams\n    );\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchPackagesAction(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    function apply(params) {\n        dispatch(changePackagesListParams(params));\n    }\n\n    const onExport = useOnExport('packages', queryParams, {\n        csv: exportPackagesCSV,\n        json: exportPackagesJSON\n    }, dispatch);\n\n    const onSort = useSortColumn(packagesColumns, apply);\n    const sortBy = React.useMemo(\n        () => createSortBy(packagesColumns, metadata.sort, 0),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchPackages)} headerOUIA={'packages'} />\n            <Main>\n                <TableView\n                    columns={packagesColumns}\n                    store={{ rows, metadata, status, queryParams }}\n                    onSort={onSort}\n                    onExport={onExport}\n                    sortBy={sortBy}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    compact\n                    apply={apply}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersPackagesSearchTitle),\n                                intl.formatMessage(messages.labelsFiltersPackagesSearchPlaceHolder)\n                            ),\n                            packagesListStatusFilter(apply, queryParams.filter)\n                        ]\n                    }}\n                    remediationButtonOUIA={'toolbar-remediation-button'}\n                    tableOUIA={'package-details-table'}\n                    paginationOUIA={'package-details-pagination'}\n                    defaultFilters={packagesListDefaultFilters}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersPackagesSearchTitle)}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Packages;\n"],"sourceRoot":""}