{"version":3,"sources":["webpack:///./src/SmartComponents/Systems/Systems.js"],"names":["pageTitle","intl","messages","setPageTitle","dispatch","useDispatch","React","isRemediationLoading","setRemediationLoading","RemediationModalCmp","setRemediationModalCmp","systems","useSelector","entities","rows","shallowEqual","totalItems","total","selectedRows","SystemsStore","status","queryParams","systemProfile","selectedTags","filter","search","page","perPage","sort","showRemediationModal","data","resolvedData","apply","params","changeSystemsParams","clearInventoryReducer","useRemoveFilter","deleteFilters","filterConfig","items","searchFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","onSelect","useOnSelect","fetchSystems","limit","then","filterRemediatableSystems","toSelect","type","payload","selectedCount","arrayFromObj","length","onExport","useOnExport","csv","exportSystemsCSV","json","exportSystemsJSON","prepareRemediationPairs","fetchApplicableAdvisoriesApi","fetchViewAdvisoriesSystems","advisories","map","advisory","id","getEntities","useGetEntities","title","headerOUIA","hasError","code","disableDefaultColumns","isFullView","autoRefresh","initialLoading","hideFilters","all","customFilters","patchParams","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","modifyInventory","persistantParams","bulkSelect","useBulkSelectConfig","total_items","exportConfig","isDisabled","actions","systemsRowActions","tableProps","areActionsDisabled","rowData","applicableAdvisories","applicable_advisories","every","typeSum","canSelectAll","variant","TableVariant","className","isStickyHeader","dedicatedAction","onClick","remediationProviderWithPairs","filterSelectedRowIDs","transformPairs","remediationIdentifiers","isLoading","ouia"],"mappings":"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","file":"js/Systems.3777cd295f64509650d0.js","sourcesContent":["import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changeSystemsParams, clearInventoryReducer } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyInventory } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchApplicableAdvisoriesApi,\n    fetchSystems, fetchViewAdvisoriesSystems\n} from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips,\n    filterSelectedRowIDs, remediationProviderWithPairs,\n    transformPairs, persistantParams, filterRemediatableSystems\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useBulkSelectConfig, useGetEntities, useOnExport, useOnSelect, useRemoveFilter\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport PatchRemediationButton from '../Remediation/PatchRemediationButton';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\n\nconst Systems = () => {\n    const pageTitle = intl.formatMessage(messages.titlesSystems);\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const selectedRows = useSelector(\n        ({ SystemsStore }) => SystemsStore?.selectedRows || []\n    );\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const queryParams = useSelector(\n        ({ SystemsStore }) => SystemsStore?.queryParams || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        return () => dispatch(clearInventoryReducer());\n    }, []);\n\n    async function showRemediationModal(data) {\n        setRemediationLoading(true);\n        const resolvedData = await data;\n        setRemediationModalCmp(() => () => <RemediationModal data={resolvedData} />);\n        setRemediationLoading(false);\n    }\n\n    function apply(params) {\n        dispatch(changeSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ search }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            )\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: deleteFilters\n    };\n\n    const fetchAllData = (queryParams) =>\n        fetchSystems({ ...queryParams, limit: -1 }).then(filterRemediatableSystems);\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows, fetchAllData, selectRows);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport('systems', queryParams, {\n        csv: exportSystemsCSV,\n        json: exportSystemsJSON\n    }, dispatch);\n\n    const areActionsDisabled = (rowData) => {\n        const { applicable_advisories: applicableAdvisories } = rowData;\n        return applicableAdvisories && applicableAdvisories.every(typeSum => typeSum === 0);\n    };\n\n    const prepareRemediationPairs = (systems) => {\n        return fetchApplicableAdvisoriesApi({ limit: -1 }).then(\n            ({ data }) => fetchViewAdvisoriesSystems(\n                {\n                    advisories: data.map(advisory => advisory.id),\n                    systems\n                }\n            ));\n    };\n\n    const getEntities = useGetEntities(fetchSystems, apply);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'} />\n            <RemediationModalCmp />\n            <Main>\n                {status.hasError && <ErrorHandler code={status.code} /> ||\n                    (\n                        <InventoryTable\n                            disableDefaultColumns\n                            isFullView\n                            autoRefresh\n                            initialLoading\n                            hideFilters={{ all: true }}\n                            customFilters={{\n                                patchParams: {\n                                    search,\n                                    filter,\n                                    systemProfile,\n                                    selectedTags\n                                }\n                            }}\n                            onLoad={({ mergeWithEntities }) => {\n                                register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(systemsListColumns, modifyInventory),\n                                        persistantParams(page, perPage, sort)\n                                    )\n                                });\n                            }}\n                            getEntities={getEntities}\n                            bulkSelect={useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                            exportConfig={{\n                                isDisabled: totalItems === 0,\n                                onSelect: onExport\n                            }}\n                            actions={systemsRowActions(showRemediationModal)}\n                            filterConfig={filterConfig}\n                            activeFiltersConfig={activeFiltersConfig}\n                            tableProps={{\n                                areActionsDisabled,\n                                canSelectAll: false,\n                                variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                            }}\n                            dedicatedAction={(\n                                <PatchRemediationButton\n                                    onClick={() =>\n                                        showRemediationModal(\n                                            remediationProviderWithPairs(\n                                                filterSelectedRowIDs(selectedRows),\n                                                prepareRemediationPairs,\n                                                transformPairs,\n                                                remediationIdentifiers.advisory)\n                                        )}\n                                    isDisabled={arrayFromObj(selectedRows).length === 0 || isRemediationLoading}\n                                    isLoading={isRemediationLoading}\n                                    ouia={'toolbar-remediation-button'}\n                                />)}\n\n                        >\n                        </InventoryTable>\n                    )\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n"],"sourceRoot":""}