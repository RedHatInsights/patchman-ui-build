{"version":3,"file":"js/198.1647427247492.eccfd7d27bd4aede47d9.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/Routes.js","webpack:///./src/Utilities/getBaseName.js","webpack:///./src/store/Reducers/SystemDetailStore.js","webpack:///./src/store/Reducers/AdvisoryDetailStore.js","webpack:///./src/store/Reducers/AdvisoryListStore.js","webpack:///./src/store/Reducers/CvesListStore.js","webpack:///./src/store/Reducers/PackageDetailStore.js","webpack:///./src/store/Reducers/PackagesListStore.js","webpack:///./src/store/Reducers/SystemsStore.js","webpack:///./src/store/Reducers/PackageSystemsStore.js","webpack:///./src/store/Reducers/AdvisorySystemsStore.js","webpack:///./src/store/Reducers/GlobalFilterStore.js","webpack:///./src/store/Reducers/PatchSetsReducer.js","webpack:///./src/store/index.js"],"sourcesContent":["import NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport '@redhat-cloud-services/frontend-components-notifications/index.css';\nimport { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory, useLocation, withRouter } from 'react-router-dom';\nimport './App.scss';\nimport { paths, Routes } from './Routes';\nimport { changeGlobalTags, changeProfile, globalFilter } from './store/Actions/Actions';\nimport { mapGlobalFilters } from './Utilities/Helpers';\n\nconst App = () => {\n    const dispatch = useDispatch();\n    const [config, setConfig] = useState({\n        selectedTags: [],\n        systemProfile: false\n    });\n    const location = useLocation();\n    const history = useHistory();\n\n    const listenNavigation = () => {\n        return  insights.chrome.on('APP_NAVIGATION', event => {\n            if (event.domEvent) {\n                history.push(`/${event.navId}`);\n            }\n        });\n    };\n\n    useEffect(() => {\n        history.listen((newLocation) => {\n            const { pathname } = newLocation;\n            const currentRoute = Object.values(paths).filter(element => pathname !== '/' && pathname.includes(element.to));\n\n            if (pathname === '/') {\n                insights.chrome.appNavClick({ id: 'advisories' }, false);\n            }\n            else if (currentRoute) {\n                const navId =  pathname.split('/').filter(element => element.length > 0)[0];\n                navId && insights.chrome.appNavClick({ id: navId });\n            }\n        });\n    }, [location.pathname]);\n\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp('patch');\n\n        if (insights.chrome?.globalFilterScope) {\n            insights.chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n                const SIDs = insights.chrome?.mapGlobalFilter?.(data, false, true)[1];\n                const SAP = data?.Workloads?.SAP;\n                const TAGs = insights.chrome?.mapGlobalFilter?.(data)\n                ?.filter(item => !item.includes('Workloads'));\n\n                const globalFilterConfig = mapGlobalFilters(TAGs, SIDs, SAP);\n\n                if (!isEqual(config, globalFilterConfig)) {\n                    dispatch(globalFilter(globalFilterConfig));\n                    setConfig(globalFilterConfig);\n                    dispatch(changeGlobalTags(globalFilterConfig.selectedTags));\n                    dispatch(changeProfile(globalFilterConfig.systemProfile));\n                }\n\n            });\n        }\n\n        const unregister = listenNavigation();\n        return () => unregister();\n    }, []);\n\n    return (\n        <React.Fragment>\n            <NotificationPortal />\n            <Routes childProps={{ location, history }} />\n        </React.Fragment>\n    );\n};\n\nexport default withRouter(App);\n","import some from 'lodash/some';\nimport PropTypes from 'prop-types';\nimport React, { Fragment, lazy, Suspense, useState } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { fetchSystems } from './Utilities/api';\nimport { useHistory } from 'react-router-dom';\n\nconst Advisories = lazy(() =>\n    import(\n        /* webpackChunkName: \"Advisories\" */ './SmartComponents/Advisories/Advisories'\n    )\n);\n\nconst Systems = lazy(() =>\n    import(\n        /* webpackChunkName: \"Systems\" */ './SmartComponents/Systems/Systems'\n    )\n);\n\nconst InventoryDetail = lazy(() =>\n    import(\n        /* webpackChunkName: \"InventoryDetail\" */ './SmartComponents/SystemDetail/InventoryDetail'\n    )\n);\n\nconst AdvisoryPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"AdvisoryyPage\" */ './SmartComponents/AdvisoryDetail/AdvisoryDetail'\n    )\n);\n\nconst PackagsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"Packages\" */ './SmartComponents/Packages/Packages'\n    )\n);\n\nconst PackageDetail = lazy(() =>\n    import(\n        /* webpackChunkName: \"PackageDetail\" */ './SmartComponents/PackageDetail/PackageDetail'\n    )\n);\n\nconst NoAccess = lazy(() =>\n    import(\n        /* webpackChunkName: \"NoAccess\" */ './PresentationalComponents/NoAccessPage/NoAccess'\n    )\n);\n\nconst PatchSet = lazy(() =>\n    import(\n        /* webpackChunkName: \"PackageDetail\" */ './SmartComponents/PatchSet/PatchSet'\n    )\n);\nexport const paths = {\n    advisories: {\n        title: 'Applicable advisories',\n        to: '/advisories'\n    },\n    systems: {\n        title: 'Systems',\n        to: '/systems/'\n    },\n    inventoryDetail: {\n        title: 'Inventory detail',\n        to: '/systems/:inventoryId'\n    },\n    advisoryDetail: {\n        title: 'Advisory detail',\n        to: '/advisories/:advisoryId'\n    },\n    advisoryDetailSystem: {\n        title: '',\n        to: '/advisories/:advisoryId/:inventoryId'\n    },\n    noaccess: {\n        title: '',\n        to: '/noaccess'\n    },\n    packages: {\n        title: 'Packages',\n        to: '/packages'\n    },\n    packageDetail: {\n        title: 'Package detail',\n        to: '/packages/:packageName'\n    },\n    packageDetailSystem: {\n        title: '',\n        to: '/packages/:packageName/:inventoryId'\n    },\n    patchSet: {\n        title: 'Patch set',\n        to: '/patch-set'\n    }\n};\n\nexport const Routes = (props) => {\n    const [responseCode, setResponseCode] = useState();\n    const history = useHistory();\n\n    const redirectToNoAccess = (statusCode) => {\n        setResponseCode(statusCode);\n        history.replace(paths.noaccess.to);\n    };\n\n    React.useEffect(() => {\n        const systems = fetchSystems({ limit: 1 });\n        systems.then((res) => {\n            if (!res.meta) {\n                redirectToNoAccess(res.status);\n            }\n\n        }).catch(err => redirectToNoAccess(err.status));\n    }, []);\n\n    const path = props.childProps.location.pathname;\n\n    return (\n        // I recommend discussing with UX some nice loading placeholder\n        <Suspense fallback={Fragment}>\n            <Switch>\n                <Redirect\n                    from={paths.advisoryDetailSystem.to}\n                    to={paths.inventoryDetail.to}\n                />\n                <Redirect\n                    from={paths.packageDetailSystem.to}\n                    to={paths.inventoryDetail.to}\n                />\n                <Route\n                    path={paths.inventoryDetail.to}\n                    component={InventoryDetail}\n                />\n                <Route exact path={paths.systems.to} component={Systems} />\n                <Route\n                    exact\n                    path={paths.advisoryDetail.to}\n                    component={AdvisoryPage}\n                />\n                <Route\n                    exact\n                    path={paths.advisories.to}\n                    component={Advisories}\n                />\n                <Route\n                    exact\n                    path={paths.packages.to}\n                    component={PackagsPage}\n                />\n                <Route\n                    exact\n                    path={paths.noaccess.to}\n                    render={() => <NoAccess code={responseCode}/>}\n                />\n                <Route\n                    exact\n                    path={paths.packageDetail.to}\n                    component={PackageDetail}\n                />\n                <Route\n                    exact\n                    path={paths.patchSet.to}\n                    component={PatchSet}\n                />\n\n                <Route\n                    render={() =>\n                        some(paths, p => p.to === path) || (\n                            <Redirect to={paths.advisories.to} />\n                        )\n                    }\n                />\n            </Switch>\n        </Suspense>\n    );\n};\n\nRoutes.propTypes = {\n    childProps: PropTypes.shape({\n        location: PropTypes.shape({\n            pathname: PropTypes.string\n        }),\n        history: PropTypes.any\n    })\n};\n","function getBaseName(pathname) {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}/${pathName[1] || ''}`;\n}\n\nexport default getBaseName;\n","import React from 'react';\nimport SystemDetail from '../../SmartComponents/SystemDetail/SystemDetail';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const SystemDetailStore = (state = initialState, { type, payload }) => {\n    switch (type) {\n        case 'FETCH_SYSTEM_DETAIL_FULFILLED':\n            state.hasThirdPartyRepo = payload.data?.attributes.third_party;\n            return state;\n        case 'LOAD_ENTITY_FULFILLED':\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Patch',\n                        name: 'patch',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        case 'LOAD_ENTITY_REJECTED':\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Patch',\n                        name: 'patch',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import { CLEAR_ADVISORY_DETAILS, FETCH_ADVISORY_DETAILS } from '../ActionTypes';\nimport {\n\n    fetchPending,\n    fetchRejected\n} from './HelperReducers';\n\nexport let initialState = {\n    data: { attributes: {} },\n    status: { isLoading: true }\n};\n\n// Reducer\nexport const AdvisoryDetailStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case FETCH_ADVISORY_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                status: { isLoading: false },\n                data: action.payload.data,\n                error: {}\n            };\n\n        case FETCH_ADVISORY_DETAILS + '_PENDING':\n            return fetchPending(newState);\n\n        case FETCH_ADVISORY_DETAILS + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case CLEAR_ADVISORY_DETAILS:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    selectRows,\n    expandRows,\n    fetchPending,\n    fetchRejected,\n    fetchFulfilled\n} from './HelperReducers';\n\nexport const AdvisoryListStore = (state = storeListDefaults, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_APPLICABLE_ADVISORIES + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_APPLICABLE_ADVISORIES + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_APPLICABLE_ADVISORIES + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_ADVISORY_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.EXPAND_ADVISORY_ROW:\n            return expandRows(newState, action);\n\n        case ActionTypes.SELECT_ADVISORY_ROW:\n            return selectRows(newState, action);\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    fetchPending,\n    fetchRejected,\n    fetchFulfilled\n} from './HelperReducers';\n\nexport const CvesListStore = (state = storeListDefaults, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_CVES_INFO + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_CVES_INFO + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_CVES_INFO + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_CVES_STORE_PARAMS:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import { CLEAR_PACKAGE_DETAILS, FETCH_PACKAGE_DETAILS } from '../ActionTypes';\nimport { fetchPending, fetchRejected } from './HelperReducers';\n\nexport let initialState = {\n    data: { attributes: {} },\n    status: { isLoading: true }\n};\n\n// Reducer\nexport const PackageDetailStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case FETCH_PACKAGE_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                status: { isLoading: false },\n                data: action.payload.data,\n                error: {}\n            };\n\n        case FETCH_PACKAGE_DETAILS + '_PENDING':\n            return fetchPending(newState);\n\n        case FETCH_PACKAGE_DETAILS + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case CLEAR_PACKAGE_DETAILS:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults, packagesListDefaultFilters } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport { changeFilters, fetchFulfilled, fetchPending, fetchRejected } from './HelperReducers';\n\nconst initialStore = { ...storeListDefaults,  queryParams: packagesListDefaultFilters };\n\nexport const PackagesListStore = (state = initialStore, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_PACKAGES_LIST + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_PACKAGES_LIST + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_PACKAGES_LIST + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_PACKAGES_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\nimport { changeFilters } from './HelperReducers';\nimport { changeListParams } from '../../Utilities/Helpers';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    selectedRows: {},\n    queryParams: {\n        page: 1,\n        perPage: 20,\n        filter: {\n            stale: [true, false]\n        }\n    }\n};\n\n// Reducer\nexport const SystemsStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            newState.queryParams = changeListParams(newState.queryParams, action.payload);\n            return newState;\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        case ActionTypes.CHANGE_SYSTEMS_METADATA:\n            newState.metadata = action.payload;\n            return newState;\n\n        default:\n            return state;\n    }\n};\n\n","import * as ActionTypes from '../ActionTypes';\nimport { changeFilters } from './HelperReducers';\nimport { changeListParams } from '../../Utilities/Helpers';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nexport const initialState = {\n    selectedRows: {},\n    queryParams: {\n        page: 1,\n        perPage: 20\n    }\n};\n\nexport const PackageSystemsStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n\n        case ActionTypes.CHANGE_PACKAGE_SYSTEMS_PARAMS:\n            newState.queryParams = changeListParams(newState.queryParams, action.payload);\n            return newState;\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        case ActionTypes.CLEAR_PACKAGE_SYSTEMS_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\nimport { changeFilters } from './HelperReducers';\nimport { changeListParams } from '../../Utilities/Helpers';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nexport const initialState = {\n    selectedRows: {},\n    queryParams: {\n        page: 1,\n        perPage: 20\n    }\n};\n// Reducer\n\nexport const AdvisorySystemsStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n\n        case ActionTypes.CHANGE_AFFECTED_SYSTEMS_PARAMS:\n            newState.queryParams = changeListParams(newState.queryParams, action.payload);\n            return newState;\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        case ActionTypes.CLEAR_ADVISORY_SYSTEMS_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n\n","import * as ActionTypes from '../ActionTypes';\n\nconst initialState = {\n    selectedGlobalTags: [],\n    selectedTags: [],\n    systemProfile: undefined\n};\n\nexport const GlobalFilterStore = (state = initialState, action) => {\n    switch (action.type) {\n        case ActionTypes.CHANGE_TAGS:\n            return {\n                ...state,\n                selectedTags: action.payload\n            };\n\n        case ActionTypes.CHANGE_GLOBAL_TAGS:\n            return {\n                ...state,\n                selectedGlobalTags: action.payload\n            };\n\n        case ActionTypes.CHANGE_PROFILE:\n            return {\n                ...state,\n                systemProfile: action.payload\n            };\n\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    selectRows,\n    fetchPending,\n    fetchRejected\n} from './HelperReducers';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nexport const initialState = {\n    rows: [],\n    selectedRows: [],\n    queryParams: {\n        page: 1,\n        perPage: 20,\n        filter: {}\n    },\n    status: {},\n    metadata: {\n        limit: 25,\n        offset: 0,\n        total_items: 0\n    },\n    error: {}\n};\n\nexport const PatchSetsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ActionTypes.FETCH_ALL_PATCH_SETS + '_FULFILLED':\n            return {\n                ...state,\n                rows: action.payload.data.map(set => ({ ...set.attributes, id: set.id })),\n                metadata: action.payload.meta || {},\n                error: {},\n                status: { code: action.payload.status, isLoading: false, hasError: false }\n            };\n\n        case ActionTypes.FETCH_ALL_PATCH_SETS + '_PENDING':\n            return fetchPending(state);\n\n        case ActionTypes.FETCH_ALL_PATCH_SETS + '_REJECTED':\n            return fetchRejected(state, action);\n\n        case ActionTypes.CHANGE_PATCH_SET_PARAMS:\n            return changeFilters(state, action);\n\n        case ActionTypes.SELECT_PATCH_SET_ROW:\n            return selectRows(state, action);\n\n        default:\n            return state;\n    }\n};\n","/* eslint new-cap: 0 */\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { AdvisoryDetailStore } from './Reducers/AdvisoryDetailStore';\nimport { AdvisoryListStore } from './Reducers/AdvisoryListStore';\nimport { CvesListStore } from './Reducers/CvesListStore';\nimport { PackageDetailStore } from './Reducers/PackageDetailStore';\nimport { PackagesListStore } from './Reducers/PackagesListStore';\nimport { SystemAdvisoryListStore } from './Reducers/SystemAdvisoryListStore';\nimport { SystemDetailStore } from './Reducers/SystemDetailStore';\nimport { SystemPackageListStore } from './Reducers/SystemPackageListStore';\nimport { SystemsStore } from './Reducers/SystemsStore';\nimport { PackageSystemsStore } from './Reducers/PackageSystemsStore';\nimport { AdvisorySystemsStore } from './Reducers/AdvisorySystemsStore';\nimport { GlobalFilterStore } from './Reducers/GlobalFilterStore';\nimport { PatchSetsReducer } from './Reducers/PatchSetsReducer';\n\nconst persistenceMiddleware = store => next => action => {\n    if (action.type === 'LOAD_ENTITIES_FULFILLED') {\n        action = { ...action, store };\n    }\n\n    next(action);\n    if (!action.type.endsWith('_REJECTED')) {\n        const storeContent = store.getState();\n        sessionStorage.setItem('PatchStore', JSON.stringify(storeContent));\n    }\n};\n\nconst storage = JSON.parse(sessionStorage.getItem('PatchStore')) || {};\n\nconst registry = getRegistry({}, [promiseMiddleware, notificationsMiddleware(), persistenceMiddleware]);\nregistry.register({\n    AdvisoryListStore: (state = storage.AdvisoryListStore, action) => AdvisoryListStore(state, action),\n    SystemDetailStore: (state = storage.SystemDetailStore, action) => SystemDetailStore(state, action),\n    SystemAdvisoryListStore: (state = storage.SystemAdvisoryListStore, action) => SystemAdvisoryListStore(state, action),\n    AdvisoryDetailStore: (state = storage.AdvisoryDetailStore, action) => AdvisoryDetailStore(state, action),\n    SystemPackageListStore: (state = storage.SystemPackageListStore, action) => SystemPackageListStore(state, action),\n    PackagesListStore: (state = storage.PackagesListStore, action) => PackagesListStore(state, action),\n    PackageDetailStore: (state = storage.PackageDetailStore, action) => PackageDetailStore(state, action),\n    CvesListStore: (state = storage.CvesListStore, action) => CvesListStore(state, action),\n    SystemsStore: (state = storage.SystemsStore, action) => SystemsStore(state, action),\n    PackageSystemsStore: (state = storage.PackageSystemsStore, action) => PackageSystemsStore(state, action),\n    AdvisorySystemsStore: (state = storage.AdvisorySystemsStore, action) => AdvisorySystemsStore(state, action),\n    GlobalFilterStore: (state = storage.GlobalFilterStore, action) => GlobalFilterStore(state, action),\n    PatchSetsStore: (state = storage.PatchSetsReducer, action) => PatchSetsReducer(state, action),\n    notifications: notificationsReducer\n});\n\nexport const getStore = () => registry.getStore();\n\nexport const register = newReducers => {\n    registry.register(newReducers);\n};\n"],"names":["withRouter","dispatch","useDispatch","useState","selectedTags","systemProfile","config","setConfig","location","useLocation","history","useHistory","useEffect","listen","newLocation","pathname","currentRoute","Object","values","paths","filter","element","includes","to","insights","chrome","appNavClick","id","navId","split","length","init","identifyApp","globalFilterScope","on","data","SIDs","mapGlobalFilter","SAP","Workloads","TAGs","item","globalFilterConfig","mapGlobalFilters","globalFilter","changeGlobalTags","changeProfile","unregister","event","domEvent","push","childProps","Advisories","lazy","Systems","InventoryDetail","AdvisoryPage","PackagsPage","PackageDetail","NoAccess","PatchSet","advisories","title","systems","inventoryDetail","advisoryDetail","advisoryDetailSystem","noaccess","packages","packageDetail","packageDetailSystem","patchSet","Routes","props","responseCode","setResponseCode","redirectToNoAccess","statusCode","replace","React","fetchSystems","limit","then","res","meta","status","err","path","Suspense","fallback","Fragment","Switch","Redirect","from","Route","component","exact","render","code","some","p","propTypes","PropTypes","release","pathName","shift","initialState","loaded","SystemDetailStore","state","type","payload","hasThirdPartyRepo","attributes","third_party","activeApps","name","isLoading","AdvisoryDetailStore","action","newState","FETCH_ADVISORY_DETAILS","error","fetchPending","fetchRejected","CLEAR_ADVISORY_DETAILS","AdvisoryListStore","storeListDefaults","ActionTypes","fetchFulfilled","changeFilters","expandRows","selectRows","CvesListStore","PackageDetailStore","FETCH_PACKAGE_DETAILS","CLEAR_PACKAGE_DETAILS","initialStore","queryParams","packagesListDefaultFilters","PackagesListStore","selectedRows","page","perPage","stale","SystemsStore","changeListParams","metadata","PackageSystemsStore","AdvisorySystemsStore","selectedGlobalTags","undefined","GlobalFilterStore","rows","offset","total_items","PatchSetsReducer","map","set","hasError","storage","JSON","parse","sessionStorage","getItem","registry","getRegistry","promiseMiddleware","notificationsMiddleware","store","next","endsWith","storeContent","getState","setItem","stringify","register","SystemAdvisoryListStore","SystemPackageListStore","PatchSetsStore","notifications","notificationsReducer","getStore","newReducers"],"sourceRoot":""}