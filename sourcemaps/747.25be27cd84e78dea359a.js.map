{"version":3,"sources":["webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"names":["initialState","rows","entities","selectedRows","queryParams","systemsParams","affectedSystemsParams","metadata","limit","offset","total_items","modifyInventory","columns","state","loaded","lastSeenColumn","filter","key","createSystemsRows","modifyPackageSystems","createPackageSystemsRows","inventoryEntitiesReducer","inventoryModifier","action","newState","type","ActionTypes","payload","changeListParams","packageSystemsParams","selectRows","changeFilters"],"mappings":"23BAOO,IAAMA,EAAe,CACxBC,KAAM,GACNC,SAAU,GACVC,aAAc,GACdC,YAAa,GACbC,cAAe,GACfC,sBAAuB,GACvBC,SAAU,CACNC,MAAO,GACPC,OAAQ,EACRC,YAAa,IAKRC,EAAkB,SAACC,EAASC,GACrC,GAAIA,EAAMC,OAAQ,CACd,IAAIC,EAAiBF,EAAMD,QAAQI,QAAO,kBAAqB,YAArB,EAAGC,OAG7C,OAFAF,EAAiB,CAAC,EAAD,KAAMA,EAAe,IAArB,IAAyBE,IAAK,iBAE/C,OACOJ,GADP,IAEID,QAAS,GAAF,eACAA,GAAW,KADX,OAEAG,GAAkB,KAEzBd,MAAMiB,QAAkBL,EAAMZ,KAAMY,EAAMV,gBAIlD,OAAOU,GAGEM,EAAuB,SAACP,EAASC,GAC1C,OAAIA,EAAMC,OACN,OACOD,GADP,IAEID,UACAX,MAAMmB,QAAyBP,EAAMZ,KAAMY,EAAMV,gBAIlDU,GAGEQ,EAA2B,SAACT,EAASU,GAAV,OAAgC,WAAkC,QAAjCT,EAAiC,uDAAzBb,EAAcuB,EAAW,uCAClGC,EAAW,EAAH,GAAQX,GACpB,OAAQU,EAAOE,MACX,IAAK,0BACD,OAAOH,EAAkBV,EAASC,GAEtC,KAAKa,KAGD,OAFA,UAAOH,EAAOI,eAAd,cAAO,EAAgBX,OACvBQ,EAASnB,eAAgBuB,QAAiBJ,EAASnB,cAAekB,EAAOI,SAClEH,EAEX,KAAKE,KAGD,OAFA,UAAOH,EAAOI,eAAd,cAAO,EAAgBX,OACvBQ,EAASlB,uBAAyBsB,QAAiBJ,EAASlB,sBAAuBiB,EAAOI,SACnFH,EAEX,KAAKE,KAED,OADAF,EAASK,sBAAuBD,QAAiBJ,EAASK,qBAAsBN,EAAOI,SAChFH,EAEX,IAAK,gBAED,OADAA,GAAWM,QAAWN,EAAUD,GACzBD,EAAkBV,EAASY,GAEtC,KAAKE,KACD,OAAOK,QAAcP,EAAUD,GAEnC,KAAKG,uBACD,cAAY1B,GAAZ,IAA0BK,cAAemB,EAASnB,gBACtD,KAAKqB,gCACD,cAAY1B,GAAZ,IAA0BM,sBAAuBkB,EAASlB,wBAC9D,KAAKoB,+BACD,cAAY1B,GAAZ,IAA0B6B,qBAAsBL,EAASK,uBAE7D,QACI,OAAOhB","file":"js/747.b86b418d5a2c19ef70be.js","sourcesContent":["import * as ActionTypes from '../ActionTypes';\nimport { changeFilters, selectRows } from './HelperReducers';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { changeListParams } from '../../Utilities/Helpers';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nexport const initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: [],\n    queryParams: {},\n    systemsParams: {},\n    affectedSystemsParams: {},\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], key: 'last_upload' }];\n\n        return {\n            ...state,\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ],\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, state);\n\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            delete action.payload?.filter;\n            newState.systemsParams = changeListParams(newState.systemsParams, action.payload);\n            return newState;\n\n        case ActionTypes.CHANGE_AFFECTED_SYSTEMS_PARAMS:\n            delete action.payload?.filter;\n            newState.affectedSystemsParams =  changeListParams(newState.affectedSystemsParams, action.payload);\n            return newState;\n\n        case ActionTypes.CHANGE_PACKAGE_SYSTEMS_PARAMS:\n            newState.packageSystemsParams = changeListParams(newState.packageSystemsParams, action.payload);\n            return newState;\n\n        case 'SELECT_ENTITY':\n            newState = selectRows(newState, action);\n            return inventoryModifier(columns, newState);\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        case ActionTypes.CLEAR_SYSTEMS_PARAMS:\n            return { ...initialState, systemsParams: newState.systemsParams };\n        case ActionTypes.CLEAR_AFFECTED_SYSTEMS_PARAMS:\n            return { ...initialState, affectedSystemsParams: newState.affectedSystemsParams };\n        case ActionTypes.CLEAR_PACKAGE_SYSTEMS_PARAMS:\n            return { ...initialState, packageSystemsParams: newState.packageSystemsParams };\n\n        default:\n            return state;\n    }\n};\n"],"sourceRoot":""}