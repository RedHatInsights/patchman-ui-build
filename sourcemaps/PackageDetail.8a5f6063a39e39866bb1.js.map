{"version":3,"sources":["webpack:///./src/PresentationalComponents/PackageHeader/PackageHeader.js","webpack:///./src/SmartComponents/PackageSystems/PackageSystems.js","webpack:///./src/SmartComponents/PackageDetail/PackageDetail.js"],"names":["PackageHeader","attributes","isLoading","Grid","hasGutter","style","minHeight","GridItem","md","sm","WithLoader","loading","variant","WithLoaderVariants","centered","Stack","StackItem","whiteSpace","preserveNewlines","description","propTypes","PackageSystems","packageName","dispatch","useDispatch","enableRemediation","React","status","useSelector","entities","rows","shallowEqual","selectedRows","queryParams","totalItems","total","filter","search","systemProfile","selectedTags","apply","params","changeEntitiesParams","clearEntitiesStore","useRemoveFilter","deleteFilters","filterConfig","items","searchFilter","intl","messages","statusFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","onExport","arrayFromObj","length","useOnExport","csv","exportPackageSystemsCSV","json","exportPackageSystemsJSON","getEntites","useGetEntities","fetchPackageSystems","hasError","ErrorHandler","code","InventoryTable","disableDefaultColumns","isFullView","autoRefresh","initialLoading","hideFilters","all","getEntities","customFilters","patchParams","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","packageSystemsColumns","modifyPackageSystems","exportConfig","isDisabled","onSelect","tableProps","canSelectAll","TableVariant","className","isStickyHeader","bulkSelect","PackageDetail","match","pageTitle","setPageTitle","packageDetails","PackageDetailStore","fetchPackageDetails","clearPackageDetailStore","data","Header","title","headerOUIA","breadcrumbs","to","paths","isActive","Unavailable","id","Main","TextContent","Text","component","TextVariants","withRouter"],"mappings":"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","file":"js/PackageDetail.d90922895decb4bc9c25.js","sourcesContent":["import { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { preserveNewlines } from '../../Utilities/Helpers';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\n\nconst PackageHeader = ({ attributes, isLoading }) => {\n    return (\n        <Grid hasGutter style={{ minHeight: 50 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                preserveNewlines(attributes.description)\n                            }\n                        </StackItem>\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n\n        </Grid>\n    );\n};\n\nPackageHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default PackageHeader;\n","import { Button, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { AnsibeTowerIcon } from '@patternfly/react-icons';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport { register } from '../../store';\nimport { changeEntitiesParams, clearEntitiesStore } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyPackageSystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { fetchPackageSystems, exportPackageSystemsCSV, exportPackageSystemsJSON } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport { arrayFromObj, buildFilterChips, remediationProvider, filterSelectedRowIDs } from '../../Utilities/Helpers';\nimport {\n    useOnSelect, useRemoveFilter, useBulkSelectConfig, useOnExport, useGetEntities\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { packageSystemsColumns } from '../Systems/SystemsListAssets';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\n\nconst PackageSystems = ({ packageName }) => {\n    const dispatch = useDispatch();\n    const enableRemediation = false;\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const queryParams = useSelector(\n        ({ entities }) => entities?.queryParams || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n\n    const { filter, search, systemProfile, selectedTags } = queryParams;\n\n    React.useEffect(() => {\n        return () => dispatch(clearEntitiesStore());\n    }, []);\n\n    function apply(params) {\n        dispatch(changeEntitiesParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            statusFilter(apply, filter)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: deleteFilters\n    };\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    const constructFilename = (system) => {\n        return `${packageName}-${system.available_evra}`;\n    };\n\n    const fetchAllData = () =>\n        fetchPackageSystems({ id: packageName, limit: 999999 });\n\n    const selectRows = (toSelect) => {\n        dispatch({ type: 'SELECT_ENTITY', payload: toSelect });\n    };\n\n    const onSelect = enableRemediation && useOnSelect(systems, selectedRows,\n        fetchAllData, selectRows, constructFilename);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport(packageName, queryParams, {\n        csv: exportPackageSystemsCSV,\n        json: exportPackageSystemsJSON\n    }, dispatch);\n\n    const getEntites = useGetEntities(fetchPackageSystems, apply, { packageName });\n    return (\n        <React.Fragment>\n            {status.hasError && <ErrorHandler code={status.code} /> || (\n                <InventoryTable\n                    disableDefaultColumns\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    hideFilters={{ all: true }}\n                    getEntities={getEntites}\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        register({\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(packageSystemsColumns, modifyPackageSystems)\n                            )\n                        });\n\n                    }}\n                    exportConfig={{\n                        isDisabled: totalItems === 0,\n                        onSelect: onExport\n                    }}\n                    tableProps={{\n                        canSelectAll: false,\n                        onSelect, variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig={activeFiltersConfig}\n                    bulkSelect={enableRemediation &&\n                        onSelect && useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                >\n                    {enableRemediation &&\n                        <ToolbarGroup>\n                            <ToolbarItem>\n                                <Button\n                                    className={'remediationButtonPatch'}\n                                    isDisabled={\n                                        arrayFromObj(selectedRows).length === 0\n                                    }\n                                    onClick={() =>\n                                        showRemediationModal(\n                                            remediationProvider(\n                                                packageName,\n                                                filterSelectedRowIDs(selectedRows),\n                                                remediationIdentifiers.package\n                                            )\n                                        )\n                                    }\n                                    ouiaId={'toolbar-remediation-button'}\n                                >\n                                    <AnsibeTowerIcon />&nbsp;{intl.formatMessage(messages.labelsRemediate)}\n                                </Button>\n                                <RemediationModalCmp />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                    }\n                </InventoryTable>\n            )}\n        </React.Fragment>\n    );\n};\n\nPackageSystems.propTypes = {\n    packageName: propTypes.string\n};\n\nexport default PackageSystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport PackageHeader from '../../PresentationalComponents/PackageHeader/PackageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { paths } from '../../Routes';\nimport PackageSystems from '../../SmartComponents/PackageSystems/PackageSystems';\nimport { clearPackageDetailStore, fetchPackageDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst PackageDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [packageName] = React.useState(match.params.packageName);\n    const pageTitle = `${packageName} - ${intl.formatMessage(messages.titlesPackages)}`;\n    setPageTitle(pageTitle);\n    const packageDetails = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore\n    );\n    const status = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchPackageDetails({ packageName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearPackageDetailStore());\n        };\n    }, []);\n\n    const { attributes } = packageDetails.data;\n\n    return (\n        <React.Fragment>\n            <Header\n                title={packageName}\n                headerOUIA={'package-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchPackages),\n                        to: paths.packages.to,\n                        isActive: false\n                    },\n                    {\n                        title: packageName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable/> :\n                    <PackageHeader\n                        attributes={{ ...attributes, id: packageName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        <PackageSystems packageName={packageName}></PackageSystems>\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nPackageDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(PackageDetail);\n"],"sourceRoot":""}