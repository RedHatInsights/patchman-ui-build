{"version":3,"sources":["webpack:///./src/PresentationalComponents/Filters/PackagesListStatusFilter.js","webpack:///./src/SmartComponents/Packages/Packages.js"],"names":["apply","currentFilter","currentValue","systems_updatable","updatableTypesMap","React","packagesListUpdatableTypes","value","label","toString","filterByType","filter","intl","messages","type","conditionalFilterType","filterValues","onChange","event","items","placeholder","dispatch","useDispatch","setPageTitle","packageRows","useSelector","PackagesListStore","rows","createPackagesRows","status","metadata","queryParams","params","changePackagesListParams","fetchPackagesAction","onSort","useSortColumn","packagesColumns","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","Header","title","headerOUIA","Main","TableView","columns","store","onExport","_","format","date","Date","toISOString","replace","split","filename","exportPackagesCSV","then","data","downloadFile","exportPackagesJSON","JSON","stringify","compact","filterConfig","searchFilter","search","packagesListStatusFilter","remediationButtonOUIA","tableOUIA","paginationOUIA","defaultFilters","packagesListDefaultFilters"],"mappings":"iVAwCA,QAlCiC,SAACA,GAA8B,IAAvBC,EAAuB,uDAAP,GAE5BC,EAAiBD,EAApCE,kBAEe,KAAjBD,GAAwBA,IACxBA,EAAe,KAGnB,IAAME,EAAoBC,aACtB,kBACIC,UAA+B,gBAAGC,EAAH,EAAGA,MAAH,MAAuB,CAClDC,MAD2B,EAAUA,MAErCD,MAAOA,EAAME,iBAErB,IAEEC,EAAe,SAAAH,GACjBP,EAAM,CAAEW,OAAQ,CAAER,kBAA8B,MAAVI,GAAiBA,GAAU,OAGrE,MAAO,CACHC,MAAOI,kBAAmBC,yBAC1BC,KAAMC,WACNC,aAAc,CACVC,SAAU,SAACC,EAAOX,GACdG,EAAaH,IAEjBY,MAAOf,EACPG,MAAOL,EACPkB,YAAaR,kBAAmBC,uC,sGC8D5C,QA/EiB,WACb,IAAMQ,GAAWC,oBAEjBC,QADkB,YAElB,IAAMC,GAAcC,kBAChB,qBAAGC,kBAA0CC,QAE3CA,EAAOtB,aAAc,kBAAMuB,QAAmBJ,KAAc,CAACA,IAE7DK,GAASJ,kBACX,qBAAGC,kBAA0CG,UAE3CC,GAAWL,kBACb,qBAAGC,kBAA0CI,YAE3CC,GAAcN,kBAChB,qBAAGC,kBAA0CK,eAOjD,SAAS/B,EAAMgC,GACXX,GAASY,QAAyBD,IALtC3B,eAAgB,WACZgB,GAASa,QAAoBH,MAC9B,CAACA,IAMJ,IAWMI,GAASC,QAAcC,KAAiBrC,GACxCsC,EAASjC,aACX,kBAAMkC,QAAaF,KAAiBP,EAASU,KAAM,KACnD,CAACV,EAASU,OAERC,GAAYC,QAAWZ,EAASa,MAAO3C,GACvC4C,GAAkBC,QAAiB7C,GAEzC,OACI,kBAAC,aAAD,KACI,kBAAC8C,EAAA,EAAD,CAAQC,MAAOnC,kBAAmBC,yBAA+BmC,WAAY,aAC7E,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,QAASd,KACTe,MAAO,CAAEzB,OAAMG,WAAUD,SAAQE,eACjCI,OAAQA,EACRkB,SA3BC,SAACC,EAAGC,GACjB,IAAMC,GAAO,IAAIC,MAAOC,cAAcC,QAAQ,QAAS,KAAKC,MAAM,KAAK,GAAK,OACtEC,EAAW,YAAH,OAAeL,GACd,QAAXD,GACAO,QAAkB/B,GAAagC,MAAK,SAAAC,GAAI,OAAIC,QAAaD,EAAMH,EAAU,WAGzEK,QAAmBnC,GAAagC,MAAK,SAAAC,GAAI,OAAIC,QAAaE,KAAKC,UAAUJ,GAAOH,EAAU,YAqBlFvB,OAAQA,EACRG,UAAWA,EACXG,gBAAiBA,EACjByB,SAAO,EACPrE,MAAOA,EACPsE,aAAc,CACVnD,MAAO,EACHoD,OAAavE,EAAO+B,EAAYyC,OAC5B5D,kBAAmBC,sCACnBD,kBAAmBC,6CAEvB4D,EAAyBzE,EAAO+B,EAAYpB,UAGpD+D,sBAAuB,6BACvBC,UAAW,wBACXC,eAAgB,6BAChBC,eAAgBC","file":"js/Packages.171eebdc9eaa6d49ed0e.js","sourcesContent":["import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { packagesListUpdatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst packagesListStatusFilter = (apply, currentFilter = {}) => {\n\n    let { systems_updatable: currentValue } = currentFilter;\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const updatableTypesMap = React.useMemo(\n        () =>\n            packagesListUpdatableTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { systems_updatable: (value !== '0' && value) || '' } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStatus),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: updatableTypesMap,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsColumnsStatusPlaceholder)\n        }\n    };\n};\n\nexport default packagesListStatusFilter;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport packagesListStatusFilter from '../../PresentationalComponents/Filters/PackagesListStatusFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { packagesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changePackagesListParams, fetchPackagesAction } from '../../store/Actions/Actions';\nimport { packagesListDefaultFilters } from '../../Utilities/constants';\nimport { createPackagesRows } from '../../Utilities/DataMappers';\nimport { createSortBy } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn, setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { exportPackagesCSV, exportPackagesJSON } from '../../Utilities/api';\n\nconst Packages = () => {\n    const dispatch = useDispatch();\n    const pageTitle = 'Packages';\n    setPageTitle(pageTitle);\n    const packageRows = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.rows\n    );\n    const rows = React.useMemo(() => createPackagesRows(packageRows), [packageRows]);\n\n    const status = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.status\n    );\n    const metadata = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.queryParams\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchPackagesAction(queryParams));\n    }, [queryParams]);\n\n    function apply(params) {\n        dispatch(changePackagesListParams(params));\n    }\n\n    const onExport = (_, format) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const filename = `packages-${date}`;\n        if (format === 'csv') {\n            exportPackagesCSV(queryParams).then(data => downloadFile(data, filename, 'csv'));\n        }\n        else {\n            exportPackagesJSON(queryParams).then(data => downloadFile(JSON.stringify(data), filename, 'json'));\n        }\n    };\n\n    const onSort = useSortColumn(packagesColumns, apply);\n    const sortBy = React.useMemo(\n        () => createSortBy(packagesColumns, metadata.sort, 0),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchPackages)} headerOUIA={'packages'}/>\n            <Main>\n                <TableView\n                    columns={packagesColumns}\n                    store={{ rows, metadata, status, queryParams }}\n                    onSort={onSort}\n                    onExport={onExport}\n                    sortBy={sortBy}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    compact\n                    apply={apply}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersPackagesSearchTitle),\n                                intl.formatMessage(messages.labelsFiltersPackagesSearchPlaceHolder)\n                            ),\n                            packagesListStatusFilter(apply, queryParams.filter)\n                        ]\n                    }}\n                    remediationButtonOUIA={'toolbar-remediation-button'}\n                    tableOUIA={'package-details-table'}\n                    paginationOUIA={'package-details-pagination'}\n                    defaultFilters={packagesListDefaultFilters}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Packages;\n"],"sourceRoot":""}