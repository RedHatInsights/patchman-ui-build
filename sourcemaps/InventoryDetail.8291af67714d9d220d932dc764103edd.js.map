{"version":3,"file":"js/InventoryDetail.efe8a229ab88ac1905ea.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./src/PresentationalComponents/PatchSetWrapper/PatchSetWrapper.js","webpack:///./src/SmartComponents/Modals/Helpers.js","webpack:///./src/SmartComponents/Modals/UnassignSystemsModal.js","webpack:///./src/SmartComponents/Modals/useUnassignSystemsHook.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/DetailWrapper.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryDetailHead.js","webpack:///./src/SmartComponents/SystemDetail/InventoryDetail.js","webpack:///./src/Utilities/usePatchSetState.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport PatchSetWizard from '../../SmartComponents/PatchSetWizard/PatchSetWizard';\nimport UnassignSystemsModal from '../../SmartComponents/Modals/UnassignSystemsModal';\n\nconst PatchSetWrapper = ({ patchSetState, setPatchSetState }) => {\n    return (<>\n        {(patchSetState.isUnassignSystemsModalOpen) && <UnassignSystemsModal\n            unassignSystemsModalState={patchSetState}\n            setUnassignSystemsModalOpen={setPatchSetState}\n            systemsIDs={patchSetState.systemsIDs}\n        />}\n        {(patchSetState.isPatchSetWizardOpen) &&\n        <PatchSetWizard systemsIDs={patchSetState.systemsIDs} setBaselineState={setPatchSetState} />}\n    </>);\n};\n\nPatchSetWrapper.propTypes = {\n    patchSetState: propTypes.object,\n    setPatchSetState: propTypes.func\n};\nexport default PatchSetWrapper;\n","import React from 'react';\nimport { GridItem } from '@patternfly/react-core';\n\nimport messages from '../../Messages';\nimport { fetchSystems } from '../../Utilities/api';\n\nexport const filterSystemsWithoutSets = (systemsIDs) =>  {\n    return fetchSystems({\n        limit: -1, 'filter[baseline_name]': 'neq:',\n        filter: { stale: [true, false] }\n    }).then((allSystemsWithPatchSet) => {\n        return systemsIDs.filter(systemID =>\n            allSystemsWithPatchSet?.data.some(system => system.id === systemID)\n        );\n    });\n};\n\nexport const renderUnassignModalMessages = (bodyMessage, systemsCount, intl) => (<GridItem>\n    {intl.formatMessage(\n        messages[bodyMessage],\n        { systemsCount, b: (...chunks) => <b>{chunks}</b> }\n    )}\n</GridItem>);\n\n","import React, { Fragment, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Modal, Button, Grid, Skeleton } from '@patternfly/react-core';\nimport { injectIntl } from 'react-intl';\n\nimport messages from '../../Messages';\nimport { useUnassignSystemsHook } from './useUnassignSystemsHook';\nimport { renderUnassignModalMessages, filterSystemsWithoutSets } from './Helpers';\n\nconst UnassignSystemsModal = ({ unassignSystemsModalState = {}, setUnassignSystemsModalOpen, intl }) => {\n    const { systemsIDs, isUnassignSystemsModalOpen } = unassignSystemsModalState;\n    const [systemsWithPatchSet, setSystemWithPatchSet] = useState([]);\n    const [systemsLoading, setSystemsLoading] = useState(true);\n\n    const handleModalToggle = (shouldRefresh) => {\n        setUnassignSystemsModalOpen({\n            isUnassignSystemsModalOpen: !isUnassignSystemsModalOpen,\n            systemsIDs: [],\n            shouldRefresh\n        });\n    };\n\n    const handleModalClose = () => {\n        handleModalToggle(false);\n    };\n\n    const handleUnassignment = useUnassignSystemsHook(handleModalToggle, systemsWithPatchSet);\n\n    useEffect(() => {\n        setSystemsLoading(true);\n\n        filterSystemsWithoutSets(systemsIDs).then(result => {\n            setSystemWithPatchSet(result);\n            setSystemsLoading(false);\n        });\n    }, [systemsIDs]);\n\n    const systemsWithoutPatchSetCount = systemsIDs.length - systemsWithPatchSet.length;\n\n    return (\n        <Modal\n            variant={'small'}\n            isOpen={unassignSystemsModalState.isUnassignSystemsModalOpen}\n            title={intl.formatMessage(messages.textUnassignSystemsTitle)}\n            onClose={handleModalClose}\n            titleIconVariant=\"warning\"\n            actions={[\n                <Button\n                    key=\"confirm\"\n                    variant=\"danger\"\n                    onClick={handleUnassignment}\n                    isDisabled={systemsLoading || systemsWithPatchSet.length === 0}\n                >\n                    {intl.formatMessage(messages.labelsRemove)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={handleModalClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            <Grid hasGutter>\n                {systemsLoading\n                    ? <Skeleton />\n                    : <Fragment>\n                        {systemsWithPatchSet.length > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsStatement', systemsWithPatchSet.length, intl)\n                        }\n                        {systemsWithoutPatchSetCount > 0 &&\n                            renderUnassignModalMessages('textUnassignSystemsWarning', systemsWithoutPatchSetCount, intl)\n                        }\n                    </Fragment>\n                }\n            </Grid>\n        </Modal>\n    );\n};\n\nUnassignSystemsModal.propTypes = {\n    intl: propTypes.any,\n    setUnassignSystemsModalOpen: propTypes.func,\n    unassignSystemsModalState: propTypes.object\n};\nexport default injectIntl(UnassignSystemsModal);\n","import { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { removePatchSetApi } from '../../Utilities/api';\nimport { patchSetUnassignSystemsNotifications } from '../../Utilities/constants';\n\n/**\n*Handles removing one or more systems from different patch sets.\n* @param {Function} [handleModalToggle] function to close the modal on callback\n* @param {Array} [systemsWithPatchSet] array of systems to be removed\n* @returns {handleSystemsRemoval}\n*/\nexport const useUnassignSystemsHook = (handleModalToggle, systemsWithPatchSet) => {\n    const dispatch = useDispatch();\n    const handleSystemsRemoval = async () => {\n        const result = await removePatchSetApi({ inventory_ids: systemsWithPatchSet });\n\n        //TODO: mockups do not have error notifications designed, add them if UX designes.\n        if (result.status === 200) {\n            handleModalToggle(true);\n            dispatch(\n                addNotification(\n                    patchSetUnassignSystemsNotifications(systemsWithPatchSet?.length || 0).success\n                )\n            );\n        }\n    };\n\n    return handleSystemsRemoval;\n};\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseDetailWrapper = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./DetailWrapper\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseDetailWrapper.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar DetailWrapper = React.forwardRef(function (props, ref) { return _jsx(BaseDetailWrapper, __assign({ innerRef: ref }, props)); });\nDetailWrapper.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nDetailWrapper.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default DetailWrapper;\n//# sourceMappingURL=DetailWrapper.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInventoryDetailHead = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryDetailHead\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInventoryDetailHead.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InventoryDetailHead = React.forwardRef(function (props, ref) { return _jsx(BaseInventoryDetailHead, __assign({ innerProps: ref }, props)); });\nInventoryDetailHead.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInventoryDetailHead.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InventoryDetailHead;\n//# sourceMappingURL=InventoryDetailHead.js.map","import React, { useEffect } from 'react';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useSelector, useDispatch, useStore } from 'react-redux';\nimport { combineReducers } from 'redux';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { defaultReducers } from '../../store';\nimport { SystemDetailStore } from '../../store/Reducers/SystemDetailStore';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { setPageTitle, useFeatureFlag } from '../../Utilities/Hooks';\nimport { InventoryDetailHead, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Alert, Grid, GridItem, TextContent, Text } from '@patternfly/react-core';\nimport { fetchSystemDetailsAction } from '../../store/Actions/Actions';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';;\nimport PatchSetWrapper from '../../PresentationalComponents/PatchSetWrapper/PatchSetWrapper';\nimport usePatchSetState from '../../Utilities/usePatchSetState';\nimport { featureFlags } from '../../Utilities/constants';\nimport { useParams } from 'react-router-dom';\nimport SystemDetail from './SystemDetail';\n\nconst InventoryDetail = () => {\n    const {  inventoryId } = useParams();\n    const store = useStore();\n\n    const dispatch = useDispatch();\n    const { hasThirdPartyRepo, patchSetName } = useSelector(\n        ({ entityDetails }) => entityDetails && entityDetails || {}\n    );\n\n    const { display_name: displayName } = useSelector(\n        ({ entityDetails }) => entityDetails?.entity ?? {}\n    );\n\n    const { patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal } = usePatchSetState();\n\n    useEffect(() => {\n        dispatch(fetchSystemDetailsAction(inventoryId));\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, [patchSetState.shouldRefresh]);\n\n    const pageTitle = displayName && `${displayName} - ${intl.formatMessage(messages.titlesSystems)}`;\n    setPageTitle(pageTitle);\n\n    const openPatchSetWizard = () => {\n        openPatchSetAssignWizard(inventoryId);\n    };\n\n    const isPatchSetEnabled = useFeatureFlag(featureFlags.patch_set);\n\n    return (\n        <DetailWrapper\n            onLoad={({ mergeWithDetail }) => {\n                store.replaceReducer(combineReducers({\n                    ...defaultReducers,\n                    ...mergeWithDetail(SystemDetailStore)\n                }));\n            }}\n            inventoryId={inventoryId}\n        >\n            <PatchSetWrapper patchSetState={patchSetState} setPatchSetState={setPatchSetState} />\n            <Header\n                title=\"\"\n                headerOUIA={'inventory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchSystems),\n                        to: '/systems',\n                        isActive: false\n                    },\n                    displayName && {\n                        title: displayName,\n                        isActive: true\n                    }\n                ]}\n            >\n                <InventoryDetailHead\n                    hideBack\n                    showTags\n                    inventoryId={inventoryId}\n                    actions={isPatchSetEnabled && [\n                        {\n                            title: intl.formatMessage(messages.titlesTemplateAssign),\n                            key: 'assign-to-template',\n                            onClick: openPatchSetWizard\n                        },\n                        {\n                            title: intl.formatMessage(messages.titlesTemplateRemoveMultipleButton),\n                            key: 'remove-from-template',\n                            isDisabled: !patchSetName,\n                            onClick: () => openUnassignSystemsModal([inventoryId])\n                        }]}\n                    //FIXME: remove this prop after inventory detail gets rid of activeApps in redux\n                    appList={[]}\n                >\n                    <Grid>\n                        <GridItem>\n                            {patchSetName && <TextContent>\n                                <Text>\n                                    {`${intl.formatMessage(messages.labelsColumnsTemplate)}: ${patchSetName}`}\n                                </Text>\n                            </TextContent>\n                            }\n                        </GridItem>\n                        <GridItem>\n                            {hasThirdPartyRepo &&\n                    (<Alert className='pf-u-mt-md' isInline variant=\"info\"\n                        title={intl.formatMessage(messages.textThirdPartyInfo)}>\n                    </Alert>)\n                            }\n                        </GridItem>\n                    </Grid>\n                </InventoryDetailHead>\n            </Header>\n            <Main>\n                <SystemDetail inventoryId={inventoryId}/>\n            </Main>\n        </DetailWrapper>);\n};\n\nexport default InventoryDetail;\n","import { useState } from 'react';\nimport {\n    filterSelectedActiveSystemIDs\n} from './Helpers';\n\n/**\n* Manages unified state for patch set wizard and unassign modal.\n* @param {Object} [selectedRows] selected rows object to be removed.\n* @returns {patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal}\n*/\nconst usePatchSetState = (selectedRows) => {\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const openPatchSetAssignWizard = (systemID) => {\n        setPatchSetState({\n            isPatchSetWizardOpen: true,\n            systemsIDs: typeof systemID === 'string' && systemID !== ''\n                ? [systemID]\n                : filterSelectedActiveSystemIDs(selectedRows),\n            shouldRefresh: false\n        }\n        );\n    };\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openPatchSetEditModal = (patchSetID) => {\n        setPatchSetState({ isPatchSetWizardOpen: true, patchSetID });\n    };\n\n    return { patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal };\n};\n\nexport default usePatchSetState;\n"],"names":["_a","component","props","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","error","concat","children","PatchSetWrapper","patchSetState","setPatchSetState","isUnassignSystemsModalOpen","unassignSystemsModalState","setUnassignSystemsModalOpen","systemsIDs","isPatchSetWizardOpen","setBaselineState","propTypes","renderUnassignModalMessages","bodyMessage","systemsCount","intl","GridItem","formatMessage","messages","b","chunks","UnassignSystemsModal","useState","systemsWithPatchSet","setSystemWithPatchSet","systemsLoading","setSystemsLoading","handleModalToggle","shouldRefresh","handleModalClose","handleUnassignment","dispatch","useDispatch","handleSystemsRemoval","removePatchSetApi","inventory_ids","status","addNotification","patchSetUnassignSystemsNotifications","success","useUnassignSystemsHook","fetchSystems","limit","filter","stale","then","allSystemsWithPatchSet","systemID","data","some","system","id","filterSystemsWithoutSets","result","systemsWithoutPatchSetCount","Modal","variant","isOpen","title","onClose","titleIconVariant","actions","Button","key","onClick","isDisabled","Grid","hasGutter","Skeleton","Fragment","injectIntl","__assign","assign","n","arguments","apply","this","BaseDetailWrapper","history","useHistory","store","Cmp","className","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","InventoryLoadError","ref","innerRef","DetailWrapper","defaultProps","Bullseye","Spinner","size","BaseInventoryDetailHead","InventoryDetailHead","innerProps","inventoryId","useParams","useStore","useSelector","entityDetails","hasThirdPartyRepo","patchSetName","displayName","entity","display_name","usePatchSetState","openPatchSetAssignWizard","openUnassignSystemsModal","fetchSystemDetailsAction","clearNotifications","pageTitle","setPageTitle","isPatchSetEnabled","useFeatureFlag","featureFlags","onLoad","mergeWithDetail","replaceReducer","combineReducers","defaultReducers","SystemDetailStore","Header","headerOUIA","breadcrumbs","to","isActive","hideBack","showTags","appList","TextContent","Text","Alert","isInline","Main","SystemDetail","selectedRows","filterSelectedActiveSystemIDs","openPatchSetEditModal","patchSetID"],"sourceRoot":""}