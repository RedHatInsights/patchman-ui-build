{"version":3,"sources":["webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"names":["initialState","rows","entities","selectedRows","status","page","perPage","metadata","limit","offset","total_items","modifyInventory","columns","state","loaded","lastSeenColumn","filter","key","isLoading","hasError","createSystemsRows","modifyPackageSystems","createPackageSystemsRows","inventoryEntitiesReducer","inventoryModifier","action","newState","type","stateAfterSelection","selectRows","ActionTypes"],"mappings":"g3BAMA,IAAMA,EAAe,CACjBC,KAAM,GACNC,SAAU,GACVC,aAAc,GACdC,OAAQ,GACRC,KAAM,EACNC,QAAS,GACTC,SAAU,CACNC,MAAO,GACPC,OAAQ,EACRC,YAAa,IAKRC,EAAkB,SAACC,EAASC,GACrC,GAAIA,EAAMC,OAAQ,CACd,IAAIC,EAAiBF,EAAMD,QAAQI,QAAO,kBAAqB,YAArB,EAAGC,OAG7C,OAFAF,EAAiB,CAAC,EAAD,KAAMA,EAAe,IAArB,IAAyBE,IAAK,iBAE/C,OACOJ,GADP,IAEIT,OAAQ,CAAEc,WAAW,EAAOC,UAAU,GACtCP,QAAS,GAAF,eACAA,GAAW,KADX,OAEAG,GAAkB,KAEzBd,MAAMmB,QAAkBP,EAAMZ,KAAMY,EAAMV,gBAIlD,OAAOU,GAGEQ,EAAuB,SAACT,EAASC,GAC1C,OAAIA,EAAMC,OACN,OACOD,GADP,IAEID,UACAX,MAAMqB,QAAyBT,EAAMZ,KAAMY,EAAMV,gBAIlDU,GAGEU,EAA2B,SAACX,EAASY,GAAV,OAAgC,WAAkC,IAAjCX,EAAiC,uDAAzBb,EAAcyB,EAAW,uCAClGC,EAAW,EAAH,GAAQb,GACpB,OAAQY,EAAOE,MACX,IAAK,0BACD,OAAOH,EAAkBZ,EAASc,GAEtC,IAAK,wBAED,OADAA,EAAStB,OAAS,CAAEc,WAAW,EAAMC,UAAU,GACxCO,EAEX,IAAK,yBAED,OADAA,EAAStB,OAAS,CAAEc,WAAW,EAAMC,UAAU,GACxCO,EAEX,IAAK,gBACD,IAAME,GAAsBC,QAAWH,EAAUD,GACjD,OAAOD,EAAkBZ,EAASgB,GAGtC,KAAKE,KACD,OAAO9B,EAEX,QACI,OAAOa","file":"js/747.1ec5cfe7476687b7349a.js","sourcesContent":["import { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], key: 'last_upload' }];\n\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ],\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            newState.status = { isLoading: true, hasError: true };\n            return newState;\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"sourceRoot":""}