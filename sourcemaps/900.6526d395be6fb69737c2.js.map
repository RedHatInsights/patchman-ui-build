{"version":3,"sources":["webpack:///./src/Messages.js","webpack:///./src/PresentationalComponents/Filters/PublishDateFilter.js","webpack:///./src/PresentationalComponents/Filters/SearchFilter.js","webpack:///./src/PresentationalComponents/Filters/StatusFilter.js","webpack:///./src/PresentationalComponents/Filters/TypeFilter.js","webpack:///./src/PresentationalComponents/Snippets/ExternalLink.js","webpack:///./src/PresentationalComponents/Snippets/NoSystemData.js","webpack:///./src/PresentationalComponents/TableView/TableFooter.js","webpack:///./src/PresentationalComponents/TableView/TableView.js","webpack:///./src/PresentationalComponents/TableView/TableViewAssets.js","webpack:///./src/SmartComponents/Remediation/PatchRemediationButton.js","webpack:///./src/SmartComponents/Remediation/RemediationModal.js","webpack:///./src/SmartComponents/SystemAdvisories/SystemAdvisories.js","webpack:///./src/SmartComponents/SystemPackages/SystemPackages.js","webpack:///./src/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/PresentationalComponents/AdvisoryType/AdvisoryType.js","webpack:///./src/PresentationalComponents/Snippets/EmptyStates.js","webpack:///./src/PresentationalComponents/Snippets/Label.js","webpack:///./src/PresentationalComponents/Snippets/DescriptionWithLink.js","webpack:///./src/Utilities/DataMappers.js","webpack:///./src/PresentationalComponents/Snippets/AdvisoriesIcon.js","webpack:///./src/Utilities/Helpers.js","webpack:///./src/Utilities/Hooks.js","webpack:///./src/Utilities/IntlProvider.js","webpack:///./src/Utilities/axiosInterceptors.js","webpack:///./src/Utilities/api.js","webpack:///./src/Utilities/constants.js","webpack:///./src/store/ActionTypes.js","webpack:///./src/store/Actions/Actions.js","webpack:///./src/store/Reducers/HelperReducers.js","webpack:///./src/store/Reducers/SystemAdvisoryListStore.js","webpack:///./src/store/Reducers/SystemPackageListStore.js"],"names":["defineMessages","generalAppName","id","description","defaultMessage","labelsBulkSelectAll","labelsBulkSelectNone","labelsBulkSelectPage","labelsColumnsApplicableSystems","labelsColumnsCVSS","labelsColumnsCveID","labelsColumnsInstalledVersion","labelsColumnsLatestVersion","labelsColumnsName","labelsColumnsPublishDate","labelsColumnsSeverity","labelsColumnsStatus","labelsColumnsStatusPlaceholder","labelsColumnsSummary","labelsColumnsSynopsis","labelsColumnsType","labelsColumnsUpgradable","labelsCves","labelsCvesButton","labelsDescription","labelsFiltersClear","labelsFiltersCvesSearchPlaceHolder","labelsFiltersPackagesSearchPlaceHolder","labelsFiltersPackagesSearchTitle","labelsFiltersPublishDate","labelsFiltersPublishDatePlaceholder","labelsFiltersReset","labelsFiltersSearch","labelsFiltersSearchAdvisoriesPlaceholder","labelsFiltersSearchAdvisoriesTitle","labelsFiltersStatus","labelsFiltersSystemsSearchPlaceholder","labelsFiltersSystemsSearchTitle","labelsFiltersType","labelsFiltersTypePlaceholder","labelsModifiedDate","labelsPublicDate","labelsRemediate","labelsSeverity","linksLearnAboutInsights","linksLearnMore","linksReadMore","linksSearchSecurityRatings","linksViewPackagesAndErrata","statesActivateInsights","statesError","statesMinimumPatchPermissionsRequired","statesNoApplicableAdvisories","statesNoMatchingAdvisories","statesNoMatchingCve","statesNoMatchingPackages","statesPatchNotConfigured","statesRequiresPatchPermissions","statesSystemUpToDate","textLockVersionTooltip","textThirdPartyInfo","titlesAdvisories","titlesAffectedSystems","titlesPackages","titlesPatchAdvisories","titlesPatchPackages","titlesPatchSystems","titlesSystems","apply","currentFilter","currentValue","public_date","filterByPublicDate","value","filter","label","intl","messages","type","conditionalFilterType","filterValues","onChange","event","items","publicDateOptions","placeholder","search","title","React","searchValue","setSearchValue","debounce","searchAdvisory","updatable","updatableTypesMap","updatableTypes","toString","filterByType","advisoryTypesMap","advisoryTypes","advisory_type","ExternalLink","link","text","href","target","flex","default","spacer","propTypes","NoSystemData","style","paddingTop","icon","WrenchIcon","Title","headingLevel","size","Button","variant","component","TableFooter","page","perPage","onSetPage","totalItems","onPerPageSelect","paginationOUIA","TableToolbar","Pagination","itemCount","widgetId","PaginationVariant","ouiaId","PropTypes","TableView","columns","store","rows","metadata","status","queryParams","onCollapse","onSelect","onSort","onExport","filterConfig","sortBy","remediationProvider","selectedRows","compact","remediationButtonOUIA","tableOUIA","errorState","emptyState","defaultFilters","RemediationModalCmp","setRemediationModalCmp","convertLimitOffset","limit","offset","isRemediationLoading","setRemediationLoading","data","resolvedData","RemediationModal","useRemoveFilter","deleteFilters","deleteFilterGroup","selectedCount","arrayFromObj","length","STATUS_REJECTED","STATUS_RESOLVED","PrimaryToolbar","pagination","total_items","isCompact","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","onDeleteGroup","actionsConfig","actions","PatchRemediationButton","isDisabled","onClick","showRemediationModal","ouia","isLoading","exportConfig","bulkSelect","useBulkSelectConfig","STATUS_LOADING","SkeletonTable","colSize","rowSize","Table","aria-label","cells","canSelectAll","isStickyHeader","TableVariant","TableHeader","TableBody","advisoriesColumns","cellFormatters","expandable","transforms","sortable","cellWidth","key","systemAdvisoriesColumns","systemPackagesColumns","packagesColumns","props","width","cvesTableColumns","className","isSmall","alignItems","justifyContent","display","Spinner","isSVG","color","globalPaletteWhite","dispatch","useDispatch","remediations","setRemediations","insights","experimental","loadRemediations","pfReactTable","PfTable","TableGridBreakpoint","SortByDirection","then","handleRemediationSuccess","res","addNotification","getNotification","openWizard","onRemediationCreated","RemediationWizard","defaultProps","f","SystemAdvisories","history","handleNoSystemData","firstMount","setFirstMount","advisories","useSelector","SystemAdvisoryListStore","entity","entityDetails","expandedRows","error","createSystemAdvisoriesRows","clearSystemAdvisoriesStore","decodeQueryparams","location","push","encodeURLParams","fetchApplicableSystemAdvisories","_","rowId","expandSystemAdvisoryRow","getRowIdByIndexExpandable","useOnSelect","fetchApplicableSystemAdvisoriesApi","toSelect","selectSystemAdvisoryRow","advisory","useSortColumn","createSortBy","sort","useSetPage","usePerPageSelect","params","changeSystemAdvisoryListParams","Unavailable","detail","remediationIdentifiers","systemId","searchFilter","typeFilter","publishDateFilter","withRouter","SystemPackages","packages","SystemPackageListStore","createSystemPackagesRows","clearSystemPackagesStore","fetchApplicableSystemPackages","fetchApplicablePackagesApi","selectSystemPackagesRow","pkg","pkgUpdates","updates","latestUpdate","name","evra","row","changeSystemPackagesParams","Object","keys","SystemUpToDate","statusFilter","systemPackagesDefaultFilters","SystemDetail","isInventoryApp","activeTabKey","setActiveTabKey","areTabsHidden","setTabsHidden","prevTabsHidden","Tabs","activeKey","isHidden","Tab","eventKey","TabTitleText","T","data-ouia-component-type","data-ouia-component-id","AdvisoryType","advisoryType","item","Flex","flexWrap","FlexItem","isFilled","EmptyAdvisoryList","EmptyState","EmptyStateVariant","EmptyStateIcon","SearchIcon","EmptyPackagesList","EmptyCvesList","Label","children","DescriptionWithLink","severityObject","getSeverityById","attributes","severity","TextContent","cve_count","TextList","TextListVariants","TextListItem","TextListItemVariants","Text","TextVariants","whiteSpace","truncate","replace","RegExp","handlePatchLink","entityTypes","createAdvisoriesRows","index","isOpen","selected","undefined","synopsis","applicable_systems","processDate","parent","heightAuto","colSpan","createSystemsRows","map","rest","installedPckg","packages_installed","updatablePckg","packages_updatable","rhba","rhba_count","rhsa","rhsa_count","rhea","rhea_count","osName","os_name","osMajor","os_major","osMinor","os_minor","rhsm","Math","random","disableCheckbox","every","count","applicable_advisories","operating_system","createPackageSystemsRows","installed_evra","available_evra","upgradable","pkgNEVRA","createUpgradableColumn","summary","createPackagesRows","systems_installed","systems_updatable","createCvesRows","console","log","window","cve","advisorySeverities","impact","document","baseURI","parseFloat","cvss_score","toFixed","AdvisoriesIcon","tooltipText","Icon","Tooltip","content","transformPairs","input","issues","systems","header","values","column","multiple","join","direction","compoundSortValues","forEach","col","dir","findIndex","createSystemsSortBy","orderBy","orderDirection","asc","addOrRemoveItemFromSet","targetObj","inputArr","inputObj","reduce","obj","getNewSelectedItems","selectedItems","currentItems","payload","concat","arrayOfObjects","getOffsetFromPageLimit","getLimitFromPageSize","str","max","end","substr","createAdvisoriesIcons","SecurityIcon","BugIcon","EnhancementIcon","marginLeft","body","indexOf","Link","to","remediationIdentifier","remediationProviderWithPairs","createPairs","transformFunc","pairsCreated","encodeParams","parameters","shouldTranslateKeys","allParams","result","entries","category","filterCategory","filterCategories","find","apiValue","getFilterValue","operator","flattenFilters","argKey","encodeURIComponent","argValue","some","includes","encodeApiParams","urlParams","systemProfile","selectedTags","queryString","parsed","qs","startsWith","bracketIndex","objParent","slice","objKey","filterValue","split","categories","chips","match","changeListParams","oldParams","newParams","newState","hasOwnProperty","tags","subtractDate","days","date","Date","setDate","getDate","toISOString","preserveNewlines","sortCves","cves","sortedCves","aCells","bCells","aCell","bCell","stringA","toUpperCase","stringB","localeCompare","reverse","createOSColumn","lockedVersion","filterSelectedRowIDs","prepareEntitiesParams","apiParams","callback","useHandleRefresh","per_page","usePagePerPage","columnName","compoundKey","removeFilter","resetFilters","selectedItem","categoryId","activeFilter","toRemove","Array","isArray","__","currentFilters","rawData","fetchAllData","selectRows","constructFilename","transformKey","constructKey","createSelectedRow","setPageTitle","useDeepCompareEffect","effect","deps","ref","current","isDeepEqualReact","toggleProps","checked","useGetEntities","fetchApi","_items","patchParams","results","total","meta","cache","createIntlCache","locale","navigator","language","createIntl","onError","axiosInstance","axios","config","chrome","getUserPermissions","userPermissions","inventoryPermissionList","access","permission","interceptors","request","use","authInterceptor","response","responseDataInterceptor","ReadOnlyNotification","err","isAxiosError","statusText","createApiCall","endpoint","method","auth","getUser","url","withCredentials","fetchApplicableAdvisoriesApi","fetchSystems","fetchSystemDetails","fetchAdvisoryDetailsApi","advisoryName","fetchPackageDetailsApi","packageName","fetchAdvisorySystems","args","fetchPackageSystems","fetchPackagesList","fetchCvesInfo","cveIds","fetch","credentials","headers","Accept","JSON","stringify","cve_list","json","fetchViewAdvisoriesSystems","exportAdvisoriesCSV","Headers","accept","exportAdvisoriesJSON","exportSystemsCSV","exportSystemsJSON","exportPackagesCSV","exportPackagesJSON","desc","storeListDefaults","isBeta","page_size","packagesListDefaultFilters","packagesListUpdatableTypes","package","FETCH_APPLICABLE_ADVISORIES","EXPAND_ADVISORY_ROW","SELECT_ADVISORY_ROW","CHANGE_ADVISORY_LIST_PARAMS","CHANGE_SYSTEM_ADVISORY_LIST_PARAMS","EXPAND_SYSTEM_ADVISORY_ROW","FETCH_APPLICABLE_SYSTEM_ADVISORIES","SELECT_SYSTEM_ADVISORY_ROW","CLEAR_SYSTEM_ADVISORIES","FETCH_ADVISORY_DETAILS","CLEAR_ADVISORY_DETAILS","CHANGE_SYSTEM_PACKAGES_LIST_PARAMS","FETCH_APPLICABLE_SYSTEM_PACKAGES","SELECT_SYSTEM_PACKAGES_ROW","CLEAR_SYSTEM_PACKAGES","TRIGGER_GLOBAL_FILTER","FETCH_PACKAGES_LIST","FETCH_PACKAGE_DETAILS","CLEAR_PACKAGE_DETAILS","CHANGE_PACKAGES_LIST_PARAMS","FETCH_PACKAGE_SYSTEMS","CLEAR_PACKAGE_SYSTEMS","CHANGE_PACKAGE_SYSTEMS_PARAMS","FETCH_CVES_INFO","CHANGE_CVES_STORE_PARAMS","FETCH_SYSTEM_DETAIL","CLEAR_ENTITIES","CHANGE_ENTITIES_PARAMS","fetchApplicableAdvisories","ActionTypes","Promise","resolve","noError","fetchAvisoryDetails","fetchPackageDetails","changeAdvisoryListParams","expandAdvisoryRow","rowState","selectAdvisoryRow","clearAdvisoryDetailStore","clearPackageDetailStore","fetchPackageSystemsAction","clearPackageSystemsStore","globalFilter","fetchPackagesAction","changePackagesListParams","changePackageSystemsParams","fetchCves","fetchSystemDetailsAction","clearEntitiesStore","changeEntitiesParams","changeFilters","state","action","selectedUpdated","expandRows","expandedUpdated","fetchPending","fetchRejected","fetchFulfilled","initializeState"],"mappings":"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","file":"js/900.4ea8ff7b2be24bf24de8.js","sourcesContent":["\n/* eslint-disable max-len */\n/* eslint sort-keys: [\"error\", \"asc\", {minKeys: 4}] */\n\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n\n    generalAppName: {\n        id: 'generalAppName',\n        description: 'regsiter page title',\n        defaultMessage: 'Patch'\n    },\n    labelsBulkSelectAll: {\n        id: 'labelsBulkSelectAll',\n        description: 'bulk select option',\n        defaultMessage: 'Select all ({count})'\n    },\n    labelsBulkSelectNone: {\n        id: 'labelsBulkSelectNone',\n        description: 'bulk select option',\n        defaultMessage: 'Select none (0)'\n    },\n    labelsBulkSelectPage: {\n        id: 'labelsBulkSelectPage',\n        description: 'bulk select option',\n        defaultMessage: 'Select page ({count})'\n    },\n    labelsColumnsApplicableSystems: {\n        id: 'labelsColumnsApplicableSystems',\n        description: 'shared label',\n        defaultMessage: 'Applicable systems'\n    },\n    labelsColumnsCVSS: {\n        id: 'labelsColumnsCVSS',\n        description: 'shared label',\n        defaultMessage: 'CVSS'\n    },\n    labelsColumnsCveID: {\n        id: 'labelsColumnsCveID',\n        description: 'shared label',\n        defaultMessage: 'CVE ID'\n    },\n    labelsColumnsInstalledVersion: {\n        id: 'labelsColumnsInstalledVersion',\n        description: 'shared label',\n        defaultMessage: 'Installed version'\n    },\n    labelsColumnsLatestVersion: {\n        id: 'labelsColumnsLatestVersion',\n        description: 'shared label',\n        defaultMessage: 'Latest version'\n    },\n    labelsColumnsName: {\n        id: 'labelsColumnsName',\n        description: 'shared label',\n        defaultMessage: 'Name'\n    },\n    labelsColumnsPublishDate: {\n        id: 'labelsColumnsPublishDate',\n        description: 'shared label',\n        defaultMessage: 'Publish date'\n    },\n    labelsColumnsSeverity: {\n        id: 'labelsColumnsSeverity',\n        description: 'shared label',\n        defaultMessage: 'Severity'\n    },\n    labelsColumnsStatus: {\n        id: 'labelsColumnsStatus',\n        description: 'Label for status fitler',\n        defaultMessage: 'Status'\n    },\n    labelsColumnsStatusPlaceholder: {\n        id: 'labelsColumnsStatus',\n        description: 'Label for status fitler placeholder',\n        defaultMessage: 'Filter by status'\n    },\n    labelsColumnsSummary: {\n        id: 'labelsColumnsSummary',\n        description: 'shared label',\n        defaultMessage: 'Summary'\n    },\n    labelsColumnsSynopsis: {\n        id: 'labelsColumnsSynopsis',\n        description: 'shared label',\n        defaultMessage: 'Synopsis'\n    },\n    labelsColumnsType: {\n        id: 'labelsColumnsType',\n        description: 'Label for type fitler placeholder',\n        defaultMessage: 'Type'\n    },\n    labelsColumnsUpgradable: {\n        id: 'labelsColumnsUpgradable',\n        description: 'shared label',\n        defaultMessage: 'Upgradable'\n    },\n    labelsCves: {\n        id: 'labelsCves',\n        description: 'label for cves info link',\n        defaultMessage: 'CVEs'\n    },\n    labelsCvesButton: {\n        id: 'labelsCvesButton',\n        description: 'label for cves button',\n        defaultMessage: '{cvesCount, plural, one {# CVE} other {# CVEs}} associated with this patch'\n    },\n    labelsDescription: {\n        id: 'labelsDescription',\n        description: 'Label',\n        defaultMessage: 'Description'\n    },\n    labelsFiltersClear: {\n        id: 'labelsFiltersClear',\n        description: 'label for remove filter chips',\n        defaultMessage: 'Clear filters'\n    },\n    labelsFiltersCvesSearchPlaceHolder: {\n        id: 'labelsFiltersCvesSearch',\n        description: 'search filter placeholder for packages pages',\n        defaultMessage: 'Filter by CVE ID'\n    },\n    labelsFiltersPackagesSearchPlaceHolder: {\n        id: 'labelsFiltersPackagesSearchPlaceHolder',\n        description: 'search filter placeholder for packages pages',\n        defaultMessage: 'Filter by name or summary'\n    },\n    labelsFiltersPackagesSearchTitle: {\n        id: 'labelsFiltersPackagesSearchTitle',\n        description: 'search filter placeholder for packages pages',\n        defaultMessage: 'Name'\n    },\n    labelsFiltersPublishDate: {\n        id: 'labelsFiltersPublishDate',\n        description: 'shared label',\n        defaultMessage: 'Publish date'\n    },\n    labelsFiltersPublishDatePlaceholder: {\n        id: 'labelsFiltersPublishDate',\n        description: 'shared placeholder label',\n        defaultMessage: 'Filter by publish date'\n    },\n    labelsFiltersReset: {\n        id: 'labelsFiltersReset',\n        description: 'label for remove filter chips',\n        defaultMessage: 'Reset filters'\n    },\n    labelsFiltersSearch: {\n        id: 'labelsFiltersSearch',\n        description: 'Label for search fitler placeholder',\n        defaultMessage: 'Search '\n    },\n    labelsFiltersSearchAdvisoriesPlaceholder: {\n        id: 'labelsFiltersSearchAdvisoriesPlaceholder',\n        description: 'Label for search fitler placeholder',\n        defaultMessage: 'Filter by name or synopsis'\n    },\n    labelsFiltersSearchAdvisoriesTitle: {\n        id: 'labelsFiltersSearchAdvisoriesTitle',\n        description: 'Label for search fitler placeholder',\n        defaultMessage: 'Advisory'\n    },\n    labelsFiltersStatus: {\n        id: 'labelsFiltersStatus',\n        description: 'Label for status fitler placeholder',\n        defaultMessage: 'Status'\n    },\n    labelsFiltersSystemsSearchPlaceholder: {\n        id: 'labelsFiltersSystemsSearch',\n        description: 'search filter placeholder for systems pages',\n        defaultMessage: 'Filter by name'\n    },\n    labelsFiltersSystemsSearchTitle: {\n        id: 'labelsFiltersSystemsSearchTitle',\n        description: 'search filter placeholder for systems pages',\n        defaultMessage: 'System'\n    },\n    labelsFiltersType: {\n        id: 'labelsFiltersType',\n        description: 'Label for type fitler',\n        defaultMessage: 'Type'\n    },\n    labelsFiltersTypePlaceholder: {\n        id: 'labelsFiltersType',\n        description: 'Label for type fitler placeholder',\n        defaultMessage: 'Filter by type'\n    },\n    labelsModifiedDate: {\n        id: 'labelsModifiedDate',\n        description: 'Modified date label',\n        defaultMessage: 'Modified {date}'\n    },\n    labelsPublicDate: {\n        id: 'labelsPublicDate',\n        description: 'Public date label',\n        defaultMessage: 'Issued {date}'\n    },\n    labelsRemediate: {\n        id: 'labelsRemediate',\n        description: 'Button label',\n        defaultMessage: 'Remediate'\n    },\n    labelsSeverity: {\n        id: 'labelsSeverity',\n        description: 'label for cves info',\n        defaultMessage: 'Severity'\n    },\n    linksLearnAboutInsights: {\n        id: 'linksLearnAboutInsights',\n        description: 'no system data page button label',\n        defaultMessage: 'Learn about the Insights client'\n    },\n    linksLearnMore: {\n        id: 'linksLearnMore',\n        description: 'Learn more',\n        defaultMessage: 'Learn more'\n    },\n    linksReadMore: {\n        id: 'linksReadMore',\n        description: 'Label',\n        defaultMessage: 'Read more'\n    },\n    linksSearchSecurityRatings: {\n        id: 'linksSearchSecurityRatings',\n        description: 'A link label to security ratings page',\n        defaultMessage: 'Learn more about security ratings'\n    },\n    linksViewPackagesAndErrata: {\n        id: 'viewPackagesAndErrata',\n        description: 'A link label to access.redhat.com ',\n        defaultMessage: 'View packages and errata at access.redhat.com'\n    },\n    statesActivateInsights: {\n        id: 'statesActivateInsights',\n        description: 'no system data page body',\n        defaultMessage: 'Activate the Insights client'\n    },\n    statesError: {\n        id: 'statesError',\n        description: 'Label',\n        defaultMessage: 'Error'\n    },\n    statesMinimumPatchPermissionsRequired: {\n        id: 'statesMinimumPatchPermissionsRequired',\n        description: 'No access page body',\n        defaultMessage: 'To view the content of this page, you must be granted a minimum of Patch permissions from your Organisation Administratior'\n    },\n    statesNoApplicableAdvisories: {\n        id: 'statesNoApplicableAdvisories',\n        description: 'system up to date page title',\n        defaultMessage: 'No applicable advisories'\n    },\n    statesNoMatchingAdvisories: {\n        id: 'statesNoMatchingAdvisories',\n        description: 'Label',\n        defaultMessage: 'No matching advisories found'\n    },\n    statesNoMatchingCve: {\n        id: 'statesNoMatchingCve',\n        description: 'Label',\n        defaultMessage: 'No matching CVES found'\n    },\n    statesNoMatchingPackages: {\n        id: 'statesNoMatchingPackages',\n        description: 'Label',\n        defaultMessage: 'No matching packages found'\n    },\n    statesPatchNotConfigured: {\n        id: 'statesPatchNotConfigured',\n        description: 'no system data page title',\n        defaultMessage: 'Patch is not yet configured'\n    },\n    statesRequiresPatchPermissions: {\n        id: 'statesRequiresPatchPermissions',\n        description: 'No access page title',\n        defaultMessage: 'This application requires Patch permissions'\n    },\n    statesSystemUpToDate: {\n        id: 'statesSystemUpToDate',\n        description: 'system up to date page body',\n        defaultMessage: 'This system is up to date, based on package information submitted at the most recent system check-in'\n    },\n    textLockVersionTooltip: {\n        id: 'textLockVersionTooltip',\n        description: 'Tooltip text for vesrion lock column',\n        defaultMessage: `Your RHEL version is locked at version {lockedVersion}`\n    },\n    textThirdPartyInfo: {\n        id: 'textThirdPartyInfo',\n        description: 'text about the third paty managed hosts',\n        defaultMessage: 'This system has content that is managed by repositories other than the Red Hat CDN'\n    },\n    titlesAdvisories: {\n        id: 'titlesAdvisories',\n        description: 'page title with capital letter',\n        defaultMessage: 'Advisories'\n    },\n    titlesAffectedSystems: {\n        id: 'affectedSystems',\n        description: 'page title with capital letter',\n        defaultMessage: 'Affected systems'\n    },\n    titlesPackages: {\n        id: 'titlesPackages',\n        description: 'page title with capital letters',\n        defaultMessage: 'Packages'\n    },\n    titlesPatchAdvisories: {\n        id: 'titlesPatchAdvisories',\n        description: 'title for Advisories page',\n        defaultMessage: 'Patch advisories'\n    },\n    titlesPatchPackages: {\n        id: 'titlesPatchPackages',\n        description: 'title for Packages page',\n        defaultMessage: 'Patch packages'\n    },\n    titlesPatchSystems: {\n        id: 'titlesPatchSystems',\n        description: 'title for Systems page',\n        defaultMessage: 'Patch systems'\n    },\n    titlesSystems: {\n        id: 'titlesSystems',\n        description: 'title with capital letters',\n        defaultMessage: 'Systems'\n    }\n});\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { publicDateOptions } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { public_date: currentValue } = currentFilter;\n\n    const filterByPublicDate = value => {\n        apply({ filter: { public_date: (value !== 'all' && value) || '' } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersPublishDate),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublicDate(value);\n            },\n            items: publicDateOptions,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersPublishDatePlaceholder)\n        }\n    };\n};\n\nexport default publishDateFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst searchFilter = (apply, search, title, placeholder) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [searchAdvisory] = React.useState(() =>\n        debounce(value => apply({ search: value }), 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: title,\n        filterValues: {\n            'aria-label': 'search-field',\n            onChange: (event, value) => {\n                setSearchValue(value);\n                searchAdvisory(value);\n            },\n            placeholder,\n            value: searchValue\n        }\n    };\n};\n\nexport default searchFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { updatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { updatable: currentValue } = currentFilter;\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const updatableTypesMap = React.useMemo(\n        () =>\n            updatableTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { updatable: (value !== '0' && value) || '' } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStatus),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: updatableTypesMap,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsColumnsStatusPlaceholder)\n        }\n    };\n};\n\nexport default statusFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst typeFilter = (apply, currentFilter = {}) => {\n    const advisoryTypesMap = React.useMemo(\n        () =>\n            advisoryTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { advisory_type: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersType),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: advisoryTypesMap,\n            value: currentFilter.advisory_type,\n            placeholder: intl.formatMessage(messages.labelsFiltersTypePlaceholder)\n        }\n    };\n};\n\nexport default typeFilter;\n","import { Flex, FlexItem } from '@patternfly/react-core';\nimport ExternalLinkSquareAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-square-alt-icon';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst ExternalLink = ({ link, text }) => {\n    return (\n        <a\n            href={link}\n            target=\"__blank\"\n        >\n            <Flex flex={{ default: 'inlineFlex' }}>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    <ExternalLinkSquareAltIcon />\n                </FlexItem>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    {text}\n                </FlexItem>\n            </Flex>\n        </a>\n\n    );\n};\n\nExternalLink.propTypes = {\n    link: propTypes.string,\n    text: propTypes.string\n};\n\nexport default ExternalLink;\n","import { Bullseye, Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const NoSystemData = () => (\n    <Bullseye>\n        <EmptyState style={{ paddingTop: 40 }}>\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                {intl.formatMessage(messages.statesPatchNotConfigured)}\n            </Title>\n            <EmptyStateBody>\n                {intl.formatMessage(messages.statesActivateInsights)}\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                {intl.formatMessage(messages.linksLearnAboutInsights)}\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TableFooter = ({ page, perPage, onSetPage, totalItems, onPerPageSelect, paginationOUIA }) => {\n    return (\n        <TableToolbar>\n            <Pagination\n                itemCount={totalItems}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                widgetId={`pagination-options-menu-bottom`}\n                variant={PaginationVariant.bottom}\n                ouiaId={paginationOUIA}\n            />\n        </TableToolbar>\n    );\n};\n\nTableFooter.propTypes = {\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalItems: PropTypes.number,\n    paginationOUIA: PropTypes.string\n};\n\nexport default TableFooter;\n","import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport PatchRemediationButton from '../../SmartComponents/Remediation/PatchRemediationButton';\nimport RemediationModal from '../../SmartComponents/Remediation/RemediationModal';\nimport { STATUS_LOADING, STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { arrayFromObj, buildFilterChips, convertLimitOffset } from '../../Utilities/Helpers';\nimport { useRemoveFilter, useBulkSelectConfig } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableFooter from './TableFooter';\n\nconst TableView = ({\n    columns,\n    store: {\n        rows,\n        metadata,\n        status,\n        queryParams: { filter, search }\n    },\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    onExport,\n    filterConfig,\n    sortBy,\n    remediationProvider,\n    selectedRows,\n    compact,\n    apply,\n    remediationButtonOUIA,\n    tableOUIA,\n    paginationOUIA,\n    errorState,\n    emptyState,\n    defaultFilters\n}) => {\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n\n    async function showRemediationModal(data) {\n        setRemediationLoading(true);\n        const resolvedData = await data;\n        setRemediationModalCmp(() => () => <RemediationModal data={resolvedData} />);\n        setRemediationLoading(false);\n    }\n\n    const [deleteFilters, deleteFilterGroup] = useRemoveFilter(filter, apply, defaultFilters);\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    return (\n        <React.Fragment>\n            {\n                (status === STATUS_REJECTED) && errorState ||\n                (status === STATUS_RESOLVED && emptyState !== false) && emptyState ||\n                (<React.Fragment>\n                    <PrimaryToolbar\n                        pagination={{\n                            itemCount: metadata.total_items,\n                            page,\n                            perPage,\n                            isCompact: true,\n                            onSetPage,\n                            onPerPageSelect,\n                            ouiaId: `top-${paginationOUIA}`\n                        }}\n                        filterConfig={filterConfig}\n                        activeFiltersConfig={{\n                            filters: buildFilterChips(filter, search),\n                            onDelete: deleteFilters,\n                            deleteTitle: intl.formatMessage(defaultFilters\n                                && messages.labelsFiltersReset || messages.labelsFiltersClear),\n                            onDeleteGroup: deleteFilterGroup\n                        }}\n                        actionsConfig={{\n                            actions: [remediationProvider && (\n                                <React.Fragment>\n                                    <PatchRemediationButton\n                                        isDisabled={selectedCount === 0 || isRemediationLoading}\n                                        onClick={() =>\n                                            showRemediationModal(remediationProvider())\n                                        }\n                                        ouia={remediationButtonOUIA}\n                                        isLoading={isRemediationLoading}\n                                    />\n\n                                    <RemediationModalCmp />\n                                </React.Fragment>\n                            )]\n                        }}\n                        exportConfig={{\n                            isDisabled: metadata.total_items === 0,\n                            onSelect: onExport\n                        }}\n                        bulkSelect={onSelect && useBulkSelectConfig(selectedCount, onSelect, metadata, rows, onCollapse)}\n\n                    />\n\n                    {status === STATUS_LOADING && <SkeletonTable colSize={5} rowSize={20} />}\n                    {status === STATUS_RESOLVED && (\n                        <React.Fragment>\n                            <Table\n                                aria-label=\"Patch table view\"\n                                cells={columns}\n                                onSelect={metadata.total_items && onSelect}\n                                rows={rows}\n                                onCollapse={metadata.total_items && onCollapse}\n                                canSelectAll={false}\n                                onSort={metadata.total_items && onSort}\n                                ouiaId={tableOUIA}\n                                sortBy={metadata.total_items && sortBy}\n                                isStickyHeader\n                                variant={compact && TableVariant.compact}\n                            >\n                                <TableHeader />\n                                <TableBody />\n                            </Table>\n                            <TableFooter\n                                totalItems={metadata.total_items}\n                                perPage={perPage}\n                                page={page}\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                paginationOUIA={`bottom-${paginationOUIA}`}\n                            />\n                        </React.Fragment>)}\n                </React.Fragment>)\n            }\n        </React.Fragment>\n    );\n};\n\nTableView.propTypes = {\n    columns: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    onExport: PropTypes.func,\n    remediationProvider: PropTypes.func,\n    selectedRows: PropTypes.object,\n    apply: PropTypes.func,\n    sortBy: PropTypes.object,\n    filterConfig: PropTypes.object,\n    store: PropTypes.object,\n    compact: PropTypes.bool,\n    remediationButtonOUIA: PropTypes.string,\n    tableOUIA: PropTypes.string,\n    paginationOUIA: PropTypes.string,\n    errorState: PropTypes.any,\n    emptyState: PropTypes.any,\n    defaultFilters: PropTypes.object\n};\n\nexport default TableView;\n","import { cellWidth, expandable, sortable } from '@patternfly/react-table/dist/js';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nexport const advisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSynopsis),\n        transforms: [sortable],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        key: 'applicable_systems'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(15)],\n        key: 'public_date'\n    }\n];\n\nexport const systemAdvisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: 'Synopsis',\n        transforms: [sortable, cellWidth(45)],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(15)],\n        key: 'advisory_type'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(25)],\n        key: 'public_date'\n    }\n];\n\nexport const systemPackagesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(20)],\n        key: 'name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsInstalledVersion),\n        transforms: [sortable, cellWidth(15)],\n        key: 'evra'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsLatestVersion),\n        transforms: [cellWidth(15)],\n        key: 'latest_update'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [cellWidth(10)],\n        key: 'updatable'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        key: 'summary'\n    }\n];\n\nexport const packagesColumns = [\n    {\n        key: 'name',\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(25)]\n    },\n    {\n        key: 'systems_installed',\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'systems_updatable',\n        title: intl.formatMessage(messages.labelsColumnsUpgradable),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'summary',\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        props: {\n            width: 30\n        }\n    }\n];\n\nexport const cvesTableColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsCveID),\n        transforms: [sortable, cellWidth(40)],\n        key: 'synopsis'\n    },\n    {\n        key: 'impact',\n        title: intl.formatMessage(messages.labelsColumnsSeverity),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    },\n    {\n        key: 'cvss',\n        title: intl.formatMessage(messages.labelsColumnsCVSS),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    }\n];\n","import { Button, Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport { AnsibleTowerIcon } from '@patternfly/react-icons';\nimport globalPaletteWhite from '@patternfly/react-tokens/dist/js/global_palette_white';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst PatchRemediationButton = ({ onClick, isDisabled, isLoading, ouia }) => {\n    return (\n        <Button\n            isDisabled={isDisabled}\n            className={'remediationButtonPatch'}\n            onClick={onClick}\n            ouiaId={ouia}\n            isSmall\n        ><Flex flex={{ default: 'inlineFlex' }}\n                alignItems={{ default: 'alignItemsCenter' }}\n                justifyContent={{ default: 'justifyContentCenter' }}>\n                <FlexItem spacer={{ default: 'spacerXs' }} style={{ display: 'flex' }}>\n                    {isLoading &&\n                                                <Spinner isSVG size='md'/>\n                                     || <AnsibleTowerIcon color={globalPaletteWhite.value}/>}\n                </FlexItem>\n                <FlexItem spacer={{ default: 'spacerXs' }} style={{ display: 'flex' }}>\n                                     &nbsp;{intl.formatMessage(messages.labelsRemediate)}\n                </FlexItem>\n            </Flex>\n        </Button>\n    );\n};\n\nPatchRemediationButton.propTypes = {\n    onClick: propTypes.object,\n    isDisabled: propTypes.bool,\n    isLoading: propTypes.bool,\n    ouia: propTypes.string\n};\n\nexport default PatchRemediationButton;\n","import {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\n\nfunction getLoader() {\n    return (\n        (insights.experimental && insights.experimental.loadRemediations) ||\n        insights.loadRemediations\n    );\n}\n\nconst RemediationModal = ({ data }) => {\n    const dispatch = useDispatch();\n    const [remediations, setRemediations] = React.useState(false);\n    React.useEffect(() => {\n        getLoader()({\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            }\n        }).then(remediations => setRemediations(remediations));\n        return () => setRemediations(false);\n    }, []);\n\n    const handleRemediationSuccess = res => {\n        dispatch(addNotification(res.getNotification()));\n    };\n\n    React.useEffect(() => {\n        remediations &&\n            remediations\n            .openWizard({ ...data, onRemediationCreated: handleRemediationSuccess });\n    }, [remediations]);\n\n    return (\n        <React.Fragment>\n            {remediations.RemediationWizard && (\n                <remediations.RemediationWizard />\n            )}\n        </React.Fragment>\n    );\n};\n\nRemediationModal.propTypes = {\n    data: propTypes.object\n};\n\nRemediationModal.defaultProps = {\n    onRemediationCreated: f => f\n};\n\nexport default RemediationModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemAdvisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changeSystemAdvisoryListParams, clearSystemAdvisoriesStore, expandSystemAdvisoryRow,\n    fetchApplicableSystemAdvisories, selectSystemAdvisoryRow } from '../../store/Actions/Actions';\nimport { fetchApplicableSystemAdvisoriesApi } from '../../Utilities/api';\nimport { STATUS_REJECTED, remediationIdentifiers } from '../../Utilities/constants';\nimport { createSystemAdvisoriesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, decodeQueryparams, encodeURLParams,\n    getRowIdByIndexExpandable, remediationProvider } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn, useOnSelect } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst SystemAdvisories = ({ history, handleNoSystemData }) => {\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const advisories = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.rows\n    );\n\n    const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n\n    const expandedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.status\n    );\n    const error = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.error\n    );\n    const rows = React.useMemo(\n        () =>\n            createSystemAdvisoriesRows(advisories, expandedRows, selectedRows, metadata),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        return () => dispatch(clearSystemAdvisoriesStore());\n    }, []);\n\n    React.useEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(\n                fetchApplicableSystemAdvisories({ id: entity.id, ...queryParams })\n            );\n        }\n    }, [queryParams]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandSystemAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            selectSystemAdvisoryRow(toSelect)\n        );\n    };\n\n    const fetchAllData = () =>\n        fetchApplicableSystemAdvisoriesApi({ id: entity.id, ...queryParams, limit: -1 });\n\n    const onSelect = useOnSelect(rows, selectedRows, fetchAllData, selectRows, (advisory) => advisory.id);\n\n    const onSort = useSortColumn(systemAdvisoriesColumns, apply, 2);\n    const sortBy = React.useMemo(\n        () => createSortBy(systemAdvisoriesColumns, metadata.sort, 2),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeSystemAdvisoryListParams({ id: entity.id, ...params }));\n    }\n\n    const errorState = error.status === 404 ? handleNoSystemData() : <Unavailable/>;\n\n    if (status === STATUS_REJECTED && error.status !== 404) {\n        dispatch(addNotification({\n            variant: 'danger',\n            title: error.title,\n            description: error.detail\n        }));}\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemAdvisoriesColumns}\n                compact\n                onCollapse={onCollapse}\n                onSelect={onSelect}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                onSort={onSort}\n                sortBy={sortBy}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        entity.id,\n                        remediationIdentifiers.advisory\n                    )\n                }\n                selectedRows={selectedRows}\n                systemId={entity.id}\n                apply={apply}\n                store={{ rows, metadata, status, queryParams }}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-advisories-table'}\n                paginationOUIA={'system-advisories-pagination'}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search,\n                            intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle),\n                            intl.formatMessage(messages.labelsFiltersSearchAdvisoriesPlaceholder)\n                        ),\n                        typeFilter(apply, queryParams.filter),\n                        publishDateFilter(apply, queryParams.filter)\n                    ]\n                }}\n                errorState={errorState}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemAdvisories.propTypes = {\n    history: propTypes.object,\n    handleNoSystemData: propTypes.func\n};\nexport default withRouter(SystemAdvisories);\n","import { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport { SystemUpToDate } from '../../PresentationalComponents/Snippets/SystemUpToDate';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemPackagesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport {\n    changeSystemPackagesParams, clearSystemPackagesStore,\n    fetchApplicableSystemPackages, selectSystemPackagesRow\n} from '../../store/Actions/Actions';\nimport { fetchApplicablePackagesApi } from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED,\n    remediationIdentifiers, systemPackagesDefaultFilters } from '../../Utilities/constants';\nimport { createSystemPackagesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, remediationProvider } from '../../Utilities/Helpers';\nimport { useOnSelect, usePerPageSelect, useSetPage, useSortColumn } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst SystemPackages = ({ handleNoSystemData }) => {\n    const dispatch = useDispatch();\n    const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n    const packages = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.rows\n    );\n    const queryParams = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.status\n    );\n    const error = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.error\n    );\n    const rows = React.useMemo(\n        () =>\n            createSystemPackagesRows(packages, selectedRows),\n        [packages,  selectedRows]\n    );\n\n    React.useEffect(() => {\n        return () => dispatch(clearSystemPackagesStore());\n    }, []);\n\n    React.useEffect(()=> {\n        dispatch(fetchApplicableSystemPackages({ id: entity.id, ...queryParams }));\n    }, [queryParams]);\n\n    const constructFilename = (pkg) => {\n        const pkgUpdates = pkg.updates || [];\n        const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n        return latestUpdate && `${pkg.name}-${latestUpdate.evra}`;\n    };\n\n    const transformKey = (row) => {\n        return `${row.name}-${row.evra}`;\n    };\n\n    const fetchAllData = () =>\n        fetchApplicablePackagesApi({ id: entity.id, ...queryParams, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        dispatch(selectSystemPackagesRow(toSelect));\n    };\n\n    const onSelect = useOnSelect(packages, selectedRows, fetchAllData, selectRows, constructFilename, transformKey);\n\n    function apply(params) {\n        dispatch(changeSystemPackagesParams({ id: entity.id, ...params }));\n    }\n\n    const onSort = useSortColumn(systemPackagesColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(systemPackagesColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const errorState = error.status === 404 ?  handleNoSystemData() : <Unavailable/>;\n    const emptyState = (status === STATUS_RESOLVED && metadata.total_items === 0\n                            && Object.keys(queryParams).length === 0) && <SystemUpToDate/>;\n\n    if (status === STATUS_REJECTED && error.status !== 404) {\n        dispatch(addNotification({\n            variant: 'danger',\n            title: error.title,\n            description: error.detail\n        }));}\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemPackagesColumns}\n                store={{ rows, metadata, status, queryParams }}\n                onSelect={onSelect}\n                selectedRows={selectedRows}\n                compact\n                onSort={onSort}\n                sortBy={sortBy}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        entity.id,\n                        remediationIdentifiers.package\n                    )\n                }\n                apply={apply}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search,\n                            intl.formatMessage(messages.labelsFiltersPackagesSearchTitle),\n                            intl.formatMessage(messages.labelsFiltersPackagesSearchPlaceHolder)\n                        ),\n                        statusFilter(apply, queryParams.filter)\n                    ]\n                }}\n                defaultFilters = {systemPackagesDefaultFilters}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-packages-table'}\n                paginationOUIA={'system-packages-pagination'}\n                errorState={errorState}\n                emptyState={emptyState}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemPackages.propTypes = {\n    handleNoSystemData: propTypes.func\n};\nexport default SystemPackages;\n\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport React from 'react';\nimport SystemAdvisories from '../SystemAdvisories/SystemAdvisories';\nimport { useSelector } from 'react-redux';\nimport SystemPackages from '../SystemPackages/SystemPackages';\nimport './SystemDetail.scss';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { NoSystemData } from '../../PresentationalComponents/Snippets/NoSystemData';\nimport propTypes from 'prop-types';\n\nconst SystemDetail = ({ isInventoryApp }) => {\n    const [activeTabKey, setActiveTabKey] = React.useState(0);\n    const [areTabsHidden, setTabsHidden] = React.useState(false);\n\n    const entity = useSelector(({ entityDetails }) => entityDetails.entity || {});\n    const onTabSelect = (event, id) => {\n        setActiveTabKey(id);\n    };\n\n    const handleNoSystemData = () => {\n        isInventoryApp && setTabsHidden(prevTabsHidden => !prevTabsHidden);\n        return isInventoryApp && null || <NoSystemData />;\n    };\n\n    return !entity.id ? null : (!areTabsHidden && (\n        <Tabs activeKey={activeTabKey} onSelect={onTabSelect} className={'patchTabSelect'} isHidden>\n            <Tab eventKey={0} title={<TabTitleText>{intl.formatMessage(messages.titlesAdvisories)}</TabTitleText>}\n                data-ouia-component-type={`system-advisories-tab`}\n                data-ouia-component-id={`system-advisories-tab`}\n            >\n                <SystemAdvisories handleNoSystemData={handleNoSystemData}/>\n            </Tab>\n            <Tab\n                eventKey={1}\n                title={<TabTitleText>{intl.formatMessage(messages.titlesPackages)}</TabTitleText>}\n                data-ouia-component-type={`system-packages-tab`}\n                data-ouia-component-id={`system-packages-tab`}\n            >\n                <SystemPackages handleNoSystemData={handleNoSystemData}/>\n            </Tab>\n        </Tabs>\n    )  || <NoSystemData/>);\n};\n\nSystemDetail.propTypes = {\n    isInventoryApp: propTypes.bool\n};\nexport default SystemDetail;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { Flex, FlexItem } from '@patternfly/react-core';\n\nconst AdvisoryType = ({ type }) => {\n    const advisoryType =\n        advisoryTypes.find(item => item.value === type) || advisoryTypes[2];\n    return (\n        <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n            <FlexItem>{advisoryType.icon}</FlexItem>\n            <FlexItem isFilled>{advisoryType.label}</FlexItem>\n        </Flex>\n    );\n};\n\nAdvisoryType.propTypes = {\n    type: PropTypes.number\n};\n\nexport default AdvisoryType;\n","import {\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const EmptyAdvisoryList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingAdvisories)}\n        </Title>\n    </EmptyState>\n);\n\nexport const EmptyPackagesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingPackages)}\n        </Title>\n    </EmptyState>\n);\n\nexport const EmptyCvesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingCve)}\n        </Title>\n    </EmptyState>\n);\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport './Label.scss';\n\nconst Label = ({ children }) => {\n    return <span className={'patchman-label'}>{children}</span>;\n};\n\nLabel.propTypes = {\n    children: propTypes.any\n};\n\nexport default Label;\n","import React from 'react';\nimport { Text, TextContent, TextVariants, TextList,\n    TextListVariants, TextListItem, TextListItemVariants } from '@patternfly/react-core';\nimport Label from './Label';\nimport { handlePatchLink, truncate, getSeverityById } from '../../Utilities/Helpers';\nimport { entityTypes } from '../../Utilities/constants';\nimport ExternalLink from './ExternalLink';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nexport const DescriptionWithLink = ({ row }) =>  {\n    const severityObject = getSeverityById(row.attributes.severity);\n    return (\n        <TextContent>\n            {\n                row.attributes.cve_count > 0 &&\n                (<TextList component={TextListVariants.dl} style ={{ '--pf-c-content--dl--RowGap': '0.5rem' }}>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsSeverity)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        <SecurityIcon size=\"sm\" color = {severityObject.color}/>  {severityObject.label}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsCves)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        {row.attributes.cve_count}\n                    </TextListItem>\n                </TextList>)}\n            <Label>{intl.formatMessage(messages.labelsDescription)}</Label>\n            <Text component={TextVariants.p} style={{ whiteSpace: 'pre-line' }}>\n                {truncate(row.attributes.description.replace(\n                    new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n                    ''\n                ), 570, handlePatchLink(entityTypes.advisories, row.id, intl.formatMessage(messages.linksReadMore)))}\n            </Text>\n            <ExternalLink link={`https://access.redhat.com/errata/${row.id}`}\n                text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n        </TextContent>);\n};\n\nDescriptionWithLink.propTypes = {\n    row: propTypes.shape({\n        id: propTypes.string,\n        attributes: propTypes.object\n    })\n};\n","import { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport AdvisoryType from '../PresentationalComponents/AdvisoryType/AdvisoryType';\nimport { EmptyAdvisoryList, EmptyPackagesList, EmptyCvesList } from '../PresentationalComponents/Snippets/EmptyStates';\nimport { entityTypes, advisorySeverities } from './constants';\nimport { createUpgradableColumn, handlePatchLink } from './Helpers';\nimport { DescriptionWithLink } from '../PresentationalComponents/Snippets/DescriptionWithLink';\nimport { SystemUpToDate } from '../PresentationalComponents/Snippets/SystemUpToDate';\nimport { TextContent, TextListItem, TextListItemVariants } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nexport const createAdvisoriesRows = (rows, expandedRows, selectedRows) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        row.attributes.synopsis,\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type}\n                                />\n                            )\n                        },\n                        {\n                            title: handlePatchLink(\n                                entityTypes.advisories,\n                                row.id,\n                                row.attributes.applicable_systems\n                            )\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 5 },\n                        title: <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemAdvisoriesRows = (\n    rows,\n    expandedRows,\n    selectedRows,\n    metadata\n) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        row.attributes.synopsis,\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type}\n                                />\n                            )\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 6 },\n                        title: !metadata.search && (metadata.filter && Object.keys(metadata.filter).length === 0)\n                            && <SystemUpToDate />\n                            || <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows.map(({ id, ...rest }) => {\n            const {\n                packages_installed: installedPckg,\n                packages_updatable: updatablePckg,\n                rhba_count: rhba,\n                rhsa_count: rhsa,\n                rhea_count: rhea,\n                os_name: osName,\n                os_major: osMajor,\n                os_minor: osMinor,\n                rhsm\n            } = rest;\n\n            return {\n                id,\n                ...rest,\n                key: Math.random().toString() + id,\n                packages_installed: installedPckg,\n                disableCheckbox: updatablePckg === 0 || [installedPckg, rhba, rhsa, rhea].every(count => count === 0),\n                applicable_advisories: [\n                    rhea || 0,\n                    rhba || 0,\n                    rhsa || 0\n                ],\n                operating_system: {\n                    osName: osName && `${rest.os_name} ${osMajor}.${osMinor}`\n                        || 'No data',\n                    rhsm\n                },\n                selected: selectedRows[id] !== undefined\n            };\n        });\n    return data || [];\n};\n\nexport const createPackageSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows &&\n        rows.map(row => {\n            return {\n                id: row.id,\n                key: Math.random().toString() + row.id,\n                installed_evra: row.installed_evra,\n                available_evra: row.updatable && row.available_evra || row.installed_evra,\n                upgradable: row.updatable,\n                selected: selectedRows[row.id] !== undefined\n            };\n        });\n    return data || [];\n};\n\nexport const createSystemPackagesRows = (rows, selectedRows = {}) => {\n    if (rows.length !== 0) {\n        return rows.map(pkg => {\n            const pkgNEVRA = `${pkg.name}-${pkg.evra}`;\n            const pkgUpdates = pkg.updates || [];\n            const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n\n            return {\n                id: pkgNEVRA,\n                key: pkgNEVRA,\n                selected: selectedRows[pkgNEVRA] !== undefined,\n                disableCheckbox: !latestUpdate,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.evra },\n                    { title: (latestUpdate && latestUpdate.evra) || pkg.evra },\n                    { title: createUpgradableColumn(pkg.updatable) },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createPackagesRows = (rows) => {\n    if (rows && rows.length !== 0) {\n        return rows.map(pkg => {\n            return {\n                id: pkg.name,\n                key: pkg.name,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.systems_installed },\n                    { title: pkg.systems_updatable },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createCvesRows = (rows) => {\n    console.log(window.location);\n    if (rows.length !== 0) {\n        return rows.map(cve => {\n            const { attributes, id } = cve;\n            const severityObject = advisorySeverities.filter(severity => severity.label === attributes.impact)[0];\n\n            return {\n                id,\n                key: id,\n                cells: [\n                    { title: (\n                        <a href={`${document.baseURI}insights/vulnerability/cves/${attributes.synopsis}`}>\n                            {attributes.synopsis}\n                        </a>) },\n                    {\n                        title: (<TextContent>\n                            <TextListItem component={TextListItemVariants.dd}>\n                                <SecurityIcon size=\"sm\" color={severityObject.color}/>  {severityObject.label}\n                            </TextListItem>\n                        </TextContent>),\n                        value: severityObject.label\n                    },\n                    { title: parseFloat(attributes.cvss_score).toFixed(1) }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 4 },\n                        title: <EmptyCvesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n","import React from 'react';\nimport { Flex, FlexItem, Tooltip } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nconst AdvisoriesIcon = ({ count, tooltipText, Icon }) =>(\n    <Tooltip content={tooltipText}>\n        <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n                <Icon/>\n            </FlexItem>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n                {count && count.toString() || 0}\n            </FlexItem>\n        </Flex>\n    </Tooltip>\n);\n\nAdvisoriesIcon.propTypes = {\n    Icon: propTypes.element,\n    count: propTypes.any,\n    tooltipText: propTypes.string\n};\n\nexport default AdvisoriesIcon;\n","import { CheckIcon, LongArrowAltUpIcon,\n    InfoCircleIcon, BugIcon, EnhancementIcon, SecurityIcon } from '@patternfly/react-icons';\nimport { SortByDirection } from '@patternfly/react-table/dist/js';\nimport findIndex from 'lodash/findIndex';\nimport qs from 'query-string';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport AdvisoriesIcon from '../PresentationalComponents/Snippets/AdvisoriesIcon';\nimport {\n    advisorySeverities,\n    compoundSortValues,\n    filterCategories\n} from './constants';\nimport { Flex, FlexItem, Tooltip } from '@patternfly/react-core';\nimport messages from '../Messages';\nimport { intl } from './IntlProvider';\n\nexport const convertLimitOffset = (limit, offset) => {\n    return [offset / limit + 1, limit];\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const transformPairs = (input) => {\n    return {\n        issues: Object.keys(input.data).map(advisory => {\n            return {\n                id: 'patch-advisory:' + advisory,\n                description: advisory,\n                systems: input.data[advisory]\n            };\n        }\n        )\n    };\n};\n\nexport const createSortBy = (header, values, offset) => {\n    if (values) {\n        let [column] = values;\n        let multiple = values.join();\n        let direction =\n            column[0] === '-' ? SortByDirection.desc : SortByDirection.asc;\n        Object.keys(compoundSortValues).forEach(col => {\n            Object.keys(compoundSortValues[col]).forEach(dir => {\n                if (compoundSortValues[col][dir] === multiple) {\n                    column = col;\n                    direction = dir;\n                }\n            });\n        });\n\n        column = column.replace(/^(-|\\+)/, '');\n        const index = findIndex(header, item => item.key === column);\n        let sort = {\n            index: index + offset,\n            direction\n        };\n        return sort;\n    }\n\n    return {};\n};\n\nexport const createSystemsSortBy = (orderBy, orderDirection) => {\n    orderBy = orderBy === 'updated' && 'last_upload' || orderBy;\n    let sort = orderBy;\n\n    Object.keys(compoundSortValues).forEach(col => {\n        if (col === orderBy) {\n            sort = compoundSortValues[col].asc;\n        }\n    });\n\n    return `${orderDirection === 'ASC' ? '' : '-'}${sort}`;\n};\n\nexport const addOrRemoveItemFromSet = (targetObj, inputArr) => {\n    const inputObj = inputArr.reduce(\n        (obj, item) => ((obj[item.rowId] = item.value || undefined), obj),\n        {}\n    );\n    const result = { ...targetObj, ...inputObj };\n    return result;\n};\n\nexport const getNewSelectedItems = (selectedItems, currentItems) => {\n    let payload = [].concat(selectedItems).map(item=>({ rowId: item.id, value: item.selected }));\n    return addOrRemoveItemFromSet(\n        currentItems,\n        payload\n    );\n};\n\n// for expandable rows only\nexport const getRowIdByIndexExpandable = (arrayOfObjects, index) => {\n    return arrayOfObjects[index / 2].id;\n};\n\nexport const getOffsetFromPageLimit = (page, limit) => {\n    return page * limit - limit;\n};\n\nexport const getLimitFromPageSize = limit => {\n    return limit;\n};\n\nexport function truncate(str, max, end) {\n    return str.length > max ? (\n        <React.Fragment>\n            {str.substr(0, max - 1)}\n            ...&nbsp;{end}\n        </React.Fragment>\n    ) : str;\n}\n\nexport function createAdvisoriesIcons([rhea, rhba, rhsa]) {\n    return (\n        <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n            {[rhea, rhba, rhsa].every(item => item === 0) &&\n                'No applicable advisories'}\n            {rhsa !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Security advisories'} count={rhsa} Icon={SecurityIcon} />\n                </FlexItem>)}\n            {rhba !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Bug fixes'} count={rhba} Icon={BugIcon} />\n                </FlexItem>)}\n            {rhea !== 0 && (\n                <FlexItem spacer={{ default: 'spacerXs' }}>\n                    <AdvisoriesIcon tooltipText={'Enhancements'} count={rhea} Icon={EnhancementIcon} />\n                </FlexItem>)}\n        </Flex>\n    );\n}\n\nexport function createUpgradableColumn(value) {\n    return <div style={{\n        display: 'flex',\n        alignItems: 'center'\n    }}>\n        {\n            value && <LongArrowAltUpIcon style={{ color: 'var(--pf-global--palette--blue-400)' }} />\n                || <CheckIcon style={{ color: 'var(--pf-global--success-color--100)' }}/>\n        }\n        {<span style={{ marginLeft: 'var(--pf-global--spacer--sm)' }}>\n            {\n                value && 'Upgradable' || 'Up-to-date'\n            }\n        </span>}\n    </div>;\n}\n\nexport function getSeverityById(id) {\n    return (\n        advisorySeverities.find(item => item.value === id) ||\n        advisorySeverities[0]\n    );\n}\n\nexport function handlePatchLink(type, name, body) {\n    if (location.href.indexOf('inventory') === -1) {\n        return (\n            <Link to={`/${type}/${name}`}>\n                {body === undefined ? name : body}\n            </Link>\n        );\n    } else {\n        return (\n            <a href={`${document.baseURI}insights/patch/${type}/${name}`}>\n                {body || name}\n            </a>\n        );\n    }\n}\n\nexport const arrayFromObj = items =>\n    Object.values(items).filter(value => value);\n\nexport const remediationProvider = (issues, systems, remediationIdentifier) => {\n    issues = [].concat(issues);\n    systems = [].concat(systems);\n    return issues.length && systems.length\n        ? {\n            issues: issues.map(item => ({\n                id: `${remediationIdentifier}:${item}`,\n                description: item\n            })),\n            systems\n        }\n        : false;\n};\n\nexport async function remediationProviderWithPairs(issues, createPairs, transformFunc) {\n    if (issues) {\n        const pairsCreated = await createPairs(issues);\n        const res = transformFunc(pairsCreated);\n        return await res;\n    }\n    else {\n        return false;\n    }\n}\n\n;\n\nexport const getFilterValue = (category, key) => {\n    const filterCategory = filterCategories[category];\n    if (filterCategory) {\n        const filterOption = filterCategory.values.find(\n            item => item.value === key\n        );\n        return filterOption || { apiValue: key };\n    }\n};\n\nexport const encodeParams = (parameters, shouldTranslateKeys) => {\n    const flattenFilters = filter => {\n        let result = {};\n        filter &&\n            Object.entries(filter).forEach(item => {\n                let [key, value] = item;\n                value = shouldTranslateKeys && getFilterValue(key, value).apiValue || value;\n                const operator = [].concat(value).length > 1 ? 'in:' : '';\n                result = {\n                    ...result,\n                    [`filter[${key}]`]: `${operator}${value.toString()}`\n                };\n            });\n        return result;\n    };\n\n    let { filter, ...allParams } = parameters;\n    allParams = { ...allParams, ...flattenFilters(filter) };\n    let params = [];\n    Object.keys(allParams).forEach(key => {\n        const argKey = encodeURIComponent(key);\n        const argValue = encodeURIComponent(allParams[key]);\n\n        if (!['', undefined, null].some(value => [argValue, key].includes(value))) {\n            if (!['selectedTags', 'systemProfile'].includes(key)) {\n                params.push(argKey.concat('=').concat(argValue));\n            } else if (key === 'selectedTags') {\n                params.push.apply(params, allParams[key]);\n            } else {\n                params.push(allParams[key]);\n            }\n        }\n    });\n\n    return '?'.concat(params.join('&'));\n};\n\nexport const encodeApiParams = parameters => {\n    return encodeParams(parameters, true);\n};\n\nexport const encodeURLParams = parameters => {\n    delete parameters.id;\n    let urlParams = { ...parameters };\n    delete urlParams.systemProfile;\n    delete urlParams.selectedTags;\n    return encodeParams(urlParams, false);\n};\n\nexport const decomposeFilterValue = filterValue => {\n    if (filterValue.startsWith('in:')) {\n        const values = filterValue.slice(3);\n        return values.split(',');\n    }\n\n    return filterValue;\n};\n\nexport const decodeQueryparams = queryString => {\n    const parsed = qs.parse(queryString);\n    const res = {};\n    Object.keys(parsed).forEach(key => {\n        if (!key.startsWith('filter[system_profile]')) {\n            const value = parsed[key];\n            const bracketIndex = key.search(/\\[.*\\]/);\n            if (bracketIndex > 0) {\n                const objParent = key.slice(0, bracketIndex);\n                const objKey = key.slice(bracketIndex + 1, -1);\n                res[objParent] = {\n                    ...res[objParent],\n                    [objKey]: decomposeFilterValue(value)\n                };\n            } else {\n                res[key] = value;\n            }\n        }\n    });\n    return res;\n};\n\nexport const buildFilterChips = (filters, search) => {\n\n    let filterConfig = [];\n    const processFilters = () => {\n        let categories = Object.keys(filters).filter(\n            item =>\n                filters[item] !== '' && [].concat(filters[item]).length !== 0\n        );\n        filterConfig = filterConfig.concat(\n            categories.map(category => {\n                const { label, values } = filterCategories[category];\n                return {\n                    category: label,\n                    id: category,\n                    chips: [].concat(filters[category]).map(filterValue => {\n                        const match = values.find(\n                            item =>\n                                item.value.toString() === filterValue.toString()\n                        );\n                        return {\n                            name: match.label,\n                            value: filterValue,\n                            id: match.value\n                        };\n                    })\n                };\n            })\n        );\n    };\n\n    const processSearch = () => {\n        filterConfig = filterConfig.concat([\n            {\n                category: 'Search',\n                id: 'search',\n                chips: [\n                    {\n                        name: search,\n                        value: search\n                    }\n                ]\n            }\n        ]);\n    };\n\n    filters && processFilters();\n    search && processSearch();\n\n    return filterConfig;\n};\n\nexport const changeListParams = (oldParams, newParams) => {\n    const newState = { ...oldParams, ...newParams };\n    const offsetResetParams = ['filter', 'search', 'limit', 'selectedTags'];\n    if (offsetResetParams.some(item => newParams.hasOwnProperty(item))) {\n        newState.offset = 0;\n    }\n\n    if (newParams.hasOwnProperty('filter')) {\n        newState.filter = { ...oldParams.filter, ...newParams.filter };\n    }\n\n    if (newState.hasOwnProperty('tags')) {\n        newState && delete newState.tags;\n    }\n\n    return newState;\n};\n\nexport function subtractDate(days) {\n    const date = new Date();\n    date.setDate(date.getDate() - days);\n    return date.toISOString();\n}\n\nexport function preserveNewlines(input) {\n    return input && input.replace(\n        new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n        ''\n    );\n}\n\nexport function sortCves(cves, index, direction) {\n\n    const sortedCves = cves.sort(\n        ({ cells: aCells }, { cells: bCells }) => {\n            const aCell = aCells[index].value || aCells[index].title;\n            const bCell = bCells[index].value || bCells[index].title;\n\n            const stringA = aCell.toString().toUpperCase();\n            const stringB = bCell.toString().toUpperCase();\n\n            return stringA.localeCompare(stringB);\n        }\n    );\n\n    return {\n        sortBy: { index, direction },\n        sortedCves: direction === SortByDirection.asc ? sortedCves : sortedCves.reverse()\n    };\n\n}\n\nexport const createOSColumn = ({ osName, rhsm }) => (rhsm === '' || rhsm ===  undefined) &&  osName || (\n    <Tooltip\n        content={\n            intl.formatMessage(messages.textLockVersionTooltip, { lockedVersion: rhsm })\n        }\n    >\n        <Flex flex={{ default: 'inlineFlex' }}>\n            <FlexItem spacer={{ default: 'spacerSm' }}>{osName}</FlexItem>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n                <InfoCircleIcon size=\"sm\" color={'var(--pf-global--info-color--100)'} />\n            </FlexItem>\n        </Flex>\n    </Tooltip>\n);\n\nexport const filterSelectedRowIDs = (selectedRows) =>  Object.keys(selectedRows).filter(row => selectedRows[row]);\n\nexport const prepareEntitiesParams = (parameters) => {\n    const offset = parameters.offset || getOffsetFromPageLimit(parameters.page || 1, parameters.perPage || 20);\n    const limit = parameters.limit || getLimitFromPageSize(parameters.perPage || 20);\n\n    const apiParams = { offset, limit, search: parameters.search, sort: parameters.sort };\n\n    //we need explicitly remove 'undefined' parameters for safety\n    Object.keys(apiParams).forEach(key => apiParams[key] === undefined && delete apiParams[key]);\n\n    return apiParams;\n};\n","import { SortByDirection } from '@patternfly/react-table/dist/js';\nimport isDeepEqualReact from 'fast-deep-equal/react';\nimport React from 'react';\nimport { compoundSortValues } from './constants';\nimport { convertLimitOffset, getLimitFromPageSize, getOffsetFromPageLimit, createSystemsSortBy } from './Helpers';\nimport { intl } from './IntlProvider';\nimport messages from '../Messages';\n\nexport const useSetPage = (limit, callback) => {\n    const onSetPage = React.useCallback((_, page) =>\n        callback({ offset: getOffsetFromPageLimit(page, limit) })\n    );\n    return onSetPage;\n};\n\nexport const useHandleRefresh = (metadata, callback) => {\n    const handleRefresh = React.useCallback(({ page, per_page: perPage }) => {\n        const offset = getOffsetFromPageLimit(page, perPage);\n        const limit = getLimitFromPageSize(perPage);\n        (metadata.offset !== offset || metadata.limit !== limit) &&\n            callback({\n                ...(metadata.offset !== offset && { offset }),\n                ...(metadata.limit !== limit && { limit })\n            });\n    });\n    return handleRefresh;\n};\n\nexport const usePagePerPage = (limit, offset) => {\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(limit, offset),\n        [limit, offset]\n    );\n    return [page, perPage];\n};\n\nexport const usePerPageSelect = callback => {\n    const onPerPageSelect = React.useCallback((_, perPage) =>\n        callback({ limit: getLimitFromPageSize(perPage), offset: 0 })\n    );\n    return onPerPageSelect;\n};\n\nexport const useSortColumn = (columns, callback, offset = 0) => {\n    const onSort = React.useCallback((_, index, direction) => {\n        let columnName = columns[index - offset].key;\n        const compoundKey = compoundSortValues[columnName];\n        if (compoundKey) {\n            columnName = compoundKey[direction];\n        }\n        else if (direction === SortByDirection.desc) {\n            columnName = '-' + columnName;\n        }\n\n        callback({ sort: columnName });\n    });\n    return onSort;\n};\n\nexport const useRemoveFilter = (filters, callback, defaultFilters = { filter: {} }) => {\n    const removeFilter = React.useCallback((event, selected, resetFilters) => {\n        let newParams = { filter: {} };\n        selected.forEach(selectedItem => {\n            let { id: categoryId, chips } = selectedItem;\n            if (categoryId !== 'search') {\n                let activeFilter = filters[categoryId];\n                const toRemove = chips.map(item => item.id.toString());\n                if (Array.isArray(activeFilter)) {\n                    newParams.filter[categoryId] = activeFilter.filter(\n                        item => !toRemove.includes(item.toString())\n                    );\n                } else {\n                    newParams.filter[categoryId] = '';\n                }\n            } else {\n                newParams.search = '';\n            }\n\n        });\n\n        if (resetFilters) {\n            newParams =  resetFilters(newParams);\n        }\n\n        callback({ ...newParams });\n    });\n\n    const deleteFilterGroup = (__, filters) => {\n        removeFilter(__, filters);\n    };\n\n    const deleteFilters = (__, selected) => {\n        const resetFilters = (currentFilters) => {\n            if (Object.keys(defaultFilters.filter).length > 0)\n            {\n                currentFilters.filter = { ...currentFilters.filter, ...defaultFilters.filter };\n            }\n\n            return currentFilters;\n        };\n\n        removeFilter(__, selected, resetFilters);\n    };\n\n    return [deleteFilters, deleteFilterGroup];\n};\n\nexport const useOnSelect = (rawData, selectedRows, fetchAllData, selectRows,\n    constructFilename = undefined, transformKey = undefined) =>{\n    const constructKey = (row) => {\n        if (transformKey) {\n            return transformKey(row);\n        }\n        else {\n            return row.id || row.name;\n        }\n    };\n\n    const onSelect =  React.useCallback((event, selected, rowId) => {\n        const createSelectedRow = (rawData, toSelect = []) => {\n            rawData.forEach((row)=>{\n                toSelect.push(\n                    {\n                        id: constructKey(row),\n                        selected: constructFilename && constructFilename(row) || row.id\n                    }\n                );});\n\n            return toSelect;\n        };\n\n        switch (event) {\n            case 'none': {\n                const toSelect = [];\n                Object.keys(selectedRows).forEach(id=>{\n                    toSelect.push(\n                        {\n                            id,\n                            selected: false\n                        }\n                    );\n                });\n                selectRows(toSelect);\n                break;\n            }\n\n            case 'page': {\n                if (Array.isArray(rawData)) {\n                    rawData = rawData.filter(row => !row.disableCheckbox);\n                }\n\n                selectRows(createSelectedRow(rawData));\n                break;\n            }\n\n            case 'all': {\n                const fetchCallback = ({ data }) => {\n                    selectRows(createSelectedRow(data));\n                };\n\n                fetchAllData().then(fetchCallback);\n\n                break;\n            }\n\n            default: {\n                selectRows([{\n                    id: constructKey(rawData[rowId]),\n                    selected: selected && (constructFilename && constructFilename(rawData[rowId]) || true)\n                }]);\n            }\n\n        }}\n    );\n\n    return onSelect;\n};\n\nexport const setPageTitle = (title) => {\n    React.useEffect(() => {\n        if (title) {\n            document.title = `${title} - Patch | Red Hat Insights`;\n        }\n    }, [title]);\n};\n\nexport const useDeepCompareEffect = (effect, deps) => {\n    const ref = React.useRef(undefined);\n\n    if (!ref.current || !isDeepEqualReact(deps, ref.current)) {\n        ref.current = deps;\n    }\n\n    React.useEffect(effect, ref.current);\n};\n\nexport const useBulkSelectConfig = (selectedCount, onSelect, metadata, rows, onCollapse) => ({\n    count: selectedCount,\n    items: [{\n        title: intl.formatMessage(messages.labelsBulkSelectNone),\n        onClick: () => {\n            onSelect('none');\n        }\n    }, {\n        title: intl.formatMessage(messages.labelsBulkSelectPage,\n            { count: onCollapse && rows.length / 2 || rows.length }\n        ),\n        onClick: () => {\n            onSelect('page');\n        }\n    },\n    {\n        title: intl.formatMessage(messages.labelsBulkSelectAll, { count: metadata.total_items }),\n        onClick: () => {\n            onSelect('all');\n        }\n    }],\n    onSelect: () => {\n        selectedCount === 0 ? onSelect('all') : onSelect('none');\n    },\n    toggleProps: {\n        'data-ouia-component-type': 'bulk-select-toggle-button'\n    },\n    checked: selectedCount === 0 ? false : selectedCount === metadata.total_items ? true : null,\n    isDisabled: metadata.total_items === 0 && selectedCount === 0\n});\n\nexport const useGetEntities = (fetchApi, apply, id) => {\n    const getEntities = async (\n        _items,\n        { orderBy, orderDirection, page, per_page: perPage, patchParams }\n    ) => {\n\n        const sort = createSystemsSortBy(orderBy, orderDirection);\n\n        const items = await fetchApi({\n            page,\n            per_page: perPage,\n            ...patchParams,\n            sort,\n            ...id && { id } || {}\n        });\n\n        apply({\n            page,\n            per_page: perPage,\n            sort\n        });\n\n        return {\n            results: items.data.map(row => ({ id: row.id, ...row.attributes })),\n            total: items.meta?.total_items\n        };\n    };\n\n    return getEntities;\n};\n","import { createIntl, createIntlCache } from 'react-intl';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\n\nexport const intl = createIntl({\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    locale\n}, cache);\n\nexport const intlSettings = { locale };\n","import {\n    authInterceptor,\n    responseDataInterceptor\n} from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport axios from 'axios';\nimport { ReadOnlyNotification } from './constants';\n\nconst axiosInstance = axios.create();\n\nexport async function  accessCheckInterceptor (config)  {\n\n    const userPermissions = await insights.chrome.getUserPermissions();\n    const inventoryPermissionList = ['inventory:*:*', 'inventory:*:read', 'inventory:hosts:read'];\n\n    const hasInventoryAccess = userPermissions.some((access) => inventoryPermissionList.includes(access?.permission));\n\n    if (!hasInventoryAccess) {\n        throw new axios.Cancel('Operation canceled. User does not have access to Inventory');\n    }\n\n    return config;\n}\n\nexport function errorInterceptor(err) {\n\n    if (!axios.isCancel(err)) {\n\n        const { response, isAxiosError } = { ...err };\n\n        if (response && isAxiosError) {\n            const { status, statusText, data } = response;\n\n            if (!status) {\n                throw err;\n            } else {\n                const genericError = {\n                    title:\n                            'There was an error getting data'\n                };\n\n                const result = { ...genericError, detail: data.error || statusText, status };\n\n                throw result;\n            }\n        }\n\n        throw err;\n    }\n}\n\nexport function readOnlyInterceptor(error) {\n    if (error.response && error.response.status === 503) {\n        const data = ReadOnlyNotification;\n        throw data;\n    }\n\n    throw error;\n}\n\naxiosInstance.interceptors.request.use(accessCheckInterceptor);\naxiosInstance.interceptors.request.use(authInterceptor);\naxiosInstance.interceptors.response.use(responseDataInterceptor);\naxiosInstance.interceptors.response.use(null, readOnlyInterceptor);\naxiosInstance.interceptors.response.use(null, errorInterceptor);\n\nexport default axiosInstance;\n","/* eslint-disable no-unused-vars */\nimport { encodeApiParams } from './Helpers';\nimport axios from './axiosInterceptors';\nimport { prepareEntitiesParams } from './Helpers';\nexport function createApiCall(\n    endpoint,\n    method,\n    parameters = undefined,\n    data = undefined\n) {\n    if (parameters && method === 'get') {\n        endpoint = endpoint.concat(encodeApiParams(parameters));\n    }\n\n    let result = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        axios({\n            method,\n            url: '/api/patch/v1' + endpoint,\n            withCredentials: true,\n            data\n        })\n    );\n\n    return result;\n}\n\nexport const fetchApplicableAdvisoriesApi = params => {\n    return createApiCall('/advisories', 'get', params);\n};\n\nexport const fetchApplicableSystemAdvisoriesApi = params => {\n    let { id, ...allParams } = params;\n    return createApiCall(`/systems/${id}/advisories`, 'get', allParams);\n};\n\nexport const fetchSystems = params => {\n    return createApiCall('/systems', 'get', prepareEntitiesParams(params));\n};\n\nexport const fetchSystemDetails = id => {\n    return createApiCall(`/systems/${id}`, 'get');\n};\n\nexport const fetchAdvisoryDetailsApi = params => {\n    return createApiCall(`/advisories/${params.advisoryName}`, 'get');\n};\n\nexport const fetchPackageDetailsApi = params => {\n    return createApiCall(`/packages/${params.packageName}`, 'get');\n};\n\nexport const fetchApplicablePackagesApi = params => {\n    let { id, ...allParams } = params;\n    return createApiCall(`/systems/${id}/packages`, 'get', allParams);\n};\n\nexport const fetchAdvisorySystems = params => {\n    const { id, ...args } = params;\n    return createApiCall(`/advisories/${id}/systems`, 'get', prepareEntitiesParams(args));\n};\n\nexport const fetchPackageSystems = params => {\n    const { id, ...args } = params;\n    return createApiCall(`/packages/${id}/systems`, 'get', args);\n};\n\nexport const fetchPackagesList = params => {\n    return createApiCall('/packages', 'get', params);\n};\n\nexport const fetchCvesInfo = async ({ cveIds }) => {\n\n    const result = await fetch(`/api/vulnerability/v1/vulnerabilities/cves?limit=${cveIds && cveIds.length}`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ cve_list: cveIds })\n    }).then(res => res.json()).then(data => data);\n\n    return result;\n};\n\nexport const fetchViewAdvisoriesSystems = async (input) => {\n    const result = await fetch(`/api/patch/v1/views/advisories/systems`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(input)\n    }).then(res => res.json()).then(data => data);\n\n    return result;\n};\n\nexport const exportAdvisoriesCSV = params => {\n    let endpoint = '/export/advisories';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'text/csv' })\n    }).then(res => res.text());\n};\n\nexport const exportAdvisoriesJSON = params => {\n    let endpoint = '/export/advisories';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'application/json' })\n    }).then(res => res.json());\n};\n\nexport const exportSystemsCSV = params => {\n    let endpoint = '/export/systems';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'text/csv' })\n    }).then(res => res.text());\n};\n\nexport const exportSystemsJSON = params => {\n    let endpoint = '/export/systems';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'application/json' })\n    }).then(res => res.json());\n};\n\nexport const exportPackagesCSV = params => {\n    let endpoint = '/export/packages';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'text/csv' })\n    }).then(res => res.text());\n};\n\nexport const exportPackagesJSON = params => {\n    let endpoint = '/export/packages';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'application/json' })\n    }).then(res => res.json());\n};\n\n","import BugIcon from '@patternfly/react-icons/dist/js/icons/bug-icon';\nimport EnhancementIcon from '@patternfly/react-icons/dist/js/icons/enhancement-icon';\nimport SecurityIcon from '@patternfly/react-icons/dist/js/icons/security-icon';\nimport React from 'react';\nimport { subtractDate } from './Helpers';\n\nexport const STATUS_REJECTED = 'rejected';\nexport const STATUS_LOADING = 'loading';\nexport const STATUS_RESOLVED = 'resolved';\n\nexport const compoundSortValues = {\n    operating_system: {\n        asc: 'os_name,os_major,os_minor',\n        desc: '-os_name,-os_major,-os_minor'\n    },\n    applicable_advisories: {\n        asc: 'rhsa_count,rhba_count,rhea_count',\n        desc: '-rhsa_count,-rhba_count,-rhea_count'\n    }\n};\n\n// messy check because of frontend-components tests\nexport const ENABLE_PACKAGES = window?.insights?.chrome?.isBeta && insights?.chrome?.isBeta();\nexport const storeListDefaults = {\n    rows: [],\n    metadata: {\n        limit: 25,\n        offset: 0,\n        total_items: 0\n    },\n    expandedRows: {},\n    selectedRows: {},\n    queryParams: {\n        page: 1,\n        page_size: 20\n    },\n    error: {}\n};\n\nexport const systemPackagesDefaultFilters = {\n    filter: { updatable: 'true' }\n};\n\nexport const packagesListDefaultFilters = {\n    filter: { systems_updatable: 'gt:0'  }\n};\n\nexport const publicDateOptions = [\n    { apiValue: '', label: 'All', value: 'all' },\n    {\n        apiValue: `gt:${subtractDate(7)}`,\n        label: 'Last 7 days',\n        value: 'last7'\n    },\n    {\n        apiValue: `gt:${subtractDate(30)}`,\n        label: 'Last 30 days',\n        value: 'last30'\n    },\n    {\n        apiValue: `gt:${subtractDate(90)}`,\n        label: 'Last 90 days',\n        value: 'last90'\n    },\n    {\n        apiValue: `gt:${subtractDate(365)}`,\n        label: 'Last year',\n        value: 'lastYear'\n    },\n    {\n        apiValue: `lt:${subtractDate(365)}`,\n        label: 'More than 1 year ago',\n        value: 'moreThanYear'\n    }\n];\n\nexport const advisorySeverities = [\n    {\n        value: 0,\n        label: 'N/A',\n        color: 'var(--pf-global--Color--200)'\n    },\n    {\n        value: 1,\n        label: 'Low',\n        color: 'var(--pf-global--Color--200)',\n        text:\n            'This rating is given to all other issues that have a security impact. These are the types of vulnerabilities' +\n            ' that are believed to require unlikely circumstances to be able to be exploited, or where a successful exploit' +\n            ' would give minimal consequences.'\n    },\n    {\n        value: 2,\n        label: 'Moderate',\n        color: 'var(--pf-global--warning-color--100)',\n        text:\n            'This rating is given to flaws that may be more difficult to exploit but could still lead to some' +\n            ' compromise of the confidentiality, integrity, or availability of resources, under certain circumstances.' +\n            ' These are the types of vulnerabilities that could have had a Critical impact or Important impact' +\n            ' but are less easily exploited based on a technical evaluation of the flaw, or affect unlikely' +\n            ' configurations.'\n    },\n    {\n        value: 3,\n        label: 'Important',\n        color: '#ec7a08',\n        text:\n            'This rating is given to flaws that can easily compromise the confidentiality, integrity, or availability' +\n            ' of resources. These are the types of vulnerabilities that allow local users to gain privileges, allow' +\n            ' unauthenticated remote users to view resources that should otherwise be protected by authentication,' +\n            ' allow authenticated remote users to execute arbitrary code, or allow remote users to cause a denial' +\n            ' of service.'\n    },\n    {\n        value: 4,\n        label: 'Critical',\n        color: 'var(--pf-global--danger-color--100)',\n        text:\n            'This rating is given to flaws that could be easily exploited by a remote unauthenticated attacker' +\n            ' and lead to system compromise (arbitrary code execution) without requiring user interaction.' +\n            ' These are the types of vulnerabilities that can be exploited by worms. Flaws that require an authenticated' +\n            ' remote user, a local user, or an unlikely configuration are not classed as Critical impact.'\n    }\n];\n\nexport const advisoryTypes = [\n    {\n        value: 3,\n        label: 'Security',\n        icon: <SecurityIcon />\n    },\n    {\n        value: 2,\n        label: 'Bugfix',\n        icon: <BugIcon />\n    },\n    {\n        value: 1,\n        label: 'Enhancement',\n        icon: <EnhancementIcon />\n    }\n];\n\nexport const updatableTypes = [\n    {\n        value: '',\n        label: 'All'\n    },\n    {\n        value: true,\n        label: 'Upgradable'\n    }\n];\n\nexport const packagesListUpdatableTypes = [\n    {\n        value: '',\n        label: 'All'\n    },\n    {\n        value: 'gt:0',\n        label: 'Upgradable'\n    }\n];\n\nexport const filterCategories = {\n    advisory_type: {\n        label: 'Advisory type',\n        values: advisoryTypes\n    },\n    public_date: {\n        label: 'Public date',\n        values: publicDateOptions\n    },\n    updatable: {\n        label: 'Status',\n        values: updatableTypes\n    },\n    systems_updatable: {\n        label: 'Status',\n        values: packagesListUpdatableTypes\n    }\n};\n\nexport const entityTypes = {\n    advisories: 'advisories',\n    packages: 'packages'\n};\n\nexport const ReadOnlyNotification = {\n    title: 'title',\n    detail: 'message'\n};\n\nexport const remediationIdentifiers = {\n    package: 'patch-package',\n    advisory: 'patch-advisory'\n};\n","export const FETCH_APPLICABLE_ADVISORIES = 'FETCH_APPLICABLE_ADVISORIES';\nexport const EXPAND_ADVISORY_ROW = 'EXPAND_ADVISORY_ROW';\nexport const SELECT_ADVISORY_ROW = 'SELECT_ADVISORY_ROW';\nexport const CHANGE_ADVISORY_LIST_PARAMS = 'CHANGE_ADVISORY_LIST_PARAMS';\nexport const CHANGE_SYSTEM_ADVISORY_LIST_PARAMS =\n    'CHANGE_SYSTEM_SYSTEMS_LIST_PARAMS';\nexport const EXPAND_SYSTEM_ADVISORY_ROW = 'EXPAND_SYSTEM_ADVISORY_ROW';\nexport const FETCH_APPLICABLE_SYSTEM_ADVISORIES =\n    'FETCH_APPLICABLE_SYSTEM_ADVISORIES';\nexport const SELECT_SYSTEM_ADVISORY_ROW = 'SELECT_SYSTEM_ADVISORY_ROW';\nexport const CLEAR_SYSTEM_ADVISORIES = 'CLEAR_SYSTEM_ADVISORIES';\nexport const FETCH_ADVISORY_DETAILS = 'FETCH_ADVISORY_DETAILS';\nexport const CLEAR_ADVISORY_DETAILS = 'CLEAR_ADVISORY_DETAILS';\nexport const CHANGE_SYSTEM_PACKAGES_LIST_PARAMS =\n    'CHANGE_SYSTEM_PACKAGES_LIST_PARAMS';\nexport const FETCH_APPLICABLE_SYSTEM_PACKAGES =\n    'FETCH_APPLICABLE_SYSTEM_PACKAGES';\nexport const SELECT_SYSTEM_PACKAGES_ROW = 'SELECT_SYSTEM_PACKAGES_ROW';\nexport const CLEAR_SYSTEM_PACKAGES = 'CLEAR_SYSTEM_PACKAGES';\nexport const TRIGGER_GLOBAL_FILTER = 'TRIGGER_GLOBAL_FILTER';\nexport const FETCH_PACKAGES_LIST = 'FETCH_PACKAGES_LIST';\nexport const FETCH_PACKAGE_DETAILS = 'FETCH_PACKAGE_DETAILS';\nexport const CLEAR_PACKAGE_DETAILS = 'CLEAR_PACKAGE_DETAILS';\nexport const CHANGE_PACKAGES_LIST_PARAMS = 'CHANGE_PACKAGES_LIST_PARAMS';\nexport const FETCH_PACKAGE_SYSTEMS = 'FETCH_PACKAGE_SYSTEMS';\nexport const CLEAR_PACKAGE_SYSTEMS = 'CLEAR_PACKAGE_SYSTEMS';\nexport const CHANGE_PACKAGE_SYSTEMS_PARAMS = 'CHANGE_PACKAGE_SYSTEMS_PARAMS';\nexport const FETCH_CVES_INFO = 'FETCH_CVES_INFO';\nexport const CHANGE_CVES_STORE_PARAMS = 'CHANGE_CVES_STORE_PARAMS';\nexport const FETCH_SYSTEM_DETAIL = 'FETCH_SYSTEM_DETAIL';\nexport const CLEAR_ENTITIES = 'CLEAR_ENTITIES';\nexport const CHANGE_ENTITIES_PARAMS = 'CHANGE_ENTITIES_PARAMS';\n","import { fetchAdvisoryDetailsApi, fetchApplicableAdvisoriesApi,\n    fetchApplicablePackagesApi, fetchApplicableSystemAdvisoriesApi, fetchPackageDetailsApi,\n    fetchPackagesList, fetchPackageSystems, fetchSystems, fetchCvesInfo, fetchSystemDetails } from '../../Utilities/api';\nimport * as ActionTypes from '../ActionTypes';\n\nexport const fetchApplicableAdvisories = params => ({\n    type: ActionTypes.FETCH_APPLICABLE_ADVISORIES,\n    payload: new Promise(resolve => {\n        resolve(fetchApplicableAdvisoriesApi(params));\n    }).then(result => result)\n});\n\nexport const fetchApplicableSystemAdvisories = params => ({\n    type: ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES,\n    payload: new Promise(resolve => {\n        resolve(fetchApplicableSystemAdvisoriesApi(params));\n    }).then(result => result),\n    meta: {\n        noError: true // Handle errors manually!\n    }\n});\n\nexport const fetchAvisoryDetails = params => ({\n    type: ActionTypes.FETCH_ADVISORY_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(fetchAdvisoryDetailsApi(params));\n    }).then(result => result)\n});\n\nexport const fetchPackageDetails = params => ({\n    type: ActionTypes.FETCH_PACKAGE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(fetchPackageDetailsApi(params));\n    }).then(result => result)\n});\n\nexport const fetchSystemsAction = params => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(fetchSystems(params));\n    }).then(result => result)\n});\n\nexport const changeAdvisoryListParams = params => ({\n    type: ActionTypes.CHANGE_ADVISORY_LIST_PARAMS,\n    payload: params\n});\n\nexport const changeSystemAdvisoryListParams = params => ({\n    type: ActionTypes.CHANGE_SYSTEM_ADVISORY_LIST_PARAMS,\n    payload: params\n});\n\nexport const changeAdvisorySystemsParams = params => ({\n    type: ActionTypes.CHANGE_AFFECTED_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const expandAdvisoryRow = rowState => ({\n    type: ActionTypes.EXPAND_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const expandSystemAdvisoryRow = rowState => ({\n    type: ActionTypes.EXPAND_SYSTEM_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const selectAdvisoryRow = rowState => ({\n    type: ActionTypes.SELECT_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const selectSystemAdvisoryRow = rowState => ({\n    type: ActionTypes.SELECT_SYSTEM_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const clearSystemAdvisoriesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_ADVISORIES,\n    payload: []\n});\n\nexport const clearSystemPackagesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_PACKAGES,\n    payload: []\n});\n\nexport const clearAdvisoryDetailStore = () => ({\n    type: ActionTypes.CLEAR_ADVISORY_DETAILS,\n    payload: []\n});\n\nexport const clearPackageDetailStore = () => ({\n    type: ActionTypes.CLEAR_ADVISORY_DETAILS,\n    payload: []\n});\n\nexport const fetchPackageSystemsAction = params => ({\n    type: ActionTypes.FETCH_PACKAGE_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(fetchPackageSystems(params));\n    }).then(result => result)\n});\n\nexport const clearPackageSystemsStore = () => ({\n    type: ActionTypes.CLEAR_PACKAGE_SYSTEMS,\n    payload: []\n});\n\nexport const fetchApplicableSystemPackages = params => ({\n    type: ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES,\n    payload: new Promise(resolve => {\n        resolve(fetchApplicablePackagesApi(params));\n    }).then(result => result)\n});\n\nexport const selectSystemPackagesRow = rowState => ({\n    type: ActionTypes.SELECT_SYSTEM_PACKAGES_ROW,\n    payload: rowState\n});\n\nexport const changeSystemPackagesParams = params => ({\n    type: ActionTypes.CHANGE_SYSTEM_PACKAGES_LIST_PARAMS,\n    payload: params\n});\n\nexport const globalFilter = params => ({\n    type: ActionTypes.TRIGGER_GLOBAL_FILTER,\n    payload: params\n});\n\nexport const fetchPackagesAction = params => ({\n    type: ActionTypes.FETCH_PACKAGES_LIST,\n    payload: new Promise(resolve => {\n        resolve(fetchPackagesList(params));\n    }).then(result => result)\n});\n\nexport const changePackagesListParams = params => ({\n    type: ActionTypes.CHANGE_PACKAGES_LIST_PARAMS,\n    payload: params\n});\n\nexport const changePackageSystemsParams = params => ({\n    type: ActionTypes.CHANGE_PACKAGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const fetchCves = (params) => ({\n    type: ActionTypes.FETCH_CVES_INFO,\n    payload: new Promise(resolve => {\n        resolve(fetchCvesInfo(params));\n    }).then(result => result)\n});\n\nexport const changeCvesListParams = params => ({\n    type: ActionTypes.CHANGE_CVES_STORE_PARAMS,\n    payload: params\n});\n\nexport const fetchSystemDetailsAction = params => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAIL,\n    payload: new Promise(resolve => {\n        resolve(fetchSystemDetails(params));\n    }).then(result => result)\n});\n\nexport const clearEntitiesStore = () => ({\n    type: ActionTypes.CLEAR_ENTITIES,\n    payload: []\n});\n\nexport const changeEntitiesParams = params => ({\n    type: ActionTypes.CHANGE_ENTITIES_PARAMS,\n    payload: params\n});\n","import { addOrRemoveItemFromSet, changeListParams, getNewSelectedItems } from '../../Utilities/Helpers';\nimport { STATUS_LOADING, STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\n\nexport const changeFilters = (state, action) => {\n    state.queryParams = changeListParams(\n        state.queryParams,\n        action.payload\n    );\n\n    return state;\n};\n\nexport const selectRows = (state, action) => {\n    const selectedUpdated = getNewSelectedItems(action.payload, state.selectedRows);\n    state = { ...state, selectedRows: selectedUpdated };\n    return state;\n};\n\nexport const expandRows = (state, action) => {\n    const expandedUpdated = addOrRemoveItemFromSet(\n        state.expandedRows,\n        [].concat(action.payload)\n    );\n    state = { ...state, expandedRows: expandedUpdated };\n    return state;\n};\n\nexport const fetchPending = (state) => {\n    state.error = {};\n    state.status = STATUS_LOADING;\n    return state;\n};\n\nexport const fetchRejected = (state, action) => {\n    state.status = STATUS_REJECTED;\n    state.metadata = action.payload.meta || {};\n    state.error = action.payload;\n    return state;\n};\n\nexport const fetchFulfilled = (state, action) => {\n    state.rows = action.payload.data;\n    state.metadata = action.payload.meta || {};\n    state.error = {};\n    state.status = STATUS_RESOLVED;\n    return state;\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    selectRows,\n    fetchPending,\n    fetchRejected,\n    fetchFulfilled,\n    expandRows\n} from './HelperReducers';\n\nexport const SystemAdvisoryListStore = (state = storeListDefaults, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_SYSTEM_ADVISORY_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.EXPAND_SYSTEM_ADVISORY_ROW:\n            return expandRows(newState, action);\n\n        case ActionTypes.SELECT_SYSTEM_ADVISORY_ROW:\n            return selectRows(newState, action);\n\n        case ActionTypes.CLEAR_SYSTEM_ADVISORIES:\n            return storeListDefaults;\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults, systemPackagesDefaultFilters } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport { changeFilters, fetchFulfilled, fetchPending, fetchRejected, selectRows } from './HelperReducers';\n\nlet initializeState = { queryParams: systemPackagesDefaultFilters };\n\nexport const SystemPackageListStore = (state = { ...storeListDefaults, ...initializeState }, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_SYSTEM_PACKAGES_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.SELECT_SYSTEM_PACKAGES_ROW:\n            return selectRows(newState, action);\n\n        case ActionTypes.CLEAR_SYSTEM_PACKAGES:\n            return { ...storeListDefaults, ...initializeState };\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n"],"sourceRoot":""}