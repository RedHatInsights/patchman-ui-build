{"version":3,"file":"js/Templates.b9f0944f491e4e8596b4.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/SmartComponents/Modals/DeleteSetModal.js","webpack:///./src/PresentationalComponents/Filters/CreatorFilter.js","webpack:///./src/SmartComponents/PatchSet/PatchSet.js","webpack:///./src/SmartComponents/PatchSet/PatchSetAssets.js","webpack:///./src/Utilities/usePatchSetState.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Checkbox, Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst DeleteSetModal = ({ isModalOpen, setModalOpen, templateName, onConfirm }) => {\n    const [isCheckboxChecked, setCheckboxChecked] = useState(false);\n\n    const onClose = () => {\n        setModalOpen(false);\n        setCheckboxChecked(false);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.titlesTemplateDeleteModalTitle)}\n            titleIconVariant=\"warning\"\n            isOpen={isModalOpen}\n            onClose={onClose}\n            variant=\"small\"\n            actions={[\n                <Button key=\"confirm\" variant=\"danger\" onClick={() => {onClose(); onConfirm();}} isDisabled={!isCheckboxChecked}>\n                    {intl.formatMessage(messages.labelsDelete)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onClose}>\n                    {intl.formatMessage(messages.labelsCancel)}\n                </Button>\n            ]}\n        >\n            {intl.formatMessage(messages.titlesTemplateDeleteModalText, { templateName, b: (...chunks) => <b>{chunks}</b> })}\n            <Checkbox\n                className=\"pf-u-mt-md\"\n                isChecked={isCheckboxChecked}\n                checked={isCheckboxChecked}\n                onChange={(value) => setCheckboxChecked(value)}\n                label={intl.formatMessage(messages.titlesTemplateDeleteModalCheckbox)}\n                id=\"template-delete-modal-checkbox\"\n            />\n        </Modal>\n    );\n};\n\nDeleteSetModal.propTypes = {\n    isModalOpen: propTypes.bool,\n    setModalOpen: propTypes.func,\n    templateName: propTypes.string,\n    onConfirm: propTypes.func\n};\n\nexport default DeleteSetModal;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst creatorFilter = (apply, currentFilter = {}, items) => {\n    const filterByCreator = value => {\n        value.length === 0\n            ? apply({ filter: { creator: undefined } })\n            : apply({ filter: { creator: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersCreator),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCreator(value);\n            },\n            items: items?.filter(item => item !== null).map(item => ({ value: item, label: item })) ?? [],\n            value: !currentFilter.creator || Array.isArray(currentFilter.creator)\n                ? currentFilter.creator\n                : [currentFilter.creator],\n            placeholder: intl.formatMessage(messages.labelsFiltersCreatorPlaceholder)\n        }\n    };\n};\n\nexport default creatorFilter;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport creatorFilter from '../../PresentationalComponents/Filters/CreatorFilter';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport {\n    fetchPatchSetsAction, changePatchSetsParams,\n    selectPatchSetRow, clearPatchSetsAction\n} from '../../store/Actions/Actions';\nimport { deletePatchSet } from '../../Utilities/api';\nimport { createPatchSetRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams } from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useDeepCompareEffect, useEntitlements, usePerPageSelect, useSetPage, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications, addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n    patchSetColumns, CreatePatchSetButton as createPatchSetButton,\n    patchSetRowActions, CustomActionsToggle\n} from './PatchSetAssets';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport { patchSetDeleteNotifications } from '../../Utilities/constants';\nimport usePatchSetState from '../../Utilities/usePatchSetState';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport DeleteSetModal from '../Modals/DeleteSetModal';\nimport { NoPatchSetList, NoSmartManagement } from '../../PresentationalComponents/Snippets/EmptyStates';\n\nconst PatchSet = () => {\n    const pageTitle = intl.formatMessage(messages.titlesTemplate);\n\n    const IS_SELECTION_ENABLED = false;\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [hasSmartManagement, setSmartManagement] = React.useState(true);\n    const [isDeleteConfirmModalOpen, setDeleteConfirmModalOpen] = React.useState(false);\n    const [patchSetToDelete, setPatchSetToDelete] = React.useState(null);\n\n    const patchSets = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.rows\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.metadata\n    );\n    const status = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.status\n    );\n\n    const rows = useMemo(\n        () => createPatchSetRows(patchSets, selectedRows, queryParams),\n        [patchSets, selectedRows]\n    );\n\n    const getEntitlements = useEntitlements();\n\n    function apply(params) {\n        dispatch(changePatchSetsParams(params));\n    }\n\n    const refreshTable = () => {\n        dispatch(fetchPatchSetsAction({ ...queryParams, page: 1, offset: 0 }));\n    };\n\n    useEffect(() => {\n        getEntitlements().then((entitelements) => {\n            setSmartManagement(\n                entitelements?.smart_management?.is_entitled\n            );\n        });\n\n        return () => {\n            dispatch(clearPatchSetsAction());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const { patchSetState, setPatchSetState, openPatchSetEditModal } = usePatchSetState(selectedRows);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh === true) {\n            refreshTable();\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchPatchSetsAction(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const onSelect = useOnSelect(\n        rows,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.templates,\n            queryParams,\n            selectionDispatcher: selectPatchSetRow\n        }\n    );\n\n    const onSort = useSortColumn(patchSetColumns, apply, 0);\n    const sortBy = React.useMemo(\n        () => createSortBy(patchSetColumns, metadata.sort, 0),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const openPatchDeleteModal = (rowData) => {\n        setDeleteConfirmModalOpen(true);\n        setPatchSetToDelete(rowData);\n    };\n\n    const handlePatchSetDelete = () => {\n        deletePatchSet(patchSetToDelete.id).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetToDelete.displayName).success));\n            refreshTable();\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications(patchSetToDelete.displayName).error));\n        });\n    };\n\n    const { hasAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n    const CreatePatchSetButton = createPatchSetButton(setPatchSetState, hasAccess);\n    const actionsConfig = patchSetRowActions(openPatchSetEditModal, openPatchDeleteModal);\n\n    //TODO: refactor search filter to be able to wrap this into useMemo\n    const filterConfig = {\n        items: [\n            searchFilter(apply, queryParams.search,\n                intl.formatMessage(messages.labelsFiltersSearchTemplateTitle),\n                intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)\n            ),\n            creatorFilter(apply, queryParams.filter, metadata.creators)\n        ]\n    };\n\n    return (\n        <React.Fragment>\n            <DeleteSetModal\n                templateName={patchSetToDelete?.displayName}\n                isModalOpen={isDeleteConfirmModalOpen}\n                setModalOpen={setDeleteConfirmModalOpen}\n                onConfirm={handlePatchSetDelete}\n            />\n            <Header\n                headerOUIA={'advisories'}\n                title={<span>\n                    {intl.formatMessage(messages.titlesTemplate)}\n                    <Popover\n                        id=\"template-header-title-popover\"\n                        aria-describedby=\"template-header-title-popover\"\n                        aria-labelledby=\"template-header-title-popover\"\n                        hasAutoWidth\n                        maxWidth=\"320px\"\n                        position=\"right\"\n                        enableFlip\n                        headerContent={\n                            intl.formatMessage(messages.templatePopoverHeader)\n                        }\n                        bodyContent={\n                            intl.formatMessage(messages.templatePopoverBody)\n                        }\n                        /*\n                        footerContent={\n                            <a href={TEMPLATES_DOCS_LINK} target=\"__blank\" rel=\"noopener noreferrer\">\n                                {intl.formatMessage(messages.linksLearnMore)} <ExternalLinkAltIcon />\n                            </a>\n                        }\n                        */\n                    >\n                        <OutlinedQuestionCircleIcon\n                            color=\"var(--pf-global--secondary-color--100)\"\n                            className=\"pf-u-ml-sm\"\n                            style={{ verticalAlign: '0', fontSize: 16, cursor: 'pointer' }}\n                        />\n                    </Popover>\n                </span>}\n            />\n            {patchSetState.isPatchSetWizardOpen &&\n                <PatchSetWizard\n                    systemsIDs={patchSetState.systemsIDs}\n                    setBaselineState={setPatchSetState}\n                    patchSetID={patchSetState.patchSetID}\n                />}\n            <Main>\n                {hasSmartManagement\n                    ? (rows.length === 0 && !status.isLoading)\n                        ? <NoPatchSetList Button={CreatePatchSetButton}/>\n                        : <TableView\n                            columns={patchSetColumns}\n                            compact\n                            onSetPage={onSetPage}\n                            onPerPageSelect={onPerPageSelect}\n                            onSort={onSort}\n                            selectedRows={IS_SELECTION_ENABLED ? selectedRows : undefined}\n                            onSelect={IS_SELECTION_ENABLED ? onSelect : undefined}\n                            sortBy={sortBy}\n                            apply={apply}\n                            tableOUIA={'patch-set-table'}\n                            paginationOUIA={'patch-set-pagination'}\n                            store={{ rows, metadata, status, queryParams }}\n                            actionsConfig={actionsConfig}\n                            filterConfig={filterConfig}\n                            searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchTemplateTitle)}\n                            ToolbarButton={CreatePatchSetButton}\n                            actionsToggle={!hasAccess ? CustomActionsToggle : null}\n                        />\n                    : <NoSmartManagement />}\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default PatchSet;\n","import React from 'react';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport {\n    EllipsisVIcon\n} from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const CreatePatchSetButton = (setPatchSetState, hasAccess) => () =>\n    !hasAccess ?\n        <Tooltip content='For editing access, contact your administrator.'>\n            <Button key='createButton' isAriaDisabled >\n                {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n            </Button>\n        </Tooltip>\n        :\n        (<Button key='createButton' onClick={() => setPatchSetState({ isPatchSetWizardOpen: true })}>\n            {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n        </Button>);\n\nexport const patchSetColumns = [\n    {\n        key: 'name',\n        title: 'Name',\n        transforms: [sortable]\n    },\n    {\n        key: 'systems',\n        title: 'Systems applied',\n        transforms: [sortable]\n    },\n    {\n        key: 'last_edited',\n        title: 'Last edited',\n        transforms: [sortable]\n    },\n    {\n        key: 'published',\n        title: 'Published',\n        transforms: [sortable]\n    },\n    {\n        key: 'creator',\n        title: 'Created by',\n        transforms: [sortable]\n    }\n];\n\nexport const patchSetRowActions = (openPatchSetEditModal, handlePatchSetDelete) => [\n    {\n        title: intl.formatMessage(messages.labelsButtonEditTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            openPatchSetEditModal(rowData?.id);\n        }\n    },\n    {\n        title: intl.formatMessage(messages.labelsButtonRemoveTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            handlePatchSetDelete(rowData);\n        }\n    }\n];\n\nexport const patchSetDetailRowActions = (handleSystemUnassign) => [\n    {\n        title: intl.formatMessage(messages.textUnassignSystemsShortTitle),\n        onClick: (_event, _rowId, rowData) => {\n            handleSystemUnassign(rowData);\n        }\n    }\n\n];\n\nexport const CustomActionsToggle = () => <Tooltip content='For editing access, contact your administrator.'>\n    <Button\n        isAriaDisabled\n        variant=\"plain\"\n        aria-label=\"plain kebab\"\n    >\n        <EllipsisVIcon />\n    </Button>\n</Tooltip>;\n","import { useState } from 'react';\nimport {\n    filterSelectedActiveSystemIDs\n} from './Helpers';\n\n/**\n* Manages unified state for patch set wizard and unassign modal.\n* @param {Object} [selectedRows] selected rows object to be removed.\n* @returns {patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal}\n*/\nconst usePatchSetState = (selectedRows) => {\n    const [patchSetState, setPatchSetState] = useState({\n        isPatchSetWizardOpen: false,\n        isUnassignSystemsModalOpen: false,\n        shouldRefresh: false,\n        systemsIDs: []\n    });\n\n    const openPatchSetAssignWizard = (systemID) => {\n        setPatchSetState({\n            isPatchSetWizardOpen: true,\n            systemsIDs: typeof systemID === 'string' && systemID !== ''\n                ? [systemID]\n                : filterSelectedActiveSystemIDs(selectedRows),\n            shouldRefresh: false\n        }\n        );\n    };\n\n    const openUnassignSystemsModal = (systemsIDs) => {\n        setPatchSetState({\n            isUnassignSystemsModalOpen: true,\n            systemsIDs,\n            shouldRefresh: false\n        });\n    };\n\n    const openPatchSetEditModal = (patchSetID) => {\n        setPatchSetState({ isPatchSetWizardOpen: true, patchSetID });\n    };\n\n    return { patchSetState, setPatchSetState, openPatchSetAssignWizard, openUnassignSystemsModal, openPatchSetEditModal };\n};\n\nexport default usePatchSetState;\n"],"names":["OutlinedQuestionCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","OutlinedQuestionCircleIcon","DeleteSetModal","_ref","isModalOpen","setModalOpen","templateName","onConfirm","_useState","useState","_useState2","_slicedToArray","isCheckboxChecked","setCheckboxChecked","onClose","React","Modal","title","intl","messages","titleIconVariant","isOpen","variant","actions","Button","key","onClick","isDisabled","b","_len","arguments","length","chunks","Array","_key","Checkbox","className","isChecked","checked","onChange","value","label","id","propTypes","apply","_items$filter$map","currentFilter","undefined","items","type","conditionalFilterType","filterValues","event","filter","creator","filterByCreator","item","map","isArray","placeholder","pageTitle","setPageTitle","dispatch","useDispatch","history","useHistory","_React$useState","_React$useState2","firstMount","setFirstMount","_React$useState3","_React$useState4","hasSmartManagement","setSmartManagement","_React$useState5","_React$useState6","isDeleteConfirmModalOpen","setDeleteConfirmModalOpen","_React$useState7","_React$useState8","patchSetToDelete","setPatchSetToDelete","patchSets","useSelector","PatchSetsStore","rows","queryParams","_ref2","selectedRows","_ref3","metadata","_ref4","status","_ref5","useMemo","createPatchSetRows","getEntitlements","useEntitlements","params","changePatchSetsParams","refreshTable","fetchPatchSetsAction","_objectSpread","page","offset","useEffect","then","entitelements","_entitelements$smart_","smart_management","is_entitled","clearPatchSetsAction","clearNotifications","_usePatchSetState","usePatchSetState","patchSetState","setPatchSetState","openPatchSetEditModal","shouldRefresh","useDeepCompareEffect","decodeQueryparams","location","search","push","encodeURLParams","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","selectPatchSetRow","onSort","useSortColumn","patchSetColumns","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","hasAccess","usePermissionsWithContext","CreatePatchSetButton","createPatchSetButton","actionsConfig","patchSetRowActions","rowData","filterConfig","searchFilter","creatorFilter","creators","displayName","deletePatchSet","addNotification","patchSetDeleteNotifications","success","error","Header","headerOUIA","Popover","hasAutoWidth","maxWidth","position","enableFlip","headerContent","bodyContent","color","style","verticalAlign","fontSize","cursor","isPatchSetWizardOpen","PatchSetWizard","systemsIDs","setBaselineState","patchSetID","Main","isLoading","TableView","columns","compact","onSelect","tableOUIA","paginationOUIA","store","searchChipLabel","ToolbarButton","actionsToggle","CustomActionsToggle","NoPatchSetList","NoSmartManagement","Tooltip","content","isAriaDisabled","transforms","sortable","handlePatchSetDelete","_event","_rowId","patchSetDetailRowActions","handleSystemUnassign","EllipsisVIcon","isUnassignSystemsModalOpen","openPatchSetAssignWizard","systemID","filterSelectedActiveSystemIDs","openUnassignSystemsModal"],"sourceRoot":""}