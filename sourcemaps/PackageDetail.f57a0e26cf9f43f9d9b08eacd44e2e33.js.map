{"version":3,"file":"js/PackageDetail.1650452807943.a7ca8ecd37a8a31fdac9.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Spinner/Spinner.js","webpack:///./src/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/PresentationalComponents/PackageHeader/PackageHeader.js","webpack:///./src/PresentationalComponents/Filters/VersionFilter.js","webpack:///./src/SmartComponents/PackageSystems/PackageSystems.js","webpack:///./src/SmartComponents/PackageDetail/PackageDetail.js","webpack:///./src/SmartComponents/PatchSet/PatchSetAssets.js","webpack:///./src/SmartComponents/PatchSet/PatchSet.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye } from \"@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye.js\";\nimport { Spinner } from \"@patternfly/react-core/dist/esm/components/Spinner/Spinner.js\";\nimport InventoryLoadError from './InventoryLoadError';\n\nvar BaseInvTable = function BaseInvTable(props) {\n  var history = useHistory();\n  var store = useStore();\n  return /*#__PURE__*/React.createElement(Suspense, {\n    fallback: props.fallback\n  }, /*#__PURE__*/React.createElement(ScalprumComponent, _extends({\n    history: history,\n    store: store,\n    appName: \"inventory\",\n    module: \"./InventoryTable\",\n    scope: \"inventory\",\n    ErrorComponent: /*#__PURE__*/React.createElement(InventoryLoadError, _extends({\n      component: \"InventoryDetailHead\",\n      history: history,\n      store: store\n    }, props)),\n    ref: props.innerRef\n  }, props)));\n};\n\nBaseInvTable.propTypes = {\n  fallback: PropTypes.node,\n  innerRef: PropTypes.object\n};\n/**\n * Inventory sub component.\n *\n * This component shows systems table connected to redux.\n */\n\nvar InvTable = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(BaseInvTable, _extends({\n    innerRef: ref\n  }, props));\n});\nInvTable.propTypes = {\n  /** React Suspense fallback component. <a href=\"https://reactjs.org/docs/code-splitting.html#reactlazy\" target=\"_blank\">Learn more</a>. */\n  fallback: PropTypes.node\n};\nInvTable.defaultProps = {\n  fallback: /*#__PURE__*/React.createElement(Bullseye, {\n    className: \"pf-u-p-lg\"\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    size: \"xl\"\n  }))\n};\nexport default InvTable;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport \"../../Spinner/./spinner.css\";\n\nvar Spinner = function Spinner(_ref) {\n  var centered = _ref.centered,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, [\"centered\", \"className\"]);\n\n  var spinnerClasses = classNames('ins-c-spinner', _defineProperty({}, \"ins-m-center\", centered), className);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"status\",\n    className: spinnerClasses\n  }, props), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"pf-u-screen-reader\"\n  }, \"Loading...\"));\n};\n\nSpinner.propTypes = {\n  centered: PropTypes.bool,\n  className: PropTypes.string\n};\nexport default Spinner;","/* eslint-disable react/prop-types */\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nexport const WithLoaderVariants = {\n    spinner: 'spinner',\n    skeleton: 'skeleton'\n};\n\nconst loaderMap = {\n    [WithLoaderVariants.skeleton]: ({ size, isDark }) => (\n        <Skeleton size={size} isDark={isDark} />\n    ),\n    [WithLoaderVariants.spinner]: ({ centered }) => (\n        <Spinner centered={centered} />\n    )\n};\n\nexport const WithLoader = ({ loading, variant, children, ...props }) => {\n    if (loading !== false) {\n        return loaderMap[variant](props);\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    loading: propTypes.bool,\n    variant: propTypes.string,\n    children: propTypes.any\n};\n\nexport default WithLoader;\n","import { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Fragment } from 'react';\nimport { truncateDescription } from '../../Utilities/Helpers';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\n\nconst PackageHeader = ({ attributes: { description }, isLoading }) => {\n    const [wordLength, setWordLength] = React.useState(1000);\n\n    return description && (<Grid hasGutter style={{ minHeight: 50 }}>\n        <GridItem md={8} sm={12}>\n            <WithLoader\n                loading={isLoading}\n                variant={WithLoaderVariants.spinner}\n                centered\n            >\n                <Stack hasGutter>\n                    <StackItem />\n                    <StackItem style={{ whiteSpace: 'pre-line' }}>\n                        {\n                            description && truncateDescription(description, wordLength, setWordLength)\n                        }\n                    </StackItem>\n                </Stack>\n            </WithLoader>\n        </GridItem>\n    </Grid>) || <Fragment/>;\n};\n\nPackageHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default PackageHeader;\n","import React from 'react';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst VersionFilter = (apply, filter, packageVersions) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n\n    const isSet = filter && filter.installed_evra;\n    const installedEvra = isSet &&\n        (typeof(filter.installed_evra) === 'string' && filter.installed_evra.split(',')\n        || filter.installed_evra);\n    const versionList = packageVersions.data && packageVersions.data.sort().map(version => ({ value: version.evra }))\n        || [{ value: intl.formatMessage(messages.textNoVersionAvailable), disabled: true }];\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onSelect = (_, selection) => {\n        const config = { filter: {} };\n        if (!installedEvra || (installedEvra && !installedEvra.includes(selection))) {\n            const existingVersions = isSet && filter.installed_evra !== '' && filter.installed_evra.concat(',') || '';\n\n            config.filter = { installed_evra: `${existingVersions}${selection}` };\n        } else {\n            const filteredOutEvras = installedEvra.length !== 1\n                && installedEvra.filter(evra => !evra.includes(selection)).join(',') || undefined;\n\n            config.filter = { installed_evra: filteredOutEvras };\n        }\n\n        apply(config);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionList.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: intl.formatMessage(messages.labelsFiltersPackageVersionTitle),\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={versionList.length > 0 && SelectVariant.checkbox || SelectVariant.typeaheadMulti}\n                        typeAheadAriaLabel={intl.formatMessage(messages.labelsFiltersPackageVersionPlaceholder)}\n                        onToggle={onToggle}\n                        onSelect={onSelect}\n                        selections={installedEvra}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-version-filter'}\n                        placeholderText={intl.formatMessage(messages.labelsFiltersPackageVersionPlaceholder)}\n                        {...(numOptions < versionList.lengt\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionList.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                isDisabled={option.disabled}\n                                key={index}\n                                value={option.value}\n                                {...(option.description && { description: option.description })}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n\n};\n\nexport default VersionFilter;\n","import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport versionFilter from '../../PresentationalComponents/Filters/VersionFilter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { register } from '../../store';\nimport { changePackageSystemsParams, clearInventoryReducer, clearPackageSystemsReducer } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyPackageSystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportPackageSystemsCSV,\n    exportPackageSystemsJSON, fetchPackageSystems,\n    fetchPackageVersions\n} from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips, decodeQueryparams, filterRemediatablePackageSystems,\n    persistantParams, remediationProviderWithPairs, removeUndefinedObjectKeys, transformPairs\n} from '../../Utilities/Helpers';\nimport { useBulkSelectConfig, useGetEntities, useOnExport, useOnSelect, useRemoveFilter } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport { packageSystemsColumns } from '../Systems/SystemsListAssets';\n\nconst PackageSystems = ({ packageName }) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [packageVersions, setPackageVersions] = React.useState([]);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const queryParams = useSelector(\n        ({ PackageSystemsStore }) => PackageSystemsStore?.queryParams || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, sort, page, perPage } = queryParams;\n\n    React.useEffect(async () => {\n        apply(decodedParams);\n        setPackageVersions(await fetchPackageVersions({ package_name: packageName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearInventoryReducer());\n            dispatch(clearPackageSystemsReducer());\n        };\n    }, []);\n\n    function apply(params) {\n        dispatch(changePackageSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ ...filter, search }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            statusFilter(apply, filter),\n            versionFilter(apply, filter, packageVersions)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n        onDelete: deleteFilters\n    };\n\n    const constructFilename = (system) => {\n        return `${packageName}-${system.available_evra}`;\n    };\n\n    const fetchAllData = () => {\n        return fetchPackageSystems({\n            ...queryParams,\n            package_name: packageName,\n            limit: -1\n        })\n        .then(filterRemediatablePackageSystems);\n    };\n\n    const selectRows = (toSelect) => {\n        dispatch({ type: 'SELECT_ENTITY', payload: toSelect });\n    };\n\n    const onSelect = useOnSelect(systems, selectedRows,\n        fetchAllData, selectRows, constructFilename);\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport(packageName, queryParams, {\n        csv: exportPackageSystemsCSV,\n        json: exportPackageSystemsJSON\n    }, dispatch);\n\n    const prepareRemediationPairs = () => {\n        let pairs = {};\n        removeUndefinedObjectKeys(selectedRows).forEach(system => {\n            if (pairs[selectedRows[system]]) {\n                pairs[selectedRows[system]].push(system);\n            }\n            else {\n                pairs[selectedRows[system]] = [system];\n            }\n        });\n        return { data: pairs };\n    };\n\n    const getEntites = useGetEntities(fetchPackageSystems, apply, { packageName }, history);\n\n    const remediationDataProvider = () => remediationProviderWithPairs(\n        removeUndefinedObjectKeys(selectedRows),\n        prepareRemediationPairs,\n        transformPairs,\n        remediationIdentifiers.package\n    );\n\n    return (\n        <React.Fragment>\n            {status.hasError && <ErrorHandler code={status.code} /> || (\n                <InventoryTable\n                    disableDefaultColumns={['system_profile', 'updated']}\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    hideFilters={{ all: true, tags: false }}\n                    columns={packageSystemsColumns}\n                    showTags\n                    getEntities={getEntites}\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    paginationProps={{\n                        isDisabled: totalItems === 0\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        register({\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(packageSystemsColumns, modifyPackageSystems),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        });\n\n                    }}\n                    tableProps={{\n                        canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig={activeFiltersConfig}\n                    bulkSelect={useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems)}\n                    exportConfig={{\n                        isDisabled: totalItems === 0,\n                        onSelect: onExport\n                    }}\n                    dedicatedAction={(\n                        <AsyncRemediationButton\n                            remediationProvider={remediationDataProvider}\n                            isDisabled={arrayFromObj(selectedRows).length === 0}\n                        />\n                    )}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nPackageSystems.propTypes = {\n    packageName: propTypes.string\n};\n\nexport default PackageSystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport PackageHeader from '../../PresentationalComponents/PackageHeader/PackageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { paths } from '../../Routes';\nimport PackageSystems from '../../SmartComponents/PackageSystems/PackageSystems';\nimport { clearPackageDetailStore, fetchPackageDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\n\nconst PackageDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [packageName] = React.useState(match.params.packageName);\n    const pageTitle = `${packageName} - ${intl.formatMessage(messages.titlesPackages)}`;\n    setPageTitle(pageTitle);\n    const packageDetails = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore\n    );\n    const status = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchPackageDetails({ packageName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n            dispatch(clearPackageDetailStore());\n        };\n    }, []);\n\n    const { attributes } = packageDetails.data;\n\n    return (\n        <React.Fragment>\n            <Header\n                title={packageName}\n                headerOUIA={'package-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchPackages),\n                        to: paths.packages.to,\n                        isActive: false\n                    },\n                    {\n                        title: packageName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable/> :\n                    <PackageHeader\n                        attributes={{ ...attributes, id: packageName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        {status.hasError\n                            && < ErrorHandler />\n                                || (!status.isLoading && <PackageSystems packageName={packageName}></PackageSystems>)\n                        }\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nPackageDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(PackageDetail);\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table/dist/js';\n\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const useCreatePatchSetButton = (setWizardState) => () =>\n    (<Button key='createButton' onClick={() => setWizardState({ isOpen: true })}>\n        {intl.formatMessage(messages.labelsButtonCreatePatchSet)}\n    </Button>);\n\nexport const patchSetColumns = [\n    {\n        key: 'name',\n        title: 'Name',\n        transforms: [sortable],\n        props: {\n            width: 50\n        }\n    },\n    {\n        key: 'systems',\n        title: 'Systems',\n        transforms: [sortable],\n        props: {\n            width: 50\n        }\n    }\n];\n\nexport const usePatchSetRowActions = (showBaselineModal, handlePatchSetDelete) => [\n    {\n        title: 'Edit patch set',\n        onClick: (_event, _rowId, rowData) => {\n            showBaselineModal(rowData);\n        }\n    },\n    {\n        title: 'Remove patch set',\n        onClick: (_event, _rowId, rowData) => {\n            handlePatchSetDelete(rowData);\n        }\n    }\n];\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { fetchPatchSetsAction, changePatchSetsParams,\n    selectPatchSetRow, clearPatchSetsAction } from '../../store/Actions/Actions';\nimport { fetchPatchSets, deletePatchSet } from '../../Utilities/api';\nimport { createPatchSetRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams } from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useDeepCompareEffect, useOnSelect, usePerPageSelect, useSetPage, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications, addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { patchSetColumns, useCreatePatchSetButton, usePatchSetRowActions } from './PatchSetAssets';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport { patchSetDeleteNotifications } from '../../Utilities/constants';\n\nconst PatchSet = ({ history }) => {\n    const pageTitle = intl.formatMessage(messages.titlesAdvisories);\n\n    const IS_SELECTION_ENABLED = false;\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [wizardState, setWizardState] = React.useState({\n        isOpen: false,\n        shouldRefresh: false,\n        patchSetID: undefined,\n        systemsIDs: []\n    });\n\n    const patchSets = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.rows\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.metadata\n    );\n    const status = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.status\n    );\n\n    const rows = useMemo(\n        () => createPatchSetRows(patchSets, selectedRows, queryParams),\n        [patchSets, selectedRows]\n    );\n\n    function apply(params) {\n        dispatch(changePatchSetsParams(params));\n    }\n\n    const refreshTable = () => {\n        dispatch(fetchPatchSetsAction({ ...queryParams, page: 1, offset: 0 }));\n    };\n\n    useEffect(() => () => {\n        dispatch(clearPatchSetsAction());\n        dispatch(clearNotifications());\n    }, []);\n\n    useEffect(() => {\n        if (wizardState.shouldRefresh === true) {\n            refreshTable();\n        }\n    }, [wizardState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchPatchSetsAction(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const fetchAllData = () =>\n        fetchPatchSets({ ...queryParams, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            selectPatchSetRow(toSelect)\n        );\n    };\n\n    const onSelect = useOnSelect(rows, selectedRows, fetchAllData, selectRows, (patchSet) => patchSet.id);\n\n    const onSort = useSortColumn(patchSetColumns, apply, 0);\n    const sortBy = React.useMemo(\n        () => createSortBy(patchSetColumns, metadata.sort, 0),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    async function showBaselineModal(rowData) {\n        setWizardState({ isOpen: true, patchSetID: rowData.id });\n    }\n\n    const handlePatchSetDelete = (rowData) => {\n        deletePatchSet(rowData.id).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications.success));\n            refreshTable();\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications.error));\n        });;\n    };\n\n    const CreatePatchSet = useCreatePatchSetButton(setWizardState);\n    const patchSetRowActions = usePatchSetRowActions(showBaselineModal, handlePatchSetDelete);\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSet)} headerOUIA={'advisories'} />\n            {wizardState.isOpen &&\n                <PatchSetWizard\n                    systemsIDs={wizardState.systemsIDs}\n                    setBaselineState={setWizardState}\n                    patchSetID={wizardState.patchSetID}\n                />}\n            <Main>\n                <TableView\n                    columns={patchSetColumns}\n                    compact\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    selectedRows={IS_SELECTION_ENABLED && selectedRows}\n                    onSelect={IS_SELECTION_ENABLED && onSelect}\n                    sortBy={sortBy}\n                    apply={apply}\n                    tableOUIA={'patch-set-table'}\n                    paginationOUIA={'patch-set-pagination'}\n                    store={{ rows, metadata, status, queryParams }}\n                    actionsConfig={(patchSets?.length > 0) && patchSetRowActions}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search,\n                                intl.formatMessage(messages.labelsFiltersSearchPatchSetTitle),\n                                intl.formatMessage(messages.labelsFiltersSearchPatchSetPlaceholder)\n                            )\n                        ]\n                    }}\n                    searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchPatchSetTitle)}\n                    CreatePatchSet={CreatePatchSet}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nPatchSet.propTypes = {\n    history: propTypes.object\n};\n\nexport default withRouter(PatchSet);\n","import { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            newState.status = { isLoading: true, hasError: true };\n            return newState;\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["BaseInvTable","props","history","useHistory","store","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","component","ref","innerRef","propTypes","InvTable","defaultProps","className","size","Spinner","_ref","centered","spinnerClasses","role","WithLoaderVariants","spinner","skeleton","loaderMap","isDark","Skeleton","WithLoader","loading","variant","children","PackageHeader","description","attributes","isLoading","React","wordLength","setWordLength","Grid","hasGutter","style","minHeight","GridItem","md","sm","Stack","StackItem","whiteSpace","truncateDescription","Fragment","apply","filter","packageVersions","isOpen","setOpen","numOptions","setNumOptions","isSet","installed_evra","installedEvra","split","versionList","data","sort","map","version","value","evra","intl","messages","disabled","type","conditionalFilterType","label","filterValues","Select","length","SelectVariant","typeAheadAriaLabel","onToggle","onSelect","_","selection","config","includes","existingVersions","concat","filteredOutEvras","join","undefined","selections","placeholderText","lengt","loadingVariant","text","onClick","maxHeight","overflow","slice","option","index","SelectOption","isDisabled","key","PackageSystems","packageName","dispatch","useDispatch","setPackageVersions","decodedParams","decodeQueryparams","location","search","systems","useSelector","entities","rows","shallowEqual","status","totalItems","total","selectedRows","queryParams","PackageSystemsStore","systemProfile","selectedTags","page","perPage","params","changePackageSystemsParams","fetchPackageVersions","package_name","clearInventoryReducer","clearPackageSystemsReducer","useRemoveFilter","deleteFilters","filterConfig","items","searchFilter","statusFilter","versionFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","useOnSelect","fetchPackageSystems","limit","then","filterRemediatablePackageSystems","toSelect","payload","system","available_evra","selectedCount","arrayFromObj","onExport","useOnExport","csv","exportPackageSystemsCSV","json","exportPackageSystemsJSON","prepareRemediationPairs","pairs","removeUndefinedObjectKeys","forEach","push","getEntites","useGetEntities","hasError","ErrorHandler","code","InventoryTable","disableDefaultColumns","isFullView","autoRefresh","initialLoading","hideFilters","all","tags","columns","packageSystemsColumns","showTags","getEntities","customFilters","patchParams","paginationProps","onLoad","mergeWithEntities","register","inventoryEntitiesReducer","modifyPackageSystems","persistantParams","tableProps","canSelectAll","TableVariant","isStickyHeader","bulkSelect","useBulkSelectConfig","total_items","exportConfig","dedicatedAction","AsyncRemediationButton","remediationProvider","remediationProviderWithPairs","transformPairs","remediationIdentifiers","PackageDetail","match","pageTitle","setPageTitle","packageDetails","PackageDetailStore","fetchPackageDetails","clearNotifications","clearPackageDetailStore","Header","title","headerOUIA","breadcrumbs","to","paths","isActive","Unavailable","id","Main","TextContent","Text","TextVariants","withRouter","patchSetColumns","transforms","sortable","width","PatchSet","firstMount","setFirstMount","shouldRefresh","patchSetID","systemsIDs","wizardState","setWizardState","patchSets","PatchSetsStore","metadata","useMemo","createPatchSetRows","changePatchSetsParams","refreshTable","fetchPatchSetsAction","offset","useEffect","clearPatchSetsAction","useDeepCompareEffect","encodeURLParams","fetchPatchSets","selectPatchSetRow","patchSet","onSort","useSortColumn","sortBy","createSortBy","onSetPage","useSetPage","onPerPageSelect","usePerPageSelect","rowData","CreatePatchSet","Button","useCreatePatchSetButton","patchSetRowActions","_event","_rowId","showBaselineModal","deletePatchSet","addNotification","patchSetDeleteNotifications","handlePatchSetDelete","PatchSetWizard","setBaselineState","TableView","compact","tableOUIA","paginationOUIA","actionsConfig","searchChipLabel","initialState","modifyInventory","state","loaded","createSystemsRows","createPackageSystemsRows","inventoryModifier","action","newState","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}