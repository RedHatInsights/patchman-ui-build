{"version":3,"file":"js/3332.c8cd47ee4585d0de402a.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/AdvisoryType/AdvisoryType.js","webpack:///./src/PresentationalComponents/Snippets/EmptyStates.js","webpack:///./src/PresentationalComponents/Snippets/NoRegisteredSystems.js","webpack:///./src/PresentationalComponents/Snippets/ErrorHandler.js","webpack:///./src/PresentationalComponents/Snippets/ExternalLink.js","webpack:///./src/PresentationalComponents/Snippets/RebootRequired.js","webpack:///./src/SmartComponents/Remediation/AsyncRemediationButton.js","webpack:///./src/PresentationalComponents/Snippets/Label.js","webpack:///./src/PresentationalComponents/Snippets/DescriptionWithLink.js","webpack:///./src/Utilities/DataMappers.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { Split, SplitItem } from '@patternfly/react-core';\n\nconst AdvisoryType = ({ type }) => {\n    const advisoryType =\n        advisoryTypes.find(item => item.value === type) || advisoryTypes[3];\n    return (\n        <Split hasGutter>\n            <SplitItem>{advisoryType.icon}</SplitItem>\n            <SplitItem isFilled>{advisoryType.label}</SplitItem>\n        </Split>\n    );\n};\n\nAdvisoryType.propTypes = {\n    type: PropTypes.number\n};\n\nexport default AdvisoryType;\n","import {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport LockIcon from '@patternfly/react-icons/dist/js/icons/lock-icon';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nexport const EmptyAdvisoryList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingAdvisories)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptyPackagesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingPackages)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptyCvesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingCve)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptySystemsList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingSystems)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptyPatchSetList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingTemplate)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const NoPatchSetList = ({ Button }) => (\n    <EmptyState variant={EmptyStateVariant.large}>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoTemplate)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.statesNoTemplateBody)}\n            <br />\n            <br />\n            {/*\n            <a href={TEMPLATES_DOCS_LINK} target=\"__blank\" rel=\"noopener noreferrer\">\n                {intl.formatMessage(messages.statesNoTemplateLink)} <ExternalLinkAltIcon />\n            </a>\n            <br />\n            <br />\n            */}\n            <Button />\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nNoPatchSetList.propTypes = {\n    Button: PropTypes.node\n};\n\nexport const NoSmartManagement = () => (\n    <EmptyState variant={EmptyStateVariant.large}>\n        <EmptyStateIcon icon={LockIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoSmartManagementHeader)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(\n                messages.statesNoSmartManagementBody,\n                { br: <br></br> }\n            )}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const NoAppliedSystems = ({ onButtonClick }) => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.templateNoAppliedSystemsTitle)}\n        </Title>\n        <EmptyStateBody>\n            <Button type=\"primary\" onClick={onButtonClick}>\n                {intl.formatMessage(messages.templateNoAppliedSystemsButton)}\n            </Button>\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nNoAppliedSystems.propTypes = {\n    onButtonClick: PropTypes.func\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { DisconnectedIcon } from '@patternfly/react-icons';\n\nconst NoRegisteredSystems = ({ titleText, bodyText, buttonText }) => (\n    <EmptyState>\n        <EmptyStateIcon icon={DisconnectedIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {titleText}\n        </Title>\n        <EmptyStateBody>{bodyText}</EmptyStateBody>\n        <Button\n            variant=\"primary\"\n            component=\"a\"\n            href=\"https://access.redhat.com/products/red-hat-insights#getstarted\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"pf-u-mt-lg\"\n        >\n            {buttonText}\n        </Button>\n    </EmptyState>\n);\n\nNoRegisteredSystems.propTypes = {\n    titleText: propTypes.string,\n    bodyText: propTypes.string,\n    buttonText: propTypes.string\n};\n\nNoRegisteredSystems.defaultProps = {\n    titleText: 'Do more with your Red Hat Enterprise Linux environment',\n    bodyText:\n    `Connect your systems to keep your Red Hat environment running efficiently,\n     with security and compliance with various standards.`,\n    buttonText: 'Learn more about connecting your systems'\n};\nexport default NoRegisteredSystems;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport { LockIcon } from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\n//TODO: use the shared component from platform\nimport NoRegisteredSystems from './NoRegisteredSystems';\n//import { NoRegisteredSystems } from '@redhat-cloud-services/frontend-components/NoRegisteredSystems';\n\nconst ErrorHandler = ({ code, ErrorState, EmptyState, metadata = {} }) => {\n    switch (code) {\n        case 204:\n            return <NotConnected />;\n\n        case 400:\n            return <Unavailable />;\n\n        case 401:\n            return <NotAuthorized\n                icon={LockIcon}\n                title={intl.formatMessage(messages.labelsNotAuthorizedTitle)}\n                description={intl.formatMessage(messages.labelsNotAuthorizedDescription)}\n                prevPageButtonText={intl.formatMessage(messages.labelsReturnToPreviousPage)}\n                toLandingPageText={intl.formatMessage(messages.labelsReturnToLandingPage)}\n            />;\n\n        case 403:\n            return <NotAuthorized\n                icon={LockIcon}\n                title={intl.formatMessage(messages.labelsNotAuthorizedTitle)}\n                description={intl.formatMessage(messages.labelsNotAuthorizedDescription)}\n                prevPageButtonText={intl.formatMessage(messages.labelsReturnToPreviousPage)}\n                toLandingPageText={intl.formatMessage(messages.labelsReturnToLandingPage)}\n            />;\n\n        case 404:\n            return <InvalidObject />;\n\n        case 500:\n        case 502:\n        case 503:\n            return <Unavailable />;\n\n        default:\n            return ErrorState && <ErrorState />\n                || EmptyState && <EmptyState />\n                || !metadata.has_systems && <NoRegisteredSystems />\n                || <SkeletonTable colSize={5} rowSize={20} /> ;\n    }\n};\n\nErrorHandler.propTypes = {\n    code: propTypes.number,\n    ErrorState: propTypes.element,\n    EmptyState: propTypes.element,\n    metadata: propTypes.object.isRequired\n};\n\nexport default ErrorHandler;\n","import { Flex, FlexItem } from '@patternfly/react-core';\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-alt-icon';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst ExternalLink = ({ link, text }) => {\n    return (\n        <a\n            href={link}\n            target=\"__blank\"\n        >\n            <Flex flex={{ default: 'inlineFlex' }}>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    {text}\n                </FlexItem>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    <ExternalLinkAltIcon />\n                </FlexItem>\n            </Flex>\n        </a>\n\n    );\n};\n\nExternalLink.propTypes = {\n    link: propTypes.string,\n    text: propTypes.string\n};\n\nexport default ExternalLink;\n","\nimport React from 'react';\nimport {\n    Title, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { PowerOffIcon } from '@patternfly/react-icons';\n\nconst RebootRequired = () =>  (\n    <Flex flex={{ default: 'column' }}>\n        <FlexItem spacer={{ default: 'spacerNone' }}>\n            <Title headingLevel=\"h6\">\n                {intl.formatMessage(messages.labelsColumnsReboot)}\n            </Title>\n        </FlexItem>\n        <FlexItem spacer={{ default: 'spacerSm' }}>\n            <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                <FlexItem><PowerOffIcon size=\"sm\" color={'var(--pf-global--danger-color--100)'} /> </FlexItem>\n                <FlexItem isFilled>{intl.formatMessage(messages.textRebootIsRequired)}</FlexItem>\n            </Flex>\n        </FlexItem>\n    </Flex>\n);\n\nexport default RebootRequired;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Spinner } from '@patternfly/react-core';\nimport { spinnerSize } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AsyncRemediationButton = ({ remediationProvider, isDisabled, isLoading }) => {\n    const dispatch = useDispatch();\n\n    const handleRemediationSuccess = res => {\n        dispatch(addNotification(res.getNotification()));\n    };\n\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationButton\"\n            fallback={<Spinner size={spinnerSize.lg} />}\n            dataProvider={remediationProvider}\n            onRemediationCreated={handleRemediationSuccess}\n            isDisabled={isDisabled}\n            buttonProps={{ isLoading }}\n        >\n            {intl.formatMessage(messages.labelsRemediate)}\n        </AsyncComponent>\n    );\n};\n\nAsyncRemediationButton.propTypes = {\n    remediationProvider: propTypes.func,\n    isDisabled: propTypes.bool,\n    isLoading: propTypes.bool\n};\n\nexport default AsyncRemediationButton;\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport './Label.scss';\n\nconst Label = ({ children }) => {\n    return <span className={'patchman-label'}>{children}</span>;\n};\n\nLabel.propTypes = {\n    children: propTypes.any\n};\n\nexport default Label;\n","import {\n    Text, TextContent, TextList,\n    TextListItem, TextListItemVariants, TextListVariants, TextVariants\n} from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { entityTypes } from '../../Utilities/constants';\nimport { getSeverityById, handlePatchLink, isRHAdvisory, truncate } from '../../Utilities/Helpers';\nimport { intl } from '../../Utilities/IntlProvider';\nimport ExternalLink from './ExternalLink';\nimport Label from './Label';\nimport RebootRequired from '../Snippets/RebootRequired';\n\nexport const DescriptionWithLink = ({ row }) => {\n    const severityObject = getSeverityById(row.attributes.severity);\n    return (\n        <TextContent className='patch-advisory-description'>\n            {\n                row.attributes.cve_count > 0 &&\n                (<TextList component={TextListVariants.dl} style={{ '--pf-c-content--dl--RowGap': '0.5rem' }}>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsSeverity)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        <SecurityIcon size=\"sm\" color={severityObject.color} />  {severityObject.label}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsCves)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        {row.attributes.cve_count}\n                    </TextListItem>\n                </TextList>)\n            }\n            <Label>{intl.formatMessage(messages.labelsDescription)}</Label>\n            <Text component={TextVariants.p} style={{ whiteSpace: 'pre-line' }}>\n                {truncate(row.attributes.description.replace(\n                    new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n                    ''\n                ), 570, handlePatchLink(entityTypes.advisories, row.id, intl.formatMessage(messages.linksReadMore)))}\n            </Text>\n            {\n                row.attributes.reboot_required && <RebootRequired/>\n            }\n            {isRHAdvisory(row.id) && <ExternalLink link={`https://access.redhat.com/errata/${row.id}`}\n                text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />}\n        </TextContent>);\n};\n\nDescriptionWithLink.propTypes = {\n    row: propTypes.shape({\n        id: propTypes.string,\n        attributes: propTypes.object,\n        reboot_required: propTypes.bool\n    })\n};\n","import { TextContent, TextListItem, TextListItemVariants } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport messages from '../Messages';\nimport AdvisoryType from '../PresentationalComponents/AdvisoryType/AdvisoryType';\nimport { DescriptionWithLink } from '../PresentationalComponents/Snippets/DescriptionWithLink';\nimport {\n    EmptyAdvisoryList, EmptyCvesList, EmptyPackagesList,\n    EmptyPatchSetList, EmptySystemsList\n} from '../PresentationalComponents/Snippets/EmptyStates';\nimport { SystemUpToDate } from '../PresentationalComponents/Snippets/SystemUpToDate';\nimport { advisorySeverities, entityTypes } from './constants';\nimport { createAdvisoriesIcons, createUpgradableColumn, handleLongSynopsis, handlePatchLink } from './Helpers';\nimport { intl } from './IntlProvider';\n\nexport const createAdvisoriesRows = (rows, expandedRows, selectedRows) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        {\n                            title: handleLongSynopsis(row.attributes.synopsis)\n                        },\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type_name}\n                                />\n                            )\n                        },\n                        {\n                            title: handlePatchLink(\n                                entityTypes.advisories,\n                                row.id,\n                                row.attributes.applicable_systems\n                            )\n                        },\n                        {\n                            title: row.attributes.reboot_required &&\n                                intl.formatMessage(messages.labelsRebootRequired)\n                                || intl.formatMessage(messages.labelsRebootNotRequired)\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2,\n                    isExpandedRow: true\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 5 },\n                        title: <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemAdvisoriesRows = (\n    rows,\n    expandedRows,\n    selectedRows,\n    metadata\n) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        {\n                            title: handleLongSynopsis(row.attributes.synopsis)\n                        },\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type_name}\n                                />\n                            )\n                        },\n                        {\n                            title: row.attributes.reboot_required &&\n                                intl.formatMessage(messages.labelsRebootRequired)\n                                || intl.formatMessage(messages.labelsRebootNotRequired)\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2,\n                    isExpandedRow: true\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 6 },\n                        title: !metadata.search && (metadata.filter && Object.keys(metadata.filter).length === 0)\n                            && <SystemUpToDate />\n                            || <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows.map(({ id, ...rest }) => {\n            const {\n                packages_installed: installedPckg,\n                rhba_count: rhba,\n                rhsa_count: rhsa,\n                rhea_count: rhea,\n                os_name: osName,\n                os_major: osMajor,\n                os_minor: osMinor,\n                other_count: other,\n                rhsm,\n                tags,\n                last_upload: lastUpload\n            } = rest;\n            return {\n                id,\n                ...rest,\n                key: Math.random().toString() + id,\n                packages_installed: installedPckg,\n                applicable_advisories: [\n                    rhea || 0,\n                    rhba || 0,\n                    rhsa || 0,\n                    other || 0\n                ],\n                operating_system: {\n                    osName: osName && `${rest.os_name} ${osMajor}.${osMinor}`\n                        || 'N/A',\n                    rhsm\n                },\n                selected: selectedRows[id] !== undefined,\n                tags,\n                updated: lastUpload\n            };\n        });\n    return data || [];\n};\n\nexport const createPackageSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows &&\n        rows.map(row => {\n            return {\n                id: row.id,\n                key: Math.random().toString() + row.id,\n                display_name: row.display_name,\n                installed_evra: row.installed_evra,\n                available_evra: row.updatable && row.available_evra || row.installed_evra,\n                disableCheckbox: !row.updatable,\n                updatable: row.updatable,\n                upgradable: row.updatable,\n                selected: selectedRows[row.id] !== undefined,\n                tags: row.tags\n            };\n        });\n    return data || [];\n};\n\nexport const createSystemPackagesRows = (rows, selectedRows = {}) => {\n    if (rows && rows.length !== 0) {\n        return rows.map(pkg => {\n            const pkgNEVRA = `${pkg.name}-${pkg.evra}`;\n            const pkgUpdates = pkg.updates || [];\n            const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n\n            return {\n                id: pkgNEVRA,\n                key: pkgNEVRA,\n                selected: selectedRows[pkgNEVRA] !== undefined,\n                disableCheckbox: !latestUpdate,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.evra },\n                    { title: (latestUpdate && latestUpdate.evra) || pkg.evra },\n                    { title: createUpgradableColumn(pkg.updatable) },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createPackagesRows = (rows) => {\n    if (rows && rows.length !== 0) {\n        return rows.map(pkg => {\n            return {\n                id: pkg.name,\n                key: pkg.name,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.systems_installed },\n                    { title: pkg.systems_updatable },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createCvesRows = (rows) => {\n    if (rows.length !== 0) {\n        return rows.map(cve => {\n            const { attributes, id } = cve;\n            const severityObject = advisorySeverities.filter(severity => severity.label === attributes.impact)[0];\n\n            return {\n                id,\n                key: id,\n                cells: [\n                    {\n                        title: (\n                            <a href={`${document.baseURI}insights/vulnerability/cves/${attributes.synopsis}`}>\n                                {attributes.synopsis}\n                            </a>)\n                    },\n                    {\n                        title: (<TextContent>\n                            <TextListItem component={TextListItemVariants.dd}>\n                                <SecurityIcon size=\"sm\" color={severityObject.color} />  {severityObject.label}\n                            </TextListItem>\n                        </TextContent>),\n                        value: severityObject.label\n                    },\n                    { title: parseFloat(attributes.cvss_score).toFixed(1) }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 4 },\n                        title: <EmptyCvesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemsRowsReview = (rows, selectedRows) => {\n    if (rows.length !== 0) {\n        return rows.map(system => {\n            const { attributes, id } = system;\n\n            return {\n                id,\n                key: id,\n                selected: selectedRows[system.id] !== undefined,\n                cells: [\n                    {\n                        title: attributes.display_name\n                    },\n                    {\n                        title: attributes.os || 'N/A'\n                    },\n                    {\n                        title: attributes.baseline_name || 'No template'\n                    }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 4 },\n                        title: <EmptySystemsList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createPatchSetRows = (rows, selectedRows = {}, filters) => {\n\n    const data =\n        rows &&\n        rows.map(row => {\n            return {\n                id: row.id,\n                displayName: row.name,\n                key: row.id,\n                selected: selectedRows[row.id] !== undefined,\n                cells: [\n                    {\n                        title: (\n                            <Link to={{ pathname: `/templates/${row.id}` }}>\n                                {row.name}\n                            </Link>\n                        )\n                    },\n                    { title: row.systems || intl.formatMessage(messages.labelsTemplateNoSystems) },\n                    { title: processDate(row.last_edited) },\n                    { title: processDate(row.published) },\n                    { title: row.creator }\n                ]\n            };\n        });\n\n    return data?.length > 0 ? data :\n        (filters.search || Object.keys(filters.filter).length) ?\n            [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 6 },\n                            title: <EmptyPatchSetList />\n                        }\n                    ]\n                }\n            ] : [];\n};\n\nexport const createPatchSetDetailRows = (rows) => {\n\n    const data =\n        rows &&\n        rows.map(row => {\n            row = { ...row, ...row.attributes };\n\n            return {\n                id: row.inventory_id,\n                displayName: row.display_name,\n                key: row.inventory_id,\n                cells: [\n                    {\n                        title: (\n                            <Link to={{ pathname: `/systems/${row.inventory_id}` }}>\n                                {row.display_name}\n                            </Link>\n                        )\n                    },\n                    {\n                        title: row.os || 'N/A'\n                    },\n                    {\n                        title: createAdvisoriesIcons([\n                            row.installable_rhea_count,\n                            row.installable_rhba_count,\n                            row.installable_rhsa_count,\n                            row.installable_other_count\n                        ], 'installable')\n                    },\n                    {\n                        title: createAdvisoriesIcons([\n                            row.applicable_rhea_count,\n                            row.applicable_rhba_count,\n                            row.applicable_rhsa_count,\n                            row.applicable_other_count\n                        ])\n                    },\n                    {\n                        title: processDate(row.last_upload)\n                    }\n                ]\n            };\n        });\n\n    return data;\n};\n"],"names":["AdvisoryType","type","advisoryType","advisoryTypes","item","value","hasGutter","icon","isFilled","label","propTypes","PropTypes","EmptyAdvisoryList","variant","EmptyStateVariant","Title","headingLevel","size","intl","messages","EmptyPackagesList","SearchIcon","EmptyCvesList","EmptySystemsList","EmptyPatchSetList","NoPatchSetList","Button","PlusCircleIcon","NoSmartManagement","LockIcon","br","NoAppliedSystems","onButtonClick","onClick","NoRegisteredSystems","titleText","bodyText","buttonText","EmptyState","EmptyStateIcon","DisconnectedIcon","EmptyStateBody","component","href","target","rel","className","defaultProps","ErrorHandler","code","ErrorState","metadata","NotConnected","Unavailable","NotAuthorized","title","description","prevPageButtonText","toLandingPageText","InvalidObject","has_systems","SkeletonTable","colSize","rowSize","ExternalLink","link","text","flex","default","spacer","style","flexWrap","color","AsyncRemediationButton","remediationProvider","isDisabled","isLoading","dispatch","useDispatch","appName","module","fallback","Spinner","spinnerSize","dataProvider","onRemediationCreated","res","addNotification","getNotification","buttonProps","Label","children","DescriptionWithLink","row","severityObject","getSeverityById","attributes","severity","TextContent","cve_count","TextList","TextListVariants","TextListItem","TextListItemVariants","Text","TextVariants","whiteSpace","truncate","replace","RegExp","handlePatchLink","entityTypes","id","reboot_required","RebootRequired","isRHAdvisory","createAdvisoriesRows","rows","expandedRows","selectedRows","length","index","isOpen","selected","undefined","cells","handleLongSynopsis","synopsis","advisory_type_name","applicable_systems","processDate","public_date","parent","isExpandedRow","heightAuto","props","colSpan","createSystemAdvisoriesRows","search","filter","Object","keys","SystemUpToDate","createSystemsRows","data","map","rest","installedPckg","packages_installed","rhba","rhba_count","rhsa","rhsa_count","rhea","rhea_count","osName","os_name","osMajor","os_major","osMinor","os_minor","other","other_count","rhsm","tags","lastUpload","last_upload","key","Math","random","toString","applicable_advisories","operating_system","updated","createPackageSystemsRows","display_name","installed_evra","available_evra","updatable","disableCheckbox","upgradable","createSystemPackagesRows","pkg","pkgNEVRA","name","evra","pkgUpdates","updates","latestUpdate","createUpgradableColumn","summary","createPackagesRows","systems_installed","systems_updatable","createCvesRows","cve","advisorySeverities","impact","document","baseURI","parseFloat","cvss_score","toFixed","createSystemsRowsReview","system","os","baseline_name","createPatchSetRows","filters","displayName","Link","to","pathname","systems","last_edited","published","creator","createPatchSetDetailRows","inventory_id","createAdvisoriesIcons","installable_rhea_count","installable_rhba_count","installable_rhsa_count","installable_other_count","applicable_rhea_count","applicable_rhba_count","applicable_rhsa_count","applicable_other_count"],"sourceRoot":""}