{"version":3,"file":"js/5397.b09dc8b4bd8454d6d884.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/AdvisoryType/AdvisoryType.js","webpack:///./src/PresentationalComponents/Snippets/EmptyStates.js","webpack:///./src/PresentationalComponents/Snippets/NoRegisteredSystems.js","webpack:///./src/PresentationalComponents/Snippets/ErrorHandler.js","webpack:///./src/PresentationalComponents/Snippets/ExternalLink.js","webpack:///./src/PresentationalComponents/Snippets/RebootRequired.js","webpack:///./src/SmartComponents/Remediation/AsyncRemediationButton.js","webpack:///./src/PresentationalComponents/Snippets/Label.js","webpack:///./src/PresentationalComponents/Snippets/DescriptionWithLink.js","webpack:///./src/Utilities/DataMappers.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { Split, SplitItem } from '@patternfly/react-core';\n\nconst AdvisoryType = ({ type }) => {\n    const advisoryType =\n        advisoryTypes.find(item => item.value === type) || advisoryTypes[3];\n    return (\n        <Split hasGutter>\n            <SplitItem>{advisoryType.icon}</SplitItem>\n            <SplitItem isFilled>{advisoryType.label}</SplitItem>\n        </Split>\n    );\n};\n\nAdvisoryType.propTypes = {\n    type: PropTypes.string\n};\n\nexport default AdvisoryType;\n","import {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nexport const EmptyAdvisoryList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingAdvisories)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptyPackagesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingPackages)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptyCvesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingCve)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptySystemsList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingSystems)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const EmptyPatchSetList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingTemplate)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.textEmptyStateBody)}\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport const NoPatchSetList = ({ Button }) => (\n    <EmptyState variant={EmptyStateVariant.large}>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoTemplate)}\n        </Title>\n        <EmptyStateBody>\n            {intl.formatMessage(messages.statesNoTemplateBody)}\n            <br />\n            <br />\n            {/*\n            <a href={TEMPLATES_DOCS_LINK} target=\"__blank\" rel=\"noopener noreferrer\">\n                {intl.formatMessage(messages.statesNoTemplateLink)} <ExternalLinkAltIcon />\n            </a>\n            <br />\n            <br />\n            */}\n            <Button />\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nNoPatchSetList.propTypes = {\n    Button: PropTypes.node\n};\n\nexport const NoAppliedSystems = ({ onButtonClick }) => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.templateNoAppliedSystemsTitle)}\n        </Title>\n        <EmptyStateBody>\n            <Button type=\"primary\" onClick={onButtonClick}>\n                {intl.formatMessage(messages.templateNoAppliedSystemsButton)}\n            </Button>\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nNoAppliedSystems.propTypes = {\n    onButtonClick: PropTypes.func\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { DisconnectedIcon } from '@patternfly/react-icons';\n\nconst NoRegisteredSystems = ({ titleText, bodyText, buttonText }) => (\n    <EmptyState>\n        <EmptyStateIcon icon={DisconnectedIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {titleText}\n        </Title>\n        <EmptyStateBody>{bodyText}</EmptyStateBody>\n        <Button\n            variant=\"primary\"\n            component=\"a\"\n            href=\"https://access.redhat.com/products/red-hat-insights#getstarted\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"pf-u-mt-lg\"\n        >\n            {buttonText}\n        </Button>\n    </EmptyState>\n);\n\nNoRegisteredSystems.propTypes = {\n    titleText: propTypes.string,\n    bodyText: propTypes.string,\n    buttonText: propTypes.string\n};\n\nNoRegisteredSystems.defaultProps = {\n    titleText: 'Do more with your Red Hat Enterprise Linux environment',\n    bodyText:\n    `Connect your systems to keep your Red Hat environment running efficiently,\n     with security and compliance with various standards.`,\n    buttonText: 'Learn more about connecting your systems'\n};\nexport default NoRegisteredSystems;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport { LockIcon } from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\n//TODO: use the shared component from platform\nimport NoRegisteredSystems from './NoRegisteredSystems';\n//import { NoRegisteredSystems } from '@redhat-cloud-services/frontend-components/NoRegisteredSystems';\n\nconst ErrorHandler = ({ code, ErrorState, EmptyState, metadata = {} }) => {\n    switch (code) {\n        case 204:\n            return <NotConnected />;\n\n        case 400:\n            return <Unavailable />;\n\n        case 401:\n            return <NotAuthorized\n                icon={LockIcon}\n                title={intl.formatMessage(messages.labelsNotAuthorizedTitle)}\n                description={intl.formatMessage(messages.labelsNotAuthorizedDescription)}\n                prevPageButtonText={intl.formatMessage(messages.labelsReturnToPreviousPage)}\n                toLandingPageText={intl.formatMessage(messages.labelsReturnToLandingPage)}\n            />;\n\n        case 403:\n            return <NotAuthorized\n                icon={LockIcon}\n                title={intl.formatMessage(messages.labelsNotAuthorizedTitle)}\n                description={intl.formatMessage(messages.labelsNotAuthorizedDescription)}\n                prevPageButtonText={intl.formatMessage(messages.labelsReturnToPreviousPage)}\n                toLandingPageText={intl.formatMessage(messages.labelsReturnToLandingPage)}\n            />;\n\n        case 404:\n            return <InvalidObject />;\n\n        case 500:\n        case 502:\n        case 503:\n            return <Unavailable />;\n\n        default:\n            return ErrorState && <ErrorState />\n                || EmptyState && <EmptyState />\n                || !metadata.has_systems && <NoRegisteredSystems />\n                || <SkeletonTable colSize={5} rowSize={20} /> ;\n    }\n};\n\nErrorHandler.propTypes = {\n    code: propTypes.number,\n    ErrorState: propTypes.element,\n    EmptyState: propTypes.element,\n    metadata: propTypes.object.isRequired\n};\n\nexport default ErrorHandler;\n","import { Flex, FlexItem } from '@patternfly/react-core';\nimport ExternalLinkSquareAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-square-alt-icon';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst ExternalLink = ({ link, text }) => {\n    return (\n        <a\n            href={link}\n            target=\"__blank\"\n        >\n            <Flex flex={{ default: 'inlineFlex' }}>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    {text}\n                </FlexItem>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    <ExternalLinkSquareAltIcon />\n                </FlexItem>\n            </Flex>\n        </a>\n\n    );\n};\n\nExternalLink.propTypes = {\n    link: propTypes.string,\n    text: propTypes.string\n};\n\nexport default ExternalLink;\n","\nimport React from 'react';\nimport {\n    Title, Flex, FlexItem\n} from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { PowerOffIcon } from '@patternfly/react-icons';\n\nconst RebootRequired = () =>  (\n    <Flex flex={{ default: 'column' }}>\n        <FlexItem spacer={{ default: 'spacerNone' }}>\n            <Title headingLevel=\"h6\">\n                {intl.formatMessage(messages.labelsColumnsReboot)}\n            </Title>\n        </FlexItem>\n        <FlexItem spacer={{ default: 'spacerSm' }}>\n            <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n                <FlexItem><PowerOffIcon size=\"sm\" color={'var(--pf-global--danger-color--100)'} /> </FlexItem>\n                <FlexItem isFilled>{intl.formatMessage(messages.textRebootIsRequired)}</FlexItem>\n            </Flex>\n        </FlexItem>\n    </Flex>\n);\n\nexport default RebootRequired;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Spinner } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AsyncRemediationButton = ({ remediationProvider, isDisabled, isLoading }) => {\n    const dispatch = useDispatch();\n\n    const handleRemediationSuccess = res => {\n        dispatch(addNotification(res.getNotification()));\n    };\n\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationButton\"\n            fallback={<Spinner size=\"lg\" />}\n            dataProvider={remediationProvider}\n            onRemediationCreated={handleRemediationSuccess}\n            isDisabled={isDisabled}\n            buttonProps={{ isLoading }}\n        >\n            {intl.formatMessage(messages.labelsRemediate)}\n        </AsyncComponent>\n    );\n};\n\nAsyncRemediationButton.propTypes = {\n    remediationProvider: propTypes.func,\n    isDisabled: propTypes.bool,\n    isLoading: propTypes.bool\n};\n\nexport default AsyncRemediationButton;\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport './Label.scss';\n\nconst Label = ({ children }) => {\n    return <span className={'patchman-label'}>{children}</span>;\n};\n\nLabel.propTypes = {\n    children: propTypes.any\n};\n\nexport default Label;\n","import {\n    Text, TextContent, TextList,\n    TextListItem, TextListItemVariants, TextListVariants, TextVariants\n} from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { entityTypes } from '../../Utilities/constants';\nimport { getSeverityById, handlePatchLink, isRHAdvisory, truncate } from '../../Utilities/Helpers';\nimport { intl } from '../../Utilities/IntlProvider';\nimport ExternalLink from './ExternalLink';\nimport Label from './Label';\nimport RebootRequired from '../Snippets/RebootRequired';\n\nexport const DescriptionWithLink = ({ row }) => {\n    const severityObject = getSeverityById(row.attributes.severity);\n    return (\n        <TextContent className='patch-advisory-description'>\n            {\n                row.attributes.cve_count > 0 &&\n                (<TextList component={TextListVariants.dl} style={{ '--pf-c-content--dl--RowGap': '0.5rem' }}>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsSeverity)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        <SecurityIcon size=\"sm\" color={severityObject.color} />  {severityObject.label}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsCves)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        {row.attributes.cve_count}\n                    </TextListItem>\n                </TextList>)\n            }\n            <Label>{intl.formatMessage(messages.labelsDescription)}</Label>\n            <Text component={TextVariants.p} style={{ whiteSpace: 'pre-line' }}>\n                {truncate(row.attributes.description.replace(\n                    new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n                    ''\n                ), 570, handlePatchLink(entityTypes.advisories, row.id, intl.formatMessage(messages.linksReadMore)))}\n            </Text>\n            {\n                row.attributes.reboot_required && <RebootRequired/>\n            }\n            {isRHAdvisory(row.id) && <ExternalLink link={`https://access.redhat.com/errata/${row.id}`}\n                text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />}\n        </TextContent>);\n};\n\nDescriptionWithLink.propTypes = {\n    row: propTypes.shape({\n        id: propTypes.string,\n        attributes: propTypes.object,\n        reboot_required: propTypes.bool\n    })\n};\n","import { TextContent, TextListItem, TextListItemVariants } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport messages from '../Messages';\nimport AdvisoryType from '../PresentationalComponents/AdvisoryType/AdvisoryType';\nimport { DescriptionWithLink } from '../PresentationalComponents/Snippets/DescriptionWithLink';\nimport {\n    EmptyAdvisoryList, EmptyCvesList, EmptyPackagesList,\n    EmptyPatchSetList, EmptySystemsList\n} from '../PresentationalComponents/Snippets/EmptyStates';\nimport { SystemUpToDate } from '../PresentationalComponents/Snippets/SystemUpToDate';\nimport { advisorySeverities, entityTypes } from './constants';\nimport { createUpgradableColumn, handleLongSynopsis, handlePatchLink } from './Helpers';\nimport { intl } from './IntlProvider';\n\nexport const createAdvisoriesRows = (rows, expandedRows, selectedRows) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        {\n                            title: handleLongSynopsis(row.attributes.synopsis)\n                        },\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type_name}\n                                />\n                            )\n                        },\n                        {\n                            title: handlePatchLink(\n                                entityTypes.advisories,\n                                row.id,\n                                row.attributes.applicable_systems\n                            )\n                        },\n                        {\n                            title: row.attributes.reboot_required &&\n                                intl.formatMessage(messages.labelsRebootRequired)\n                                || intl.formatMessage(messages.labelsRebootNotRequired)\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2,\n                    isExpandedRow: true\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 5 },\n                        title: <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemAdvisoriesRows = (\n    rows,\n    expandedRows,\n    selectedRows,\n    metadata\n) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    disableSelection: row.attributes.status === 'Applicable',\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        {\n                            title: handleLongSynopsis(row.attributes.synopsis)\n                        },\n                        {\n                            title: row.attributes.status\n                        },\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type_name}\n                                />\n                            )\n                        },\n                        {\n                            title: row.attributes.reboot_required &&\n                                intl.formatMessage(messages.labelsRebootRequired)\n                                || intl.formatMessage(messages.labelsRebootNotRequired)\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row={row} />\n                        }\n                    ],\n                    parent: index * 2,\n                    isExpandedRow: true\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 6 },\n                        title: !metadata.search && (metadata.filter && Object.keys(metadata.filter).length === 0)\n                            && <SystemUpToDate />\n                            || <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows.map(({ id, ...rest }) => {\n            const {\n                packages_installed: installedPckg,\n                rhba_count: rhba,\n                rhsa_count: rhsa,\n                rhea_count: rhea,\n                other_count: other,\n                os,\n                rhsm,\n                tags,\n                last_upload: lastUpload\n            } = rest;\n            return {\n                id,\n                ...rest,\n                key: Math.random().toString() + id,\n                packages_installed: installedPckg,\n                applicable_advisories: [\n                    rhea || 0,\n                    rhba || 0,\n                    rhsa || 0,\n                    other || 0\n                ],\n                operating_system: {\n                    osName: os || 'N/A',\n                    rhsm\n                },\n                selected: selectedRows[id] !== undefined,\n                tags,\n                updated: lastUpload\n            };\n        });\n    return data || [];\n};\n\nexport const createPackageSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows &&\n        rows.map(row => {\n            return {\n                id: row.id,\n                key: Math.random().toString() + row.id,\n                display_name: row.display_name,\n                installed_evra: row.installed_evra,\n                available_evra: row.updatable && row.available_evra || row.installed_evra,\n                disableSelection: !row.updatable,\n                updatable: row.updatable,\n                upgradable: row.updatable,\n                selected: selectedRows[row.id] !== undefined,\n                tags: row.tags\n            };\n        });\n    return data || [];\n};\n\nexport const createAdvisorySystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows.map(({ id, ...rest }) => {\n            const {\n                packages_installed: installedPckg,\n                rhba_count: rhba,\n                rhsa_count: rhsa,\n                rhea_count: rhea,\n                other_count: other,\n                os,\n                rhsm,\n                tags,\n                last_upload: lastUpload,\n                status\n            } = rest;\n            return {\n                id,\n                ...rest,\n                key: Math.random().toString() + id,\n                packages_installed: installedPckg,\n                applicable_advisories: [\n                    rhea || 0,\n                    rhba || 0,\n                    rhsa || 0,\n                    other || 0\n                ],\n                os: {\n                    osName: os || 'N/A',\n                    rhsm\n                },\n                selected: selectedRows[id] !== undefined,\n                tags,\n                updated: lastUpload,\n                disableSelection: status !== 'Installable'\n            };\n        });\n    return data || [];\n};\n\nexport const createSystemPackagesRows = (rows, selectedRows = {}) => {\n    if (rows && rows.length !== 0) {\n        return rows.map(pkg => {\n            const pkgNEVRA = `${pkg.name}-${pkg.evra}`;\n            const pkgUpdates = pkg.updates || [];\n            const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n\n            return {\n                id: pkgNEVRA,\n                key: pkgNEVRA,\n                selected: selectedRows[pkgNEVRA] !== undefined,\n                disableSelection: !latestUpdate,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.evra },\n                    { title: (latestUpdate && latestUpdate.evra) || pkg.evra },\n                    { title: createUpgradableColumn(pkg.updatable) },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createPackagesRows = (rows) => {\n    if (rows && rows.length !== 0) {\n        return rows.map(pkg => {\n            return {\n                id: pkg.name,\n                key: pkg.name,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.systems_installed },\n                    { title: pkg.systems_updatable },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createCvesRows = (rows) => {\n    if (rows.length !== 0) {\n        return rows.map(cve => {\n            const { attributes, id } = cve;\n            const severityObject = advisorySeverities.filter(severity => severity.label === attributes.impact)[0];\n\n            return {\n                id,\n                key: id,\n                cells: [\n                    {\n                        title: (\n                            <a href={`${document.baseURI}insights/vulnerability/cves/${attributes.synopsis}`}>\n                                {attributes.synopsis}\n                            </a>)\n                    },\n                    {\n                        title: (<TextContent>\n                            <TextListItem component={TextListItemVariants.dd}>\n                                <SecurityIcon size=\"sm\" color={severityObject.color} />  {severityObject.label}\n                            </TextListItem>\n                        </TextContent>),\n                        value: severityObject.label\n                    },\n                    { title: parseFloat(attributes.cvss_score).toFixed(1) }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 4 },\n                        title: <EmptyCvesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemsRowsReview = (rows, selectedRows) => {\n    if (rows.length !== 0) {\n        return rows.map(system => {\n            const { attributes, id } = system;\n\n            return {\n                id,\n                key: id,\n                selected: selectedRows[system.id] !== undefined,\n                cells: [\n                    {\n                        title: attributes.display_name\n                    },\n                    {\n                        title: attributes.os || 'N/A'\n                    },\n                    {\n                        title: attributes.baseline_name || 'No template'\n                    },\n                    {\n                        title: processDate(attributes.last_upload)\n                    }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 4 },\n                        title: <EmptySystemsList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createPatchSetRows = (rows, selectedRows = {}, filters) => {\n\n    const data =\n        rows &&\n        rows.map(row => {\n            return {\n                id: row.id,\n                displayName: row.name,\n                key: row.id,\n                selected: selectedRows[row.id] !== undefined,\n                cells: [\n                    {\n                        title: (\n                            <Link to={{ pathname: `/templates/${row.id}` }}>\n                                {row.name}\n                            </Link>\n                        )\n                    },\n                    { title: row.systems || intl.formatMessage(messages.labelsTemplateNoSystems) },\n                    { title: processDate(row.last_edited) },\n                    { title: processDate(row.published) },\n                    { title: row.creator }\n                ]\n            };\n        });\n\n    return data?.length > 0 ? data :\n        (filters.search || Object.keys(filters.filter).length) ?\n            [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 6 },\n                            title: <EmptyPatchSetList />\n                        }\n                    ]\n                }\n            ] : [];\n};\n\nexport const createPatchSetDetailRows = (rows) => {\n    const data =\n        rows &&\n        rows.map(row => {\n            row = { ...row, ...row.attributes };\n\n            return {\n                ...row,\n                id: row.inventory_id,\n                display_name: row.display_name,\n                key: row.inventory_id,\n                os: {\n                    osName: row.os,\n                    rhsm: row.rhsm\n                },\n                last_upload: row.last_upload,\n                tags: row.tags\n            };\n        });\n\n    return data;\n};\n"],"names":["AdvisoryType","_ref","type","advisoryType","advisoryTypes","item","value","React","Split","hasGutter","SplitItem","icon","isFilled","label","propTypes","PropTypes","EmptyAdvisoryList","EmptyState","variant","EmptyStateVariant","Title","headingLevel","size","intl","messages","EmptyStateBody","EmptyPackagesList","EmptyStateIcon","SearchIcon","EmptyCvesList","EmptySystemsList","EmptyPatchSetList","NoPatchSetList","Button","PlusCircleIcon","NoAppliedSystems","_ref2","onButtonClick","onClick","NoRegisteredSystems","titleText","bodyText","buttonText","DisconnectedIcon","component","href","target","rel","className","defaultProps","ErrorHandler","code","ErrorState","_ref$metadata","metadata","NotConnected","Unavailable","NotAuthorized","LockIcon","title","description","prevPageButtonText","toLandingPageText","InvalidObject","has_systems","SkeletonTable","colSize","rowSize","ExternalLink","link","text","Flex","flex","default","FlexItem","spacer","ExternalLinkSquareAltIcon","style","flexWrap","PowerOffIcon","color","AsyncRemediationButton","remediationProvider","isDisabled","isLoading","dispatch","useDispatch","AsyncComponent","appName","module","fallback","Spinner","dataProvider","onRemediationCreated","res","addNotification","getNotification","buttonProps","Label","children","DescriptionWithLink","row","severityObject","getSeverityById","attributes","severity","TextContent","cve_count","TextList","TextListVariants","TextListItem","TextListItemVariants","SecurityIcon","Text","TextVariants","whiteSpace","truncate","replace","RegExp","handlePatchLink","entityTypes","id","reboot_required","RebootRequired","isRHAdvisory","concat","createAdvisoriesRows","rows","expandedRows","selectedRows","length","_flatMap","index","isOpen","selected","undefined","cells","handleLongSynopsis","synopsis","advisory_type_name","applicable_systems","processDate","public_date","parent","isExpandedRow","heightAuto","props","colSpan","createSystemAdvisoriesRows","disableSelection","status","search","filter","Object","keys","SystemUpToDate","createSystemsRows","arguments","map","rest","_objectWithoutProperties","_excluded","installedPckg","packages_installed","rhba","rhba_count","rhsa","rhsa_count","rhea","rhea_count","other","other_count","os","rhsm","tags","lastUpload","last_upload","_objectSpread","key","Math","random","toString","applicable_advisories","operating_system","osName","updated","createPackageSystemsRows","display_name","installed_evra","available_evra","updatable","upgradable","createAdvisorySystemsRows","_excluded2","createSystemPackagesRows","pkg","pkgNEVRA","name","evra","pkgUpdates","updates","latestUpdate","createUpgradableColumn","summary","createPackagesRows","systems_installed","systems_updatable","createCvesRows","cve","advisorySeverities","impact","document","baseURI","parseFloat","cvss_score","toFixed","createSystemsRowsReview","system","baseline_name","createPatchSetRows","filters","data","displayName","Link","to","pathname","systems","last_edited","published","creator","createPatchSetDetailRows","inventory_id"],"sourceRoot":""}