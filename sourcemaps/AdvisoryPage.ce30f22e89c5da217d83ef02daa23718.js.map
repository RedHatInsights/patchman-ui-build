{"version":3,"file":"js/AdvisoryPage.17688ab9d0d25dc7904b.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Filters/AdvisoryStatusFilter.js","webpack:///./src/PresentationalComponents/Filters/OsVersionFilter.js","webpack:///./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack:///./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack:///./src/SmartComponents/AdvisorySystems/AdvisorySystems.js","webpack:///./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js","webpack:///./src/SmartComponents/Remediation/RemediationWizard.js"],"sourcesContent":["import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { advisoryStatuses } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst advisoryStatusFilter = (apply, currentFilter = {}) => {\n    let { status: currentValue } = currentFilter;\n\n    const filterByType = value => {\n        apply({ filter: { status: (value.length === 0 ? undefined : value) } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStatus),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: advisoryStatuses,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsColumnsStatusPlaceholder)\n        }\n    };\n};\n\nexport default advisoryStatusFilter;\n","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { getOperatingSystems } from '../../Utilities/api';\n\nconst useOsVersionFilter = (currentFilter = '', apply) => {\n    const versions = useSelector(({ entities }) => entities?.operatingSystems);\n    const versionsLoaded = useSelector(({ entities }) => entities?.operatingSystemsLoaded);\n\n    const [operatingSystems, setOperatingSystems] = useState([]);\n    const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule(\n        {\n            appName: 'inventory',\n            scope: 'inventory',\n            module: './OsFilterHelpers'\n        }\n    );\n\n    useEffect(() => {\n        if (versions === undefined || versionsLoaded === undefined) {\n            /* explicitly request OS versions from API */\n            getOperatingSystems().then(({ results }) => {\n                setOperatingSystems((results || []).map(entry => {\n                    const { name, major, minor } = entry.value;\n                    const versionStringified = `${major}.${minor}`;\n                    return { label: `${name} ${versionStringified}`, value: `${versionStringified}` };\n                }));\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        if (versionsLoaded === true) {\n            setOperatingSystems(versions);\n        }\n    }, [versionsLoaded]);\n\n    const osVersionValue = (currentFilter === '' ? [] : currentFilter.split(','))\n    // patchman uses \"RHEL \" prefix in values; need to remove\n    .map((version) => version.substring(5));\n\n    return [\n        ...(buildOSFilterConfig\n            ? [\n                buildOSFilterConfig(\n                    {\n                        id: 'rhel_version',\n                        value: toGroupSelectionValue(osVersionValue),\n                        onChange: (event, value) => {\n                            /* `versions` must be of type string, e.g., \"8.9,9.0\" */\n                            const versions = Object.values(value)\n                            .flatMap((versions) => Object.keys(versions))\n                            .map((version) => `RHEL ${version}`)\n                            .toString();\n                            apply({ filter: { os: versions } });\n                        }\n                    },\n                    operatingSystems\n                )\n            ]\n            : [])\n    ];\n};\n\nexport default useOsVersionFilter;\n","import { Split, SplitItem, Title } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Split className='infobox' hasGutter>\n            <SplitItem isFilled>\n                <Flex flex={{ default: 'column' }}>\n                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                        <Title headingLevel='h5'>\n                            {intl.formatMessage(messages.labelsColumnsSeverity)}\n                        </Title>\n                    </FlexItem>\n                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                        <Flex flex={{ default: 'row' }}>\n                            <FlexItem>\n                                <SecurityIcon size='sm' color={severity.color} />\n                            </FlexItem>\n                            <FlexItem>\n                                {severity.label}\n                            </FlexItem>\n                        </Flex>\n                    </FlexItem>\n                </Flex>\n            </SplitItem>\n        </Split>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import {\n    Button, Grid, GridItem, Stack, StackItem, Text, TextContent,\n    FlexItem, TextVariants, Flex, Split, SplitItem, Title\n} from '@patternfly/react-core';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport propTypes from 'prop-types';\nimport React, { useState, lazy, Suspense, Fragment } from 'react';\nimport messages from '../../Messages';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { getSeverityById, isRHAdvisory, truncateDescription } from '../../Utilities/Helpers';\nimport { intl } from '../../Utilities/IntlProvider';\nimport RebootRequired from '../Snippets/RebootRequired';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\nimport ExternalLink from '../Snippets/ExternalLink';\nimport AdvisoryType from '../AdvisoryType/AdvisoryType';\n\nconst CvesModal = lazy(() =>\n    import(\n        /* webpackChunkName: \"CvesModal\" */ '../../SmartComponents/AdvisoryDetail/CvesModal'\n    )\n);\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const [CvesInfoModal, setCvesModal] = useState(() => () => null);\n    const [wordLength, setWordLength] = useState(1000);\n    const severityObject = getSeverityById(attributes.severity);\n    const cves = attributes.cves;\n\n    const showCvesModal = () => {\n        setCvesModal(() => () => <CvesModal cveIds={cves} />);\n    };\n\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                attributes.description && truncateDescription(attributes.description, wordLength, setWordLength)\n                            }\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsPublicDate, {\n                                        date: processDate(\n                                            attributes.public_date\n                                        )\n                                    })}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsModifiedDate, {\n                                        date: processDate(\n                                            attributes.modified_date\n                                        )\n                                    })}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        {isRHAdvisory(attributes.id) &&\n                            <StackItem>\n                                <ExternalLink link={`https://access.redhat.com/errata/${attributes.id}`}\n                                    text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n                            </StackItem>\n                        }\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                <Flex flex={{ default: 'column' }}>\n                    {attributes.advisory_type_name && (<FlexItem>\n                        <Split className='infobox' hasGutter>\n                            <SplitItem isFilled>\n                                <Flex flex={{ default: 'column' }}>\n                                    <FlexItem spacer={{ default: 'spacerNone' }}>\n                                        <Title headingLevel='h5'>\n                                            {intl.formatMessage(messages.titlesAdvisoryType)}\n                                        </Title>\n                                    </FlexItem>\n                                    <FlexItem spacer={{ default: 'spacerSm' }}>\n                                        <AdvisoryType\n                                            type={attributes.advisory_type_name}\n                                        />\n                                    </FlexItem>\n                                </Flex>\n                            </SplitItem>\n                        </Split>\n                    </FlexItem>\n                    )}\n                    {severityObject.value !== 0 && (<FlexItem>\n                        <AdvisorySeverityInfo severity={severityObject}/>\n                    </FlexItem>\n                    )}\n                    {attributes.reboot_required && (<FlexItem spacer={{ default: 'spacerMd' }}>\n                        <RebootRequired />\n                    </FlexItem>)}\n                </Flex>\n            </GridItem>\n            {cves && cves.length !== 0 && (\n                <GridItem md={4} sm={12}>\n                    <TextContent>\n                        <Text component={TextVariants.h3}>\n                            {intl.formatMessage(messages.labelsCves)}\n                        </Text>\n                        <Button variant='link' style={{ padding: 0 }} onClick={showCvesModal} >\n                            {intl.formatMessage(messages.labelsCvesButton, { cvesCount: cves.length })}\n                        </Button>\n                    </TextContent>\n                </GridItem>\n            )}\n            <Suspense fallback={<Fragment/>}>\n                <CvesInfoModal />\n            </Suspense>\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React, { useCallback } from 'react';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport { combineReducers } from 'redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/OsVersionFilter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { defaultReducers } from '../../store';\nimport { changeAffectedSystemsParams, clearAdvisorySystemsReducer,\n    clearInventoryReducer, systemSelectAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyAdvisorySystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { exportAdvisorySystemsCSV, exportAdvisorySystemsJSON, fetchAdvisorySystems } from '../../Utilities/api';\nimport { featureFlags, remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, decodeQueryparams, persistantParams,\n    remediationProvider, removeUndefinedObjectKeys\n} from '../../Utilities/Helpers';\nimport {\n    useBulkSelectConfig, useFeatureFlag, useGetEntities, useOnExport, useRemoveFilter\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { advisorySystemsColumns, systemsRowActions } from '../Systems/SystemsListAssets';\nimport RemediationWizard from '../Remediation/RemediationWizard';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\nimport { systemsColumnsMerger, buildActiveFiltersConfig } from '../../Utilities/SystemsHelpers';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport advisoryStatusFilter from '../../PresentationalComponents/Filters/AdvisoryStatusFilter';\n\nconst AdvisorySystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const store = useStore();\n    const chrome = useChrome();\n    const [isRemediationOpen, setRemediationOpen] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const history = useHistory();\n\n    const isPatchSetEnabled = useFeatureFlag(featureFlags.patch_set, chrome);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const queryParams = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore?.queryParams || {}\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const metadata = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore?.metadata || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, page, perPage, sort } = queryParams;\n\n    React.useEffect(() => {\n        apply(decodedParams);\n        return () => {\n            dispatch(clearInventoryReducer());\n            dispatch(clearAdvisorySystemsReducer());\n        };\n    }, []);\n\n    function apply(params) {\n        dispatch(changeAffectedSystemsParams(params));\n    }\n\n    const [deleteFilters] = useRemoveFilter({ search, ...filter }, apply);\n\n    const osFilterConfig = useOsVersionFilter(filter?.os, apply);\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            advisoryStatusFilter(apply, filter),\n            ...osFilterConfig\n        ]\n    };\n\n    const activeFiltersConfig = buildActiveFiltersConfig(filter, search, deleteFilters);\n\n    const showRemediationModal = useCallback(async (data) => {\n        const resolvedData = await data;\n        setRemediationModalCmp(() =>\n            () => <RemediationWizard\n                data={resolvedData}\n                isRemediationOpen\n                setRemediationOpen={setRemediationOpen} />);\n        setRemediationOpen(!isRemediationOpen);\n    }, [isRemediationOpen]);\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.advisorySystems(advisoryName),\n            queryParams,\n            selectionDispatcher: systemSelectAction\n        }\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const getEntites = useGetEntities(fetchAdvisorySystems, apply, { id: advisoryName }, history);\n\n    const onExport = useOnExport(advisoryName, queryParams, {\n        csv: exportAdvisorySystemsCSV,\n        json: exportAdvisorySystemsJSON\n    }, dispatch);\n\n    const remediationDataProvider = () => remediationProvider(\n        advisoryName,\n        removeUndefinedObjectKeys(selectedRows),\n        remediationIdentifiers.advisory\n    );\n\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems);\n\n    return (\n        <React.Fragment>\n            {isRemediationOpen && <RemediationModalCmp /> || null}\n            {(status.hasError || metadata?.has_systems === false)\n                && <ErrorHandler code={status.code} metadata={metadata} />\n                || <InventoryTable\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    ignoreRefresh\n                    hideFilters={{ all: true, tags: false }}\n                    columns={(defaultColumns) => systemsColumnsMerger(defaultColumns, advisorySystemsColumns, isPatchSetEnabled)}\n                    showTags\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    paginationProps={{\n                        isDisabled: totalItems === 0\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        store.replaceReducer(combineReducers({\n                            ...defaultReducers,\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(advisorySystemsColumns(false), modifyAdvisorySystems),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        }));\n                    }}\n                    getEntities={getEntites}\n                    actions={systemsRowActions(showRemediationModal)}\n                    tableProps={{\n                        canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig={activeFiltersConfig}\n                    exportConfig={{\n                        isDisabled: totalItems === 0,\n                        onSelect: onExport\n                    }}\n                    bulkSelect={onSelect && bulkSelectConfig}\n                    dedicatedAction={(\n                        <AsyncRemediationButton\n                            remediationProvider={remediationDataProvider}\n                            isDisabled={\n                                arrayFromObj(selectedRows).length === 0\n                            }\n                        />\n                    )}\n\n                />\n            }\n        </React.Fragment>\n    );\n};\n\nAdvisorySystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AdvisorySystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { clearAdvisoryDetailStore, clearEntitiesStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport AdvisorySystems from '../AdvisorySystems/AdvisorySystems';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst AdvisoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [advisoryName] = React.useState(match.params.advisoryId);\n\n    const pageTitle = `${advisoryName} - ${intl.formatMessage(messages.titlesAdvisories)}`;\n    setPageTitle(pageTitle);\n\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearEntitiesStore());\n            dispatch(clearAdvisoryDetailStore());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                headerOUIA={'advisory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchAdvisories),\n                        to: '/advisories',\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable /> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        <AdvisorySystems advisoryName={advisoryName} />\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisoryDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(AdvisoryDetail);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RemediationWizard = ({ data, setRemediationOpen }) => {\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationWizard\"\n            setOpen={setRemediationOpen}\n            fallback={<span />}\n            data={data}\n        />\n    );\n};\n\nRemediationWizard.propTypes = {\n    data: propTypes.object,\n    setRemediationOpen: propTypes.func\n};\nexport default RemediationWizard;\n"],"names":["apply","currentValue","arguments","length","undefined","status","label","intl","messages","type","conditionalFilterType","filterValues","onChange","event","value","filter","filterByType","items","advisoryStatuses","placeholder","currentFilter","versions","useSelector","_ref","entities","operatingSystems","versionsLoaded","_ref2","operatingSystemsLoaded","_useState","useState","_useState2","_slicedToArray","setOperatingSystems","_useLoadModule","useLoadModule","appName","scope","module","_useLoadModule2$","_useLoadModule2$2","toGroupSelectionValue","buildOSFilterConfig","useEffect","getOperatingSystems","then","_ref3","results","map","entry","_entry$value","name","major","minor","versionStringified","concat","osVersionValue","split","version","substring","_toConsumableArray","id","Object","values","flatMap","keys","toString","os","AdvisorySeverityInfo","severity","React","Split","className","hasGutter","SplitItem","isFilled","Flex","flex","default","FlexItem","spacer","Title","headingLevel","SecurityIcon","size","color","propTypes","CvesModal","lazy","AdvisoryHeader","attributes","isLoading","CvesInfoModal","setCvesModal","_useState3","_useState4","wordLength","setWordLength","severityObject","getSeverityById","cves","Grid","style","minHeight","GridItem","md","sm","WithLoader","loading","variant","WithLoaderVariants","centered","Stack","StackItem","whiteSpace","description","truncateDescription","public_date","date","processDate","modified_date","isRHAdvisory","ExternalLink","link","text","advisory_type_name","AdvisoryType","reboot_required","RebootRequired","TextContent","Text","component","TextVariants","Button","padding","onClick","cveIds","cvesCount","Suspense","fallback","Fragment","AdvisorySystems","advisoryName","dispatch","useDispatch","store","useStore","chrome","useChrome","_React$useState","_React$useState2","isRemediationOpen","setRemediationOpen","_React$useState3","_React$useState4","RemediationModalCmp","setRemediationModalCmp","history","useHistory","isPatchSetEnabled","useFeatureFlag","featureFlags","decodedParams","decodeQueryparams","location","search","systems","rows","shallowEqual","totalItems","_ref4","total","queryParams","_ref5","AdvisorySystemsStore","selectedRows","_ref6","metadata","_ref7","systemProfile","selectedTags","page","perPage","sort","params","changeAffectedSystemsParams","clearInventoryReducer","clearAdvisorySystemsReducer","_useRemoveFilter","useRemoveFilter","_objectSpread","deleteFilters","osFilterConfig","useOsVersionFilter","filterConfig","searchFilter","advisoryStatusFilter","activeFiltersConfig","buildActiveFiltersConfig","showRemediationModal","useCallback","_ref8","_asyncToGenerator","_regeneratorRuntime","_callee","data","resolvedData","_context","prev","next","sent","RemediationWizard","stop","_x","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","systemSelectAction","selectedCount","arrayFromObj","getEntites","useGetEntities","fetchAdvisorySystems","onExport","useOnExport","csv","exportAdvisorySystemsCSV","json","exportAdvisorySystemsJSON","bulkSelectConfig","useBulkSelectConfig","total_items","hasError","has_systems","ErrorHandler","code","InventoryTable","isFullView","autoRefresh","initialLoading","ignoreRefresh","hideFilters","all","tags","columns","defaultColumns","systemsColumnsMerger","advisorySystemsColumns","showTags","customFilters","patchParams","paginationProps","isDisabled","onLoad","_ref9","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","modifyAdvisorySystems","persistantParams","getEntities","actions","systemsRowActions","tableProps","canSelectAll","TableVariant","isStickyHeader","exportConfig","bulkSelect","dedicatedAction","AsyncRemediationButton","remediationProvider","removeUndefinedObjectKeys","remediationIdentifiers","AdvisoryDetail","match","advisoryId","pageTitle","setPageTitle","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearEntitiesStore","clearAdvisoryDetailStore","clearNotifications","Header","title","headerOUIA","breadcrumbs","to","isActive","Unavailable","Main","withRouter","AsyncComponent","setOpen"],"sourceRoot":""}