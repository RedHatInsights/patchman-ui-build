{"version":3,"file":"js/5925.4d98c1533734adfbc97a.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Snippets/SystemUpToDate.js","webpack:///./src/PresentationalComponents/TableView/TableFooter.js","webpack:///./src/PresentationalComponents/TableView/TableView.js","webpack:///./src/Utilities/useOnSelect.js","webpack:///./src/index.js"],"sourcesContent":["import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const SystemUpToDate = () => (\n    <Bullseye>\n        <EmptyState style={{ paddingTop: 40 }}>\n            <EmptyStateIcon icon={()=><CheckCircleIcon size='xl' color={'var(--pf-global--success-color--200)' }\n                style={{ marginBottom: 15 }} />}/>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                {intl.formatMessage(messages.statesNoApplicableAdvisories)}\n            </Title>\n            <EmptyStateBody>\n                {intl.formatMessage(messages.statesSystemUpToDate)}\n            </EmptyStateBody>\n        </EmptyState>\n    </Bullseye>\n);\n","import { Pagination, PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TableFooter = ({ isLoading, page, perPage, onSetPage, totalItems, onPerPageSelect, paginationOUIA }) => {\n    return (\n        <>\n            {isLoading ? (\n                <div className=\"pf-c-pagination pf-m-bottom\">\n                    <Skeleton fontSize=\"xl\" width=\"350px\" style={{ margin: 10 }} />\n                </div>\n            ) :\n                <Pagination\n                    itemCount={totalItems}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    widgetId={`pagination-options-menu-bottom`}\n                    variant={PaginationVariant.bottom}\n                    ouiaId={paginationOUIA}\n                    isDisabled={totalItems === 0}\n                />\n            }\n        </>\n    );\n};\n\nTableFooter.propTypes = {\n    isLoading: PropTypes.bool,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalItems: PropTypes.number,\n    paginationOUIA: PropTypes.string\n};\n\nexport default TableFooter;\n","import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport AsyncRemediationButton from '../../SmartComponents/Remediation/AsyncRemediationButton';\nimport { arrayFromObj, buildFilterChips, convertLimitOffset } from '../../Utilities/Helpers';\nimport { useRemoveFilter, useBulkSelectConfig } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableFooter from './TableFooter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { Skeleton, ToolbarItem } from '@patternfly/react-core';\n\nconst TableView = ({\n    columns,\n    store: {\n        rows,\n        metadata,\n        status,\n        queryParams: { filter, search }\n    },\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    onExport,\n    filterConfig,\n    sortBy,\n    remediationProvider,\n    selectedRows,\n    compact,\n    apply,\n    tableOUIA,\n    paginationOUIA,\n    errorState,\n    emptyState,\n    defaultFilters,\n    searchChipLabel,\n    ToolbarButton,\n    actionsConfig,\n    isRemediationLoading,\n    actionsToggle\n}) => {\n\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n\n    const [deleteFilters] = useRemoveFilter(filter, apply, defaultFilters);\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n    const { code, hasError, isLoading } = status;\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, metadata, rows, onCollapse);\n\n    return (\n        <React.Fragment>\n            {\n                (<React.Fragment>\n                    {(hasError || metadata.has_systems === false)\n                        ? <ErrorHandler code={code} ErrorState={errorState} EmptyState={emptyState} metadata={metadata} />\n                        : <React.Fragment>\n                            <PrimaryToolbar\n                                pagination={isLoading\n                                    ? <Skeleton fontSize=\"xl\" width=\"200px\" style={{ margin: 10 }} />\n                                    : {\n                                        itemCount: metadata.total_items,\n                                        page,\n                                        perPage,\n                                        isCompact: true,\n                                        onSetPage,\n                                        onPerPageSelect,\n                                        ouiaId: `top-${paginationOUIA}`,\n                                        isDisabled: metadata.total_items === 0\n                                    }}\n                                filterConfig={filterConfig}\n                                activeFiltersConfig={{\n                                    filters: buildFilterChips(filter, search, searchChipLabel),\n                                    onDelete: deleteFilters,\n                                    deleteTitle: intl.formatMessage(defaultFilters\n                                        && messages.labelsFiltersReset || messages.labelsFiltersClear)\n                                }}\n                                actionsConfig={{\n                                    actions: [remediationProvider && (\n                                        <AsyncRemediationButton\n                                            remediationProvider={remediationProvider}\n                                            isDisabled={\n                                                Object.values(selectedRows).filter(isSelected => isSelected).length === 0\n                                                || isRemediationLoading\n                                            }\n                                            isLoading={isRemediationLoading}\n                                        />\n                                    )]\n                                }}\n                                exportConfig={{\n                                    isDisabled: metadata.total_items === 0,\n                                    onSelect: onExport\n                                }}\n                                bulkSelect={onSelect && bulkSelectConfig}\n                            >\n                                {ToolbarButton && <ToolbarItem>\n                                    <ToolbarButton />\n                                </ToolbarItem>}\n                            </PrimaryToolbar>\n                            {isLoading\n                                ? <SkeletonTable\n                                    colSize={columns?.length ?? 5}\n                                    rowSize={20}\n                                    variant={compact && TableVariant.compact}\n                                />\n                                : <Table\n                                    aria-label=\"Patch table view\"\n                                    cells={columns}\n                                    onSelect={metadata.total_items && onSelect}\n                                    rows={rows}\n                                    onCollapse={metadata.total_items && onCollapse}\n                                    canSelectAll={false}\n                                    onSort={metadata.total_items && onSort}\n                                    ouiaId={tableOUIA}\n                                    sortBy={metadata.total_items && sortBy}\n                                    isStickyHeader\n                                    variant={compact && TableVariant.compact}\n                                    actions={actionsConfig}\n                                    actionsToggle={actionsToggle}\n                                >\n                                    <TableHeader />\n                                    <TableBody />\n                                </Table>\n                            }\n                            <TableFooter\n                                isLoading={isLoading}\n                                totalItems={metadata.total_items}\n                                perPage={perPage}\n                                page={page}\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                paginationOUIA={`bottom-${paginationOUIA}`}\n                            />\n                        </React.Fragment>\n                    }\n                </React.Fragment>)\n            }\n        </React.Fragment>\n    );\n};\n\nTableView.propTypes = {\n    columns: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    onExport: PropTypes.func,\n    remediationProvider: PropTypes.func,\n    selectedRows: PropTypes.object,\n    apply: PropTypes.func,\n    sortBy: PropTypes.object,\n    filterConfig: PropTypes.object,\n    store: PropTypes.object,\n    compact: PropTypes.bool,\n    tableOUIA: PropTypes.string,\n    paginationOUIA: PropTypes.string,\n    errorState: PropTypes.element,\n    emptyState: PropTypes.element,\n    defaultFilters: PropTypes.object,\n    searchChipLabel: PropTypes.string,\n    ToolbarButton: PropTypes.node,\n    actionsConfig: PropTypes.array,\n    isRemediationLoading: PropTypes.bool,\n    actionsToggle: PropTypes.func\n};\n\nexport default TableView;\n","import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchIDs } from './api';\nimport { toggleAllSelectedAction } from '../store/Actions/Actions';\nimport { isObject } from './Helpers';\n\nexport const ID_API_ENDPOINTS = {\n    advisories: '/ids/advisories',\n    systems: '/ids/systems',\n    templates: '/baselines',\n    advisorySystems: (advisoryID) => `/ids/advisories/${advisoryID}/systems`,\n    systemAdvisories: (systemID) => `/ids/systems/${systemID}/advisories`,\n    packageSystems: (packageName) => `/packages/${packageName}/systems`,\n    systemPackages: (systemID) => `/systems/${systemID}/packages`\n};\n\nconst useFetchAllIDs = (\n    endpoint,\n    apiResponseTransformer\n) =>\n    useCallback((queryParams) =>\n        fetchIDs(endpoint, { ...queryParams, limit: -1 })\n        .then(response =>\n            apiResponseTransformer ? apiResponseTransformer(response) : response\n        ),\n    []\n    );\n\nconst useCreateSelectedRow = (transformKey, constructFilename) =>\n    useCallback((rows, toSelect = []) => {\n        const { ids, data } = rows;\n        const shouldUseOnlyIDs = Array.isArray(ids);\n        const items = shouldUseOnlyIDs ? ids : data;\n\n        items.forEach((item) => {\n            const id = shouldUseOnlyIDs ? item : item.id;\n\n            //expanded rows does not have ID and should be disabled for selection\n            if (!(isObject(item) && item.isExpandedRow)) {\n                toSelect.push(\n                    {\n                        id: transformKey ? transformKey(item) : id,\n                        selected: constructFilename ? constructFilename(item) : id\n                    }\n                );\n            }\n        });\n\n        return toSelect;\n    });\n\nconst createSelectors = (\n    createSelectedRow,\n    dispatchSelection,\n    toggleAllSystemsSelected\n) => {\n    const selectNone = (rows) => {\n        const toSelect = [];\n        Object.keys(rows).forEach(id => {\n            toSelect.push(\n                {\n                    id,\n                    selected: false\n                }\n            );\n        });\n\n        dispatchSelection(toSelect);\n        toggleAllSystemsSelected(false);\n    };\n\n    const selectPage = (pageRows) => {\n        if (Array.isArray(pageRows)) {\n            pageRows = pageRows.filter(row => !row.disableCheckbox);\n        }\n\n        dispatchSelection(createSelectedRow({ data: pageRows }));\n    };\n\n    const selectAll = (fetchIDs, queryParams) => {\n        return fetchIDs(queryParams).then(response => {\n            dispatchSelection(createSelectedRow(response));\n            toggleAllSystemsSelected(true);\n        });\n    };\n\n    return { selectNone, selectPage, selectAll };\n};\n\nexport const useOnSelect = (rawData, selectedRows, config) => {\n    const {\n        endpoint,\n        queryParams,\n        selectionDispatcher,\n        constructFilename,\n        transformKey,\n        apiResponseTransformer,\n        //TODO: get rid of this custom selector\n        customSelector\n    } = config;\n\n    const dispatch = useDispatch();\n    const fetchIDs = useFetchAllIDs(endpoint, apiResponseTransformer);\n    const createSelectedRow = useCreateSelectedRow(transformKey, constructFilename);\n\n    const toggleAllSystemsSelected = (flagState) => {\n        dispatch(toggleAllSelectedAction(flagState));\n    };\n\n    const dispatchSelection = (toSelect) => {\n        if (customSelector) {\n            customSelector(toSelect);\n        } else {\n            dispatch(selectionDispatcher(toSelect));\n        }\n    };\n\n    const { selectNone, selectPage, selectAll } = createSelectors(\n        createSelectedRow,\n        dispatchSelection,\n        toggleAllSystemsSelected\n    );\n\n    const onSelect = useCallback(\n        async (event, selected, rowId, setBulkLoading = () => {}) => {\n            switch (event) {\n                case 'none': {\n                    selectNone(selectedRows);\n                    break;\n                }\n\n                case 'page': {\n                    selectPage(rawData);\n                    break;\n                }\n\n                case 'all': {\n                    selectAll(fetchIDs, queryParams)\n                    .then(() => setBulkLoading(false));\n                    break;\n                }\n\n                default: {\n                    dispatchSelection([{\n                        id: transformKey ? transformKey(rawData[rowId]) : rawData[rowId].id,\n                        selected: selected && (constructFilename ? constructFilename(rawData[rowId]) : true)\n                    }]);\n                }\n            }\n        });\n\n    return onSelect;\n};\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport SystemDetail from './SmartComponents/SystemDetail/SystemDetail';\nimport { SystemAdvisoryListStore } from './store/Reducers/SystemAdvisoryListStore';\nimport { SystemPackageListStore } from './store/Reducers/SystemPackageListStore';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst WrappedSystemDetail = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ SystemAdvisoryListStore, SystemPackageListStore });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, []);\n    return <Router>\n        {\n            Wrapper ? <Wrapper {...getRegistry && { store: getRegistry()?.getStore() }}>\n                <SystemDetail {...props} isInventoryApp />\n            </Wrapper> : <Bullseye>\n                <Spinner size=\"xl\" />\n            </Bullseye>\n        }\n    </Router>;\n};\n\nWrappedSystemDetail.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport { SystemPackageListStore, SystemAdvisoryListStore };\n\nexport default WrappedSystemDetail;\n"],"names":["SystemUpToDate","style","paddingTop","icon","size","color","marginBottom","Title","headingLevel","intl","messages","TableFooter","isLoading","page","perPage","onSetPage","totalItems","onPerPageSelect","paginationOUIA","className","Skeleton","fontSize","width","margin","Pagination","itemCount","widgetId","variant","PaginationVariant","ouiaId","isDisabled","propTypes","PropTypes","TableView","columns","store","rows","metadata","status","queryParams","filter","search","onCollapse","onSelect","onSort","onExport","filterConfig","sortBy","remediationProvider","selectedRows","compact","apply","tableOUIA","errorState","emptyState","defaultFilters","searchChipLabel","ToolbarButton","actionsConfig","isRemediationLoading","actionsToggle","React","convertLimitOffset","limit","offset","useRemoveFilter","deleteFilters","selectedCount","arrayFromObj","length","code","hasError","bulkSelectConfig","useBulkSelectConfig","has_systems","ErrorHandler","ErrorState","EmptyState","PrimaryToolbar","pagination","total_items","isCompact","activeFiltersConfig","filters","buildFilterChips","onDelete","deleteTitle","actions","AsyncRemediationButton","Object","values","isSelected","exportConfig","bulkSelect","ToolbarItem","SkeletonTable","colSize","rowSize","TableVariant","Table","cells","canSelectAll","isStickyHeader","TableHeader","TableBody","ID_API_ENDPOINTS","advisories","systems","templates","advisorySystems","advisoryID","systemAdvisories","systemID","packageSystems","packageName","systemPackages","useOnSelect","rawData","config","endpoint","selectionDispatcher","constructFilename","transformKey","apiResponseTransformer","customSelector","dispatch","useDispatch","fetchIDs","useCallback","then","response","useFetchAllIDs","createSelectedRow","toSelect","ids","data","shouldUseOnlyIDs","Array","isArray","forEach","item","id","isObject","isExpandedRow","push","selected","useCreateSelectedRow","dispatchSelection","toggleAllSystemsSelected","selectNone","keys","selectPage","pageRows","row","disableCheckbox","selectAll","createSelectors","flagState","toggleAllSelectedAction","event","rowId","setBulkLoading","WrappedSystemDetail","getRegistry","props","useState","Wrapper","setWrapper","useEffect","register","SystemAdvisoryListStore","SystemPackageListStore","Provider","Fragment","getStore","isInventoryApp","Spinner"],"sourceRoot":""}