{"version":3,"file":"js/PackageDetail.907da0289e8edc8ba048.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/PresentationalComponents/Filters/StatusFilter.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Spinner/Spinner.js","webpack:///./src/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/PresentationalComponents/PackageHeader/PackageHeader.js","webpack:///./src/PresentationalComponents/Filters/VersionFilter.js","webpack:///./src/SmartComponents/PackageSystems/PackageSystems.js","webpack:///./src/SmartComponents/PackageDetail/PackageDetail.js","webpack:///./src/SmartComponents/PatchSet/PatchSetAssets.js","webpack:///./src/SmartComponents/PatchSet/PatchSet.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.OutlinedQuestionCircleIcon = require('../createIcon').createIcon(exports.OutlinedQuestionCircleIconConfig);\nexports[\"default\"] = exports.OutlinedQuestionCircleIcon;","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { updatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { updatable: currentValue } = currentFilter;\n\n    const updatableTypesMap = React.useMemo(\n        () =>\n            updatableTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { updatable: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStatus),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: updatableTypesMap,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsColumnsStatusPlaceholder)\n        }\n    };\n};\n\nexport default statusFilter;\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport classNames from 'classnames';\nimport '../Spinner/spinner.css';\nvar Spinner = function (_a) {\n    var _b;\n    var centered = _a.centered, className = _a.className, props = __rest(_a, [\"centered\", \"className\"]);\n    var spinnerClasses = classNames('ins-c-spinner', (_b = {}, _b[\"ins-m-center\"] = centered, _b), className);\n    return (_jsx(\"div\", __assign({ role: \"status\", className: spinnerClasses }, props, { children: _jsx(\"span\", __assign({ className: \"pf-u-screen-reader\" }, { children: \"Loading...\" })) })));\n};\nexport default Spinner;\n//# sourceMappingURL=Spinner.js.map","/* eslint-disable react/prop-types */\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nexport const WithLoaderVariants = {\n    spinner: 'spinner',\n    skeleton: 'skeleton'\n};\n\nconst loaderMap = {\n    [WithLoaderVariants.skeleton]: ({ size, isDark }) => (\n        <Skeleton size={size} isDark={isDark} />\n    ),\n    [WithLoaderVariants.spinner]: ({ centered }) => (\n        <Spinner centered={centered} />\n    )\n};\n\nexport const WithLoader = ({ loading, variant, children, ...props }) => {\n    if (loading !== false) {\n        return loaderMap[variant](props);\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    loading: propTypes.bool,\n    variant: propTypes.string,\n    children: propTypes.any\n};\n\nexport default WithLoader;\n","import { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Fragment } from 'react';\nimport { truncateDescription } from '../../Utilities/Helpers';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\n\nconst PackageHeader = ({ attributes: { description }, isLoading }) => {\n    const [wordLength, setWordLength] = React.useState(1000);\n\n    return description && (<Grid hasGutter style={{ minHeight: 50 }}>\n        <GridItem md={8} sm={12}>\n            <WithLoader\n                loading={isLoading}\n                variant={WithLoaderVariants.spinner}\n                centered\n            >\n                <Stack hasGutter>\n                    <StackItem />\n                    <StackItem style={{ whiteSpace: 'pre-line' }}>\n                        {\n                            description && truncateDescription(description, wordLength, setWordLength)\n                        }\n                    </StackItem>\n                </Stack>\n            </WithLoader>\n        </GridItem>\n    </Grid>) || <Fragment/>;\n};\n\nPackageHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default PackageHeader;\n","import React from 'react';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst VersionFilter = (apply, filter, packageVersions) => {\n\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n\n    const isSet = filter && filter.installed_evra;\n    const installedEvra = isSet &&\n        (typeof(filter.installed_evra) === 'string' && filter.installed_evra.split(',')\n        || filter.installed_evra);\n    const versionList = packageVersions.data && packageVersions.data.sort().map(version => ({ value: version.evra }))\n        || [{ value: intl.formatMessage(messages.textNoVersionAvailable), disabled: true }];\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onSelect = (_, selection) => {\n        const config = { filter: {} };\n        if (!installedEvra || (installedEvra && !installedEvra.includes(selection))) {\n            const existingVersions = isSet && filter.installed_evra !== '' && filter.installed_evra.concat(',') || '';\n\n            config.filter = { installed_evra: `${existingVersions}${selection}` };\n        } else {\n            const filteredOutEvras = installedEvra.length !== 1\n                && installedEvra.filter(evra => !evra.includes(selection)).join(',') || undefined;\n\n            config.filter = { installed_evra: filteredOutEvras };\n        }\n\n        apply(config);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionList.length);\n    };\n\n    return (\n        {\n            type: conditionalFilterType.custom,\n            label: intl.formatMessage(messages.labelsFiltersPackageVersionTitle),\n            value: 'custom',\n            filterValues: {\n                children: (\n                    <Select\n                        variant={versionList.length > 0 && SelectVariant.checkbox || SelectVariant.typeaheadMulti}\n                        typeAheadAriaLabel={intl.formatMessage(messages.labelsFiltersPackageVersionPlaceholder)}\n                        onToggle={onToggle}\n                        onSelect={onSelect}\n                        selections={installedEvra}\n                        isOpen={isOpen}\n                        aria-labelledby={'patch-version-filter'}\n                        placeholderText={intl.formatMessage(messages.labelsFiltersPackageVersionPlaceholder)}\n                        {...(numOptions < versionList.lengt\n                            && { loadingVariant: { text: 'View more', onClick: onViewMoreClick } })}\n                        style={{ maxHeight: '400px', overflow: 'auto' }}\n                    >\n                        {versionList.slice(0, numOptions).map((option, index) => (\n                            <SelectOption\n                                isDisabled={option.disabled}\n                                key={index}\n                                value={option.value}\n                                {...(option.description && { description: option.description })}\n                            />\n                        ))}\n                    </Select>\n                )\n            }\n        }\n    );\n\n};\n\nexport default VersionFilter;\n","import { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport propTypes from 'prop-types';\nimport React, { useCallback, useMemo, useEffect } from 'react';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport versionFilter from '../../PresentationalComponents/Filters/VersionFilter';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\nimport { defaultReducers } from '../../store';\nimport { changePackageSystemsParams, clearInventoryReducer,\n    clearPackageSystemsReducer, systemSelectAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer, modifyPackageSystems } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportPackageSystemsCSV,\n    exportPackageSystemsJSON, fetchPackageSystems,\n    fetchPackageVersions\n} from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport {\n    arrayFromObj, buildFilterChips, decodeQueryparams, filterRemediatablePackageSystems,\n    persistantParams, remediationProviderWithPairs, removeUndefinedObjectKeys\n} from '../../Utilities/Helpers';\nimport { useBulkSelectConfig, useGetEntities, useOnExport, useRemoveFilter } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport AsyncRemediationButton from '../Remediation/AsyncRemediationButton';\nimport { packageSystemsColumns } from '../Systems/SystemsListAssets';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\nimport { combineReducers } from 'redux';\n\nconst PackageSystems = ({ packageName }) => {\n    const dispatch = useDispatch();\n    const store = useStore();\n    const history = useHistory();\n    const [packageVersions, setPackageVersions] = React.useState([]);\n\n    const decodedParams = decodeQueryparams(history.location.search);\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const status = useSelector(\n        ({ entities }) => entities?.status || {}\n    );\n    const totalItems = useSelector(\n        ({ entities }) => entities?.total || 0\n    );\n    const selectedRows = useSelector(\n        ({ entities }) => entities?.selectedRows || []\n    );\n    const queryParams = useSelector(\n        ({ PackageSystemsStore }) => PackageSystemsStore?.queryParams || {}\n    );\n\n    const { systemProfile, selectedTags,\n        filter, search, sort, page, perPage } = queryParams;\n\n    const apply = useCallback((params) => {\n        dispatch(changePackageSystemsParams(params));\n    }, []);\n\n    useEffect(async () => {\n        apply(decodedParams);\n        setPackageVersions(await fetchPackageVersions({ package_name: packageName }));\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearInventoryReducer());\n            dispatch(clearPackageSystemsReducer());\n        };\n    }, []);\n\n    const [deleteFilters] = useRemoveFilter({ ...filter, search }, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            ),\n            statusFilter(apply, filter),\n            versionFilter(apply, filter, packageVersions)\n        ]\n    };\n\n    const activeFiltersConfig = useMemo(() => ({\n        filters: buildFilterChips(filter, search, intl.formatMessage(messages.labelsFiltersSystemsSearchTitle)),\n        onDelete: deleteFilters\n    }), [filter, search]);\n\n    const constructFilename = (system) => {\n        return `${packageName}-${system.available_evra}`;\n    };\n\n    const onSelect = useOnSelect(\n        systems,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.packageSystems(packageName),\n            queryParams,\n            selectionDispatcher: systemSelectAction,\n            constructFilename,\n            apiResponseTransformer: filterRemediatablePackageSystems\n        }\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = useOnExport(packageName, queryParams, {\n        csv: exportPackageSystemsCSV,\n        json: exportPackageSystemsJSON\n    }, dispatch);\n\n    const prepareRemediationPairs = useCallback((systemIDs) => {\n        const pairs = [];\n\n        systemIDs.forEach(id => {\n            const packageEvra = selectedRows[id];\n            const issueID = `patch-package:${packageEvra}`;\n            const index = pairs.findIndex(pair => pair.id === issueID);\n\n            if (index !== -1) {\n                pairs[index].systems.push(id);\n            } else if (packageEvra) {\n                pairs.push({\n                    id: issueID,\n                    description: packageEvra,\n                    systems: [id]\n                });\n            }\n        });\n\n        return pairs.length ? { issues: pairs } : false;\n    }, [selectedRows]);\n\n    const getEntites = useGetEntities(fetchPackageSystems, apply, { packageName }, history);\n\n    const remediationDataProvider = () => remediationProviderWithPairs(\n        removeUndefinedObjectKeys(selectedRows),\n        prepareRemediationPairs,\n        remediationIdentifiers.package\n    );\n\n    const bulkSelectConfig = useBulkSelectConfig(selectedCount, onSelect, { total_items: totalItems }, systems);\n\n    return (\n        <React.Fragment>\n            {status.hasError && <ErrorHandler code={status.code} /> || (\n                <InventoryTable\n                    disableDefaultColumns={['system_profile', 'updated']}\n                    isFullView\n                    autoRefresh\n                    initialLoading\n                    hideFilters={{ all: true, tags: false }}\n                    columns={packageSystemsColumns}\n                    showTags\n                    getEntities={getEntites}\n                    customFilters={{\n                        patchParams: {\n                            search,\n                            filter,\n                            systemProfile,\n                            selectedTags\n                        }\n                    }}\n                    paginationProps={{\n                        isDisabled: totalItems === 0\n                    }}\n                    onLoad={({ mergeWithEntities }) => {\n                        store.replaceReducer(combineReducers({\n                            ...defaultReducers,\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(packageSystemsColumns, modifyPackageSystems),\n                                persistantParams({ page, perPage, sort, search }, decodedParams)\n                            )\n                        }));\n\n                    }}\n                    tableProps={{\n                        canSelectAll: false,\n                        variant: TableVariant.compact, className: 'patchCompactInventory', isStickyHeader: true\n                    }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig={activeFiltersConfig}\n                    bulkSelect={onSelect && bulkSelectConfig}\n                    exportConfig={{\n                        isDisabled: totalItems === 0,\n                        onSelect: onExport\n                    }}\n                    dedicatedAction={(\n                        <AsyncRemediationButton\n                            remediationProvider={remediationDataProvider}\n                            isDisabled={arrayFromObj(selectedRows).length === 0}\n                        />\n                    )}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nPackageSystems.propTypes = {\n    packageName: propTypes.string\n};\n\nexport default PackageSystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport PackageHeader from '../../PresentationalComponents/PackageHeader/PackageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport PackageSystems from '../../SmartComponents/PackageSystems/PackageSystems';\nimport { clearPackageDetailStore, fetchPackageDetails } from '../../store/Actions/Actions';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/Snippets/ErrorHandler';\n\nconst PackageDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [packageName] = React.useState(match.params.packageName);\n    const pageTitle = `${packageName} - ${intl.formatMessage(messages.titlesPackages)}`;\n    setPageTitle(pageTitle);\n    const packageDetails = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore\n    );\n    const status = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchPackageDetails({ packageName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n            dispatch(clearPackageDetailStore());\n        };\n    }, []);\n\n    const { attributes } = packageDetails.data;\n\n    return (\n        <React.Fragment>\n            <Header\n                title={packageName}\n                headerOUIA={'package-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchPackages),\n                        to: '/packages',\n                        isActive: false\n                    },\n                    {\n                        title: packageName,\n                        isActive: true\n                    }\n                ]}\n            >{status.hasError ? <Unavailable/> :\n                    <PackageHeader\n                        attributes={{ ...attributes, id: packageName }}\n                        isLoading={status.isLoading}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        {status.hasError\n                            && < ErrorHandler />\n                                || (!status.isLoading && <PackageSystems packageName={packageName}></PackageSystems>)\n                        }\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nPackageDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(PackageDetail);\n","import React from 'react';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table/dist/js';\nimport {\n    EllipsisVIcon\n} from '@patternfly/react-icons';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const CreatePatchSetButton = (setPatchSetState, hasAccess) => () =>\n    !hasAccess ?\n        <Tooltip content='For editing access, contact your administrator.'>\n            <Button key='createButton' isAriaDisabled >\n                {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n            </Button>\n        </Tooltip>\n        :\n        (<Button key='createButton' onClick={() => setPatchSetState({ isPatchSetWizardOpen: true })}>\n            {intl.formatMessage(messages.labelsButtonCreateTemplate)}\n        </Button>);\n\nexport const patchSetColumns = [\n    {\n        key: 'name',\n        title: 'Name',\n        transforms: [sortable],\n        props: {\n            width: 50\n        }\n    },\n    {\n        key: 'systems',\n        title: 'Systems',\n        transforms: [sortable],\n        props: {\n            width: 50\n        }\n    }\n];\n\nexport const patchSetRowActions = (openPatchSetEditModal, handlePatchSetDelete) => [\n    {\n        title: intl.formatMessage(messages.labelsButtonEditTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            openPatchSetEditModal(rowData?.id);\n        }\n    },\n    {\n        title: intl.formatMessage(messages.labelsButtonRemoveTemplate),\n        onClick: (_event, _rowId, rowData) => {\n            handlePatchSetDelete(rowData);\n        }\n    }\n\n];\n\nexport const CustomActionsToggle = () => <Tooltip content='For editing access, contact your administrator.'>\n    <Button\n        isAriaDisabled\n        variant=\"plain\"\n        aria-label=\"plain kebab\"\n    >\n        <EllipsisVIcon />\n    </Button>\n</Tooltip>;\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport {\n    fetchPatchSetsAction, changePatchSetsParams,\n    selectPatchSetRow, clearPatchSetsAction\n} from '../../store/Actions/Actions';\nimport { deletePatchSet } from '../../Utilities/api';\nimport { createPatchSetRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams } from '../../Utilities/Helpers';\nimport {\n    setPageTitle, useDeepCompareEffect, useEntitlements, usePerPageSelect, useSetPage, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { clearNotifications, addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n    patchSetColumns, CreatePatchSetButton as createPatchSetButton,\n    patchSetRowActions, CustomActionsToggle\n} from './PatchSetAssets';\nimport PatchSetWizard from '../PatchSetWizard/PatchSetWizard';\nimport { patchSetDeleteNotifications, TEMPLATES_DOCS_LINK } from '../../Utilities/constants';\nimport usePatchSetState from '../../Utilities/usePatchSetState';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\nimport { ExternalLinkAltIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport { NoPatchSetList, NoSmartManagement } from '../../PresentationalComponents/Snippets/EmptyStates';\n\nconst PatchSet = () => {\n    const pageTitle = intl.formatMessage(messages.titlesTemplate);\n\n    const IS_SELECTION_ENABLED = false;\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const [hasSmartManagement, setSmartManagement] = React.useState(true);\n    const patchSets = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.rows\n    );\n\n    const queryParams = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.metadata\n    );\n    const status = useSelector(\n        ({ PatchSetsStore }) => PatchSetsStore.status\n    );\n\n    const rows = useMemo(\n        () => createPatchSetRows(patchSets, selectedRows, queryParams),\n        [patchSets, selectedRows]\n    );\n\n    const getEntitlements = useEntitlements();\n\n    function apply(params) {\n        dispatch(changePatchSetsParams(params));\n    }\n\n    const refreshTable = () => {\n        dispatch(fetchPatchSetsAction({ ...queryParams, page: 1, offset: 0 }));\n    };\n\n    useEffect(() => {\n        getEntitlements().then((entitelements) => {\n            setSmartManagement(\n                entitelements?.smart_management?.is_entitled\n            );\n        });\n\n        return () => {\n            dispatch(clearPatchSetsAction());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const { patchSetState, setPatchSetState, openPatchSetEditModal } = usePatchSetState(selectedRows);\n\n    useEffect(() => {\n        if (patchSetState.shouldRefresh === true) {\n            refreshTable();\n        }\n    }, [patchSetState.shouldRefresh]);\n\n    useDeepCompareEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchPatchSetsAction(queryParams));\n        }\n    }, [queryParams, firstMount]);\n\n    const onSelect = useOnSelect(\n        rows,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.templates,\n            queryParams,\n            selectionDispatcher: selectPatchSetRow\n        }\n    );\n\n    const onSort = useSortColumn(patchSetColumns, apply, 0);\n    const sortBy = React.useMemo(\n        () => createSortBy(patchSetColumns, metadata.sort, 0),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const handlePatchSetDelete = (rowData) => {\n        deletePatchSet(rowData.id).then(() => {\n            dispatch(addNotification(patchSetDeleteNotifications.success));\n            refreshTable();\n        }).catch(() => {\n            dispatch(addNotification(patchSetDeleteNotifications.error));\n        });;\n    };\n\n    const { hasAccess } = usePermissionsWithContext([\n        'patch:*:*',\n        'patch:template:write'\n    ]);\n    const CreatePatchSetButton = createPatchSetButton(setPatchSetState, hasAccess);\n    const actionsConfig = patchSetRowActions(openPatchSetEditModal, handlePatchSetDelete);\n\n    //TODO: refactor search filter to be able to wrap this into useMemo\n    const filterConfig = {\n        items: [\n            searchFilter(apply, queryParams.search,\n                intl.formatMessage(messages.labelsFiltersSearchTemplateTitle),\n                intl.formatMessage(messages.labelsFiltersSearchTemplatePlaceholder)\n            )\n        ]\n    };\n\n    return (\n        <React.Fragment>\n            <Header\n                headerOUIA={'advisories'}\n                title={<span>\n                    {intl.formatMessage(messages.titlesTemplate)}\n                    <Popover\n                        id=\"template-header-title-popover\"\n                        aria-describedby=\"template-header-title-popover\"\n                        aria-labelledby=\"template-header-title-popover\"\n                        hasAutoWidth\n                        maxWidth=\"320px\"\n                        position=\"right\"\n                        enableFlip\n                        headerContent={\n                            intl.formatMessage(messages.templatePopoverHeader)\n                        }\n                        bodyContent={\n                            intl.formatMessage(messages.templatePopoverBody)\n                        }\n                        footerContent={\n                            <a href={TEMPLATES_DOCS_LINK} target=\"__blank\" rel=\"noopener noreferrer\">\n                                {intl.formatMessage(messages.linksReadMore)} <ExternalLinkAltIcon />\n                            </a>\n                        }\n                    >\n                        <OutlinedQuestionCircleIcon\n                            color=\"var(--pf-global--secondary-color--100)\"\n                            className=\"pf-u-ml-sm\"\n                            style={{ verticalAlign: '0', fontSize: 16, cursor: 'pointer' }}\n                        />\n                    </Popover>\n                </span>}\n            />\n            {patchSetState.isPatchSetWizardOpen &&\n                <PatchSetWizard\n                    systemsIDs={patchSetState.systemsIDs}\n                    setBaselineState={setPatchSetState}\n                    patchSetID={patchSetState.patchSetID}\n                />}\n            <Main>\n                {hasSmartManagement\n                    ? rows.length === 0\n                        ? <NoPatchSetList Button={CreatePatchSetButton}/>\n                        : <TableView\n                            columns={patchSetColumns}\n                            compact\n                            onSetPage={onSetPage}\n                            onPerPageSelect={onPerPageSelect}\n                            onSort={onSort}\n                            selectedRows={IS_SELECTION_ENABLED && selectedRows}\n                            onSelect={IS_SELECTION_ENABLED && onSelect}\n                            sortBy={sortBy}\n                            apply={apply}\n                            tableOUIA={'patch-set-table'}\n                            paginationOUIA={'patch-set-pagination'}\n                            store={{ rows, metadata, status, queryParams }}\n                            actionsConfig={(patchSets?.length > 0) && actionsConfig}\n                            filterConfig={filterConfig}\n                            searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchTemplateTitle)}\n                            CreatePatchSetButton={CreatePatchSetButton}\n                            actionsToggle={!hasAccess ? CustomActionsToggle : null}\n                        />\n                    : <NoSmartManagement />}\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default PatchSet;\n","import { createSystemsRows } from '../../Utilities/DataMappers';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { selectRows, fetchRejected } from './HelperReducers';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State. It should not include page and perPage to persist them dynamically\nconst initialState = {\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    status: {},\n    page: 1,\n    perPage: 20,\n    metadata: {\n        limit: 20,\n        offset: 0,\n        total_items: 0\n    }\n};\n// Reducer\n\nexport const modifyInventory = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            status: { isLoading: false, hasError: false },\n            rows: createSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const modifyPackageSystems = (columns, state) => {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: createPackageSystemsRows(state.rows, state.selectedRows)\n        };\n    }\n\n    return state;\n};\n\nexport const inventoryEntitiesReducer = (columns, inventoryModifier) => (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return inventoryModifier(columns, newState);\n\n        case 'LOAD_ENTITIES_PENDING':\n            newState.status = { isLoading: true, hasError: false };\n            return newState;\n\n        case 'LOAD_ENTITIES_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY': {\n            const stateAfterSelection = selectRows(newState, action);\n            return inventoryModifier(columns, stateAfterSelection);\n        }\n\n        case ActionTypes.CLEAR_INVENTORY_REDUCER:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","BaseInvTable","props","history","useHistory","store","Cmp","component","className","children","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","currentFilter","currentValue","updatable","updatableTypesMap","React","updatableTypes","value","label","toString","filterByType","filter","intl","messages","type","conditionalFilterType","filterValues","onChange","event","items","placeholder","_a","_b","centered","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","spinnerClasses","role","WithLoaderVariants","spinner","skeleton","loaderMap","isDark","Skeleton","WithLoader","loading","variant","PackageHeader","description","attributes","isLoading","wordLength","setWordLength","Grid","hasGutter","style","minHeight","GridItem","md","sm","Stack","StackItem","whiteSpace","truncateDescription","Fragment","packageVersions","isOpen","setOpen","numOptions","setNumOptions","isSet","installed_evra","installedEvra","split","versionList","data","sort","map","version","evra","disabled","Select","SelectVariant","typeAheadAriaLabel","onToggle","onSelect","_","selection","config","includes","existingVersions","concat","filteredOutEvras","join","undefined","selections","placeholderText","lengt","loadingVariant","text","onClick","maxHeight","overflow","slice","option","index","SelectOption","isDisabled","key","PackageSystems","packageName","dispatch","useDispatch","useStore","setPackageVersions","decodedParams","decodeQueryparams","location","search","systems","useSelector","entities","rows","shallowEqual","status","totalItems","total","selectedRows","queryParams","PackageSystemsStore","systemProfile","selectedTags","page","perPage","useCallback","params","changePackageSystemsParams","useEffect","fetchPackageVersions","package_name","clearInventoryReducer","clearPackageSystemsReducer","useRemoveFilter","deleteFilters","filterConfig","searchFilter","statusFilter","versionFilter","activeFiltersConfig","useMemo","filters","buildFilterChips","onDelete","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","systemSelectAction","constructFilename","system","available_evra","apiResponseTransformer","filterRemediatablePackageSystems","selectedCount","arrayFromObj","onExport","useOnExport","csv","exportPackageSystemsCSV","json","exportPackageSystemsJSON","prepareRemediationPairs","systemIDs","pairs","forEach","id","packageEvra","issueID","findIndex","pair","push","issues","getEntites","useGetEntities","fetchPackageSystems","bulkSelectConfig","useBulkSelectConfig","total_items","hasError","ErrorHandler","code","InventoryTable","disableDefaultColumns","isFullView","autoRefresh","initialLoading","hideFilters","all","tags","columns","packageSystemsColumns","showTags","getEntities","customFilters","patchParams","paginationProps","onLoad","mergeWithEntities","replaceReducer","combineReducers","defaultReducers","inventoryEntitiesReducer","modifyPackageSystems","persistantParams","tableProps","canSelectAll","TableVariant","isStickyHeader","bulkSelect","exportConfig","dedicatedAction","AsyncRemediationButton","remediationProvider","remediationProviderWithPairs","removeUndefinedObjectKeys","remediationIdentifiers","PackageDetail","match","pageTitle","setPageTitle","packageDetails","PackageDetailStore","fetchPackageDetails","clearNotifications","clearPackageDetailStore","Header","title","headerOUIA","breadcrumbs","to","isActive","Unavailable","Main","TextContent","Text","TextVariants","withRouter","patchSetColumns","transforms","sortable","CustomActionsToggle","Tooltip","content","Button","isAriaDisabled","firstMount","setFirstMount","hasSmartManagement","setSmartManagement","patchSets","PatchSetsStore","metadata","createPatchSetRows","getEntitlements","useEntitlements","changePatchSetsParams","refreshTable","fetchPatchSetsAction","offset","then","entitelements","smart_management","is_entitled","clearPatchSetsAction","usePatchSetState","patchSetState","setPatchSetState","openPatchSetEditModal","shouldRefresh","useDeepCompareEffect","encodeURLParams","selectPatchSetRow","onSort","useSortColumn","sortBy","createSortBy","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","hasAccess","usePermissionsWithContext","CreatePatchSetButton","isPatchSetWizardOpen","createPatchSetButton","actionsConfig","handlePatchSetDelete","_event","_rowId","rowData","deletePatchSet","addNotification","patchSetDeleteNotifications","patchSetRowActions","Popover","hasAutoWidth","maxWidth","position","enableFlip","headerContent","bodyContent","footerContent","href","TEMPLATES_DOCS_LINK","target","rel","color","verticalAlign","fontSize","cursor","PatchSetWizard","systemsIDs","setBaselineState","patchSetID","TableView","compact","tableOUIA","paginationOUIA","searchChipLabel","actionsToggle","initialState","modifyInventory","state","loaded","createSystemsRows","createPackageSystemsRows","inventoryModifier","action","newState","fetchRejected","stateAfterSelection","selectRows","ActionTypes"],"sourceRoot":""}