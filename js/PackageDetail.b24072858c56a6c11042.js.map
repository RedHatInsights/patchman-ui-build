{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/PackageHeader/PackageHeader.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/PackageSystems/PackageSystems.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/PackageDetail/PackageDetail.js"],"names":["PackageHeader","attributes","isLoading","Grid","hasGutter","style","minHeight","GridItem","md","sm","WithLoader","loading","variant","WithLoaderVariants","centered","Stack","StackItem","whiteSpace","preserveNewlines","description","propTypes","PackageSystems","packageName","dispatch","useDispatch","enableRemediation","React","rawPackageSystems","useSelector","PackageSystemsStore","rows","status","selectedRows","hosts","createPackageSystemsRows","metadata","queryParams","inventoryColumns","entities","columns","handleRefresh","useHandleRefresh","apply","filter","search","clearPackageSystemsStore","useDeepCompareEffect","fetchPackageSystemsAction","id","usePagePerPage","limit","offset","page","perPage","params","changePackageSystemsParams","removeFilter","useRemoveFilter","filterConfig","items","searchFilter","intl","messages","statusFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","getMangledColumns","updated","key","packageSystemsColumns","onSort","useSortColumn","sortBy","createSortBy","sort","arrayFromObj","length","STATUS_REJECTED","Unavailable","Inventory","onLoad","mergeWithEntities","store","getStore","register","packagesSystemsInventoryReducer","getState","total","total_items","onRefresh","isLoaded","STATUS_RESOLVED","tableProps","canSelectAll","onSelect","TableVariant","className","bulkSelect","PackageDetail","match","pageTitle","setPageTitle","packageDetails","PackageDetailStore","fetchPackageDetails","clearPackageDetailStore","data","Header","title","headerOUIA","breadcrumbs","to","paths","isActive","STATUS_LOADING","Main","TextContent","Text","component","TextVariants","withRouter"],"mappings":"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","file":"js/PackageDetail.b24072858c56a6c11042.js","sourcesContent":["import { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { preserveNewlines } from '../../Utilities/Helpers';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\n\nconst PackageHeader = ({ attributes, isLoading }) => {\n    return (\n        <Grid hasGutter style={{ minHeight: 50 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                preserveNewlines(attributes.description)\n                            }\n                        </StackItem>\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n\n        </Grid>\n    );\n};\n\nPackageHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default PackageHeader;\n","import { Button, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { AnsibeTowerIcon } from '@patternfly/react-icons';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/components/cjs/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport { getStore, register } from '../../store';\nimport { changePackageSystemsParams, clearPackageSystemsStore, fetchPackageSystemsAction } from '../../store/Actions/Actions';\nimport { packagesSystemsInventoryReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { fetchPackageSystems } from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED, remediationIdentifiers } from '../../Utilities/constants';\nimport { createPackageSystemsRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, buildFilterChips, createSortBy, remediationProvider } from '../../Utilities/Helpers';\nimport {\n    useDeepCompareEffect, useHandleRefresh, useOnSelect, usePagePerPage,\n    useRemoveFilter, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { packageSystemsColumns } from '../Systems/SystemsListAssets';\n\nconst PackageSystems = ({ packageName }) => {\n    const dispatch = useDispatch();\n    const enableRemediation = false;\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawPackageSystems = useSelector(\n        ({ PackageSystemsStore }) => PackageSystemsStore.rows\n    );\n    const status = useSelector(\n        ({ PackageSystemsStore }) => PackageSystemsStore.status\n    );\n    const selectedRows = useSelector(\n        ({ PackageSystemsStore }) => PackageSystemsStore.selectedRows\n    );\n    const hosts = React.useMemo(\n        () => createPackageSystemsRows(rawPackageSystems, selectedRows),\n        [rawPackageSystems]\n    );\n    const metadata = useSelector(\n        ({ PackageSystemsStore }) => PackageSystemsStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ PackageSystemsStore }) => PackageSystemsStore.queryParams\n    );\n\n    const inventoryColumns = useSelector(\n        ({ entities }) => entities && entities.columns\n    );\n\n    const handleRefresh = useHandleRefresh(metadata, apply);\n    const { filter, search } = queryParams;\n\n    React.useEffect(() => {\n        return () => dispatch(clearPackageSystemsStore());\n    }, []);\n\n    useDeepCompareEffect(() => {\n        dispatch(\n            fetchPackageSystemsAction({ id: packageName, ...queryParams })\n        );\n    }, [queryParams]);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    function apply(params) {\n        dispatch(changePackageSystemsParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search, intl.formatMessage(messages.labelsFiltersSystemsSearch)),\n            statusFilter(apply, filter)\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    const constructFilename = (system) => {\n        return `${packageName}-${system.available_evra}`;\n    };\n\n    const fetchAllData = () =>\n        fetchPackageSystems({ id: packageName, limit: 999999 });\n\n    const selectRows = (toSelect) => {\n        dispatch({ type: 'SELECT_ENTITY', payload: toSelect });\n    };\n\n    const onSelect = enableRemediation && useOnSelect(rawPackageSystems,  selectedRows,\n        fetchAllData, selectRows, constructFilename);\n\n    // This is used ONLY for sorting purposes\n    const getMangledColumns = () => {\n        let updated = inventoryColumns && inventoryColumns.filter(({ key }) => key === 'updated')[0];\n        updated = { ...updated, key: 'last_upload' };\n        return [...packageSystemsColumns, updated];\n    };\n\n    const onSort = useSortColumn(getMangledColumns(), apply, 0);\n    const sortBy = React.useMemo(\n        () => createSortBy(getMangledColumns(), metadata.sort, 0),\n        [metadata.sort]\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    return (\n        <React.Fragment>\n            {status === STATUS_REJECTED ? <Unavailable/> : (\n                <InventoryTable\n                    onLoad={({ mergeWithEntities }) => {\n                        const store = getStore();\n                        register({\n                            ...mergeWithEntities(\n                                packagesSystemsInventoryReducer(packageSystemsColumns, store.getState().PackageSystemsStore)\n                            )\n                        });\n\n                    }}\n                    items={hosts}\n                    page={page}\n                    total={metadata.total_items}\n                    perPage={perPage}\n                    onRefresh={handleRefresh}\n                    isLoaded={status === STATUS_RESOLVED}\n                    tableProps = {{ canSelectAll: false, onSort, sortBy, onSelect,\n                        variant: TableVariant.compact, className: 'patchCompactInventory' }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig = {activeFiltersConfig}\n                    bulkSelect={enableRemediation && onSelect && {\n                        count: selectedCount,\n                        items: [{\n                            title: `Select none (0)`,\n                            onClick: () => {\n                                onSelect('none');\n                            }\n                        }, {\n                            title: `Select page (${hosts.length})`,\n                            onClick: () => {\n                                onSelect('page');\n                            }\n                        },\n                        {\n                            title: `Select all (${metadata.total_items})`,\n                            onClick: () => {\n                                onSelect('all');\n                            }\n                        }],\n                        onSelect: (value) => {\n                            value ? onSelect('all') : onSelect('none');\n                        },\n                        toggleProps: {\n                            'data-ouia-component-type': 'bulk-select-toggle-button'\n                        },\n                        checked: selectedCount === metadata.total_items ? true : selectedCount === 0 ? false : null\n                    }}\n                >\n                    {enableRemediation &&\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <Button\n                                className={'remediationButtonPatch'}\n                                isDisabled={\n                                    arrayFromObj(selectedRows).length === 0\n                                }\n                                onClick={() =>\n                                    showRemediationModal(\n                                        remediationProvider(\n                                            packageName,\n                                            Object.keys(selectedRows),\n                                            remediationIdentifiers.package\n                                        )\n                                    )\n                                }\n                                ouiaId={'toolbar-remediation-button'}\n                            >\n                                <AnsibeTowerIcon/>&nbsp;{intl.formatMessage(messages.labelsRemediate)}\n                            </Button>\n                            <RemediationModalCmp />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                    }\n                </InventoryTable>\n            )}\n        </React.Fragment>\n    );\n};\n\nPackageSystems.propTypes = {\n    packageName: propTypes.string\n};\n\nexport default PackageSystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport PackageHeader from '../../PresentationalComponents/PackageHeader/PackageHeader';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components';\nimport { paths } from '../../Routes';\nimport PackageSystems from '../../SmartComponents/PackageSystems/PackageSystems';\nimport { clearPackageDetailStore, fetchPackageDetails } from '../../store/Actions/Actions';\nimport { STATUS_LOADING, STATUS_REJECTED } from '../../Utilities/constants';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst PackageDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [packageName] = React.useState(match.params.packageName);\n    const pageTitle = `${packageName} - ${intl.formatMessage(messages.titlesPackages)}`;\n    setPageTitle(pageTitle);\n    const packageDetails = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore\n    );\n    const status = useSelector(\n        ({ PackageDetailStore }) => PackageDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchPackageDetails({ packageName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            //dispatch(clearAdvisorySystemsStore());\n            dispatch(clearPackageDetailStore());\n        };\n    }, []);\n\n    const { attributes } = packageDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={packageName}\n                headerOUIA={'package-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchPackages),\n                        to: paths.packages.to,\n                        isActive: false\n                    },\n                    {\n                        title: packageName,\n                        isActive: true\n                    }\n                ]}\n            >{status === STATUS_REJECTED ? <Unavailable/> :\n                    <PackageHeader\n                        attributes={{ ...attributes, id: packageName }}\n                        isLoading={status === STATUS_LOADING}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        <PackageSystems packageName={packageName}></PackageSystems>\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nPackageDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(PackageDetail);\n"],"sourceRoot":""}