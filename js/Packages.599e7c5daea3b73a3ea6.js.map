{"version":3,"sources":["webpack:///./src/SmartComponents/Packages/Packages.js"],"names":["Packages","dispatch","useDispatch","packageRows","useSelector","PackagesListStore","rows","React","useMemo","createPackagesRows","error","status","metadata","queryParams","filter","search","apply","params","changePackagesListParams","useEffect","fetchPackagesAction","useRemoveFilter","buildFilterChips","onSort","useSortColumn","packagesColumns","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","errorState","message","detail","STATUS_REJECTED","addNotification","variant","title","description","Fragment","headerOUIA","columns","store","compact","filterConfig","items","searchFilter","remediationButtonOUIA","tableOUIA","paginationOUIA"],"mappings":"2FAAA,sJAmGeA,UAlFE,WACb,IAAMC,EAAWC,wBACXC,EAAcC,uBAChB,qBAAGC,kBAA0CC,QAE3CA,EAAOC,IAAMC,SAAQ,kBAAMC,YAAmBN,KAAc,CAACA,IAE7DO,EAAQN,uBACV,qBAAGC,kBAA0CK,SAE3CC,EAASP,uBACX,qBAAGC,kBAA0CM,UAE3CC,EAAWR,uBACb,qBAAGC,kBAA0CO,YAE3CC,EAAcT,uBAChB,qBAAGC,kBAA0CQ,eAGzCC,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,OAMhB,SAASC,EAAMC,GACXhB,EAASiB,YAAyBD,IALtCV,IAAMY,WAAU,WACZlB,EAASmB,YAAoBP,MAC9B,CAACA,IAMiBQ,YAAgBP,EAAQE,GAGhCM,YAAiBR,EAAQC,GAHtC,IAOMQ,EAASC,YAAcC,IAAiBT,GACxCU,EAASnB,IAAMC,SACjB,kBAAMmB,YAAaF,IAAiBb,EAASgB,KAAM,KACnD,CAAChB,EAASgB,OAERC,EAAYC,YAAWlB,EAASmB,MAAOf,GACvCgB,EAAkBC,YAAiBjB,GAEnCkB,EAA8B,MAAjBxB,EAAMC,OAAkB,kBAAC,IAAD,MAAkB,kBAAC,IAAD,CAAOwB,QAASzB,EAAM0B,SASnF,OAPIzB,IAAW0B,KAAoC,MAAjB3B,EAAMC,QACpCV,EAASqC,0BAAgB,CACrBC,QAAS,SACTC,MAAO9B,EAAM8B,MACbC,YAAa/B,EAAM0B,UAIvB,kBAAC,IAAMM,SAAP,KACI,kBAAC,IAAD,CAAQF,MAAO,kBAAmBG,WAAY,aAC9C,kBAAC,OAAD,KACI,kBAAC,IAAD,CACIC,QAASnB,IACToB,MAAO,CAAEvC,OAAMM,WAAUD,SAAQE,eACjCU,OAAQA,EACRG,OAAQA,EACRG,UAAWA,EACXG,gBAAiBA,EACjBc,SAAO,EACP9B,MAAOA,EACP+B,aAAc,CACVC,MAAO,CACHC,YAAajC,EAAOH,EAAYE,OAAQ,qBAGhDmC,sBAAuB,6BACvBC,UAAW,wBACXC,eAAgB,6BAChBlB,WAAYA","file":"js/Packages.599e7c5daea3b73a3ea6.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport Error from '../../PresentationalComponents/Snippets/Error';\nimport { NoSystemData } from '../../PresentationalComponents/Snippets/NoSystemData';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { packagesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changePackagesListParams, fetchPackagesAction } from '../../store/Actions/Actions';\nimport { STATUS_REJECTED } from '../../Utilities/constants';\nimport { createPackagesRows } from '../../Utilities/DataMappers';\nimport { buildFilterChips, createSortBy } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useRemoveFilter, useSetPage, useSortColumn } from '../../Utilities/Hooks';\n\nconst Packages = () => {\n    const dispatch = useDispatch();\n    const packageRows = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.rows\n    );\n    const rows = React.useMemo(() => createPackagesRows(packageRows), [packageRows]);\n\n    const error = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.error\n    );\n    const status = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.status\n    );\n    const metadata = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.queryParams\n    );\n\n    const { filter, search } = queryParams;\n\n    React.useEffect(() => {\n        dispatch(fetchPackagesAction(queryParams));\n    }, [queryParams]);\n\n    function apply(params) {\n        dispatch(changePackagesListParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    const onSort = useSortColumn(packagesColumns, apply);\n    const sortBy = React.useMemo(\n        () => createSortBy(packagesColumns, metadata.sort, 0),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const errorState = error.status === 404 ?  <NoSystemData/> : <Error message={error.detail}/>;\n\n    if (status === STATUS_REJECTED && error.status !== 404) {\n        dispatch(addNotification({\n            variant: 'danger',\n            title: error.title,\n            description: error.detail\n        }));}\n\n    return (\n        <React.Fragment>\n            <Header title={'Package Updates'} headerOUIA={'packages'}/>\n            <Main>\n                <TableView\n                    columns={packagesColumns}\n                    store={{ rows, metadata, status, queryParams }}\n                    onSort={onSort}\n                    sortBy={sortBy}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    compact\n                    apply={apply}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search, 'Search packages')\n                        ]\n                    }}\n                    remediationButtonOUIA={'toolbar-remediation-button'}\n                    tableOUIA={'package-details-table'}\n                    paginationOUIA={'package-details-pagination'}\n                    errorState={errorState}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Packages;\n"],"sourceRoot":""}