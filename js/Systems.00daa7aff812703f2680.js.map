{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/Systems/Systems.js"],"names":["pageTitle","intl","messages","setPageTitle","dispatch","useDispatch","React","RemediationModalCmp","setRemediationModalCmp","rawSystems","useSelector","SystemsListStore","rows","hosts","createSystemsRows","status","metadata","queryParams","inventoryColumns","entities","columns","filter","search","handleRefresh","useHandleRefresh","apply","useDeepCompareEffect","fetchSystemsAction","usePagePerPage","limit","offset","page","perPage","params","changeSystemsListParams","removeFilter","useRemoveFilter","filterConfig","items","searchFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","getMangledColumns","updated","key","systemsListColumns","onSort","useSortColumn","sortBy","createSortBy","sort","title","headerOUIA","STATUS_REJECTED","onLoad","mergeWithEntities","store","getStore","register","inventoryEntitiesReducer","getState","isFullView","total","total_items","isLoaded","STATUS_RESOLVED","onRefresh","exportConfig","onSelect","_","format","date","Date","toISOString","replace","split","filename","exportSystemsCSV","then","data","downloadFile","exportSystemsJSON","JSON","stringify","hasCheckbox","actions","systemsRowActions","tableProps","areActionsDisabled","rowData","applicable_advisories","every","typeSum","variant","TableVariant","className"],"mappings":"2lCA4JA,QAnIgB,WACZ,IAAMA,EAAYC,kBAAmBC,oBAErCC,QAAaH,GAEb,IAAMI,GAAWC,mBALC,EAUdC,cAAe,kBAAM,kBAAM,SAVb,WAQdC,EARc,KASdC,EATc,KAWZC,GAAaC,kBACf,qBAAGC,iBAAwCC,QAEzCC,EAAQP,aAAc,kBAAMQ,QAAkBL,KAAa,CAC7DA,IAEEM,GAASL,kBACX,qBAAGC,iBAAwCI,UAEzCC,GAAWN,kBACb,qBAAGC,iBAAwCK,YAEzCC,GAAcP,kBAChB,qBAAGC,iBAAwCM,eAGzCC,GAAmBR,kBACrB,gBAAGS,EAAH,EAAGA,SAAH,OAAkBA,GAAYA,EAASC,WAGnCC,EAAmBJ,EAAnBI,OAAQC,EAAWL,EAAXK,OAEVC,GAAgBC,QAAiBR,EAAUS,IAEjDC,SAAqB,WACjBtB,GAASuB,QAAmBV,MAC7B,CAACA,IArCc,OAuCMW,QAAeZ,EAASa,MAAOb,EAASc,QAvC9C,WAuCXC,EAvCW,KAuCLC,EAvCK,KA6ClB,SAASP,EAAMQ,GACX7B,GAAS8B,QAAwBD,IAGrC,IAAME,GAAeC,QAAgBf,EAAQI,GAEvCY,EAAe,CACjBC,MAAO,EACHC,OAAad,EAAOH,EAAQrB,kBAAmBC,mCAIjDsC,EAAsB,CACxBC,SAASC,QAAiBrB,EAAQC,GAClCqB,SAAUR,GAIRS,EAAoB,WACtB,IAAIC,EAAU3B,GAAoBA,EAAiBG,QAAO,kBAAqB,YAArB,EAAGyB,OAA6B,GAE1F,OADAD,EAAU,EAAH,KAAQA,GAAR,IAAiBC,IAAK,gBAC7B,cAAWC,MAAX,CAA+BF,KAG7BG,GAASC,QAAcL,IAAqBnB,GAC5CyB,EAAS5C,aACX,kBAAM6C,QAAaP,IAAqB5B,EAASoC,KAAM,KACvD,CAACpC,EAASoC,OAoBd,OACI,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAQC,MAAOpD,kBAAmBC,wBAA8BoD,WAAY,YAC5E,kBAAC/C,EAAD,MACA,kBAAC,IAAD,KACKQ,IAAWwC,KAAkB,kBAAC,IAAD,MAEtB,kBAAC,KAAD,CACIC,OAAQ,YAA2B,IAAxBC,EAAwB,EAAxBA,kBACDC,GAAQC,UACdC,OAAS,EAAD,GACDH,GACCI,QAAyBd,KAAoBW,EAAMI,WAAWnD,sBAI1EoD,YAAU,EACVzB,MAAOzB,EACPkB,KAAMA,EACNiC,MAAOhD,EAASiD,YAChBjC,QAASA,EACTkC,SAAUnD,IAAWoD,KACrBC,UAAW7C,EACX8C,aAAc,CAAEC,SAxCvB,SAACC,EAAGC,GACjB,IAAMC,GAAO,IAAIC,MAAOC,cAAcC,QAAQ,QAAS,KAAKC,MAAM,KAAK,GAAK,OACtEC,EAAW,WAAH,OAAcL,GACb,QAAXD,GACAO,QAAiB9D,GAAa+D,MAAK,SAAAC,GAAI,OAAIC,QAAaD,EAAMH,EAAU,WAGxEK,QAAkBlE,GAAa+D,MAAK,SAAAC,GAAI,OAAIC,QAAaE,KAAKC,UAAUJ,GAAOH,EAAU,aAkCzEQ,aAAa,EACbC,SAASC,SA5EJ,SAAAP,GACzBzE,GAAuB,kBAAM,kBAAM,kBAAC,IAAD,CAAkByE,KAAMA,WA4EvC5C,aAAcA,EACdG,oBAAuBA,EACvBiD,WAAc,CAAEC,mBAlCb,SAACC,GAGxB,OADkCA,EAA1BC,sBACqBC,OAAM,SAAAC,GAAO,OAAgB,IAAZA,MA+BU9C,SAAQE,SACxC6C,QAASC,uBAAsBC,UAAW","file":"js/Systems.00daa7aff812703f2680.js","sourcesContent":["import { TableVariant } from '@patternfly/react-table';\nimport { Main, Unavailable } from '@redhat-cloud-services/frontend-components';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/components/cjs/Inventory';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { getStore, register } from '../../store';\nimport { changeSystemsListParams, fetchSystemsAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { exportSystemsCSV, exportSystemsJSON } from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport { buildFilterChips, createSortBy } from '../../Utilities/Helpers';\nimport {\n    setPageTitle,\n    useDeepCompareEffect, useHandleRefresh, usePagePerPage,\n    useRemoveFilter, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\n\nconst Systems = () => {\n    const pageTitle = intl.formatMessage(messages.titlesSystems);\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawSystems = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.rows\n    );\n    const hosts = React.useMemo(() => createSystemsRows(rawSystems), [\n        rawSystems\n    ]);\n    const status = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.status\n    );\n    const metadata = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.queryParams\n    );\n\n    const inventoryColumns = useSelector(\n        ({ entities }) => entities && entities.columns\n    );\n\n    const { filter, search } = queryParams;\n\n    const handleRefresh = useHandleRefresh(metadata, apply);\n\n    useDeepCompareEffect(() => {\n        dispatch(fetchSystemsAction(queryParams));\n    }, [queryParams]);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    function apply(params) {\n        dispatch(changeSystemsListParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search, intl.formatMessage(messages.labelsFiltersSystemsSearch))\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    // This is used ONLY for sorting purposes\n    const getMangledColumns = () => {\n        let updated = inventoryColumns && inventoryColumns.filter(({ key }) => key === 'updated')[0];\n        updated = { ...updated, key: 'last_upload' };\n        return [...systemsListColumns, updated];\n    };\n\n    const onSort = useSortColumn(getMangledColumns(), apply);\n    const sortBy = React.useMemo(\n        () => createSortBy(getMangledColumns(), metadata.sort, 0),\n        [metadata.sort]\n    );\n\n    const onExport = (_, format) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const filename = `systems-${date}`;\n        if (format === 'csv') {\n            exportSystemsCSV(queryParams).then(data => downloadFile(data, filename, 'csv'));\n        }\n        else {\n            exportSystemsJSON(queryParams).then(data => downloadFile(JSON.stringify(data), filename, 'json'));\n        }\n    };\n\n    const areActionsDisabled = (rowData) => {\n        // eslint-disable-next-line camelcase\n        const { applicable_advisories } = rowData;\n        return applicable_advisories.every(typeSum => typeSum === 0);\n    };\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'}/>\n            <RemediationModalCmp />\n            <Main>\n                {status === STATUS_REJECTED ? <Unavailable/> :\n                    (\n                        <InventoryTable\n                            onLoad={({ mergeWithEntities }) => {\n                                const store = getStore();\n                                register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(systemsListColumns, store.getState().SystemsListStore)\n                                    )\n                                });\n                            }}\n                            isFullView\n                            items={hosts}\n                            page={page}\n                            total={metadata.total_items}\n                            perPage={perPage}\n                            isLoaded={status === STATUS_RESOLVED}\n                            onRefresh={handleRefresh}\n                            exportConfig={{ onSelect: onExport }}\n                            hasCheckbox={false}\n                            actions={systemsRowActions(showRemediationModal)}\n                            filterConfig={filterConfig}\n                            activeFiltersConfig = {activeFiltersConfig}\n                            tableProps = {{ areActionsDisabled, onSort, sortBy,\n                                variant: TableVariant.compact, className: 'patchCompactInventory' }}\n\n                        />\n                    )\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n"],"sourceRoot":""}