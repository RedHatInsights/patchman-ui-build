{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/App.scss","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Snippets/Label.scss","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/SystemDetail/SystemDetail.scss","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/App.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/Messages.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Filters/PublishDateFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Filters/SearchFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Filters/StatusFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Filters/TypeFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Snippets/ExternalLink.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Snippets/NoSystemData.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Snippets/SystemUpToDate.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/TableView/TableFooter.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/TableView/TableView.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/TableView/TableViewAssets.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Snippets/NoAccess.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/Routes.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/Remediation/RemediationModal.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/AdvisoryType/AdvisoryType.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Snippets/EmptyStates.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Snippets/Label.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Snippets/DescriptionWithLink.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/Utilities/DataMappers.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Snippets/AdvisoriesIcon.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/Utilities/Helpers.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/Utilities/Hooks.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/Utilities/IntlProvider.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/Utilities/axiosInterceptors.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/Utilities/api.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/Utilities/constants.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/Utilities/getBaseName.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/ActionTypes.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/Actions/Actions.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/SystemAdvisories/SystemAdvisories.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/SystemPackages/SystemPackages.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/SystemDetail/SystemDetail.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/Reducers/SystemDetailStore.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/Reducers/HelperReducers.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/Reducers/AdvisoryDetailStore.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/Reducers/AdvisoryListStore.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/Reducers/AdvisorySystemsStore.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/Reducers/PackageDetailStore.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/Reducers/PackagesListStore.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/Reducers/PackageSystemsStore.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/Reducers/SystemAdvisoryListStore.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/Reducers/SystemPackageListStore.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/Reducers/SystemsListStore.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/Reducers/CvesListStore.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/store/index.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/App.scss?75e2","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Snippets/Label.scss?c1f9","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/SystemDetail/SystemDetail.scss?9ba2"],"names":["___CSS_LOADER_EXPORT___","i","push","module","id","withRouter","dispatch","useDispatch","useState","selectedTags","systemProfile","config","setConfig","location","useLocation","history","useHistory","useEffect","listen","pathname","currentRoute","Object","values","paths","filter","element","includes","to","insights","chrome","appNavClick","navId","split","length","init","identifyApp","globalFilterScope","on","data","mapGlobalFilter","SID","SAP","Workloads","item","map","tag","encodeURIComponent","newconfig","isSelected","undefined","SID_filter","join","concat","globalFilter","unregister","event","domEvent","childProps","defineMessages","generalAppName","description","defaultMessage","labelsBulkSelectAll","labelsBulkSelectNone","labelsBulkSelectPage","labelsColumnsApplicableSystems","labelsColumnsCVSS","labelsColumnsCveID","labelsColumnsInstalledVersion","labelsColumnsLatestVersion","labelsColumnsName","labelsColumnsPackage","labelsColumnsPublishDate","labelsColumnsSeverity","labelsColumnsStatus","labelsColumnsSummary","labelsColumnsSynopsis","labelsColumnsType","labelsColumnsUpgradable","labelsCves","labelsCvesButton","labelsDescription","labelsFiltersPackagesSearch","labelsFiltersPublishDate","labelsFiltersSearch","labelsFiltersSearchAdvisories","labelsFiltersStatus","labelsFiltersSystemsSearch","labelsFiltersType","labelsModifiedDate","labelsPublicDate","labelsRemediate","labelsSeverity","linksLearnAboutInsights","linksLearnMore","linksReadMore","linksSearchSecurityRatings","linksViewPackagesAndErrata","statesActivateInsights","statesError","statesMinimumPatchPermissionsRequired","statesNoApplicableAdvisories","statesNoMatchingAdvisories","statesNoMatchingCve","statesNoMatchingPackages","statesPatchNotConfigured","statesRequiresPatchPermissions","statesSystemUpToDate","titlesAdvisories","titlesAffectedSystems","titlesPackages","titlesPatchAdvisories","titlesPatchPackages","titlesPatchSystems","titlesSystems","apply","currentFilter","currentValue","public_date","filterByPublicDate","value","label","intl","messages","type","conditionalFilterType","filterValues","onChange","items","publicDateOptions","search","placeholder","React","searchValue","setSearchValue","debounce","searchAdvisory","updatable","updatableTypesMap","updatableTypes","toString","filterByType","advisoryTypesMap","advisoryTypes","advisory_type","ExternalLink","link","text","href","target","flex","default","spacer","propTypes","NoSystemData","Bullseye","EmptyState","style","paddingTop","EmptyStateIcon","icon","WrenchIcon","Title","headingLevel","size","EmptyStateBody","Button","variant","component","SystemUpToDate","color","marginBottom","TableFooter","page","perPage","onSetPage","totalItems","onPerPageSelect","paginationOUIA","TableToolbar","Pagination","itemCount","widgetId","PaginationVariant","ouiaId","PropTypes","TableView","columns","store","rows","metadata","status","queryParams","onCollapse","onSelect","onSort","onExport","filterConfig","sortBy","remediationProvider","selectedRows","compact","remediationButtonOUIA","tableOUIA","errorState","emptyState","RemediationModalCmp","setRemediationModalCmp","convertLimitOffset","limit","offset","removeFilter","useRemoveFilter","selectedCount","arrayFromObj","STATUS_REJECTED","STATUS_RESOLVED","PrimaryToolbar","pagination","total_items","isCompact","activeFiltersConfig","filters","buildFilterChips","onDelete","actionsConfig","actions","isDisabled","className","onClick","RemediationModal","globalPaletteWhite","exportConfig","bulkSelect","count","title","toggleProps","checked","STATUS_LOADING","SkeletonTable","colSize","rowSize","Table","aria-label","cells","canSelectAll","TableVariant","TableHeader","TableBody","advisoriesColumns","cellFormatters","expandable","transforms","sortable","cellWidth","key","systemAdvisoriesColumns","systemPackagesColumns","packagesColumns","props","width","cvesTableColumns","Page","Main","EmptyStateVariant","LockIcon","Advisories","lazy","Systems","InventoryPage","AdvisoryPage","PackagsPage","PackageDetail","RegisterPage","advisories","systems","inventoryDetail","advisoryDetail","advisoryDetailSystem","register","packages","packageDetail","packageDetailSystem","Routes","hasPatchAccess","setPatchAccess","fetchSystems","then","res","meta","replace","err","path","Suspense","fallback","Fragment","Switch","Redirect","from","Route","exact","render","some","p","NoAccess","remediations","setRemediations","experimental","loadRemediations","pfReactTable","PfTable","TableGridBreakpoint","SortByDirection","handleRemediationSuccess","addNotification","getNotification","openWizard","onRemediationCreated","RemediationWizard","defaultProps","f","AdvisoryType","advisoryType","Flex","FlexItem","EmptyAdvisoryList","SearchIcon","EmptyPackagesList","EmptyCvesList","Label","children","DescriptionWithLink","row","severityObject","getSeverityById","attributes","severity","TextContent","cve_count","TextList","TextListVariants","TextListItem","TextListItemVariants","Text","TextVariants","whiteSpace","truncate","RegExp","handlePatchLink","entityTypes","createAdvisoriesRows","expandedRows","index","isOpen","selected","synopsis","applicable_systems","processDate","parent","heightAuto","colSpan","createSystemAdvisoriesRows","keys","createSystemsRows","Math","random","packages_installed","applicable_advisories","rhea_count","rhba_count","rhsa_count","operating_system","os_name","os_major","os_minor","createPackageSystemsRows","installed_evra","available_evra","upgradable","createSystemPackagesRows","pkg","pkgNEVRA","name","evra","pkgUpdates","updates","latestUpdate","disableCheckbox","createUpgradableColumn","summary","createPackagesRows","systems_installed","systems_updatable","createCvesRows","cve","advisorySeverities","impact","parseFloat","cvss_score","toFixed","AdvisoriesIcon","tooltipText","Icon","Tooltip","content","createSortBy","header","column","multiple","direction","compoundSortValues","forEach","col","dir","findIndex","addOrRemoveItemFromSet","targetObj","inputArr","inputObj","reduce","obj","rowId","getNewSelectedItems","selectedItems","currentItems","payload","getRowIdByIndexExpandable","arrayOfObjects","getOffsetFromPageLimit","getLimitFromPageSize","str","max","end","substr","createAdvisoriesIcons","rhea","rhba","rhsa","every","SecurityIcon","BugIcon","EnhancementIcon","display","alignItems","marginLeft","body","indexOf","Link","document","baseURI","issues","remediationIdentifier","encodeParams","parameters","shouldTranslateKeys","allParams","result","entries","category","filterCategory","filterCategories","find","apiValue","getFilterValue","operator","flattenFilters","params","argKey","argValue","encodeApiParams","encodeURLParams","urlParams","decodeQueryparams","queryString","parsed","qs","startsWith","bracketIndex","objParent","slice","objKey","filterValue","categories","chips","match","changeListParams","oldParams","newParams","newState","hasOwnProperty","tags","subtractDate","days","date","Date","setDate","getDate","toISOString","preserveNewlines","input","sortCves","cves","sortedCves","sort","aCells","bCells","aCell","bCell","stringA","toUpperCase","stringB","localeCompare","reverse","useSetPage","callback","_","useHandleRefresh","per_page","usePagePerPage","usePerPageSelect","useSortColumn","columnName","compoundKey","selectedItem","categoryId","activeFilter","toRemove","Array","isArray","useOnSelect","rawData","fetchAllData","selectRows","constructFilename","transformKey","constructKey","createSelectedRow","toSelect","setPageTitle","useDeepCompareEffect","effect","deps","ref","current","isDeepEqualReact","cache","createIntlCache","locale","navigator","language","createIntl","onError","console","log","axiosInstance","axios","getUserPermissions","userPermissions","inventoryPermissionList","access","permission","interceptors","request","use","authInterceptor","response","responseDataInterceptor","error","ReadOnlyNotification","isAxiosError","statusText","detail","createApiCall","endpoint","method","window","auth","getUser","url","withCredentials","fetchApplicableAdvisoriesApi","fetchApplicableSystemAdvisoriesApi","fetchAdvisoryDetailsApi","advisoryName","fetchPackageDetailsApi","packageName","fetchApplicablePackagesApi","fetchAdvisorySystems","args","fetchPackageSystems","fetchPackagesList","fetchCvesInfo","cveIds","fetch","credentials","headers","Accept","JSON","stringify","cve_list","json","exportAdvisoriesCSV","Headers","accept","exportAdvisoriesJSON","exportSystemsCSV","exportSystemsJSON","exportPackagesCSV","exportPackagesJSON","asc","desc","storeListDefaults","isBeta","packagesListUpdatableTypes","remediationIdentifiers","package","advisory","release","pathName","shift","FETCH_APPLICABLE_ADVISORIES","EXPAND_ADVISORY_ROW","SELECT_ADVISORY_ROW","CHANGE_ADVISORY_LIST_PARAMS","FETCH_SYSTEMS","CHANGE_SYSTEMS_LIST_PARAMS","CHANGE_SYSTEM_ADVISORY_LIST_PARAMS","EXPAND_SYSTEM_ADVISORY_ROW","FETCH_APPLICABLE_SYSTEM_ADVISORIES","SELECT_SYSTEM_ADVISORY_ROW","CLEAR_SYSTEM_ADVISORIES","FETCH_ADVISORY_DETAILS","FETCH_AFFECTED_SYSTEMS","CHANGE_AFFECTED_SYSTEMS_PARAMS","CLEAR_AFFECTED_SYSTEMS","CLEAR_ADVISORY_DETAILS","CHANGE_SYSTEM_PACKAGES_LIST_PARAMS","FETCH_APPLICABLE_SYSTEM_PACKAGES","SELECT_SYSTEM_PACKAGES_ROW","CLEAR_SYSTEM_PACKAGES","TRIGGER_GLOBAL_FILTER","FETCH_PACKAGES_LIST","FETCH_PACKAGE_DETAILS","CLEAR_PACKAGE_DETAILS","CHANGE_PACKAGES_LIST_PARAMS","FETCH_PACKAGE_SYSTEMS","CLEAR_PACKAGE_SYSTEMS","CHANGE_PACKAGE_SYSTEMS_PARAMS","FETCH_CVES_INFO","CHANGE_CVES_STORE_PARAMS","fetchApplicableAdvisories","ActionTypes","Promise","resolve","fetchApplicableSystemAdvisories","noError","fetchAvisoryDetails","fetchPackageDetails","fetchSystemsAction","changeAdvisoryListParams","changeSystemAdvisoryListParams","changeSystemsListParams","changeAdvisorySystemsParams","expandAdvisoryRow","rowState","expandSystemAdvisoryRow","selectSystemAdvisoryRow","clearSystemAdvisoriesStore","clearSystemPackagesStore","clearAdvisorySystemsStore","clearAdvisoryDetailStore","clearPackageDetailStore","fetchAdvisorySystemsAction","fetchPackageSystemsAction","clearPackageSystemsStore","fetchApplicableSystemPackages","selectSystemPackagesRow","changeSystemPackagesParams","fetchPackagesAction","changePackagesListParams","changePackageSystemsParams","fetchCves","SystemAdvisories","handleNoSystemData","firstMount","setFirstMount","useSelector","SystemAdvisoryListStore","entity","entityDetails","Unavailable","systemId","searchFilter","typeFilter","publishDateFilter","SystemPackages","SystemPackageListStore","statusFilter","SystemDetail","isInventoryApp","activeTabKey","setActiveTabKey","areTabsHidden","setTabsHidden","prevTabsHidden","Tabs","activeKey","isHidden","Tab","eventKey","TabTitleText","T","data-ouia-component-type","data-ouia-component-id","initialState","loaded","SystemDetailStore","state","action","activeApps","changeFilters","selectedUpdated","expandRows","expandedUpdated","fetchPending","fetchRejected","fetchFulfilled","AdvisoryDetailStore","AdvisoryListStore","AdvisorySystemsStore","PackageDetailStore","initialStore","PackagesListStore","PackageSystemsStore","initializeState","SystemsListStore","CvesListStore","storage","parse","sessionStorage","getItem","registry","getRegistry","promiseMiddleware","notificationsMiddleware","next","storeContent","getState","endsWith","setItem","notifications","getStore","newReducers","update","hot","invalidate","oldLocals","a","b","isNamedExport","isEqualLocals","dispose"],"mappings":"gvBAKIA,EAA0B,IAA4B,KAC1DA,EAAwBC,EAAE,KAC1BD,EAAwBC,EAAE,KAE1BD,EAAwBE,KAAK,CAACC,EAAOC,GAAI,sPAAuP,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,4BAA4B,MAAQ,GAAG,SAAW,sFAAsF,eAAiB,CAAC,mXAAmX,WAAa,MAEr1B,W,8FCRIJ,E,MAA0B,GAA4B,KAE1DA,EAAwBE,KAAK,CAACC,EAAOC,GAAI,6NAA8N,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,gEAAgE,MAAQ,GAAG,SAAW,qEAAqE,eAAiB,CAAC,mOAAmO,WAAa,MAE/rB,W,2FCJIJ,E,MAA0B,GAA4B,KAE1DA,EAAwBE,KAAK,CAACC,EAAOC,GAAI,wHAAyH,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,kEAAkE,MAAQ,GAAG,SAAW,yCAAyC,eAAiB,CAAC,uHAAuH,WAAa,MAEpd,W,2LC8EA,SAAeC,iBAzEH,WACR,IAAMC,GAAWC,mBADH,GAEcC,cAAS,CACjCC,aAAc,GACdC,eAAe,IAJL,WAEPC,EAFO,KAECC,EAFD,KAMRC,GAAWC,mBACXC,GAAUC,kBA0DhB,OAhDAC,gBAAU,WACNF,EAAQG,QAAO,SAACL,GAAa,IACjBM,EAAaN,EAAbM,SACFC,EAAeC,OAAOC,OAAOC,KAAOC,QAAO,SAAAC,GAAO,MAAiB,MAAbN,GAAoBA,EAASO,SAASD,EAAQE,OAE1G,GAAiB,MAAbR,EACAS,SAASC,OAAOC,YAAY,CAAE1B,GAAI,eAAgB,QAEjD,GAAIgB,EAAc,CACnB,IAAMW,EAASZ,EAASa,MAAM,KAAKR,QAAO,SAAAC,GAAO,OAAIA,EAAQQ,OAAS,KAAG,GACzEF,GAASH,SAASC,OAAOC,YAAY,CAAE1B,GAAI2B,UAGpD,CAAClB,EAASM,YAEbF,gBAAU,WAAM,MACZW,SAASC,OAAOK,OAChBN,SAASC,OAAOM,YAAY,SAE5B,UAAIP,SAASC,cAAb,OAAI,EAAiBO,mBACjBR,SAASC,OAAOQ,GAAG,wBAAwB,YAAc,gBAAXC,EAAW,EAAXA,KAAW,YACtBV,SAASC,cADa,iBACtB,EAAiBU,uBADK,aACtB,SAAmCD,GAAM,GAAO,GAD1B,WACnCE,GADmC,WAE/CC,GAF+C,KAEzCH,SAAH,UAAGA,EAAMI,iBAAT,aAAG,EAAiBD,KACvBhC,EAAY,UAAGmB,SAASC,cAAZ,iBAAG,EAAiBU,uBAApB,iBAAG,SAAmCD,UAAtC,aAAG,EACnBd,QAAO,SAAAmB,GAAI,OAAKA,EAAKjB,SAAS,gBAAckB,KAAI,SAAAC,GAAG,qBAAaC,mBAAmBD,OAE/EE,EAAY,GAKlB,GAJCN,GAAOA,EAAIO,WACLD,EAAUrC,cAAV,6CAAgE+B,EAAIO,WAApE,KACDD,EAAUrC,mBAAgBuC,EAChCxC,IAAiBsC,EAAUtC,aAAeA,GACtC+B,GAAuB,KAAhBA,aAAA,EAAAA,EAAKP,QAAc,OACpBiB,EAAaV,EAAII,KAAI,SAAAD,GAAI,qDAA2CA,MAAQQ,KAAK,KACvFJ,EAAUrC,eAAgB,UAAAqC,EAAUrC,qBAAV,eAAyB0C,OAAOF,KAAeA,EAGxE,IAAQvC,EAAQoC,KACjBzC,GAAS+C,QAAaN,IACtBnC,EAAUmC,OAMtB,IAAMO,EAnDE1B,SAASC,OAAOQ,GAAG,kBAAkB,SAAAkB,GACrCA,EAAMC,UACNzC,EAAQb,KAAR,WAAiBqD,EAAMxB,WAkD/B,OAAO,kBAAMuB,OACd,IAGC,kBAAC,aAAD,KACI,kBAAC,KAAD,MACA,kBAAC,IAAD,CAAQG,WAAsB1C,S,8CC1E1C,SAAe2C,E,SAAAA,gBAAe,CAE1BC,eAAgB,CACZvD,GAAI,iBACJwD,YAAa,sBACbC,eAAgB,SAEpBC,oBAAqB,CACjB1D,GAAI,sBACJwD,YAAa,qBACbC,eAAgB,wBAEpBE,qBAAsB,CAClB3D,GAAI,uBACJwD,YAAa,qBACbC,eAAgB,mBAEpBG,qBAAsB,CAClB5D,GAAI,uBACJwD,YAAa,qBACbC,eAAgB,yBAEpBI,+BAAgC,CAC5B7D,GAAI,iCACJwD,YAAa,eACbC,eAAgB,sBAEpBK,kBAAmB,CACf9D,GAAI,oBACJwD,YAAa,eACbC,eAAgB,QAEpBM,mBAAoB,CAChB/D,GAAI,qBACJwD,YAAa,eACbC,eAAgB,UAEpBO,8BAA+B,CAC3BhE,GAAI,gCACJwD,YAAa,eACbC,eAAgB,qBAEpBQ,2BAA4B,CACxBjE,GAAI,6BACJwD,YAAa,eACbC,eAAgB,kBAEpBS,kBAAmB,CACflE,GAAI,oBACJwD,YAAa,eACbC,eAAgB,QAEpBU,qBAAsB,CAClBnE,GAAI,uBACJwD,YAAa,2BACbC,eAAgB,WAEpBW,yBAA0B,CACtBpE,GAAI,2BACJwD,YAAa,eACbC,eAAgB,gBAEpBY,sBAAuB,CACnBrE,GAAI,wBACJwD,YAAa,eACbC,eAAgB,YAEpBa,oBAAqB,CACjBtE,GAAI,sBACJwD,YAAa,sCACbC,eAAgB,UAEpBc,qBAAsB,CAClBvE,GAAI,uBACJwD,YAAa,eACbC,eAAgB,WAEpBe,sBAAuB,CACnBxE,GAAI,wBACJwD,YAAa,eACbC,eAAgB,YAEpBgB,kBAAmB,CACfzE,GAAI,oBACJwD,YAAa,oCACbC,eAAgB,QAEpBiB,wBAAyB,CACrB1E,GAAI,0BACJwD,YAAa,eACbC,eAAgB,cAEpBkB,WAAY,CACR3E,GAAI,aACJwD,YAAa,2BACbC,eAAgB,QAEpBmB,iBAAkB,CACd5E,GAAI,mBACJwD,YAAa,wBACbC,eAAgB,8EAEpBoB,kBAAmB,CACf7E,GAAI,oBACJwD,YAAa,QACbC,eAAgB,eAEpBqB,4BAA6B,CACzB9E,GAAI,8BACJwD,YAAa,+CACbC,eAAgB,mBAEpBsB,yBAA0B,CACtB/E,GAAI,2BACJwD,YAAa,eACbC,eAAgB,gBAEpBuB,oBAAqB,CACjBhF,GAAI,sBACJwD,YAAa,sCACbC,eAAgB,WAEpBwB,8BAA+B,CAC3BjF,GAAI,gCACJwD,YAAa,sCACbC,eAAgB,qBAEpByB,oBAAqB,CACjBlF,GAAI,sBACJwD,YAAa,sCACbC,eAAgB,UAEpB0B,2BAA4B,CACxBnF,GAAI,6BACJwD,YAAa,8CACbC,eAAgB,kBAEpB2B,kBAAmB,CACfpF,GAAI,oBACJwD,YAAa,oCACbC,eAAgB,QAEpB4B,mBAAoB,CAChBrF,GAAI,qBACJwD,YAAa,sBACbC,eAAgB,mBAEpB6B,iBAAkB,CACdtF,GAAI,mBACJwD,YAAa,oBACbC,eAAgB,iBAEpB8B,gBAAiB,CACbvF,GAAI,kBACJwD,YAAa,eACbC,eAAgB,aAEpB+B,eAAgB,CACZxF,GAAI,iBACJwD,YAAa,sBACbC,eAAgB,YAEpBgC,wBAAyB,CACrBzF,GAAI,0BACJwD,YAAa,mCACbC,eAAgB,mCAEpBiC,eAAgB,CACZ1F,GAAI,iBACJwD,YAAa,aACbC,eAAgB,cAEpBkC,cAAe,CACX3F,GAAI,gBACJwD,YAAa,QACbC,eAAgB,aAEpBmC,2BAA4B,CACxB5F,GAAI,6BACJwD,YAAa,wCACbC,eAAgB,qCAEpBoC,2BAA4B,CACxB7F,GAAI,wBACJwD,YAAa,qCACbC,eAAgB,iDAEpBqC,uBAAwB,CACpB9F,GAAI,yBACJwD,YAAa,2BACbC,eAAgB,gCAEpBsC,YAAa,CACT/F,GAAI,cACJwD,YAAa,QACbC,eAAgB,SAEpBuC,sCAAuC,CACnChG,GAAI,wCACJwD,YAAa,sBACbC,eAAgB,8HAEpBwC,6BAA8B,CAC1BjG,GAAI,+BACJwD,YAAa,+BACbC,eAAgB,4BAEpByC,2BAA4B,CACxBlG,GAAI,6BACJwD,YAAa,QACbC,eAAgB,gCAEpB0C,oBAAqB,CACjBnG,GAAI,sBACJwD,YAAa,QACbC,eAAgB,0BAEpB2C,yBAA0B,CACtBpG,GAAI,2BACJwD,YAAa,QACbC,eAAgB,8BAEpB4C,yBAA0B,CACtBrG,GAAI,2BACJwD,YAAa,4BACbC,eAAgB,+BAEpB6C,+BAAgC,CAC5BtG,GAAI,iCACJwD,YAAa,uBACbC,eAAgB,+CAEpB8C,qBAAsB,CAClBvG,GAAI,uBACJwD,YAAa,8BACbC,eAAgB,wGAEpB+C,iBAAkB,CACdxG,GAAI,mBACJwD,YAAa,iCACbC,eAAgB,cAEpBgD,sBAAuB,CACnBzG,GAAI,kBACJwD,YAAa,iCACbC,eAAgB,oBAEpBiD,eAAgB,CACZ1G,GAAI,iBACJwD,YAAa,kCACbC,eAAgB,YAEpBkD,sBAAuB,CACnB3G,GAAI,wBACJwD,YAAa,4BACbC,eAAgB,oBAEpBmD,oBAAqB,CACjB5G,GAAI,sBACJwD,YAAa,0BACbC,eAAgB,kBAEpBoD,mBAAoB,CAChB7G,GAAI,qBACJwD,YAAa,yBACbC,eAAgB,iBAEpBqD,cAAe,CACX9G,GAAI,gBACJwD,YAAa,6BACbC,eAAgB,c,6FC3PxB,QApB0B,SAACsD,GAA8B,IAAvBC,EAAuB,uDAAP,GAC3BC,EAAiBD,EAA9BE,YAEAC,EAAqB,SAAAC,GACvBL,EAAM,CAAE3F,OAAQ,CAAE8F,YAAwB,QAAVE,GAAmBA,GAAU,OAGjE,MAAO,CACHC,MAAOC,kBAAmBC,8BAC1BC,KAAMC,8BACNC,aAAc,CACVC,SAAU,SAACxE,EAAOiE,GACdD,EAAmBC,IAEvBQ,MAAOC,KACPT,MAAOH,M,8ICSnB,QAvBqB,SAACF,EAAOe,EAAQC,GAAgB,MACXC,eADW,WAC1CC,EAD0C,KAC7BC,EAD6B,OAExBF,cAAe,kBACpCG,KAAS,SAAAf,GAAK,OAAIL,EAAM,CAAEe,OAAQV,MAAU,QADzCgB,EAF0C,YAQjD,OAFAJ,eAAgB,kBAAME,EAAeJ,KAAS,CAACA,IAExC,CACHN,KAAMC,6BACNJ,MAAOC,kBAAmBC,yBAC1BG,aAAc,CACV,aAAc,eACdC,SAAU,SAACxE,EAAOiE,GACdc,EAAed,GACfgB,EAAehB,IAEnBW,YAAaA,GAAeT,kBAAmBC,mCAC/CH,MAAOa,M,iHCenB,QAjCqB,SAAClB,GAA8B,IAAvBC,EAAuB,uDAAP,GAExBC,EAAiBD,EAA5BqB,UAEe,KAAjBpB,GAAwBA,IACxBA,EAAe,KAGnB,IAAMqB,EAAoBN,aACtB,kBACIO,UAAmB,gBAAGnB,EAAH,EAAGA,MAAH,MAAuB,CACtCC,MADe,EAAUA,MAEzBD,MAAOA,EAAMoB,iBAErB,IAEEC,EAAe,SAAArB,GACjBL,EAAM,CAAE3F,OAAQ,CAAEiH,UAAsB,MAAVjB,GAAiBA,GAAU,OAG7D,MAAO,CACHC,MAAOC,kBAAmBC,yBAC1BC,KAAMC,8BACNC,aAAc,CACVC,SAAU,SAACxE,EAAOiE,GACdqB,EAAarB,IAEjBQ,MAAOU,EACPlB,MAAOH,M,iHCFnB,QA1BmB,SAACF,GAA8B,IAAvBC,EAAuB,uDAAP,GACjC0B,EAAmBV,aACrB,kBACIW,UAAkB,gBAAGvB,EAAH,EAAGA,MAAH,MAAuB,CACrCC,MADc,EAAUA,MAExBD,MAAOA,EAAMoB,iBAErB,IAEEC,EAAe,SAAArB,GACjBL,EAAM,CAAE3F,OAAQ,CAAEwH,cAAexB,MAGrC,MAAO,CACHC,MAAOC,kBAAmBC,uBAC1BC,KAAMC,iCACNC,aAAc,CACVC,SAAU,SAACxE,EAAOiE,GACdqB,EAAarB,IAEjBQ,MAAOc,EACPtB,MAAOJ,EAAc4B,kB,2HCtB3BC,EAAe,SAAC,GAAmB,IAAjBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC1B,OACI,uBACIC,KAAMF,EACNG,OAAO,WAEP,kBAAC,IAAD,CAAMC,KAAM,CAAEC,QAAS,eACnB,kBAAC,IAAD,CAAUC,OAAQ,CAAED,QAAS,aACzB,kBAAC,KAAD,OAEJ,kBAAC,IAAD,CAAUC,OAAQ,CAAED,QAAS,aACxBJ,MAQrBF,EAAaQ,UAAY,CACrBP,KAAMO,WACNN,KAAMM,YAGV,W,oKCvBaC,EAAe,kBACxB,kBAAC,EAAAC,SAAD,KACI,kBAAC,EAAAC,WAAD,CAAYC,MAAO,CAAEC,WAAY,KAC7B,kBAAC,EAAAC,eAAD,CAAgBC,KAAMC,OACtB,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MACzB1C,kBAAmBC,+BAExB,kBAAC,EAAA0C,eAAD,KACK3C,kBAAmBC,6BAExB,kBAAC,EAAA2C,OAAD,CACIC,QAAQ,UACRC,UAAU,IACVpB,KAAK,mFAEJ1B,kBAAmBC,kC,2JCfvB8C,EAAiB,kBAC1B,kBAAC,EAAAd,SAAD,KACI,kBAAC,EAAAC,WAAD,CAAYC,MAAO,CAAEC,WAAY,KAC7B,kBAAC,EAAAC,eAAD,CAAgBC,KAAM,kBAAI,kBAAC,UAAD,CAAiBI,KAAK,KAAKM,MAAO,uCACxDb,MAAO,CAAEc,aAAc,SAC3B,kBAAC,EAAAT,MAAD,CAAOC,aAAa,KAAKC,KAAK,MACzB1C,kBAAmBC,mCAExB,kBAAC,EAAA0C,eAAD,KACK3C,kBAAmBC,+B,iPCV9BiD,EAAc,SAAC,GAA8E,IAA5EC,EAA4E,EAA5EA,KAAMC,EAAsE,EAAtEA,QAASC,EAA6D,EAA7DA,UAAWC,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,gBAAiBC,EAAqB,EAArBA,eAC1E,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,aAAD,CACIC,UAAWL,EACXF,QAASA,EACTD,KAAMA,EACNE,UAAWA,EACXE,gBAAiBA,EACjBK,SAAQ,iCACRf,QAASgB,2BACTC,OAAQN,MAMxBN,EAAYnB,UAAY,CACpBsB,UAAWU,SACXR,gBAAiBQ,SACjBZ,KAAMY,WACNX,QAASW,WACTT,WAAYS,WACZP,eAAgBO,YAGpB,U,0BChBMC,EAAY,SAAC,GAyBb,IAxBFC,EAwBE,EAxBFA,QAwBE,IAvBFC,MACIC,EAsBF,EAtBEA,KACAC,EAqBF,EArBEA,SACAC,EAoBF,EApBEA,OAoBF,IAnBEC,YAAexK,EAmBjB,EAnBiBA,OAAQ0G,EAmBzB,EAnByBA,OAE3B+D,EAiBE,EAjBFA,WACAC,EAgBE,EAhBFA,SACAnB,EAeE,EAfFA,UACAE,EAcE,EAdFA,gBACAkB,EAaE,EAbFA,OACAC,EAYE,EAZFA,SACAC,EAWE,EAXFA,aACAC,EAUE,EAVFA,OACAC,EASE,EATFA,oBACAC,EAQE,EARFA,aACAC,EAOE,EAPFA,QACAtF,EAME,EANFA,MACAuF,EAKE,EALFA,sBACAC,EAIE,EAJFA,UACAzB,EAGE,EAHFA,eACA0B,EAEE,EAFFA,WACAC,EACE,EADFA,WACE,EAIEzE,cAAe,kBAAM,kBAAM,SAJ7B,WAEE0E,EAFF,KAGEC,EAHF,OAKsB3E,aACpB,kBAAM4E,QAAmBlB,EAASmB,MAAOnB,EAASoB,UAClD,CAACpB,EAASmB,MAAOnB,EAASoB,SAP5B,WAKKrC,EALL,KAKWC,EALX,KAcIqC,GAAeC,QAAgB5L,EAAQ2F,GACvCkG,EAAgBb,IAAgBc,QAAad,GAAcvK,OAEjE,OACI,kBAAC,aAAD,KAES8J,IAAWwB,MAAoBX,GAC/Bb,IAAWyB,OAAkC,IAAfX,GAAyBA,GACvD,kBAAC,aAAD,KACG,kBAACY,EAAA,EAAD,CACIC,WAAY,CACRrC,UAAWS,EAAS6B,YACpB9C,OACAC,UACA8C,WAAW,EACX7C,YACAE,kBACAO,OAAQ,OAAF,OAASN,IAEnBmB,aAAcA,EACdwB,oBAAqB,CACjBC,SAASC,QAAiBvM,EAAQ0G,GAClC8F,SAAUb,GAEdc,cAAe,CAAEC,QAAS,CAAC3B,GACvB,kBAAC,aAAD,KACI,kBAACjC,SAAD,CACI6D,WAA8B,IAAlBd,EACZe,UAAW,yBACXC,QAAS,kBAjCZ/L,EAkC4BiK,SAjCrDQ,GAAuB,kBAAM,kBAAM,kBAACuB,EAAA,EAAD,CAAkBhM,KAAMA,QADlC,IAAAA,GAoCGkJ,OAAQkB,GAER,kBAAC,KAAD,CAAiBhC,MAAO6D,aAR5B,cAUA,kBAACzB,EAAD,SAGR0B,aAAc,CAAEtC,SAAUE,GAC1BqC,WAAYvC,GAAY,CACpBwC,MAAOrB,EACPrF,MAAO,CAAC,CACJ2G,MAAOjH,kBAAmBC,0BAC1B0G,QAAS,WACLnC,EAAS,UAEd,CACCyC,MAAOjH,kBAAmBC,yBACtB,CAAE+G,MAAOzC,GAAcJ,EAAK5J,OAAS,GAAK4J,EAAK5J,SAEnDoM,QAAS,WACLnC,EAAS,UAGjB,CACIyC,MAAOjH,kBAAmBC,wBAA8B,CAAE+G,MAAO5C,EAAS6B,cAC1EU,QAAS,WACLnC,EAAS,UAGjBA,SAAU,SAAC1E,GACC0E,EAAR1E,EAAiB,MAAkB,SAEvCoH,YAAa,CACT,2BAA4B,6BAEhCC,QAASxB,IAAkBvB,EAAS6B,aAAuC,IAAlBN,GAA8B,QAK9FtB,IAAW+C,MAAkB,kBAACC,EAAA,EAAD,CAAeC,QAAS,EAAGC,QAAS,KACjElD,IAAWyB,MACR,kBAAC,aAAD,KACI,kBAAC,EAAA0B,MAAD,CACIC,aAAW,mBACXC,MAAOtD,EAAS6B,aAAehC,GAAW,CAAC,IAC3CO,SAAUA,EACVL,KAAMA,EACNI,WAAYH,EAAS6B,aAAe1B,EACpCoD,cAAc,EACdlD,OAAQA,EACRX,OAAQmB,EACRL,OAAQR,EAAS6B,aAAerB,EAChC/B,QAASkC,GAAW6C,wBAEpB,kBAAC,EAAAC,YAAD,MACA,kBAAC,EAAAC,UAAD,OAEJ,kBAAC,EAAD,CACIxE,WAAYc,EAAS6B,YACrB7C,QAASA,EACTD,KAAMA,EACNE,UAAWA,EACXE,gBAAiBA,EACjBC,eAAc,iBAAYA,SAS1DQ,EAAUjC,UAAY,CAClBkC,QAASF,UACTQ,WAAYR,SACZS,SAAUT,SACVV,UAAWU,SACXR,gBAAiBQ,SACjBU,OAAQV,SACRW,SAAUX,SACVc,oBAAqBd,SACrBe,aAAcf,WACdtE,MAAOsE,SACPa,OAAQb,WACRY,aAAcZ,WACdG,MAAOH,WACPgB,QAAShB,SACTiB,sBAAuBjB,WACvBkB,UAAWlB,WACXP,eAAgBO,WAChBmB,WAAYnB,QACZoB,WAAYpB,SAGhB,W,uHCjLagE,EAAoB,CAC7B,CACId,MAAOjH,kBAAmBC,uBAC1B+H,eAAgB,CAACC,cACjBC,WAAY,CAACC,YAAUC,eAAU,KACjCC,IAAK,MAET,CACIpB,MAAOjH,kBAAmBC,2BAC1BiI,WAAY,CAACC,YACbE,IAAK,YAET,CACIpB,MAAOjH,kBAAmBC,uBAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCC,IAAK,iBAET,CACIpB,MAAOjH,kBAAmBC,oCAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCC,IAAK,sBAET,CACIpB,MAAOjH,kBAAmBC,8BAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCC,IAAK,gBAIAC,EAA0B,CACnC,CACIrB,MAAOjH,kBAAmBC,uBAC1B+H,eAAgB,CAACC,cACjBC,WAAY,CAACC,YAAUC,eAAU,KACjCC,IAAK,MAET,CACIpB,MAAO,WACPiB,WAAY,CAACC,YAAUC,eAAU,KACjCC,IAAK,YAET,CACIpB,MAAOjH,kBAAmBC,uBAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCC,IAAK,iBAET,CACIpB,MAAOjH,kBAAmBC,8BAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCC,IAAK,gBAIAE,EAAwB,CACjC,CACItB,MAAOjH,kBAAmBC,0BAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCC,IAAK,QAET,CACIpB,MAAOjH,kBAAmBC,mCAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCC,IAAK,QAET,CACIpB,MAAOjH,kBAAmBC,gCAC1BiI,WAAY,EAACE,eAAU,KACvBC,IAAK,iBAET,CACIpB,MAAOjH,kBAAmBC,yBAC1BiI,WAAY,EAACE,eAAU,KACvBC,IAAK,aAET,CACIpB,MAAOjH,kBAAmBC,0BAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCC,IAAK,YAIAG,EAAkB,CAC3B,CACIH,IAAK,OACLpB,MAAOjH,kBAAmBC,0BAC1BiI,WAAY,CAACC,YAAUC,eAAU,MAErC,CACIC,IAAK,oBACLpB,MAAOjH,kBAAmBC,oCAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCK,MAAO,CACHC,MAAO,KAGf,CACIL,IAAK,oBACLpB,MAAOjH,kBAAmBC,6BAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCK,MAAO,CACHC,MAAO,KAGf,CACIL,IAAK,UACLpB,MAAOjH,kBAAmBC,0BAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCK,MAAO,CACHC,MAAO,MAKNC,EAAmB,CAC5B,CACI1B,MAAOjH,kBAAmBC,wBAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCC,IAAK,YAET,CACIA,IAAK,SACLpB,MAAOjH,kBAAmBC,2BAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCK,MAAO,CACHC,MAAO,KAGf,CACIL,IAAK,OACLpB,MAAOjH,kBAAmBC,uBAC1BiI,WAAY,CAACC,YAAUC,eAAU,KACjCK,MAAO,CACHC,MAAO,O,2QC5GnB,SAAe/P,iBApBM,WACjB,OACI,kBAACiQ,EAAA,GAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC5G,WAAD,KACI,kBAACC,aAAD,CAAYW,QAASiG,2BACjB,kBAACzG,iBAAD,CAAgBC,KAAMyG,OACtB,kBAACvG,QAAD,CAAOC,aAAa,KAAKC,KAAK,MACzB1C,kBAAmBC,qCAExB,kBAAC0C,iBAAD,KACK3C,kBAAmBC,mDCZhD,IAAM+I,GAAaC,WAAK,kBACpB,2EAKEC,GAAUD,WAAK,kBACjB,uGAKEE,GAAgBF,WAAK,kBACvB,oFAKEG,GAAeH,WAAK,kBACtB,+GAKEI,GAAcJ,WAAK,kBACrB,4EAKEK,GAAgBL,WAAK,kBACvB,gHAKEM,GAAeN,WAAK,kBACtB,4EAISpP,EAAQ,CACjB2P,WAAY,CACRvC,MAAO,wBACPhN,GAAI,eAERwP,QAAS,CACLxC,MAAO,UACPhN,GAAI,aAERyP,gBAAiB,CACbzC,MAAO,mBACPhN,GAAI,yBAER0P,eAAgB,CACZ1C,MAAO,kBACPhN,GAAI,2BAER2P,qBAAsB,CAClB3C,MAAO,GACPhN,GAAI,wCAER4P,SAAU,CACN5C,MAAO,GACPhN,GAAI,aAER6P,SAAU,CACN7C,MAAO,WACPhN,GAAI,aAER8P,cAAe,CACX9C,MAAO,iBACPhN,GAAI,0BAER+P,oBAAqB,CACjB/C,MAAO,GACPhN,GAAI,wCAICgQ,EAAS,SAACxB,GAAU,OACY3P,eAAS,GADrB,WACtBoR,EADsB,KACNC,EADM,KAG7BzJ,eAAgB,YACI0J,QAAa,CAAE7E,MAAO,IAC9B8E,MAAK,SAACC,GACmB,IAAzBA,EAAIC,KAAKtE,aACTwC,EAAM1M,WAAW1C,QAAQmR,QAAQ3Q,EAAMgQ,SAAS5P,OAFxD,OAKS,SAAAwQ,GAAG,OAAmB,MAAfA,EAAIpG,QAAkB8F,GAAe,QACtD,IAEH,IAAMO,EAAOjC,EAAM1M,WAAW5C,SAASM,SAEvC,OAAOyQ,GAEH,kBAAC,EAAAS,SAAD,CAAUC,SAAUC,YAChB,kBAAC,EAAAC,OAAD,KACI,kBAAC,EAAAC,SAAD,CACIC,KAAMnR,EAAM+P,qBAAqB3P,GACjCA,GAAIJ,EAAM6P,gBAAgBzP,KAE9B,kBAAC,EAAA8Q,SAAD,CACIC,KAAMnR,EAAMmQ,oBAAoB/P,GAChCA,GAAIJ,EAAM6P,gBAAgBzP,KAE9B,kBAAC,EAAAgR,MAAD,CACIP,KAAM7Q,EAAM6P,gBAAgBzP,GAC5B6I,UAAWqG,IAEf,kBAAC,EAAA8B,MAAD,CAAOC,OAAK,EAACR,KAAM7Q,EAAM4P,QAAQxP,GAAI6I,UAAWoG,IAChD,kBAAC,EAAA+B,MAAD,CACIC,OAAK,EACLR,KAAM7Q,EAAM8P,eAAe1P,GAC3B6I,UAAWsG,IAEf,kBAAC,EAAA6B,MAAD,CACIC,OAAK,EACLR,KAAM7Q,EAAM2P,WAAWvP,GACvB6I,UAAWkG,IAEf,kBAAC,EAAAiC,MAAD,CACIC,OAAK,EACLR,KAAM7Q,EAAMiQ,SAAS7P,GACrB6I,UAAWuG,IAEf,kBAAC,EAAA4B,MAAD,CACIC,OAAK,EACLR,KAAM7Q,EAAMgQ,SAAS5P,GACrB6I,UAAWyG,IAEf,kBAAC,EAAA0B,MAAD,CACIC,OAAK,EACLR,KAAM7Q,EAAMkQ,cAAc9P,GAC1B6I,UAAWwG,IAGf,kBAAC,EAAA2B,MAAD,CACIE,OAAQ,kBACJC,IAAKvR,GAAO,SAAAwR,GAAC,OAAIA,EAAEpR,KAAOyQ,MACtB,kBAAC,EAAAK,SAAD,CAAU9Q,GAAIJ,EAAM2P,WAAWvP,WAMlD,kBAACqR,EAAD,OAGTrB,EAAOlI,UAAY,CACfhG,WAAYgI,UAAgB,CACxB5K,SAAU4K,UAAgB,CACtBtK,SAAUsK,aAEd1K,QAAS0K,Y,ouBC3IjB,IAAM6C,EAAmB,SAAC,GAAa,IAAXhM,EAAW,EAAXA,KAClBhC,GAAWC,mBADkB,EAEK6H,cAAe,GAFpB,WAE5B6K,EAF4B,KAEdC,EAFc,KAGnC9K,eAAgB,WAcZ,OAtBCxG,SAASuR,cAAgBvR,SAASuR,aAAaC,kBAChDxR,SAASwR,kBAQG,CACRC,aAAc,CACVnE,MAAOoE,QACP9D,sBACAD,0BACAgE,0CACAzD,sBACAR,4BACAO,oBACAF,wBACA6D,qCAELzB,MAAK,SAAAkB,GAAY,OAAIC,EAAgBD,MACjC,kBAAMC,GAAgB,MAC9B,IAEH,IAAMO,EAA2B,SAAAzB,GAC7B1R,GAASoT,qBAAgB1B,EAAI2B,qBASjC,OANAvL,eAAgB,WACZ6K,GACIA,EACCW,WADD,OACiBtR,GADjB,IACuBuR,qBAAsBJ,OAClD,CAACR,IAGA,kBAAC,aAAD,KACKA,EAAaa,mBACV,kBAACb,EAAaa,kBAAd,QAMhBxF,EAAiB7E,UAAY,CACzBnH,KAAMmH,YAGV6E,EAAiByF,aAAe,CAC5BF,qBAAsB,SAAAG,GAAC,OAAIA,IAG/B,W,iNCjEMC,EAAe,SAAC,GAAa,IAAXrM,EAAW,EAAXA,KACdsM,EACFnL,WAAmB,SAAApG,GAAI,OAAIA,EAAK6E,QAAUI,MAASmB,QACvD,OACI,kBAAC,aAAD,KACI,kBAACoL,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAU5K,OAAQ,CAAED,QAAS,aAAe2K,EAAalK,MACzD,kBAACoK,EAAA,EAAD,CAAU5K,OAAQ,CAAED,QAAS,aAAe2K,EAAazM,UAMzEwM,EAAaxK,UAAY,CACrB7B,KAAM6D,YAGV,U,oECXa4I,EAAoB,kBAC7B,kBAACzK,aAAD,CAAYW,QAASiG,0BACjB,kBAACzG,iBAAD,CAAgBC,KAAMsK,YACtB,kBAACpK,QAAD,CAAOC,aAAa,KAAKC,KAAK,MACzB1C,kBAAmBC,mCAKnB4M,EAAoB,kBAC7B,kBAAC3K,aAAD,CAAYW,QAASiG,0BACjB,kBAACzG,iBAAD,CAAgBC,KAAMsK,YACtB,kBAACpK,QAAD,CAAOC,aAAa,KAAKC,KAAK,MACzB1C,kBAAmBC,iCAKnB6M,EAAgB,kBACzB,kBAAC5K,aAAD,CAAYW,QAASiG,0BACjB,kBAACzG,iBAAD,CAAgBC,KAAMsK,YACtB,kBAACpK,QAAD,CAAOC,aAAa,KAAKC,KAAK,MACzB1C,kBAAmBC,4B,uDC7B1B8M,G,SAAQ,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SACb,OAAO,0BAAMtG,UAAW,kBAAmBsG,KAG/CD,EAAMhL,UAAY,CACdiL,SAAUjL,SAGd,U,0BCAakL,EAAsB,SAAC,GAAa,IAAXC,EAAW,EAAXA,IAC5BC,GAAiBC,OAAgBF,EAAIG,WAAWC,UACtD,OACI,kBAACC,cAAD,KAEQL,EAAIG,WAAWG,UAAY,GAC1B,kBAACC,EAAA,GAAD,CAAU3K,UAAW4K,QAAqBvL,MAAQ,CAAE,6BAA8B,WAC/E,kBAACwL,EAAA,GAAD,CAAc7K,UAAW8K,SACpB5N,kBAAmBC,qBAExB,kBAAC0N,EAAA,GAAD,CAAc7K,UAAW8K,SACrB,kBAAC,KAAD,CAAclL,KAAK,KAAKM,MAASmK,EAAenK,QADpD,KAC+DmK,EAAepN,OAE9E,kBAAC4N,EAAA,GAAD,CAAc7K,UAAW8K,SACpB5N,kBAAmBC,iBAExB,kBAAC0N,EAAA,GAAD,CAAc7K,UAAW8K,SACpBV,EAAIG,WAAWG,YAG5B,kBAAC,EAAD,KAAQxN,kBAAmBC,wBAC3B,kBAAC4N,OAAD,CAAM/K,UAAWgL,iBAAgB3L,MAAO,CAAE4L,WAAY,cACjDC,QAASd,EAAIG,WAAWnR,YAAYsO,QACjC,IAAIyD,OAAO,gBAAiB,KAC5B,IACD,KAAKC,QAAgBC,gBAAwBjB,EAAIxU,GAAIsH,kBAAmBC,sBAE/E,kBAACsB,EAAA,EAAD,CAAcC,KAAI,2CAAsC0L,EAAIxU,IACxD+I,KAAMzB,kBAAmBC,oCAIzCgN,EAAoBlL,UAAY,CAC5BmL,IAAKnL,UAAgB,CACjBrJ,GAAIqJ,WACJsL,WAAYtL,c,yBClCPqM,EAAuB,SAACjK,EAAMkK,EAAcvJ,GACrD,OAAoB,IAAhBX,EAAK5J,OACE,IAAQ4J,GAAM,SAAC+I,EAAKoB,GACvB,MAAO,CACH,CACI5V,GAAIwU,EAAIxU,GACR6V,QAAiC,IAAzBF,EAAanB,EAAIxU,IACzB8V,cAAmCjT,IAAzBuJ,EAAaoI,EAAIxU,IAC3BgP,MAAO,CACH,CAAET,OAAOiH,QAAgBC,gBAAwBjB,EAAIxU,KACrDwU,EAAIG,WAAWoB,SACf,CACIxH,MACI,kBAAC,EAAD,CACI/G,KAAMgN,EAAIG,WAAW/L,iBAIjC,CACI2F,OAAOiH,QACHC,gBACAjB,EAAIxU,GACJwU,EAAIG,WAAWqB,qBAGvB,CAAEzH,OAAO0H,QAAYzB,EAAIG,WAAWzN,gBAG5C,CACI8H,MAAO,CACH,CACIT,MAAO,kBAACgG,EAAD,CAAqBC,IAAOA,MAG3C0B,OAAgB,EAARN,OAKb,CACH,CACIO,YAAY,EACZnH,MAAO,CACH,CACIe,MAAO,CAAEqG,QAAS,GAClB7H,MAAO,kBAAC0F,EAAD,WAQlBoC,EAA6B,SACtC5K,EACAkK,EACAvJ,EACAV,GAEA,OAAoB,IAAhBD,EAAK5J,OACE,IAAQ4J,GAAM,SAAC+I,EAAKoB,GACvB,MAAO,CACH,CACI5V,GAAIwU,EAAIxU,GACR6V,QAAiC,IAAzBF,EAAanB,EAAIxU,IACzB8V,cAAmCjT,IAAzBuJ,EAAaoI,EAAIxU,IAC3BgP,MAAO,CACH,CAAET,OAAOiH,QAAgBC,gBAAwBjB,EAAIxU,KACrDwU,EAAIG,WAAWoB,SACf,CACIxH,MACI,kBAAC,EAAD,CACI/G,KAAMgN,EAAIG,WAAW/L,iBAIjC,CAAE2F,OAAO0H,QAAYzB,EAAIG,WAAWzN,gBAG5C,CACI8H,MAAO,CACH,CACIT,MAAO,kBAACgG,EAAD,CAAqBC,IAAOA,MAG3C0B,OAAgB,EAARN,OAKb,CACH,CACIO,YAAY,EACZnH,MAAO,CACH,CACIe,MAAO,CAAEqG,QAAS,GAClB7H,OAAQ7C,EAAS5D,QAAW4D,EAAStK,QAAmD,IAAxCH,OAAOqV,KAAK5K,EAAStK,QAAQS,QACtE,kBAACwI,EAAA,EAAD,OACA,kBAAC4J,EAAD,WAQlBsC,EAAoB,SAAC9K,GAA4B,IAAtBW,EAAsB,uDAAP,GAC7ClK,EACFuJ,GACAA,EAAKjJ,KAAI,YAAwB,IAArBxC,EAAqB,EAArBA,GAAI2U,EAAiB,EAAjBA,WACZ,MAAO,CACH3U,KACA2P,IAAK6G,KAAKC,SAASjO,WAAaxI,EAChC0W,mBAAoB/B,EAAW+B,mBAC/BC,sBAAuB,CACnBhC,EAAWiC,YAAc,EACzBjC,EAAWkC,YAAc,EACzBlC,EAAWmC,YAAc,GAE7BC,iBACIpC,EAAWqC,SAAX,UAAyBrC,EAAWqC,QAApC,YAA+CrC,EAAWsC,SAA1D,YAAsEtC,EAAWuC,WAC1E,UACXpB,cAA+BjT,IAArBuJ,EAAapM,OAGnC,OAAOkC,GAAQ,IAGNiV,EAA2B,SAAC1L,GAA4B,IAAtBW,EAAsB,uDAAP,GACpDlK,EACFuJ,GACAA,EAAKjJ,KAAI,SAAAgS,GACL,MAAO,CACHxU,GAAIwU,EAAIxU,GACR2P,IAAK6G,KAAKC,SAASjO,WAAagM,EAAIxU,GACpCoX,eAAgB5C,EAAI4C,eACpBC,eAAgB7C,EAAInM,WAAamM,EAAI6C,gBAAkB7C,EAAI4C,eAC3DE,WAAY9C,EAAInM,UAChByN,cAAmCjT,IAAzBuJ,EAAaoI,EAAIxU,QAGvC,OAAOkC,GAAQ,IAGNqV,EAA2B,SAAC9L,GAA4B,IAAtBW,EAAsB,uDAAP,GAC1D,OAAoB,IAAhBX,EAAK5J,OACE4J,EAAKjJ,KAAI,SAAAgV,GACZ,IAAMC,EAAW,GAAH,OAAMD,EAAIE,KAAV,YAAkBF,EAAIG,MAC9BC,EAAaJ,EAAIK,SAAW,GAC5BC,EAAeF,EAAWA,EAAW/V,OAAS,GAEpD,MAAO,CACH7B,GAAIyX,EACJ9H,IAAK8H,EACL3B,cAAqCjT,IAA3BuJ,EAAaqL,GACvBM,iBAAkBD,EAClB9I,MAAO,CACH,CAAET,OAAOiH,QAAgBC,cAAsB+B,EAAIE,OACnD,CAAEnJ,MAAOiJ,EAAIG,MACb,CAAEpJ,MAAQuJ,GAAgBA,EAAaH,MAASH,EAAIG,MACpD,CAAEpJ,OAAOyJ,QAAuBR,EAAInP,YACpC,CAAEkG,MAAOiJ,EAAIS,cAKlB,CACH,CACI9B,YAAY,EACZnH,MAAO,CACH,CACIe,MAAO,CAAEqG,QAAS,GAClB7H,MAAO,kBAAC4F,EAAD,WAQlB+D,EAAqB,SAACzM,GAC/B,OAAoB,IAAhBA,EAAK5J,OACE4J,EAAKjJ,KAAI,SAAAgV,GACZ,MAAO,CACHxX,GAAIwX,EAAIE,KACR/H,IAAK6H,EAAIE,KACT1I,MAAO,CACH,CAAET,OAAOiH,QAAgBC,cAAsB+B,EAAIE,OACnD,CAAEnJ,MAAOiJ,EAAIW,mBACb,CAAE5J,MAAOiJ,EAAIY,mBACb,CAAE7J,MAAOiJ,EAAIS,cAKlB,CACH,CACI9B,YAAY,EACZnH,MAAO,CACH,CACIe,MAAO,CAAEqG,QAAS,GAClB7H,MAAO,kBAAC4F,EAAD,WAQlBkE,EAAiB,SAAC5M,GAC3B,OAAoB,IAAhBA,EAAK5J,OACE4J,EAAKjJ,KAAI,SAAA8V,GAAO,IACX3D,EAAmB2D,EAAnB3D,WAAY3U,EAAOsY,EAAPtY,GACdyU,EAAiB8D,aAA0B,SAAA3D,GAAQ,OAAIA,EAASvN,QAAUsN,EAAW6D,UAAQ,GAEnG,MAAO,CACHxY,KACA2P,IAAK3P,EACLgP,MAAO,CACH,CAAET,MACE,kBAACrE,SAAD,CAAQC,QAAQ,OAAOC,UAAU,IAAIpB,KAAI,uCAAkC2L,EAAWoB,WACjFpB,EAAWoB,WAEpB,CACIxH,MAAQ,kBAACsG,cAAD,KACJ,kBAACI,EAAA,GAAD,CAAc7K,UAAW8K,SACrB,kBAAC,KAAD,CAAclL,KAAK,KAAKM,MAAOmK,EAAenK,QADlD,KAC6DmK,EAAepN,QAGhFD,MAAOqN,EAAepN,OAE1B,CAAEkH,MAAOkK,WAAW9D,EAAW+D,YAAYC,QAAQ,SAKxD,CACH,CACIxC,YAAY,EACZnH,MAAO,CACH,CACIe,MAAO,CAAEqG,QAAS,GAClB7H,MAAO,kBAAC6F,EAAD,Y,+dC3PzBwE,EAAiB,SAAC,GAAD,IAAGtK,EAAH,EAAGA,MAAOuK,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,KAAvB,OACnB,kBAACC,UAAD,CAASC,QAASH,GACd,kBAAC9E,EAAA,EAAD,CAAM7K,KAAM,CAAEC,QAAS,eACnB,kBAAC6K,EAAA,EAAD,CAAU5K,OAAQ,CAAED,QAAS,aACzB,kBAAC2P,EAAD,OAEJ,kBAAC9E,EAAA,EAAD,CAAU5K,OAAQ,CAAED,QAAS,aACxBmF,EAAM9F,eAMvBoQ,EAAevP,UAAY,CACvByP,KAAMzP,YACNiF,MAAOjF,QACPwP,YAAaxP,YAGjB,U,glBCPO,IAAMuD,EAAqB,SAACC,EAAOC,GACtC,MAAO,CAACA,EAASD,EAAQ,EAAGA,IAGnBoM,EAAe,SAACC,EAAQhY,EAAQ4L,GACzC,GAAI5L,EAAQ,KACHiY,EADG,IACOjY,EADP,MAEJkY,EAAWlY,EAAO6B,OAClBsW,EACc,MAAdF,EAAO,GAAa/F,uBAAuBA,sBAgB/C,OAfAnS,OAAOqV,KAAKgD,MAAoBC,SAAQ,SAAAC,GACpCvY,OAAOqV,KAAKgD,KAAmBE,IAAMD,SAAQ,SAAAE,GACrCH,KAAmBE,GAAKC,KAASL,IACjCD,EAASK,EACTH,EAAYI,SAKxBN,EAASA,EAAOrH,QAAQ,UAAW,IAExB,CACP8D,MAFU8D,IAAUR,GAAQ,SAAA3W,GAAI,OAAIA,EAAKoN,MAAQwJ,KAElCrM,EACfuM,aAKR,MAAO,IAGEM,EAAyB,SAACC,EAAWC,GAC9C,IAAMC,EAAWD,EAASE,QACtB,SAACC,EAAKzX,GAAN,OAAiByX,EAAIzX,EAAK0X,OAAS1X,EAAK6E,YAASvE,EAAYmX,IAC7D,IAGJ,OADe,EAAH,KAAQJ,GAAcE,IAIzBI,EAAsB,SAACC,EAAeC,GAC/C,IAAIC,EAAU,GAAGrX,OAAOmX,GAAe3X,KAAI,SAAAD,GAAI,MAAG,CAAE0X,MAAO1X,EAAKvC,GAAIoH,MAAO7E,EAAKuT,aAChF,OAAO6D,EACHS,EACAC,IAKKC,EAA4B,SAACC,EAAgB3E,GACtD,OAAO2E,EAAe3E,EAAQ,GAAG5V,IAGxBwa,EAAyB,SAAC/P,EAAMoC,GACzC,OAAOpC,EAAOoC,EAAQA,GAGb4N,EAAuB,SAAA5N,GAChC,OAAOA,GAGJ,SAASyI,EAASoF,EAAKC,EAAKC,GAC/B,OAAOF,EAAI7Y,OAAS8Y,EAChB,kBAAC,aAAD,KACKD,EAAIG,OAAO,EAAGF,EAAM,GADzB,OAEcC,GAEdF,EAGD,SAASI,EAAT,GAAmD,eAAnBC,EAAmB,KAAbC,EAAa,KAAPC,EAAO,KACtD,OACI,6BACK,CAACF,EAAMC,EAAMC,GAAMC,OAAM,SAAA3Y,GAAI,OAAa,IAATA,MAC9B,2BACM,IAAT0Y,GAAe,kBAAC,EAAD,CAAgBpC,YAAa,sBAAuBvK,MAAU2M,EAAOnC,KAASqC,OACpF,IAATH,GAAe,kBAAC,EAAD,CAAgBnC,YAAa,YAAavK,MAAU0M,EAAOlC,KAASsC,OAC1E,IAATL,GAAe,kBAAC,EAAD,CAAgBlC,YAAa,eAAgBvK,MAAUyM,EAAOjC,KAASuC,QAK5F,SAASrD,EAAuB5Q,GACnC,OAAO,yBAAKqC,MAAO,CACf6R,QAAS,OACTC,WAAY,WAGRnU,GAAS,kBAAC,UAAD,CAAoBqC,MAAO,CAAEa,MAAO,0CACtC,kBAAC,UAAD,CAAWb,MAAO,CAAEa,MAAO,0CAErC,0BAAMb,MAAO,CAAE+R,WAAY,iCAEpBpU,EAAS,aAAgB,eAMlC,SAASsN,EAAgB1U,GAC5B,OACIuY,WAAwB,SAAAhW,GAAI,OAAIA,EAAK6E,QAAUpH,MAC/CuY,QAID,SAAS/C,EAAgBhO,EAAMkQ,EAAM+D,GACxC,OAA4C,IAAxChb,SAASuI,KAAK0S,QAAQ,aAElB,kBAAC,EAAAC,KAAD,CAAMpa,GAAE,WAAMiG,EAAN,YAAckQ,SACR7U,IAAT4Y,EAAqB/D,EAAO+D,GAKjC,uBAAGzS,KAAI,UAAK4S,SAASC,QAAd,0BAAuCrU,EAAvC,YAA+CkQ,IACjD+D,GAAQ/D,GAMlB,IAAMxK,EAAe,SAAAtF,GAAK,OAC7B3G,OAAOC,OAAO0G,GAAOxG,QAAO,SAAAgG,GAAK,OAAIA,MAE5B+E,EAAsB,SAAC2P,EAAQ/K,EAASgL,GAGjD,OAFAD,EAAS,GAAG9Y,OAAO8Y,GACnB/K,EAAU,GAAG/N,OAAO+N,MACb+K,EAAOja,SAAUkP,EAAQlP,SAC1B,CACEia,OAAQA,EAAOtZ,KAAI,SAAAD,GAAI,MAAK,CACxBvC,GAAI,GAAF,OAAK+b,EAAL,YAA8BxZ,GAChCiB,YAAajB,MAEjBwO,YAeCiL,EAAe,SAACC,EAAYC,GACrC,IAeM9a,EAAyB6a,EAAzB7a,OAAW+a,EAhB4C,IAgB9BF,EAhB8B,YAiB7DE,EAAY,EAAH,KAAQA,GAhBM,SAAA/a,GACnB,IAAIgb,EAAS,GAWb,OAVAhb,GACIH,OAAOob,QAAQjb,GAAQmY,SAAQ,SAAAhX,GAAQ,UAChBA,EADgB,GAC9BoN,EAD8B,KACzBvI,EADyB,KAEnCA,EAAQ8U,GAhBM,SAACI,EAAU3M,GACrC,IAAM4M,EAAiBC,KAAiBF,GACxC,GAAIC,EAIA,OAHqBA,EAAerb,OAAOub,MACvC,SAAAla,GAAI,OAAIA,EAAK6E,QAAUuI,MAEJ,CAAE+M,SAAU/M,GAUIgN,CAAehN,EAAKvI,GAAOsV,UAAYtV,EACtE,IAAMwV,EAAW,GAAG5Z,OAAOoE,GAAOvF,OAAS,EAAI,MAAQ,GACvDua,EAAS,EAAH,KACCA,GADD,2BAESzM,EAFT,eAEqBiN,GAFrB,OAEgCxV,EAAMoB,iBAG7C4T,EAIoBS,CAAezb,IAC9C,IAAI0b,EAAS,GAgBb,OAfA7b,OAAOqV,KAAK6F,GAAW5C,SAAQ,SAAA5J,GAC3B,IAAMoN,EAASra,mBAAmBiN,GAC5BqN,EAAWta,mBAAmByZ,EAAUxM,IAEzC,CAAC,QAAI9M,EAAW,MAAM6P,MAAK,SAAAtL,GAAK,MAAI,CAAC4V,EAAUrN,GAAKrO,SAAS8F,QACzD,CAAC,eAAgB,iBAAiB9F,SAASqO,GAE7B,iBAARA,EACPmN,EAAOhd,KAAKiH,MAAM+V,EAAQX,EAAUxM,IAEpCmN,EAAOhd,KAAKqc,EAAUxM,IAJtBmN,EAAOhd,KAAKid,EAAO/Z,OAAO,KAAKA,OAAOga,QAS3C,IAAIha,OAAO8Z,EAAO/Z,KAAK,OAGrBka,EAAkB,SAAAhB,GAC3B,OAAOD,EAAaC,GAAY,IAGvBiB,EAAkB,SAAAjB,UACpBA,EAAWjc,GAClB,IAAImd,EAAY,EAAH,GAAQlB,GAGrB,cAFOkB,EAAU7c,qBACV6c,EAAU9c,aACV2b,EAAamB,GAAW,IAYtBC,EAAoB,SAAAC,GAC7B,IAAMC,EAASC,QAASF,GAClBzL,EAAM,GAiBZ,OAhBA3Q,OAAOqV,KAAKgH,GAAQ/D,SAAQ,SAAA5J,GACxB,IAAKA,EAAI6N,WAAW,0BAA2B,CAC3C,IAAMpW,EAAQkW,EAAO3N,GACf8N,EAAe9N,EAAI7H,OAAO,UAChC,GAAI2V,EAAe,EAAG,CAClB,IAAMC,EAAY/N,EAAIgO,MAAM,EAAGF,GACzBG,EAASjO,EAAIgO,MAAMF,EAAe,GAAI,GAC5C7L,EAAI8L,GAAJ,OACO9L,EAAI8L,IADX,UAEKE,GArBeC,EAqBezW,GApB/BoW,WAAW,OACRK,EAAYF,MAAM,GACnB/b,MAAM,KAGjBic,SAkBKjM,EAAIjC,GAAOvI,EAxBS,IAAAyW,KA4BzBjM,GAGEjE,EAAmB,SAACD,EAAS5F,GAEtC,IAEQgW,EAFJ7R,EAAe,GA8CnB,OAHAyB,IAzCQoQ,EAAa7c,OAAOqV,KAAK5I,GAAStM,QAClC,SAAAmB,GAAI,MACkB,KAAlBmL,EAAQnL,IAAoD,IAApC,GAAGS,OAAO0K,EAAQnL,IAAOV,UAEzDoK,EAAeA,EAAajJ,OACxB8a,EAAWtb,KAAI,SAAA8Z,GAAY,MACGE,KAAiBF,GAAnCjV,EADe,EACfA,MAAOnG,EADQ,EACRA,OACf,MAAO,CACHob,SAAUjV,EACVrH,GAAIsc,EACJyB,MAAO,GAAG/a,OAAO0K,EAAQ4O,IAAW9Z,KAAI,SAAAqb,GACpC,IAAMG,EAAQ9c,EAAOub,MACjB,SAAAla,GAAI,OACAA,EAAK6E,MAAMoB,aAAeqV,EAAYrV,cAE9C,MAAO,CACHkP,KAAMsG,EAAM3W,MACZD,MAAOyW,EACP7d,GAAIge,EAAM5W,gBAwBlCU,IAfImE,EAAeA,EAAajJ,OAAO,CAC/B,CACIsZ,SAAU,SACVtc,GAAI,SACJ+d,MAAO,CACH,CACIrG,KAAM5P,EACNV,MAAOU,QAUpBmE,GAGEgS,EAAmB,SAACC,EAAWC,GACxC,IAAMC,EAAW,EAAH,KAAQF,GAAcC,GAcpC,MAb0B,CAAC,SAAU,SAAU,QAAS,gBAClCzL,MAAK,SAAAnQ,GAAI,OAAI4b,EAAUE,eAAe9b,QACxD6b,EAAStR,OAAS,GAGlBqR,EAAUE,eAAe,YACzBD,EAAShd,OAAT,OAAuB8c,EAAU9c,QAAW+c,EAAU/c,SAGtDgd,EAASC,eAAe,SACxBD,UAAmBA,EAASE,KAGzBF,GAGJ,SAASG,EAAaC,GACzB,IAAMC,EAAO,IAAIC,KAEjB,OADAD,EAAKE,QAAQF,EAAKG,UAAYJ,GACvBC,EAAKI,cAGT,SAASC,EAAiBC,GAC7B,OAAOA,GAASA,EAAMjN,QAClB,IAAIyD,OAAO,gBAAiB,KAC5B,IAID,SAASyJ,EAASC,EAAMrJ,EAAOyD,GAElC,IAAM6F,EAAaD,EAAKE,MACpB,cAA0C,IAAhCC,EAAgC,EAAvCpQ,MAA0BqQ,EAAa,EAApBrQ,MACZsQ,EAAQF,EAAOxJ,GAAOxO,OAASgY,EAAOxJ,GAAOxO,OAASgY,EAAOxJ,GAAOrH,MACpEgR,EAAQF,EAAOzJ,GAAOxO,OAASiY,EAAOzJ,GAAOxO,OAASiY,EAAOzJ,GAAOrH,MAEpEiR,EAAUF,EAAM9W,WAAWiX,cAC3BC,EAAUH,EAAM/W,WAAWiX,cAEjC,OAAOD,EAAQG,cAAcD,MAIrC,MAAO,CACHxT,OAAQ,CAAE0J,QAAOyD,aACjB6F,WAAY7F,IAAcjG,sBAAsB8L,EAAaA,EAAWU,a,6yBCjVzE,IAAMC,EAAa,SAAChT,EAAOiT,GAI9B,OAHkB9X,iBAAkB,SAAC+X,EAAGtV,GAAJ,OAChCqV,EAAS,CAAEhT,QAAQ0N,QAAuB/P,EAAMoC,SAK3CmT,EAAmB,SAACtU,EAAUoU,GAUvC,OATsB9X,iBAAkB,YAAiC,IAA9ByC,EAA8B,EAA9BA,KAAgBC,EAAc,EAAxBuV,SACvCnT,GAAS0N,QAAuB/P,EAAMC,GACtCmC,GAAQ4N,QAAqB/P,IAClCgB,EAASoB,SAAWA,GAAUpB,EAASmB,QAAUA,IAC9CiT,EAAS,EAAD,KACApU,EAASoB,SAAWA,GAAU,CAAEA,WAChCpB,EAASmB,QAAUA,GAAS,CAAEA,eAMrCqT,EAAiB,SAACrT,EAAOC,GAAW,MACrB9E,aACpB,kBAAM4E,QAAmBC,EAAOC,KAChC,CAACD,EAAOC,IAHiC,WAK7C,MAAO,CALsC,YAQpCqT,EAAmB,SAAAL,GAI5B,OAHwB9X,iBAAkB,SAAC+X,EAAGrV,GAAJ,OACtCoV,EAAS,CAAEjT,OAAO4N,QAAqB/P,GAAUoC,OAAQ,QAKpDsT,EAAgB,SAAC7U,EAASuU,GAAyB,IAAfhT,EAAe,uDAAN,EAChDf,EAAS/D,iBAAkB,SAAC+X,EAAGnK,EAAOyD,GACxC,IAAIgH,EAAa9U,EAAQqK,EAAQ9I,GAAQ6C,IACnC2Q,EAAchH,KAAmB+G,GACnCC,EACAD,EAAaC,EAAYjH,GAEpBA,IAAcjG,yBACnBiN,EAAa,IAAMA,GAGvBP,EAAS,CAAEX,KAAMkB,OAErB,OAAOtU,GAGEiB,EAAkB,SAACU,EAASoS,GAqBrC,OApBqB9X,iBAAkB,SAAC7E,EAAO2S,GAC3C,IAAIqI,EAAY,CAAE/c,OAAQ,IAC1B0U,EAASyD,SAAQ,SAAAgH,GAAgB,IACnBC,EAAsBD,EAA1BvgB,GAAgB+d,EAAUwC,EAAVxC,MACtB,GAAmB,WAAfyC,EAAyB,CACzB,IAAIC,EAAe/S,EAAQ8S,GACrBE,EAAW3C,EAAMvb,KAAI,SAAAD,GAAI,OAAIA,EAAKvC,GAAGwI,cACvCmY,MAAMC,QAAQH,GACdtC,EAAU/c,OAAOof,GAAcC,EAAarf,QACxC,SAAAmB,GAAI,OAAKme,EAASpf,SAASiB,EAAKiG,eAGpC2V,EAAU/c,OAAOof,GAAc,QAGnCrC,EAAUrW,OAAS,MAG3BgY,EAAS,EAAD,GAAM3B,QAKT0C,EAAc,SAACC,EAAS1U,EAAc2U,EAAcC,GACF,IAA3DC,EAA2D,4DAAvCpe,EAAWqe,EAA4B,4DAAbre,EACxCse,EAAe,SAAC3M,GAClB,OAAI0M,EACOA,EAAa1M,GAGbA,EAAIxU,IAAMwU,EAAIxU,IAAMwU,EAAIkD,MAIjC5L,EAAY9D,iBAAkB,SAAC7E,EAAO2S,EAAUmE,GAClD,IAAMmH,EAAoB,SAACN,GAA2B,IAAlBO,EAAkB,uDAAP,GAS3C,OARAP,EAAQvH,SAAQ,SAAC/E,GACb6M,EAASvhB,KACL,CACIE,GAAImhB,EAAa3M,GACjBsB,SAAUmL,GAAqBA,EAAkBzM,IAAQA,EAAIxU,QAIlEqhB,GAGX,OAAQle,GACJ,IAAK,OACD,IAAMke,EAAW,GACjBpgB,OAAOqV,KAAKlK,GAAcmN,SAAQ,SAAAvZ,GAC9BqhB,EAASvhB,KACL,CACIE,KACA8V,UAAU,OAItBkL,EAAWK,GACX,MAGJ,IAAK,OACDL,EAAWI,EAAkBN,IAC7B,MAGJ,IAAK,MAKDC,IAAepP,MAJO,SAAC,GAAa,IAAXzP,EAAW,EAAXA,KACrB8e,EAAWI,EAAkBlf,OAKjC,MAGJ,QACI8e,EAAW,CAAC,CACRhhB,GAAImhB,EAAaL,EAAQ7G,IACzBnE,SAAUA,IAAamL,GAAqBA,EAAkBH,EAAQ7G,MAAW,UAOjG,OAAOnO,GAGEwV,EAAe,SAAC/S,GACzBvG,eAAgB,WACRuG,IACAqN,SAASrN,MAAT,UAAoBA,EAApB,kCAEL,CAACA,KAGKgT,EAAuB,SAACC,EAAQC,GACzC,IAAMC,EAAM1Z,gBAAanF,GAEpB6e,EAAIC,SAAYC,IAAiBH,EAAMC,EAAIC,WAC5CD,EAAIC,QAAUF,GAGlBzZ,cAAgBwZ,EAAQE,EAAIC,W,wECjK1BE,GAAQC,UACRC,EAASC,UAAUC,SAAStE,MAAM,EAAG,GAE9BrW,GAAO4a,OAAW,CAE3BC,QAASC,QAAQC,IACjBN,UACDF,I,+3BCHH,IAAMS,EAAgBC,a,oCAEf,WAAwChiB,GAAxC,yFAE2BiB,SAASC,OAAO+gB,qBAF3C,UAEGC,EAFH,OAGGC,EAA0B,CAAC,gBAAiB,mBAAoB,wBAE3CD,EAAgB/P,MAAK,SAACiQ,GAAD,OAAYD,EAAwBphB,SAASqhB,aAAjC,EAAiCA,EAAQC,eALlG,sBAQO,IAAIL,YAAa,8DARxB,gCAWIhiB,GAXJ,4C,sBAkDP+hB,EAAcO,aAAaC,QAAQC,KAlD5B,SAAP,qCAmDAT,EAAcO,aAAaC,QAAQC,IAAIC,mBACvCV,EAAcO,aAAaI,SAASF,IAAIG,2BACxCZ,EAAcO,aAAaI,SAASF,IAAI,MAZjC,SAA6BI,GAChC,GAAIA,EAAMF,UAAsC,MAA1BE,EAAMF,SAAStX,OAEjC,MADayX,KAIjB,MAAMD,KAOVb,EAAcO,aAAaI,SAASF,IAAI,MAxCjC,SAA0BhR,GAE7B,IAAKwQ,aAAexQ,GAAM,YAEkBA,GAAhCkR,EAFc,EAEdA,SAAUI,EAFI,EAEJA,aAElB,GAAIJ,GAAYI,EAAc,KAClB1X,EAA6BsX,EAA7BtX,OAAQ2X,EAAqBL,EAArBK,WAAYphB,EAAS+gB,EAAT/gB,KAE5B,GAAKyJ,EAUD,MAFe,EAAH,KALS,CACjB4C,MACQ,oCAGA,IAAsBgV,OAAQrhB,EAAKihB,OAASjhB,EAAKihB,OAASG,EAAY3X,WAPlF,MAAMoG,EAad,MAAMA,MAmBd,UC7DO,SAASyR,EACZC,EACAC,GAGF,IAFEzH,EAEF,4DAFepZ,EACbX,EACF,4DADSW,EAEHoZ,GAAyB,QAAXyH,IACdD,EAAWA,EAASzgB,QAAOia,QAAgBhB,KAG/C,IAAIG,EAASuH,OAAOniB,SAASC,OAAOmiB,KACnCC,UACAlS,MAAK,kBACF4Q,EAAM,CACFmB,SACAI,IAAK,gBAAkBL,EACvBM,iBAAiB,EACjB7hB,YAIR,OAAOka,EAGJ,IAAM4H,EAA+B,SAAAlH,GACxC,OAAO0G,EAAc,cAAe,MAAO1G,IAGlCmH,EAAqC,SAAAnH,GAAU,IAClD9c,EAAqB8c,EAArB9c,GAAOmc,EAD2C,IAC7BW,EAD6B,QAExD,OAAO0G,EAAc,YAAD,OAAaxjB,EAAb,eAA8B,MAAOmc,IAGhDzK,EAAe,SAAAoL,GACxB,OAAO0G,EAAc,WAAY,MAAO1G,IAG/BoH,EAA0B,SAAApH,GACnC,OAAO0G,EAAc,eAAD,OAAgB1G,EAAOqH,cAAgB,QAGlDC,EAAyB,SAAAtH,GAClC,OAAO0G,EAAc,aAAD,OAAc1G,EAAOuH,aAAe,QAG/CC,EAA6B,SAAAxH,GAAU,IAC1C9c,EAAqB8c,EAArB9c,GAAOmc,EADmC,IACrBW,EADqB,QAEhD,OAAO0G,EAAc,YAAD,OAAaxjB,EAAb,aAA4B,MAAOmc,IAG9CoI,EAAuB,SAAAzH,GAAU,IAClC9c,EAAgB8c,EAAhB9c,GAAOwkB,EAD2B,IAClB1H,EADkB,QAE1C,OAAO0G,EAAc,eAAD,OAAgBxjB,EAAhB,YAA8B,MAAOwkB,IAGhDC,EAAsB,SAAA3H,GAAU,IACjC9c,EAAgB8c,EAAhB9c,GAAOwkB,EAD0B,IACjB1H,EADiB,QAEzC,OAAO0G,EAAc,aAAD,OAAcxjB,EAAd,YAA4B,MAAOwkB,IAG9CE,EAAoB,SAAA5H,GAC7B,OAAO0G,EAAc,YAAa,MAAO1G,IAGhC6H,EAAa,+BAAG,8FAASC,EAAT,EAASA,OAAT,SAEJC,MAAM,oDAAD,OAAqDD,GAAUA,EAAO/iB,QAAU,CACtG6hB,OAAQ,OACRoB,YAAa,UACbC,QAAS,CACLC,OAAQ,mBACR,eAAgB,oBAEpBvJ,KAAMwJ,KAAKC,UAAU,CAAEC,SAAUP,MAClCjT,MAAK,SAAAC,GAAG,OAAIA,EAAIwT,UAAQzT,MAAK,SAAAzP,GAAI,OAAIA,KAVf,cAEnBka,EAFmB,yBAYlBA,GAZkB,2CAAH,sDAebiJ,EAAsB,SAAAvI,GAC/B,IAAI2G,EAAW,qBAEf,OADAA,EAAWA,EAASzgB,QAAOia,QAAgBH,IACpC+H,MAAM,gBAAkBpB,EAAU,CACrCC,OAAQ,MACRoB,YAAa,UACbC,QAAS,IAAIO,QAAQ,CAAEC,OAAQ,eAChC5T,MAAK,SAAAC,GAAG,OAAIA,EAAI7I,WAGVyc,EAAuB,SAAA1I,GAChC,IAAI2G,EAAW,qBAEf,OADAA,EAAWA,EAASzgB,QAAOia,QAAgBH,IACpC+H,MAAM,gBAAkBpB,EAAU,CACrCC,OAAQ,MACRoB,YAAa,UACbC,QAAS,IAAIO,QAAQ,CAAEC,OAAQ,uBAChC5T,MAAK,SAAAC,GAAG,OAAIA,EAAIwT,WAGVK,EAAmB,SAAA3I,GAC5B,IAAI2G,EAAW,kBAEf,OADAA,EAAWA,EAASzgB,QAAOia,QAAgBH,IACpC+H,MAAM,gBAAkBpB,EAAU,CACrCC,OAAQ,MACRoB,YAAa,UACbC,QAAS,IAAIO,QAAQ,CAAEC,OAAQ,eAChC5T,MAAK,SAAAC,GAAG,OAAIA,EAAI7I,WAGV2c,EAAoB,SAAA5I,GAC7B,IAAI2G,EAAW,kBAEf,OADAA,EAAWA,EAASzgB,QAAOia,QAAgBH,IACpC+H,MAAM,gBAAkBpB,EAAU,CACrCC,OAAQ,MACRoB,YAAa,UACbC,QAAS,IAAIO,QAAQ,CAAEC,OAAQ,uBAChC5T,MAAK,SAAAC,GAAG,OAAIA,EAAIwT,WAGVO,EAAoB,SAAA7I,GAC7B,IAAI2G,EAAW,mBAEf,OADAA,EAAWA,EAASzgB,QAAOia,QAAgBH,IACpC+H,MAAM,gBAAkBpB,EAAU,CACrCC,OAAQ,MACRoB,YAAa,UACbC,QAAS,IAAIO,QAAQ,CAAEC,OAAQ,eAChC5T,MAAK,SAAAC,GAAG,OAAIA,EAAI7I,WAGV6c,EAAqB,SAAA9I,GAC9B,IAAI2G,EAAW,mBAEf,OADAA,EAAWA,EAASzgB,QAAOia,QAAgBH,IACpC+H,MAAM,gBAAkBpB,EAAU,CACrCC,OAAQ,MACRoB,YAAa,UACbC,QAAS,IAAIO,QAAQ,CAAEC,OAAQ,uBAChC5T,MAAK,SAAAC,GAAG,OAAIA,EAAIwT,Y,kPCrIVjY,EAAkB,WAClBuB,EAAiB,UACjBtB,EAAkB,WAElBkM,EAAqB,CAC9BvC,iBAAkB,CACd8O,IAAK,4BACLC,KAAM,gCAEVnP,sBAAuB,CACnBkP,IAAK,mCACLC,KAAM,wCAMDC,IADwB,QAAN,EAAApC,cAAA,mBAAQniB,gBAAR,mBAAkBC,cAAlB,eAA0BukB,UAA1B,UAAoCxkB,gBAApC,iBAAoC,EAAUC,cAA9C,OAAoC,EAAkBukB,UACpD,CAC7Bva,KAAM,GACNC,SAAU,CACNmB,MAAO,GACPC,OAAQ,EACRS,YAAa,GAEjBoI,aAAc,GACdvJ,aAAc,GACdR,YAAa,GACbuX,MAAO,KAGEtb,EAAoB,CAC7B,CAAE6U,SAAU,GAAIrV,MAAO,MAAOD,MAAO,OACrC,CACIsV,SAAU,MAAF,QAAQ6B,QAAa,IAC7BlX,MAAO,cACPD,MAAO,SAEX,CACIsV,SAAU,MAAF,QAAQ6B,QAAa,KAC7BlX,MAAO,eACPD,MAAO,UAEX,CACIsV,SAAU,MAAF,QAAQ6B,QAAa,KAC7BlX,MAAO,eACPD,MAAO,UAEX,CACIsV,SAAU,MAAF,QAAQ6B,QAAa,MAC7BlX,MAAO,YACPD,MAAO,YAEX,CACIsV,SAAU,MAAF,QAAQ6B,QAAa,MAC7BlX,MAAO,uBACPD,MAAO,iBAIFmR,EAAqB,CAC9B,CACInR,MAAO,EACPC,MAAO,MACPiD,MAAO,gCAEX,CACIlD,MAAO,EACPC,MAAO,MACPiD,MAAO,+BACPvB,KACI,+PAIR,CACI3B,MAAO,EACPC,MAAO,WACPiD,MAAO,uCACPvB,KACI,4ZAMR,CACI3B,MAAO,EACPC,MAAO,YACPiD,MAAO,UACPvB,KACI,uaAMR,CACI3B,MAAO,EACPC,MAAO,WACPiD,MAAO,sCACPvB,KACI,0YAOCJ,EAAgB,CACzB,CACIvB,MAAO,EACPC,MAAO,WACPuC,KAAM,kBAAC,KAAD,OAEV,CACIxC,MAAO,EACPC,MAAO,SACPuC,KAAM,kBAAC,KAAD,OAEV,CACIxC,MAAO,EACPC,MAAO,cACPuC,KAAM,kBAAC,KAAD,QAIDrB,EAAiB,CAC1B,CACInB,MAAO,GACPC,MAAO,OAEX,CACID,OAAO,EACPC,MAAO,eAIF4e,EAA6B,CACtC,CACI7e,MAAO,GACPC,MAAO,OAEX,CACID,MAAO,OACPC,MAAO,eAIFmV,EAAmB,CAC5B5T,cAAe,CACXvB,MAAO,gBACPnG,OAAQyH,GAEZzB,YAAa,CACTG,MAAO,cACPnG,OAAQ2G,GAEZQ,UAAW,CACPhB,MAAO,SACPnG,OAAQqH,GAEZ6P,kBAAmB,CACf/Q,MAAO,SACPnG,OAAQ+kB,IAIHxQ,EAAc,CACvB3E,WAAY,aACZM,SAAU,YAGDgS,EAAuB,CAChC7U,MAAO,QACPgV,OAAQ,WAGC2C,EAAyB,CAClCC,QAAS,gBACTC,SAAU,mB,8CC3Kd,QAdA,SAAqBrlB,GACjB,IAAIslB,EAAU,IACRC,EAAWvlB,EAASa,MAAM,KAShC,OAPA0kB,EAASC,QAEW,SAAhBD,EAAS,KACTA,EAASC,QACTF,EAAU,UAGd,UAAUA,GAAV,OAAoBC,EAAS,GAA7B,YAAmCA,EAAS,IAAM,M,mTCX/C,IAAME,EAA8B,8BAC9BC,EAAsB,sBACtBC,EAAsB,sBACtBC,EAA8B,8BAC9BC,EAAgB,gBAChBC,EAA6B,6BAC7BC,EACT,oCACSC,EAA6B,6BAC7BC,EACT,qCACSC,EAA6B,6BAC7BC,EAA0B,0BAC1BC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAiC,iCACjCC,EAAyB,yBACzBC,EAAyB,yBACzBC,EACT,qCACSC,EACT,mCACSC,EAA6B,6BAC7BC,EAAwB,wBACxBC,EAAwB,wBACxBC,EAAsB,sBACtBC,EAAwB,wBACxBC,EAAwB,wBACxBC,EAA8B,8BAC9BC,EAAwB,wBACxBC,EAAwB,wBACxBC,EAAgC,gCAChCC,EAAkB,kBAClBC,EAA2B,4B,4TC5B3BC,EAA4B,SAAAxL,GAAM,MAAK,CAChDtV,KAAM+gB,KACNlO,QAAS,IAAImO,SAAQ,SAAAC,GACjBA,GAAQzE,QAA6BlH,OACtCnL,MAAK,SAAAyK,GAAM,OAAIA,OAGTsM,EAAkC,SAAA5L,GAAM,MAAK,CACtDtV,KAAM+gB,KACNlO,QAAS,IAAImO,SAAQ,SAAAC,GACjBA,GAAQxE,QAAmCnH,OAC5CnL,MAAK,SAAAyK,GAAM,OAAIA,KAClBvK,KAAM,CACF8W,SAAS,KAIJC,EAAsB,SAAA9L,GAAM,MAAK,CAC1CtV,KAAM+gB,KACNlO,QAAS,IAAImO,SAAQ,SAAAC,GACjBA,GAAQvE,QAAwBpH,OACjCnL,MAAK,SAAAyK,GAAM,OAAIA,OAGTyM,EAAsB,SAAA/L,GAAM,MAAK,CAC1CtV,KAAM+gB,KACNlO,QAAS,IAAImO,SAAQ,SAAAC,GACjBA,GAAQrE,QAAuBtH,OAChCnL,MAAK,SAAAyK,GAAM,OAAIA,OAGT0M,EAAqB,SAAAhM,GAAM,MAAK,CACzCtV,KAAM+gB,KACNlO,QAAS,IAAImO,SAAQ,SAAAC,GACjBA,GAAQ/W,QAAaoL,OACtBnL,MAAK,SAAAyK,GAAM,OAAIA,OAGT2M,EAA2B,SAAAjM,GAAM,MAAK,CAC/CtV,KAAM+gB,KACNlO,QAASyC,IAGAkM,EAAiC,SAAAlM,GAAM,MAAK,CACrDtV,KAAM+gB,KACNlO,QAASyC,IAGAmM,EAA0B,SAAAnM,GAAM,MAAK,CAC9CtV,KAAM+gB,KACNlO,QAASyC,IAGAoM,EAA8B,SAAApM,GAAM,MAAK,CAClDtV,KAAM+gB,KACNlO,QAASyC,IAGAqM,EAAoB,SAAAC,GAAQ,MAAK,CAC1C5hB,KAAM+gB,KACNlO,QAAS+O,IAGAC,EAA0B,SAAAD,GAAQ,MAAK,CAChD5hB,KAAM+gB,IACNlO,QAAS+O,IAQAE,EAA0B,SAAAF,GAAQ,MAAK,CAChD5hB,KAAM+gB,KACNlO,QAAS+O,IAGAG,EAA6B,iBAAO,CAC7C/hB,KAAM+gB,KACNlO,QAAS,KAGAmP,EAA2B,iBAAO,CAC3ChiB,KAAM+gB,KACNlO,QAAS,KAGAoP,EAA4B,iBAAO,CAC5CjiB,KAAM+gB,KACNlO,QAAS,KAGAqP,EAA2B,iBAAO,CAC3CliB,KAAM+gB,KACNlO,QAAS,KAGAsP,EAA0B,iBAAO,CAC1CniB,KAAM+gB,KACNlO,QAAS,KAGAuP,EAA6B,SAAA9M,GAAM,MAAK,CACjDtV,KAAM+gB,KACNlO,QAAS,IAAImO,SAAQ,SAAAC,GACjBA,GAAQlE,QAAqBzH,OAC9BnL,MAAK,SAAAyK,GAAM,OAAIA,OAGTyN,EAA4B,SAAA/M,GAAM,MAAK,CAChDtV,KAAM+gB,KACNlO,QAAS,IAAImO,SAAQ,SAAAC,GACjBA,GAAQhE,QAAoB3H,OAC7BnL,MAAK,SAAAyK,GAAM,OAAIA,OAGT0N,EAA2B,iBAAO,CAC3CtiB,KAAM+gB,KACNlO,QAAS,KAGA0P,EAAgC,SAAAjN,GAAM,MAAK,CACpDtV,KAAM+gB,KACNlO,QAAS,IAAImO,SAAQ,SAAAC,GACjBA,GAAQnE,QAA2BxH,OACpCnL,MAAK,SAAAyK,GAAM,OAAIA,OAGT4N,EAA0B,SAAAZ,GAAQ,MAAK,CAChD5hB,KAAM+gB,KACNlO,QAAS+O,IAGAa,EAA6B,SAAAnN,GAAM,MAAK,CACjDtV,KAAM+gB,KACNlO,QAASyC,IAGA7Z,EAAe,SAAA6Z,GAAM,MAAK,CACnCtV,KAAM+gB,KACNlO,QAASyC,IAGAoN,EAAsB,SAAApN,GAAM,MAAK,CAC1CtV,KAAM+gB,KACNlO,QAAS,IAAImO,SAAQ,SAAAC,GACjBA,GAAQ/D,QAAkB5H,OAC3BnL,MAAK,SAAAyK,GAAM,OAAIA,OAGT+N,EAA2B,SAAArN,GAAM,MAAK,CAC/CtV,KAAM+gB,KACNlO,QAASyC,IAGAsN,EAA6B,SAAAtN,GAAM,MAAK,CACjDtV,KAAM+gB,KACNlO,QAASyC,IAGAuN,EAAY,SAACvN,GAAD,MAAa,CAClCtV,KAAM+gB,KACNlO,QAAS,IAAImO,SAAQ,SAAAC,GACjBA,GAAQ9D,QAAc7H,OACvBnL,MAAK,SAAAyK,GAAM,OAAIA,Q,y4BCtJtB,IAAMkO,EAAmB,SAAC,GAAoC,IAAlC3pB,EAAkC,EAAlCA,QAAS4pB,EAAyB,EAAzBA,mBAC3BrqB,GAAWC,mBADyC,EAEtB6H,cAAe,GAFO,WAEnDwiB,EAFmD,KAEvCC,EAFuC,KAGpD3Z,GAAa4Z,kBACf,qBAAGC,wBAAsDlf,QAGvDmf,GAASF,kBAAY,qBAAGG,cAAkCD,UAE1DjV,GAAe+U,kBACjB,qBAAGC,wBAAsDhV,gBAEvD/J,GAAc8e,kBAChB,qBAAGC,wBAAsD/e,eAEvDQ,GAAese,kBACjB,qBAAGC,wBAAsDve,gBAEvDV,GAAWgf,kBACb,qBAAGC,wBAAsDjf,YAEvDC,GAAS+e,kBACX,qBAAGC,wBAAsDhf,UAEvDwX,GAAQuH,kBACV,qBAAGC,wBAAsDxH,SAEvD1X,EAAOzD,aACT,kBACIqO,QAA2BvF,EAAY6E,EAAcvJ,EAAcV,KACvE,CAACoF,EAAY6E,EAAcvJ,IAG/BpE,eAAgB,WACZ,OAAO,kBAAM9H,GAASqpB,cACvB,IAEHvhB,eAAgB,WACRwiB,GACAzjB,GAAMqW,QAAkBzc,EAAQF,SAASqH,SACzC2iB,GAAc,KAEd9pB,EAAQb,MAAKod,QAAgBtR,IAC7B1L,GACIwoB,QAAgC,EAAD,CAAG1oB,GAAI4qB,EAAO5qB,IAAO4L,QAG7D,CAACA,IAEJ,IAAMC,EAAa7D,iBAAkB,SAAC+X,EAAG9F,EAAO7S,GAAX,OACjClH,GACImpB,QAAwB,CACpBpP,OAAOK,QAA0BxJ,EAAYmJ,GAC7C7S,cAcN0E,GAAW+U,QAAYpV,EAAMW,GAHd,kBACjB6X,QAAmC,EAAD,GAAGjkB,GAAI4qB,EAAO5qB,IAAO4L,GAArB,IAAkCiB,OAAQ,QAP7D,SAACwU,GAChBnhB,GACIopB,QAAwBjI,OAO2C,SAAC+E,GAAD,OAAcA,EAASpmB,MAE5F+L,GAASqU,QAAcxQ,KAAyB7I,EAAO,GACvDmF,EAASlE,aACX,kBAAMiR,QAAarJ,KAAyBlE,EAASyT,KAAM,KAC3D,CAACzT,EAASyT,OAERxU,GAAYkV,QAAWnU,EAASmB,MAAO9F,GACvC8D,GAAkBsV,QAAiBpZ,GAEzC,SAASA,EAAM+V,GACX5c,GAAS8oB,QAA+B,EAAD,CAAGhpB,GAAI4qB,EAAO5qB,IAAO8c,KAGhE,IAAMtQ,EAA8B,MAAjB2W,EAAMxX,OAAiB4e,IAAuB,kBAACO,EAAA,EAAD,MASjE,OAPInf,IAAWwB,MAAoC,MAAjBgW,EAAMxX,QACpCzL,GAASoT,qBAAgB,CACrBnJ,QAAS,SACToE,MAAO4U,EAAM5U,MACb/K,YAAa2f,EAAMI,UAIvB,kBAAC,aAAD,KACI,kBAACjY,EAAA,EAAD,CACIC,QAASqE,KACTvD,SAAO,EACPR,WAAYA,EACZC,SAAWgF,EAAWjP,QAAUiK,QAAajJ,EAC7C8H,UAAWA,EACXE,gBAAiBA,EACjBkB,OAAQA,EACRG,OAAQA,EACRC,oBAAqB,kBACjBA,SACIe,QAAad,GACbwe,EAAO5qB,GACPkmB,gBAGR9Z,aAAcA,EACd2e,SAAUH,EAAO5qB,GACjB+G,MAAOA,EACPyE,MAAO,CAAEC,OAAMC,WAAUC,SAAQC,eACjCU,sBAAuB,6BACvBC,UAAW,0BACXzB,eAAgB,+BAChBmB,aAAc,CACVrE,MAAO,EACHojB,OAAajkB,EAAO6E,EAAY9D,SAChCmjB,OAAWlkB,EAAO6E,EAAYxK,SAC9B8pB,OAAkBnkB,EAAO6E,EAAYxK,UAG7CoL,WAAYA,MAM5B8d,EAAiBjhB,UAAY,CACzB1I,QAAS0I,WACTkhB,mBAAoBlhB,UAExB,SAAepJ,gBAAWqqB,G,inBClI1B,IAAMa,EAAiB,SAAC,GAA2B,IAAzBZ,EAAyB,EAAzBA,mBAChBrqB,GAAWC,mBACXyqB,GAASF,kBAAY,qBAAGG,cAAkCD,UAC1DxZ,GAAWsZ,kBACb,qBAAGU,uBAAoD3f,QAErDG,GAAc8e,kBAChB,qBAAGU,uBAAoDxf,eAErDQ,GAAese,kBACjB,qBAAGU,uBAAoDhf,gBAErDV,GAAWgf,kBACb,qBAAGU,uBAAoD1f,YAErDC,GAAS+e,kBACX,qBAAGU,uBAAoDzf,UAErDwX,GAAQuH,kBACV,qBAAGU,uBAAoDjI,SAErD1X,EAAOzD,aACT,kBACIuP,QAAyBnG,EAAUhF,KACvC,CAACgF,EAAWhF,IAGhBpE,eAAgB,WACZ,OAAO,kBAAM9H,GAASspB,cACvB,IAEHxhB,eAAgB,WACZ9H,GAAS6pB,QAA8B,GAAE/pB,GAAI4qB,EAAO5qB,IAAO4L,OAC5D,CAACA,IAEJ,IAiBME,GAAW+U,QAAYzP,EAAUhF,GAPlB,kBACjBkY,QAA2B,KAAEtkB,GAAI4qB,EAAO5qB,IAAO4L,GAArB,IAAkCiB,OAAQ,QAErD,SAACwU,GAChBnhB,GAAS8pB,QAAwB3I,OAdX,SAAC7J,GACvB,IAAMI,EAAaJ,EAAIK,SAAW,GAC5BC,EAAeF,EAAWA,EAAW/V,OAAS,GACpD,OAAOiW,GAAgB,GAAJ,OAAON,EAAIE,KAAX,YAAmBI,EAAaH,SAGlC,SAACnD,GAClB,gBAAUA,EAAIkD,KAAd,YAAsBlD,EAAImD,SAY9B,SAAS5Q,EAAM+V,GACX5c,GAAS+pB,QAA2B,GAAEjqB,GAAI4qB,EAAO5qB,IAAO8c,KAG5D,IAAM/Q,GAASqU,QAAcvQ,KAAuB9I,EAAO,GACrDmF,EAASlE,aACX,kBAAMiR,QAAapJ,KAAuBnE,EAASyT,KAAM,KACzD,CAACzT,EAASyT,OAERxU,GAAYkV,QAAWnU,EAASmB,MAAO9F,GACvC8D,GAAkBsV,QAAiBpZ,GAEnCyF,EAA8B,MAAjB2W,EAAMxX,OAAkB4e,IAAuB,kBAACO,EAAA,EAAD,MAC5Dre,EAAcd,IAAWyB,MAA4C,IAAzB1B,EAAS6B,aACI,IAApCtM,OAAOqV,KAAK1K,GAAa/J,QAAiB,kBAACwI,EAAA,EAAD,MASrE,OAPIsB,IAAWwB,MAAoC,MAAjBgW,EAAMxX,QACpCzL,GAASoT,qBAAgB,CACrBnJ,QAAS,SACToE,MAAO4U,EAAM5U,MACb/K,YAAa2f,EAAMI,UAIvB,kBAAC,aAAD,KACI,kBAACjY,EAAA,EAAD,CACIC,QAASsE,KACTrE,MAAO,CAAEC,OAAMC,WAAUC,SAAQC,eACjCE,SAAWsF,EAASvP,QAAUiK,QAAajJ,EAC3CuJ,aAAcA,EACdC,SAAO,EACPN,OAAQA,EACRG,OAAQA,EACRvB,UAAWA,EACXE,gBAAiBA,EACjBsB,oBAAqB,kBACjBA,SACIe,QAAad,GACbwe,EAAO5qB,GACPkmB,eAGRnf,MAAOA,EACPkF,aAAc,CACVrE,MAAO,EACHojB,OAAajkB,EAAO6E,EAAY9D,OAAQR,kBAAmBC,mCAC3D8jB,OAAatkB,EAAO6E,EAAYxK,UAGxCkL,sBAAuB,6BACvBC,UAAW,wBACXzB,eAAgB,6BAChB0B,WAAYA,EACZC,WAAYA,MAM5B0e,EAAe9hB,UAAY,CACvBkhB,mBAAoBlhB,UAExB,U,wBC/HMiiB,EAAe,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,eAAqB,EACDvjB,aAAe,GADd,WAClCwjB,EADkC,KACpBC,EADoB,OAEFzjB,cAAe,GAFb,WAElC0jB,EAFkC,KAEnBC,EAFmB,KASnCpB,EAAqB,WAEvB,OADAgB,GAAkBI,GAAc,SAAAC,GAAc,OAAKA,KAClB,kBAACtiB,EAAA,EAAD,OAGrC,OAVeohB,kBAAY,gBAAGG,EAAH,EAAGA,cAAH,OAAuBA,EAAcD,QAAUC,EAAcD,QAAU,MAUnF5qB,IAAc0rB,GACzB,kBAACG,EAAA,GAAD,CAAMC,UAAWN,EAAc1f,SAVf,SAAC3I,EAAOnD,GACxByrB,EAAgBzrB,IASsCgO,UAAW,iBAAkB+d,UAAQ,GACvF,kBAACC,EAAA,EAAD,CAAKC,SAAU,EAAG1d,MAAO,kBAAC2d,EAAAC,EAAD,KAAe7kB,kBAAmBC,uBACvD6kB,2BAAA,wBACAC,yBAAA,yBAEA,kBAAC,EAAD,CAAkB9B,mBAAoBA,KAE1C,kBAACyB,EAAA,EAAD,CACIC,SAAU,EACV1d,MAAO,kBAAC2d,EAAAC,EAAD,KAAe7kB,kBAAmBC,qBACzC6kB,2BAAA,sBACAC,yBAAA,uBAEA,kBAAC,EAAD,CAAgB9B,mBAAoBA,OAG1C,kBAACjhB,EAAA,EAAD,MAjBc,MAoBxBgiB,EAAajiB,UAAY,CACrBkiB,eAAgBliB,UAEpB,U,ikBC7CA,IAAIijB,EAAe,CACfC,QAAQ,GAICC,EAAoB,WAAkC,IAAjCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAC/D,OAAQA,EAAOllB,MACX,IAAK,wBAYL,IAAK,uBACD,cACOilB,GADP,IAEIF,QAAQ,EACRI,WAAY,CACR,CACIpe,MAAO,QACPmJ,KAAM,QACNtN,UAAW,kBAAM,kBAAC,EAAD,WAIjC,QACI,OAAOqiB,K,uuBChCZ,IAAMG,EAAgB,SAACH,EAAOC,GAMjC,OALAD,EAAM7gB,aAAcqS,QAChBwO,EAAM7gB,YACN8gB,EAAOrS,SAGJoS,GAGEzL,EAAa,SAACyL,EAAOC,GAC9B,IAAMG,GAAkB3S,QAAoBwS,EAAOrS,QAASoS,EAAMrgB,cAElE,OADQ,EAAH,KAAQqgB,GAAR,IAAergB,aAAcygB,KAIzBC,EAAa,SAACL,EAAOC,GAC9B,IAAMK,GAAkBpT,QACpB8S,EAAM9W,aACN,GAAG3S,OAAO0pB,EAAOrS,UAGrB,OADQ,EAAH,KAAQoS,GAAR,IAAe9W,aAAcoX,KAIzBC,EAAe,SAACP,GAGzB,OAFAA,EAAMtJ,MAAQ,GACdsJ,EAAM9gB,OAAS+C,KACR+d,GAGEQ,EAAgB,SAACR,EAAOC,GAGjC,OAFAD,EAAM9gB,OAASwB,KACfsf,EAAMtJ,MAAQuJ,EAAOrS,QACdoS,GAGES,EAAiB,SAACT,EAAOC,GAKlC,OAJAD,EAAMhhB,KAAOihB,EAAOrS,QAAQnY,KAC5BuqB,EAAM/gB,SAAWghB,EAAOrS,QAAQxI,KAChC4a,EAAMtJ,MAAQ,GACdsJ,EAAM9gB,OAASyB,KACRqf,G,ikBCpCJ,IAAIH,EAAe,CACtBpqB,KAAM,CAAEyS,WAAY,IACpBhJ,OAAQ+C,MAICye,EAAsB,WAAkC,IAAjCV,EAAiC,uDAAzBH,EAAcI,EAAW,uCAC7DtO,EAAW,KAAKqO,GACpB,OAAQC,EAAOllB,MACX,KAAK2f,KAAyB,aAC1B,cACOsF,GADP,IAEI9gB,OAAQyB,KACRlL,KAAMwqB,EAAOrS,QAAQnY,KACrBihB,MAAO,KAGf,KAAKgE,KAAyB,WAC1B,OAAO6F,EAAa5O,GAExB,KAAK+I,KAAyB,YAC1B,OAAO8F,EAAc7O,EAAUsO,GAEnC,KAAKnF,KACD,OAAO+E,EAEX,QACI,OAAOG,I,ikBCxBZ,IAAMW,EAAoB,WAAuC,IAAtCX,EAAsC,uDAA9B1G,KAAmB2G,EAAW,uCAChEtO,EAAW,KAAKqO,GACpB,OAAQC,EAAOllB,MACX,KAAK+gB,KAA0C,aAC3C,OAAO2E,EAAe9O,EAAUsO,GAEpC,KAAKnE,KAA0C,WAC3C,OAAOyE,EAAa5O,GAExB,KAAKmK,KAA0C,YAC3C,OAAO0E,EAAc7O,EAAUsO,GAEnC,KAAKnE,KACD,OAAOqE,EAAcxO,EAAUsO,GAEnC,KAAKnE,KACD,OAAOuE,EAAW1O,EAAUsO,GAEhC,KAAKnE,KACD,OAAOvH,EAAW5C,EAAUsO,GAEhC,KAAKnE,KACD,OAAOqE,EAAcxO,EAAUsO,GAEnC,QACI,OAAOD,I,ikBC1BZ,IAAMY,EAAuB,WAAuC,IAAtCZ,EAAsC,uDAA9B1G,KAAmB2G,EAAW,uCACnEtO,EAAW,KAAKqO,GACpB,OAAQC,EAAOllB,MACX,KAAK+gB,KAAqC,WACtC,OAAOyE,EAAa5O,GAExB,KAAKmK,KAAqC,YACtC,OAAO0E,EAAc7O,EAAUsO,GAEnC,IAAK,gBACD,OAAO1L,EAAW5C,EAAUsO,GAEhC,KAAKnE,KACD,OAAOqE,EAAcxO,EAAUsO,GAEnC,KAAKnE,KAAqC,aACtC,OAAO2E,EAAe9O,EAAUsO,GAEpC,KAAKnE,KACD,OAAOxC,KAEX,KAAKwC,KACD,OAAOqE,EAAcxO,EAAUsO,GAEnC,QACI,OAAOD,I,ikBC/BZ,IAAIH,EAAe,CACtBpqB,KAAM,CAAEyS,WAAY,IACpBhJ,OAAQ+C,MAIC4e,EAAqB,WAAkC,IAAjCb,EAAiC,uDAAzBH,EAAcI,EAAW,uCAC5DtO,EAAW,KAAKqO,GACpB,OAAQC,EAAOllB,MACX,KAAKsgB,KAAwB,aACzB,cACO2E,GADP,IAEI9gB,OAAQyB,KACRlL,KAAMwqB,EAAOrS,QAAQnY,KACrBihB,MAAO,KAGf,KAAK2E,KAAwB,WACzB,OAAOkF,EAAa5O,GAExB,KAAK0J,KAAwB,YACzB,OAAOmF,EAAc7O,EAAUsO,GAEnC,KAAK3E,KACD,OAAOuE,EAEX,QACI,OAAOG,I,ikBC3BnB,IAAMc,EAAe,OAAKxH,MAAR,IAA4Bna,YAAa,CAAExK,OAAQ,CAAEgX,kBAAmB,WAE7EoV,EAAoB,WAAkC,IAAjCf,EAAiC,uDAAzBc,EAAcb,EAAW,uCAC3DtO,EAAW,KAAKqO,GACpB,OAAQC,EAAOllB,MACX,KAAK+gB,KAAkC,WACnC,OAAOyE,EAAa5O,GAExB,KAAKmK,KAAkC,aACnC,OAAO2E,EAAe9O,EAAUsO,GAEpC,KAAKnE,KAAkC,YACnC,OAAO0E,EAAc7O,EAAUsO,GAEnC,KAAKnE,KAGL,KAAKA,KACD,OAAOqE,EAAcxO,EAAUsO,GAEnC,QACI,OAAOD,I,ikBCrBZ,IAAMgB,EAAsB,WAAuC,IAAtChB,EAAsC,uDAA9B1G,KAAmB2G,EAAW,uCAClEtO,EAAW,KAAKqO,GACpB,OAAQC,EAAOllB,MACX,KAAK+gB,KAAoC,WACrC,OAAOyE,EAAa5O,GAExB,KAAKmK,KAAoC,YACrC,OAAO0E,EAAc7O,EAAUsO,GAEnC,IAAK,gBACD,OAAO1L,EAAW5C,EAAUsO,GAEhC,KAAKnE,KACD,OAAOqE,EAAcxO,EAAUsO,GAEnC,KAAKnE,KAAoC,aACrC,OAAO2E,EAAe9O,EAAUsO,GAEpC,KAAKnE,KACD,OAAOxC,KAEX,KAAKwC,KACD,OAAOqE,EAAcxO,EAAUsO,GAEnC,QACI,OAAOD,I,ikBClBZ,IAAM9B,EAA0B,WAAuC,IAAtC8B,EAAsC,uDAA9B1G,KAAmB2G,EAAW,uCACtEtO,EAAW,KAAKqO,GACpB,OAAQC,EAAOllB,MACX,KAAK+gB,KAAiD,aAClD,OAAO2E,EAAe9O,EAAUsO,GAEpC,KAAKnE,KAAiD,WAClD,OAAOyE,EAAa5O,GAExB,KAAKmK,KAAiD,YAClD,OAAO0E,EAAc7O,EAAUsO,GAEnC,KAAKnE,KACD,OAAOqE,EAAcxO,EAAUsO,GAEnC,KAAKnE,IACD,OAAOuE,EAAW1O,EAAUsO,GAEhC,KAAKnE,KACD,OAAOvH,EAAW5C,EAAUsO,GAEhC,KAAKnE,KACD,OAAOxC,KAEX,KAAKwC,KACD,OAAOqE,EAAcxO,EAAUsO,GAEnC,QACI,OAAOD,I,4kBCnCnB,IAAIiB,EAAkB,CAAE9hB,YAAa,CAAExK,OAAQ,CAAEiH,UAAW,UAE/C+iB,EAAyB,WAAkE,IAAjEqB,EAAiE,8DAApD1G,MAAsB2H,GAAmBhB,EAAW,uCAChGtO,EAAW,KAAKqO,GACpB,OAAQC,EAAOllB,MACX,KAAK+gB,KAA+C,aAChD,OAAO2E,EAAe9O,EAAUsO,GAEpC,KAAKnE,KAA+C,WAChD,OAAOyE,EAAa5O,GAExB,KAAKmK,KAA+C,YAChD,OAAO0E,EAAc7O,EAAUsO,GAEnC,KAAKnE,KACD,OAAOqE,EAAcxO,EAAUsO,GAEnC,KAAKnE,KACD,OAAOvH,EAAW5C,EAAUsO,GAEhC,KAAKnE,KACD,cAAYxC,MAAsB2H,GAEtC,KAAKnF,KACD,OAAOqE,EAAcxO,EAAUsO,GAEnC,QACI,OAAOD,I,ikBCtBZ,IAAMkB,EAAmB,WAAuC,IAAtClB,EAAsC,uDAA9B1G,KAAmB2G,EAAW,uCAC/DtO,EAAW,KAAKqO,GACpB,OAAQC,EAAOllB,MACX,KAAK+gB,KAA4B,WAC7B,OAAOyE,EAAa5O,GAExB,KAAKmK,KAA4B,aAC7B,OAAO2E,EAAe9O,EAAUsO,GAEpC,KAAKnE,KAA4B,YAC7B,OAAO0E,EAAc7O,EAAUsO,GAEnC,KAAKnE,KAGL,KAAKA,KACD,OAAOqE,EAAcxO,EAAUsO,GAEnC,QACI,OAAOD,I,kkBCnBZ,IAAMmB,GAAgB,WAAuC,IAAtCnB,EAAsC,uDAA9B1G,KAAmB2G,EAAW,uCAC5DtO,EAAW,MAAKqO,GACpB,OAAQC,EAAOllB,MACX,KAAK+gB,KAA8B,aAC/B,OAAO2E,EAAe9O,EAAUsO,GAEpC,KAAKnE,KAA8B,WAC/B,OAAOyE,EAAa5O,GAExB,KAAKmK,KAA8B,YAC/B,OAAO0E,EAAc7O,EAAUsO,GAEnC,KAAKnE,KACD,OAAOqE,EAAcxO,EAAUsO,GAEnC,QACI,OAAOD,I,qkBCTnB,IAYMoB,GAAU5I,KAAK6I,MAAMC,eAAeC,QAAQ,gBAAkB,GAE9DC,IAAWC,QAAY,GAAI,CAACC,KAAmBC,UAdvB,SAAA5iB,GAAK,OAAI,SAAA6iB,GAAI,OAAI,SAAA3B,GAC3C,IAAM4B,EAAe9iB,EAAM+iB,WACP,4BAAhB7B,EAAOllB,OACPklB,EAAS,SAAKA,GAAR,IAAgBlhB,WAG1B6iB,EAAK3B,GACAA,EAAOllB,KAAKgnB,SAAS,cACtBT,eAAeU,QAAQ,aAAcxJ,KAAKC,UAAUoJ,SAO5DL,GAAS9c,SAAS,CACdic,kBAAmB,eAACX,EAAD,uDAASoB,GAAQT,kBAAmBV,EAApC,8CAA+CU,EAAkBX,EAAOC,IAC3FiB,iBAAkB,eAAClB,EAAD,uDAASoB,GAAQF,iBAAkBjB,EAAnC,8CAA8CiB,EAAiBlB,EAAOC,IACxFF,kBAAmB,eAACC,EAAD,uDAASoB,GAAQrB,kBAAmBE,EAApC,8CAA+CF,OAAkBC,EAAOC,IAC3F/B,wBAAyB,eAAC8B,EAAD,uDAASoB,GAAQlD,wBAAyB+B,EAA1C,8CAAqD/B,EAAwB8B,EAAOC,IAC7GS,oBAAqB,eAACV,EAAD,uDAASoB,GAAQV,oBAAqBT,EAAtC,8CAAiDS,EAAoBV,EAAOC,IACjGW,qBAAsB,eAACZ,EAAD,uDAASoB,GAAQR,qBAAsBX,EAAvC,8CAAkDW,EAAqBZ,EAAOC,IACpGtB,uBAAwB,eAACqB,EAAD,uDAASoB,GAAQzC,uBAAwBsB,EAAzC,8CAAoDtB,EAAuBqB,EAAOC,IAC1Gc,kBAAmB,eAACf,EAAD,uDAASoB,GAAQL,kBAAmBd,EAApC,8CAA+Cc,EAAkBf,EAAOC,IAC3FY,mBAAoB,eAACb,EAAD,uDAASoB,GAAQP,mBAAoBZ,EAArC,8CAAgDY,EAAmBb,EAAOC,IAC9Fe,oBAAqB,eAAChB,EAAD,uDAASoB,GAAQJ,oBAAqBf,EAAtC,8CAAiDe,EAAoBhB,EAAOC,IACjGkB,cAAe,eAACnB,EAAD,uDAASoB,GAAQD,cAAelB,EAAhC,8CAA2CkB,GAAcnB,EAAOC,IAC/EgC,qBAGG,IAAMC,GAAW,kBAAMV,GAASU,YAC1Bxd,GAAW,SAAAyd,GACpBX,GAAS9c,SAASyd,K,gECxClBC,EAAS,IAAI,UALH,CAEd,OAAiB,OACjB,WAAoB,IAMlB,IAAK,kBAAkB9uB,EAAO+uB,IAAIC,WAAY,CAC5C,IA+BIC,EAAY,iBAEhBjvB,EAAO+uB,IAAIvJ,OACT,OACA,eAnCkB,SAAuB0J,EAAGC,EAAGC,GACnD,IAAKF,GAAKC,GAAKD,IAAMC,EACnB,OAAO,EAGT,IAAIvc,EAEJ,IAAKA,KAAKsc,EACR,GAKIA,EAAEtc,KAAOuc,EAAEvc,GACb,OAAO,EAIX,IAAKA,KAAKuc,EACR,IAKKD,EAAEtc,GACL,OAAO,EAIX,OAAO,EAOIyc,CAAcJ,EAAW,mBAMxBA,EAAY,iBAEZH,EAAO,YAPL9uB,EAAO+uB,IAAIC,gBAYzBhvB,EAAO+uB,IAAIO,SAAQ,WACjBR,OAIW,kB,gEC3DXA,EAAS,IAAI,UALH,CAEd,OAAiB,OACjB,WAAoB,IAMlB,IAAK,kBAAkB9uB,EAAO+uB,IAAIC,WAAY,CAC5C,IA+BIC,EAAY,iBAEhBjvB,EAAO+uB,IAAIvJ,OACT,OACA,eAnCkB,SAAuB0J,EAAGC,EAAGC,GACnD,IAAKF,GAAKC,GAAKD,IAAMC,EACnB,OAAO,EAGT,IAAIvc,EAEJ,IAAKA,KAAKsc,EACR,GAKIA,EAAEtc,KAAOuc,EAAEvc,GACb,OAAO,EAIX,IAAKA,KAAKuc,EACR,IAKKD,EAAEtc,GACL,OAAO,EAIX,OAAO,EAOIyc,CAAcJ,EAAW,mBAMxBA,EAAY,iBAEZH,EAAO,YAPL9uB,EAAO+uB,IAAIC,gBAYzBhvB,EAAO+uB,IAAIO,SAAQ,WACjBR,OAIW,kB,6DC3DXA,EAAS,IAAI,UALH,CAEd,OAAiB,OACjB,WAAoB,IAMlB,IAAK,kBAAkB9uB,EAAO+uB,IAAIC,WAAY,CAC5C,IA+BIC,EAAY,iBAEhBjvB,EAAO+uB,IAAIvJ,OACT,IACA,YAnCkB,SAAuB0J,EAAGC,EAAGC,GACnD,IAAKF,GAAKC,GAAKD,IAAMC,EACnB,OAAO,EAGT,IAAIvc,EAEJ,IAAKA,KAAKsc,EACR,GAKIA,EAAEtc,KAAOuc,EAAEvc,GACb,OAAO,EAIX,IAAKA,KAAKuc,EACR,IAKKD,EAAEtc,GACL,OAAO,EAIX,OAAO,EAOIyc,CAAcJ,EAAW,mBAMxBA,EAAY,iBAEZH,EAAO,YAPL9uB,EAAO+uB,IAAIC,gBAYzBhvB,EAAO+uB,IAAIO,SAAQ,WACjBR,OAIW","file":"js/992.ff87b325c0cd876bf2c0.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../node_modules/css-loader/dist/cjs.js!../node_modules/@redhat-cloud-services/frontend-components/index.css\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_1___ from \"-!../node_modules/css-loader/dist/cjs.js!../node_modules/@redhat-cloud-services/frontend-components-notifications/index.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_1___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".patch{}.patch :root{--ins-color--orange: #ec7a08}.patch button:focus{outline:none}.patch .remediationButtonPatch:disabled svg{color:white}.patch table.patchCompactInventory .ins-composed-col{font-size:var(--pf-c-table--m-compact--FontSize)}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/App.scss\"],\"names\":[],\"mappings\":\"AAAA,OAAM,CAAN,aAC0J,4BAAoB,CAD9K,oBACoM,YAAY,CADhN,4CACsP,WAAW,CADjQ,qDACgT,gDAAgD\",\"sourcesContent\":[\".patch{\\n@import url(~@redhat-cloud-services/frontend-components/index.css);@import url(~@redhat-cloud-services/frontend-components-notifications/index.css);:root{--ins-color--orange: #ec7a08}button:focus{outline:none}.remediationButtonPatch:disabled svg{color:white}table.patchCompactInventory .ins-composed-col{font-size:var(--pf-c-table--m-compact--FontSize)}\\n\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".patch span.patchman-label{display:inline-block;font-size:var(--pf-global--FontSize--sm);font-weight:var(--pf-global--FontWeight--bold);line-height:var(--pf-global--LineHeight--sm);color:var(--pf-global--Color--100)}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/PresentationalComponents/Snippets/Label.scss\"],\"names\":[],\"mappings\":\"AAAA,2BACoB,oBAAoB,CAAC,wCAAwC,CAAC,8CAA8C,CAAC,4CAA4C,CAAC,kCAAkC\",\"sourcesContent\":[\".patch{\\nspan.patchman-label{display:inline-block;font-size:var(--pf-global--FontSize--sm);font-weight:var(--pf-global--FontWeight--bold);line-height:var(--pf-global--LineHeight--sm);color:var(--pf-global--Color--100)}\\n\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".patch .patchTabSelect{background-color:white}.patch .patchTabSelect .pf-c-tabs__item-text{padding:8px 0px 8px 0px}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/SmartComponents/SystemDetail/SystemDetail.scss\"],\"names\":[],\"mappings\":\"AAAA,uBACgB,sBAAsB,CADtC,6CAC6E,uBAAuB\",\"sourcesContent\":[\".patch{\\n.patchTabSelect{background-color:white}.patchTabSelect .pf-c-tabs__item-text{padding:8px 0px 8px 0px}\\n\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable camelcase */\n\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/cjs/NotificationPortal';\nimport '@redhat-cloud-services/frontend-components-notifications/index.css';\nimport { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory, useLocation, withRouter } from 'react-router-dom';\nimport './App.scss';\nimport { paths, Routes } from './Routes';\nimport { globalFilter } from './store/Actions/Actions';\nconst App = () => {\n    const dispatch = useDispatch();\n    const [config, setConfig] = useState({\n        selectedTags: [],\n        systemProfile: false\n    });\n    const location = useLocation();\n    const history = useHistory();\n\n    const listenNavigation = () => {\n        return  insights.chrome.on('APP_NAVIGATION', event => {\n            if (event.domEvent) {\n                history.push(`/${event.navId}`);\n            }\n        });\n    };\n\n    useEffect(() => {\n        history.listen((location) => {\n            const { pathname } = location;\n            const currentRoute = Object.values(paths).filter(element => pathname !== '/' && pathname.includes(element.to));\n\n            if (pathname === '/') {\n                insights.chrome.appNavClick({ id: 'advisories' }, false);\n            }\n            else if (currentRoute) {\n                const navId =  pathname.split('/').filter(element => element.length > 0)[0];\n                navId && insights.chrome.appNavClick({ id: navId });\n            }\n        });\n    }, [location.pathname]);;\n\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp('patch');\n\n        if (insights.chrome?.globalFilterScope) {\n            insights.chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n                const [workloads, SID, tags] = insights.chrome?.mapGlobalFilter?.(data, false, true);\n                const SAP = data?.Workloads?.SAP;\n                const selectedTags = insights.chrome?.mapGlobalFilter?.(data)\n                ?.filter(item => !item.includes('Workloads')).map(tag => (`tags=${encodeURIComponent(tag)}`));\n\n                const newconfig = { };\n                (SAP && SAP.isSelected)\n                    ? (newconfig.systemProfile = `filter[system_profile][sap_system]=${SAP.isSelected}&`)\n                    : newconfig.systemProfile = undefined;\n                selectedTags && (newconfig.selectedTags = selectedTags);\n                if (SID && SID?.length !== 0) {\n                    const SID_filter = SID.map(item=> `filter[system_profile][sap_sids][in]=${item}`).join('&') ;\n                    newconfig.systemProfile = newconfig.systemProfile?.concat(SID_filter) || SID_filter;\n                }\n\n                if (!isEqual(config, newconfig)) {\n                    dispatch(globalFilter(newconfig));\n                    setConfig(newconfig);\n                }\n\n            });\n        }\n\n        const unregister = listenNavigation();\n        return () => unregister();\n    }, []);\n\n    return (\n        <React.Fragment>\n            <NotificationsPortal />\n            <Routes childProps={location, history} />\n        </React.Fragment>\n    );\n};\n\nexport default withRouter(App);\n","\n/* eslint-disable max-len */\n/* eslint sort-keys: [\"error\", \"asc\", {minKeys: 4}] */\n\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n\n    generalAppName: {\n        id: 'generalAppName',\n        description: 'regsiter page title',\n        defaultMessage: 'Patch'\n    },\n    labelsBulkSelectAll: {\n        id: 'labelsBulkSelectAll',\n        description: 'bulk select option',\n        defaultMessage: 'Select all ({count})'\n    },\n    labelsBulkSelectNone: {\n        id: 'labelsBulkSelectNone',\n        description: 'bulk select option',\n        defaultMessage: 'Select none (0)'\n    },\n    labelsBulkSelectPage: {\n        id: 'labelsBulkSelectPage',\n        description: 'bulk select option',\n        defaultMessage: 'Select page ({count})'\n    },\n    labelsColumnsApplicableSystems: {\n        id: 'labelsColumnsApplicableSystems',\n        description: 'shared label',\n        defaultMessage: 'Applicable systems'\n    },\n    labelsColumnsCVSS: {\n        id: 'labelsColumnsCVSS',\n        description: 'shared label',\n        defaultMessage: 'CVSS'\n    },\n    labelsColumnsCveID: {\n        id: 'labelsColumnsCveID',\n        description: 'shared label',\n        defaultMessage: 'CVE ID'\n    },\n    labelsColumnsInstalledVersion: {\n        id: 'labelsColumnsInstalledVersion',\n        description: 'shared label',\n        defaultMessage: 'Installed version'\n    },\n    labelsColumnsLatestVersion: {\n        id: 'labelsColumnsLatestVersion',\n        description: 'shared label',\n        defaultMessage: 'Latest version'\n    },\n    labelsColumnsName: {\n        id: 'labelsColumnsName',\n        description: 'shared label',\n        defaultMessage: 'Name'\n    },\n    labelsColumnsPackage: {\n        id: 'labelsColumnsPackage',\n        description: 'shared single noun label',\n        defaultMessage: 'Package'\n    },\n    labelsColumnsPublishDate: {\n        id: 'labelsColumnsPublishDate',\n        description: 'shared label',\n        defaultMessage: 'Publish date'\n    },\n    labelsColumnsSeverity: {\n        id: 'labelsColumnsSeverity',\n        description: 'shared label',\n        defaultMessage: 'Severity'\n    },\n    labelsColumnsStatus: {\n        id: 'labelsColumnsStatus',\n        description: 'Label for status fitler placeholder',\n        defaultMessage: 'Status'\n    },\n    labelsColumnsSummary: {\n        id: 'labelsColumnsSummary',\n        description: 'shared label',\n        defaultMessage: 'Summary'\n    },\n    labelsColumnsSynopsis: {\n        id: 'labelsColumnsSynopsis',\n        description: 'shared label',\n        defaultMessage: 'Synopsis'\n    },\n    labelsColumnsType: {\n        id: 'labelsColumnsType',\n        description: 'Label for type fitler placeholder',\n        defaultMessage: 'Type'\n    },\n    labelsColumnsUpgradable: {\n        id: 'labelsColumnsUpgradable',\n        description: 'shared label',\n        defaultMessage: 'Upgradable'\n    },\n    labelsCves: {\n        id: 'labelsCves',\n        description: 'label for cves info link',\n        defaultMessage: 'CVEs'\n    },\n    labelsCvesButton: {\n        id: 'labelsCvesButton',\n        description: 'label for cves button',\n        defaultMessage: '{cvesCount, plural, one {# CVE} other {# CVEs}} associated with this patch'\n    },\n    labelsDescription: {\n        id: 'labelsDescription',\n        description: 'Label',\n        defaultMessage: 'Description'\n    },\n    labelsFiltersPackagesSearch: {\n        id: 'labelsFiltersPackagesSearch',\n        description: 'search filter placeholder for packages pages',\n        defaultMessage: 'Search packages'\n    },\n    labelsFiltersPublishDate: {\n        id: 'labelsFiltersPublishDate',\n        description: 'shared label',\n        defaultMessage: 'Publish date'\n    },\n    labelsFiltersSearch: {\n        id: 'labelsFiltersSearch',\n        description: 'Label for search fitler placeholder',\n        defaultMessage: 'Search '\n    },\n    labelsFiltersSearchAdvisories: {\n        id: 'labelsFiltersSearchAdvisories',\n        description: 'Label for search fitler placeholder',\n        defaultMessage: 'Search advisories'\n    },\n    labelsFiltersStatus: {\n        id: 'labelsFiltersStatus',\n        description: 'Label for status fitler placeholder',\n        defaultMessage: 'Status'\n    },\n    labelsFiltersSystemsSearch: {\n        id: 'labelsFiltersSystemsSearch',\n        description: 'search filter placeholder for systems pages',\n        defaultMessage: 'Search systems'\n    },\n    labelsFiltersType: {\n        id: 'labelsFiltersType',\n        description: 'Label for type fitler placeholder',\n        defaultMessage: 'Type'\n    },\n    labelsModifiedDate: {\n        id: 'labelsModifiedDate',\n        description: 'Modified date label',\n        defaultMessage: 'Modified {date}'\n    },\n    labelsPublicDate: {\n        id: 'labelsPublicDate',\n        description: 'Public date label',\n        defaultMessage: 'Issued {date}'\n    },\n    labelsRemediate: {\n        id: 'labelsRemediate',\n        description: 'Button label',\n        defaultMessage: 'Remediate'\n    },\n    labelsSeverity: {\n        id: 'labelsSeverity',\n        description: 'label for cves info',\n        defaultMessage: 'Severity'\n    },\n    linksLearnAboutInsights: {\n        id: 'linksLearnAboutInsights',\n        description: 'no system data page button label',\n        defaultMessage: 'Learn about the Insights client'\n    },\n    linksLearnMore: {\n        id: 'linksLearnMore',\n        description: 'Learn more',\n        defaultMessage: 'Learn more'\n    },\n    linksReadMore: {\n        id: 'linksReadMore',\n        description: 'Label',\n        defaultMessage: 'Read more'\n    },\n    linksSearchSecurityRatings: {\n        id: 'linksSearchSecurityRatings',\n        description: 'A link label to security ratings page',\n        defaultMessage: 'Learn more about security ratings'\n    },\n    linksViewPackagesAndErrata: {\n        id: 'viewPackagesAndErrata',\n        description: 'A link label to access.redhat.com ',\n        defaultMessage: 'View packages and errata at access.redhat.com'\n    },\n    statesActivateInsights: {\n        id: 'statesActivateInsights',\n        description: 'no system data page body',\n        defaultMessage: 'Activate the Insights client'\n    },\n    statesError: {\n        id: 'statesError',\n        description: 'Label',\n        defaultMessage: 'Error'\n    },\n    statesMinimumPatchPermissionsRequired: {\n        id: 'statesMinimumPatchPermissionsRequired',\n        description: 'No access page body',\n        defaultMessage: 'To view the content of this page, you must be granted a minimum of Patch permissions from your Organisation Administratior'\n    },\n    statesNoApplicableAdvisories: {\n        id: 'statesNoApplicableAdvisories',\n        description: 'system up to date page title',\n        defaultMessage: 'No applicable advisories'\n    },\n    statesNoMatchingAdvisories: {\n        id: 'statesNoMatchingAdvisories',\n        description: 'Label',\n        defaultMessage: 'No matching advisories found'\n    },\n    statesNoMatchingCve: {\n        id: 'statesNoMatchingCve',\n        description: 'Label',\n        defaultMessage: 'No matching CVES found'\n    },\n    statesNoMatchingPackages: {\n        id: 'statesNoMatchingPackages',\n        description: 'Label',\n        defaultMessage: 'No matching packages found'\n    },\n    statesPatchNotConfigured: {\n        id: 'statesPatchNotConfigured',\n        description: 'no system data page title',\n        defaultMessage: 'Patch is not yet configured'\n    },\n    statesRequiresPatchPermissions: {\n        id: 'statesRequiresPatchPermissions',\n        description: 'No access page title',\n        defaultMessage: 'This application requires Patch permissions'\n    },\n    statesSystemUpToDate: {\n        id: 'statesSystemUpToDate',\n        description: 'system up to date page body',\n        defaultMessage: 'This system is up to date, based on package information submitted at the most recent system check-in'\n    },\n    titlesAdvisories: {\n        id: 'titlesAdvisories',\n        description: 'page title with capital letter',\n        defaultMessage: 'Advisories'\n    },\n    titlesAffectedSystems: {\n        id: 'affectedSystems',\n        description: 'page title with capital letter',\n        defaultMessage: 'Affected systems'\n    },\n    titlesPackages: {\n        id: 'titlesPackages',\n        description: 'page title with capital letters',\n        defaultMessage: 'Packages'\n    },\n    titlesPatchAdvisories: {\n        id: 'titlesPatchAdvisories',\n        description: 'title for Advisories page',\n        defaultMessage: 'Patch advisories'\n    },\n    titlesPatchPackages: {\n        id: 'titlesPatchPackages',\n        description: 'title for Packages page',\n        defaultMessage: 'Patch packages'\n    },\n    titlesPatchSystems: {\n        id: 'titlesPatchSystems',\n        description: 'title for Systems page',\n        defaultMessage: 'Patch systems'\n    },\n    titlesSystems: {\n        id: 'titlesSystems',\n        description: 'title with capital letters',\n        defaultMessage: 'Systems'\n    }\n});\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { publicDateOptions } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { public_date: currentValue } = currentFilter;\n\n    const filterByPublicDate = value => {\n        apply({ filter: { public_date: (value !== 'all' && value) || '' } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersPublishDate),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublicDate(value);\n            },\n            items: publicDateOptions,\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport debounce from 'lodash/debounce';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst searchFilter = (apply, search, placeholder) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [searchAdvisory] = React.useState(() =>\n        debounce(value => apply({ search: value }), 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(messages.labelsFiltersSearch),\n        filterValues: {\n            'aria-label': 'search-field',\n            onChange: (event, value) => {\n                setSearchValue(value);\n                searchAdvisory(value);\n            },\n            placeholder: placeholder || intl.formatMessage(messages.labelsFiltersSearchAdvisories),\n            value: searchValue\n        }\n    };\n};\n\nexport default searchFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport { updatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { updatable: currentValue } = currentFilter;\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const updatableTypesMap = React.useMemo(\n        () =>\n            updatableTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { updatable: (value !== '0' && value) || '' } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStatus),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: updatableTypesMap,\n            value: currentValue\n        }\n    };\n};\n\nexport default statusFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst typeFilter = (apply, currentFilter = {}) => {\n    const advisoryTypesMap = React.useMemo(\n        () =>\n            advisoryTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { advisory_type: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersType),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: advisoryTypesMap,\n            value: currentFilter.advisory_type\n        }\n    };\n};\n\nexport default typeFilter;\n","import { Flex, FlexItem } from '@patternfly/react-core';\nimport ExternalLinkSquareAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-square-alt-icon';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst ExternalLink = ({ link, text }) => {\n    return (\n        <a\n            href={link}\n            target=\"__blank\"\n        >\n            <Flex flex={{ default: 'inlineFlex' }}>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    <ExternalLinkSquareAltIcon />\n                </FlexItem>\n                <FlexItem spacer={{ default: 'spacerSm' }}>\n                    {text}\n                </FlexItem>\n            </Flex>\n        </a>\n\n    );\n};\n\nExternalLink.propTypes = {\n    link: propTypes.string,\n    text: propTypes.string\n};\n\nexport default ExternalLink;\n","import { Bullseye, Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const NoSystemData = () => (\n    <Bullseye>\n        <EmptyState style={{ paddingTop: 40 }}>\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                {intl.formatMessage(messages.statesPatchNotConfigured)}\n            </Title>\n            <EmptyStateBody>\n                {intl.formatMessage(messages.statesActivateInsights)}\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                {intl.formatMessage(messages.linksLearnAboutInsights)}\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n","import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const SystemUpToDate = () => (\n    <Bullseye>\n        <EmptyState style={{ paddingTop: 40 }}>\n            <EmptyStateIcon icon={()=><CheckCircleIcon size='xl' color={'var(--pf-global--success-color--200)' }\n                style={{ marginBottom: 15 }} />}/>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                {intl.formatMessage(messages.statesNoApplicableAdvisories)}\n            </Title>\n            <EmptyStateBody>\n                {intl.formatMessage(messages.statesSystemUpToDate)}\n            </EmptyStateBody>\n        </EmptyState>\n    </Bullseye>\n);\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TableFooter = ({ page, perPage, onSetPage, totalItems, onPerPageSelect, paginationOUIA }) => {\n    return (\n        <TableToolbar>\n            <Pagination\n                itemCount={totalItems}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                widgetId={`pagination-options-menu-bottom`}\n                variant={PaginationVariant.bottom}\n                ouiaId={paginationOUIA}\n            />\n        </TableToolbar>\n    );\n};\n\nTableFooter.propTypes = {\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalItems: PropTypes.number,\n    paginationOUIA: PropTypes.string\n};\n\nexport default TableFooter;\n","import { Button } from '@patternfly/react-core';\nimport { AnsibeTowerIcon } from '@patternfly/react-icons'; // PF typo\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { PrimaryToolbar, SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport globalPaletteWhite from '@patternfly/react-tokens/dist/js/global_palette_white';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport RemediationModal from '../../SmartComponents/Remediation/RemediationModal';\nimport { STATUS_LOADING, STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { arrayFromObj, buildFilterChips, convertLimitOffset } from '../../Utilities/Helpers';\nimport { useRemoveFilter } from '../../Utilities/Hooks';\nimport TableFooter from './TableFooter';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst TableView = ({\n    columns,\n    store: {\n        rows,\n        metadata,\n        status,\n        queryParams: { filter, search }\n    },\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    onExport,\n    filterConfig,\n    sortBy,\n    remediationProvider,\n    selectedRows,\n    compact,\n    apply,\n    remediationButtonOUIA,\n    tableOUIA,\n    paginationOUIA,\n    errorState,\n    emptyState\n}) => {\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    const removeFilter = useRemoveFilter(filter, apply);\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    return (\n        <React.Fragment>\n            {\n                (status === STATUS_REJECTED) && errorState ||\n                (status === STATUS_RESOLVED && emptyState !== false) && emptyState ||\n                (<React.Fragment>\n                    <PrimaryToolbar\n                        pagination={{\n                            itemCount: metadata.total_items,\n                            page,\n                            perPage,\n                            isCompact: true,\n                            onSetPage,\n                            onPerPageSelect,\n                            ouiaId: `top-${paginationOUIA}`\n                        }}\n                        filterConfig={filterConfig}\n                        activeFiltersConfig={{\n                            filters: buildFilterChips(filter, search),\n                            onDelete: removeFilter\n                        }}\n                        actionsConfig={{ actions: [remediationProvider && (\n                            <React.Fragment>\n                                <Button\n                                    isDisabled={selectedCount === 0}\n                                    className={'remediationButtonPatch'}\n                                    onClick={() =>\n                                        showRemediationModal(remediationProvider())\n                                    }\n                                    ouiaId={remediationButtonOUIA}\n                                >\n                                    <AnsibeTowerIcon color={globalPaletteWhite.value} />&nbsp;Remediate\n                                </Button>\n                                <RemediationModalCmp />\n                            </React.Fragment>\n                        )] }}\n                        exportConfig={{ onSelect: onExport }}\n                        bulkSelect={onSelect && {\n                            count: selectedCount,\n                            items: [{\n                                title: intl.formatMessage(messages.labelsBulkSelectNone),\n                                onClick: () => {\n                                    onSelect('none');\n                                }\n                            }, {\n                                title: intl.formatMessage(messages.labelsBulkSelectPage,\n                                    { count: onCollapse && rows.length / 2 || rows.length }\n                                ),\n                                onClick: () => {\n                                    onSelect('page');\n                                }\n                            },\n                            {\n                                title: intl.formatMessage(messages.labelsBulkSelectAll, { count: metadata.total_items }),\n                                onClick: () => {\n                                    onSelect('all');\n                                }\n                            }],\n                            onSelect: (value) => {\n                                value ? onSelect('all') : onSelect('none');\n                            },\n                            toggleProps: {\n                                'data-ouia-component-type': 'bulk-select-toggle-button'\n                            },\n                            checked: selectedCount === metadata.total_items ? true : selectedCount === 0 ? false : null\n                        }}\n\n                    />\n\n                    {status === STATUS_LOADING && <SkeletonTable colSize={5} rowSize={20} />}\n                    {status === STATUS_RESOLVED && (\n                        <React.Fragment>\n                            <Table\n                                aria-label=\"Patch table view\"\n                                cells={metadata.total_items && columns || ['']}\n                                onSelect={onSelect}\n                                rows={rows}\n                                onCollapse={metadata.total_items && onCollapse}\n                                canSelectAll={false}\n                                onSort={onSort}\n                                ouiaId={tableOUIA}\n                                sortBy={metadata.total_items && sortBy}\n                                variant={compact && TableVariant.compact}\n                            >\n                                <TableHeader />\n                                <TableBody />\n                            </Table>\n                            <TableFooter\n                                totalItems={metadata.total_items}\n                                perPage={perPage}\n                                page={page}\n                                onSetPage={onSetPage}\n                                onPerPageSelect={onPerPageSelect}\n                                paginationOUIA={`bottom-${paginationOUIA}`}\n                            />\n                        </React.Fragment>)}\n                </React.Fragment>)\n            }\n        </React.Fragment>\n    );\n};\n\nTableView.propTypes = {\n    columns: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    onExport: PropTypes.func,\n    remediationProvider: PropTypes.func,\n    selectedRows: PropTypes.object,\n    apply: PropTypes.func,\n    sortBy: PropTypes.object,\n    filterConfig: PropTypes.object,\n    store: PropTypes.object,\n    compact: PropTypes.bool,\n    remediationButtonOUIA: PropTypes.string,\n    tableOUIA: PropTypes.string,\n    paginationOUIA: PropTypes.string,\n    errorState: PropTypes.any,\n    emptyState: PropTypes.any\n};\n\nexport default TableView;\n","import { cellWidth, expandable, sortable } from '@patternfly/react-table/dist/js';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nexport const advisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSynopsis),\n        transforms: [sortable],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        key: 'applicable_systems'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(15)],\n        key: 'public_date'\n    }\n];\n\nexport const systemAdvisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: 'Synopsis',\n        transforms: [sortable, cellWidth(45)],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(15)],\n        key: 'advisory_type'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(25)],\n        key: 'public_date'\n    }\n];\n\nexport const systemPackagesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsPackage),\n        transforms: [sortable, cellWidth(20)],\n        key: 'name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsInstalledVersion),\n        transforms: [sortable, cellWidth(15)],\n        key: 'evra'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsLatestVersion),\n        transforms: [cellWidth(15)],\n        key: 'latest_update'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [cellWidth(10)],\n        key: 'updatable'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        key: 'summary'\n    }\n];\n\nexport const packagesColumns = [\n    {\n        key: 'name',\n        title: intl.formatMessage(messages.labelsColumnsPackage),\n        transforms: [sortable, cellWidth(25)]\n    },\n    {\n        key: 'systems_installed',\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'systems_updatable',\n        title: intl.formatMessage(messages.labelsColumnsUpgradable),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'summary',\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        props: {\n            width: 30\n        }\n    }\n];\n\nexport const cvesTableColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsCveID),\n        transforms: [sortable, cellWidth(40)],\n        key: 'synopsis'\n    },\n    {\n        key: 'impact',\n        title: intl.formatMessage(messages.labelsColumnsSeverity),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    },\n    {\n        key: 'cvss',\n        title: intl.formatMessage(messages.labelsColumnsCVSS),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    }\n];\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { LockIcon } from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Page, Title } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst NoAccessPage = () => {\n    return (\n        <Page>\n            <Main>\n                <Bullseye>\n                    <EmptyState variant={EmptyStateVariant.large}>\n                        <EmptyStateIcon icon={LockIcon} />\n                        <Title headingLevel=\"h5\" size=\"lg\">\n                            {intl.formatMessage(messages.statesRequiresPatchPermissions)}\n                        </Title>\n                        <EmptyStateBody>\n                            {intl.formatMessage(messages.statesMinimumPatchPermissionsRequired)}\n                        </EmptyStateBody>\n                    </EmptyState>\n                </Bullseye>\n            </Main>\n        </Page>\n    );\n};\n\nexport default withRouter(NoAccessPage);\n","import some from 'lodash/some';\nimport PropTypes from 'prop-types';\nimport React, { Fragment, lazy, Suspense, useState } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { fetchSystems } from './Utilities/api';\nimport NoAccess from './PresentationalComponents/Snippets/NoAccess';\n\nconst Advisories = lazy(() =>\n    import(\n        /* webpackChunkName: \"Advisories\" */ './SmartComponents/Advisories/Advisories'\n    )\n);\n\nconst Systems = lazy(() =>\n    import(\n        /* webpackChunkName: \"Systems\" */ './SmartComponents/Systems/Systems'\n    )\n);\n\nconst InventoryPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"InventoryPage\" */ './SmartComponents/SystemDetail/InventoryPage'\n    )\n);\n\nconst AdvisoryPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"AdvisoryyPage\" */ './SmartComponents/AdvisoryDetail/AdvisoryDetail'\n    )\n);\n\nconst PackagsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"Packages\" */ './SmartComponents/Packages/Packages'\n    )\n);\n\nconst PackageDetail = lazy(() =>\n    import(\n        /* webpackChunkName: \"PackageDetail\" */ './SmartComponents/PackageDetail/PackageDetail'\n    )\n);\n\nconst RegisterPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"Register\" */ './PresentationalComponents/RegisterPage/RegisterPage'\n    )\n);\nexport const paths = {\n    advisories: {\n        title: 'Applicable advisories',\n        to: '/advisories'\n    },\n    systems: {\n        title: 'Systems',\n        to: '/systems/'\n    },\n    inventoryDetail: {\n        title: 'Inventory detail',\n        to: '/systems/:inventoryId'\n    },\n    advisoryDetail: {\n        title: 'Advisory detail',\n        to: '/advisories/:advisoryId'\n    },\n    advisoryDetailSystem: {\n        title: '',\n        to: '/advisories/:advisoryId/:inventoryId'\n    },\n    register: {\n        title: '',\n        to: '/register'\n    },\n    packages: {\n        title: 'Packages',\n        to: '/packages'\n    },\n    packageDetail: {\n        title: 'Package detail',\n        to: '/packages/:packageName'\n    },\n    packageDetailSystem: {\n        title: '',\n        to: '/packages/:packageName/:inventoryId'\n    }\n};\n\nexport const Routes = (props) => {\n    const [hasPatchAccess, setPatchAccess] = useState(true);\n\n    React.useEffect(() => {\n        const systems = fetchSystems({ limit: 1 });\n        systems.then((res) => {\n            if (res.meta.total_items === 0) {\n                props.childProps.history.replace(paths.register.to);\n            }\n\n        }).catch(err => err.status === 401 && setPatchAccess(false));\n    }, []);\n\n    const path = props.childProps.location.pathname;\n\n    return hasPatchAccess && (\n        // I recommend discussing with UX some nice loading placeholder\n        <Suspense fallback={Fragment}>\n            <Switch>\n                <Redirect\n                    from={paths.advisoryDetailSystem.to}\n                    to={paths.inventoryDetail.to}\n                />\n                <Redirect\n                    from={paths.packageDetailSystem.to}\n                    to={paths.inventoryDetail.to}\n                />\n                <Route\n                    path={paths.inventoryDetail.to}\n                    component={InventoryPage}\n                />\n                <Route exact path={paths.systems.to} component={Systems} />\n                <Route\n                    exact\n                    path={paths.advisoryDetail.to}\n                    component={AdvisoryPage}\n                />\n                <Route\n                    exact\n                    path={paths.advisories.to}\n                    component={Advisories}\n                />\n                <Route\n                    exact\n                    path={paths.packages.to}\n                    component={PackagsPage}\n                />\n                <Route\n                    exact\n                    path={paths.register.to}\n                    component={RegisterPage}\n                />\n                <Route\n                    exact\n                    path={paths.packageDetail.to}\n                    component={PackageDetail}\n                />\n\n                <Route\n                    render={() =>\n                        some(paths, p => p.to === path) || (\n                            <Redirect to={paths.advisories.to} />\n                        )\n                    }\n                />\n            </Switch>\n        </Suspense>\n    ) || <NoAccess /> ;\n};\n\nRoutes.propTypes = {\n    childProps: PropTypes.shape({\n        location: PropTypes.shape({\n            pathname: PropTypes.string\n        }),\n        history: PropTypes.any\n    })\n};\n","import {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\n\nfunction getLoader() {\n    return (\n        (insights.experimental && insights.experimental.loadRemediations) ||\n        insights.loadRemediations\n    );\n}\n\nconst RemediationModal = ({ data }) => {\n    const dispatch = useDispatch();\n    const [remediations, setRemediations] = React.useState(false);\n    React.useEffect(() => {\n        getLoader()({\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            }\n        }).then(remediations => setRemediations(remediations));\n        return () => setRemediations(false);\n    }, []);\n\n    const handleRemediationSuccess = res => {\n        dispatch(addNotification(res.getNotification()));\n    };\n\n    React.useEffect(() => {\n        remediations &&\n            remediations\n            .openWizard({ ...data, onRemediationCreated: handleRemediationSuccess });\n    }, [remediations]);\n\n    return (\n        <React.Fragment>\n            {remediations.RemediationWizard && (\n                <remediations.RemediationWizard />\n            )}\n        </React.Fragment>\n    );\n};\n\nRemediationModal.propTypes = {\n    data: propTypes.object\n};\n\nRemediationModal.defaultProps = {\n    onRemediationCreated: f => f\n};\n\nexport default RemediationModal;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { Flex, FlexItem } from '@patternfly/react-core';\n\nconst AdvisoryType = ({ type }) => {\n    const advisoryType =\n        advisoryTypes.find(item => item.value === type) || advisoryTypes[2];\n    return (\n        <React.Fragment>\n            <Flex>\n                <FlexItem spacer={{ default: 'spacerSm' }}>{advisoryType.icon}</FlexItem>\n                <FlexItem spacer={{ default: 'spacerSm' }}>{advisoryType.label}</FlexItem>\n            </Flex>\n        </React.Fragment>\n    );\n};\n\nAdvisoryType.propTypes = {\n    type: PropTypes.number\n};\n\nexport default AdvisoryType;\n","import {\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport React from 'react';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nexport const EmptyAdvisoryList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingAdvisories)}\n        </Title>\n    </EmptyState>\n);\n\nexport const EmptyPackagesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingPackages)}\n        </Title>\n    </EmptyState>\n);\n\nexport const EmptyCvesList = () => (\n    <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {intl.formatMessage(messages.statesNoMatchingCve)}\n        </Title>\n    </EmptyState>\n);\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport './Label.scss';\n\nconst Label = ({ children }) => {\n    return <span className={'patchman-label'}>{children}</span>;\n};\n\nLabel.propTypes = {\n    children: propTypes.any\n};\n\nexport default Label;\n","import React from 'react';\nimport { Text, TextContent, TextVariants, TextList,\n    TextListVariants, TextListItem, TextListItemVariants } from '@patternfly/react-core';\nimport Label from './Label';\nimport { handlePatchLink, truncate, getSeverityById } from '../../Utilities/Helpers';\nimport { entityTypes } from '../../Utilities/constants';\nimport ExternalLink from './ExternalLink';\nimport propTypes from 'prop-types';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nexport const DescriptionWithLink = ({ row }) =>  {\n    const severityObject = getSeverityById(row.attributes.severity);\n    return (\n        <TextContent>\n            {\n                row.attributes.cve_count > 0 &&\n                (<TextList component={TextListVariants.dl} style ={{ '--pf-c-content--dl--RowGap': '0.5rem' }}>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsSeverity)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        <SecurityIcon size=\"sm\" color = {severityObject.color}/>  {severityObject.label}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dt}>\n                        {intl.formatMessage(messages.labelsCves)}\n                    </TextListItem>\n                    <TextListItem component={TextListItemVariants.dd}>\n                        {row.attributes.cve_count}\n                    </TextListItem>\n                </TextList>)}\n            <Label>{intl.formatMessage(messages.labelsDescription)}</Label>\n            <Text component={TextVariants.p} style={{ whiteSpace: 'pre-line' }}>\n                {truncate(row.attributes.description.replace(\n                    new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n                    ''\n                ), 570, handlePatchLink(entityTypes.advisories, row.id, intl.formatMessage(messages.linksReadMore)))}\n            </Text>\n            <ExternalLink link={`https://access.redhat.com/errata/${row.id}`}\n                text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n        </TextContent>);\n};\n\nDescriptionWithLink.propTypes = {\n    row: propTypes.shape({\n        id: propTypes.string,\n        attributes: propTypes.object\n    })\n};\n","import { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport AdvisoryType from '../PresentationalComponents/AdvisoryType/AdvisoryType';\nimport { EmptyAdvisoryList, EmptyPackagesList, EmptyCvesList } from '../PresentationalComponents/Snippets/EmptyStates';\nimport { entityTypes, advisorySeverities } from './constants';\nimport { createUpgradableColumn, handlePatchLink } from './Helpers';\nimport { DescriptionWithLink } from '../PresentationalComponents/Snippets/DescriptionWithLink';\nimport { SystemUpToDate } from '../PresentationalComponents/Snippets/SystemUpToDate';\nimport { TextContent, TextListItem, TextListItemVariants } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\nexport const createAdvisoriesRows = (rows, expandedRows, selectedRows) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        row.attributes.synopsis,\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type}\n                                />\n                            )\n                        },\n                        {\n                            title: handlePatchLink(\n                                entityTypes.advisories,\n                                row.id,\n                                row.attributes.applicable_systems\n                            )\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row = {row} />\n                        }\n                    ],\n                    parent: index * 2\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 5 },\n                        title: <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemAdvisoriesRows = (\n    rows,\n    expandedRows,\n    selectedRows,\n    metadata\n) => {\n    if (rows.length !== 0) {\n        return flatMap(rows, (row, index) => {\n            return [\n                {\n                    id: row.id,\n                    isOpen: expandedRows[row.id] === true,\n                    selected: selectedRows[row.id] !== undefined,\n                    cells: [\n                        { title: handlePatchLink(entityTypes.advisories, row.id) },\n                        row.attributes.synopsis,\n                        {\n                            title: (\n                                <AdvisoryType\n                                    type={row.attributes.advisory_type}\n                                />\n                            )\n                        },\n                        { title: processDate(row.attributes.public_date) }\n                    ]\n                },\n                {\n                    cells: [\n                        {\n                            title: <DescriptionWithLink row = {row} />\n                        }\n                    ],\n                    parent: index * 2\n                }\n            ];\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 6 },\n                        title: !metadata.search && (metadata.filter &&  Object.keys(metadata.filter).length === 0)\n                            && <SystemUpToDate />\n                            || <EmptyAdvisoryList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows &&\n        rows.map(({ id, attributes }) => {\n            return {\n                id,\n                key: Math.random().toString() + id,\n                packages_installed: attributes.packages_installed,\n                applicable_advisories: [\n                    attributes.rhea_count || 0,\n                    attributes.rhba_count || 0,\n                    attributes.rhsa_count || 0\n                ],\n                operating_system:\n                    attributes.os_name && `${attributes.os_name} ${attributes.os_major}.${attributes.os_minor}`\n                        || 'No data',\n                selected: selectedRows[id] !== undefined\n            };\n        });\n    return data || [];\n};\n\nexport const createPackageSystemsRows = (rows, selectedRows = {}) => {\n    const data =\n        rows &&\n        rows.map(row => {\n            return {\n                id: row.id,\n                key: Math.random().toString() + row.id,\n                installed_evra: row.installed_evra,\n                available_evra: row.updatable && row.available_evra || row.installed_evra,\n                upgradable: row.updatable,\n                selected: selectedRows[row.id] !== undefined\n            };\n        });\n    return data || [];\n};\n\nexport const createSystemPackagesRows = (rows, selectedRows = {}) => {\n    if (rows.length !== 0) {\n        return rows.map(pkg => {\n            const pkgNEVRA = `${pkg.name}-${pkg.evra}`;\n            const pkgUpdates = pkg.updates || [];\n            const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n\n            return {\n                id: pkgNEVRA,\n                key: pkgNEVRA,\n                selected: selectedRows[pkgNEVRA] !== undefined,\n                disableCheckbox: !latestUpdate,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.evra },\n                    { title: (latestUpdate && latestUpdate.evra) || pkg.evra },\n                    { title: createUpgradableColumn(pkg.updatable) },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createPackagesRows = (rows) => {\n    if (rows.length !== 0) {\n        return rows.map(pkg => {\n            return {\n                id: pkg.name,\n                key: pkg.name,\n                cells: [\n                    { title: handlePatchLink(entityTypes.packages, pkg.name) },\n                    { title: pkg.systems_installed },\n                    { title: pkg.systems_updatable },\n                    { title: pkg.summary }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 7 },\n                        title: <EmptyPackagesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n\nexport const createCvesRows = (rows) => {\n    if (rows.length !== 0) {\n        return rows.map(cve => {\n            const { attributes, id } = cve;\n            const severityObject = advisorySeverities.filter(severity => severity.label === attributes.impact)[0];\n\n            return {\n                id,\n                key: id,\n                cells: [\n                    { title: (\n                        <Button variant=\"link\" component=\"a\" href={`/insights/vulnerability/cves/${attributes.synopsis}`} >\n                            {attributes.synopsis}\n                        </Button>) },\n                    {\n                        title: (<TextContent>\n                            <TextListItem component={TextListItemVariants.dd}>\n                                <SecurityIcon size=\"sm\" color={severityObject.color}/>  {severityObject.label}\n                            </TextListItem>\n                        </TextContent>),\n                        value: severityObject.label\n                    },\n                    { title: parseFloat(attributes.cvss_score).toFixed(1) }\n                ]\n            };\n        });\n    } else {\n        return [\n            {\n                heightAuto: true,\n                cells: [\n                    {\n                        props: { colSpan: 4 },\n                        title: <EmptyCvesList />\n                    }\n                ]\n            }\n        ];\n    }\n};\n","import React from 'react';\nimport { Flex, FlexItem, Tooltip } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nconst AdvisoriesIcon = ({ count, tooltipText, Icon }) =>(\n    <Tooltip content={tooltipText}>\n        <Flex flex={{ default: 'inlineFlex' }}>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n                <Icon/>\n            </FlexItem>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n                {count.toString()}\n            </FlexItem>\n        </Flex>\n    </Tooltip>\n);\n\nAdvisoriesIcon.propTypes = {\n    Icon: propTypes.element,\n    count: propTypes.any,\n    tooltipText: propTypes.string\n};\n\nexport default AdvisoriesIcon;\n","import { CheckIcon, LongArrowAltUpIcon } from '@patternfly/react-icons';\nimport BugIcon from '@patternfly/react-icons/dist/js/icons/bug-icon';\nimport EnhancementIcon from '@patternfly/react-icons/dist/js/icons/enhancement-icon';\nimport SecurityIcon from '@patternfly/react-icons/dist/js/icons/security-icon';\nimport { SortByDirection } from '@patternfly/react-table/dist/js';\nimport findIndex from 'lodash/findIndex';\nimport qs from 'query-string';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport AdvisoriesIcon from '../PresentationalComponents/Snippets/AdvisoriesIcon';\nimport {\n    advisorySeverities,\n    compoundSortValues,\n    filterCategories\n} from './constants';\n\nexport const convertLimitOffset = (limit, offset) => {\n    return [offset / limit + 1, limit];\n};\n\nexport const createSortBy = (header, values, offset) => {\n    if (values) {\n        let [column] = values;\n        let multiple = values.join();\n        let direction =\n            column[0] === '-' ? SortByDirection.desc : SortByDirection.asc;\n        Object.keys(compoundSortValues).forEach(col => {\n            Object.keys(compoundSortValues[col]).forEach(dir => {\n                if (compoundSortValues[col][dir] === multiple) {\n                    column = col;\n                    direction = dir;\n                }\n            });\n        });\n\n        column = column.replace(/^(-|\\+)/, '');\n        const index = findIndex(header, item => item.key === column);\n        let sort = {\n            index: index + offset,\n            direction\n        };\n        return sort;\n    }\n\n    return {};\n};\n\nexport const addOrRemoveItemFromSet = (targetObj, inputArr) => {\n    const inputObj = inputArr.reduce(\n        (obj, item) => ((obj[item.rowId] = item.value || undefined), obj),\n        {}\n    );\n    const result = { ...targetObj, ...inputObj };\n    return result;\n};\n\nexport const getNewSelectedItems = (selectedItems, currentItems) => {\n    let payload = [].concat(selectedItems).map(item=>({ rowId: item.id, value: item.selected }));\n    return addOrRemoveItemFromSet(\n        currentItems,\n        payload\n    );\n};\n\n// for expandable rows only\nexport const getRowIdByIndexExpandable = (arrayOfObjects, index) => {\n    return arrayOfObjects[index / 2].id;\n};\n\nexport const getOffsetFromPageLimit = (page, limit) => {\n    return page * limit - limit;\n};\n\nexport const getLimitFromPageSize = limit => {\n    return limit;\n};\n\nexport function truncate(str, max, end) {\n    return str.length > max ? (\n        <React.Fragment>\n            {str.substr(0, max - 1)}\n            ...&nbsp;{end}\n        </React.Fragment>\n    ) : str;\n}\n\nexport function createAdvisoriesIcons([rhea, rhba, rhsa]) {\n    return (\n        <div>\n            {[rhea, rhba, rhsa].every(item => item === 0) &&\n                'No applicable advisories'}\n            {rhsa !== 0 && (<AdvisoriesIcon tooltipText={'Security advisories'} count = { rhsa } Icon = { SecurityIcon} />)}\n            {rhba !== 0 && (<AdvisoriesIcon tooltipText={'Bug fixes'} count = { rhba } Icon = { BugIcon} />)}\n            {rhea !== 0 && (<AdvisoriesIcon tooltipText={'Enhancements'} count = { rhea } Icon = { EnhancementIcon} />)}\n        </div>\n    );\n}\n\nexport function createUpgradableColumn(value) {\n    return <div style={{\n        display: 'flex',\n        alignItems: 'center'\n    }}>\n        {\n            value && <LongArrowAltUpIcon style={{ color: 'var(--pf-global--palette--blue-400)' }} />\n                || <CheckIcon style={{ color: 'var(--pf-global--success-color--100)' }}/>\n        }\n        {<span style={{ marginLeft: 'var(--pf-global--spacer--sm)' }}>\n            {\n                value && 'Upgradable' || 'Up-to-date'\n            }\n        </span>}\n    </div>;\n}\n\nexport function getSeverityById(id) {\n    return (\n        advisorySeverities.find(item => item.value === id) ||\n        advisorySeverities[0]\n    );\n}\n\nexport function handlePatchLink(type, name, body) {\n    if (location.href.indexOf('inventory') === -1) {\n        return (\n            <Link to={`/${type}/${name}`}>\n                {body === undefined ? name : body}\n            </Link>\n        );\n    } else {\n        return (\n            <a href={`${document.baseURI}insights/patch/${type}/${name}`}>\n                {body || name}\n            </a>\n        );\n    }\n}\n\nexport const arrayFromObj = items =>\n    Object.values(items).filter(value => value);\n\nexport const remediationProvider = (issues, systems, remediationIdentifier) => {\n    issues = [].concat(issues);\n    systems = [].concat(systems);\n    return issues.length && systems.length\n        ? {\n            issues: issues.map(item => ({\n                id: `${remediationIdentifier}:${item}`,\n                description: item\n            })),\n            systems\n        }\n        : false;\n};\n\nexport const getFilterValue = (category, key) => {\n    const filterCategory = filterCategories[category];\n    if (filterCategory) {\n        const filterOption = filterCategory.values.find(\n            item => item.value === key\n        );\n        return filterOption || { apiValue: key };\n    }\n};\n\nexport const encodeParams = (parameters, shouldTranslateKeys) => {\n    const flattenFilters = filter => {\n        let result = {};\n        filter &&\n            Object.entries(filter).forEach(item => {\n                let [key, value] = item;\n                value = shouldTranslateKeys && getFilterValue(key, value).apiValue || value;\n                const operator = [].concat(value).length > 1 ? 'in:' : '';\n                result = {\n                    ...result,\n                    [`filter[${key}]`]: `${operator}${value.toString()}`\n                };\n            });\n        return result;\n    };\n\n    let { filter, ...allParams } = parameters;\n    allParams = { ...allParams, ...flattenFilters(filter) };\n    let params = [];\n    Object.keys(allParams).forEach(key => {\n        const argKey = encodeURIComponent(key);\n        const argValue = encodeURIComponent(allParams[key]);\n\n        if (!['', undefined, null].some(value => [argValue, key].includes(value))) {\n            if (!['selectedTags', 'systemProfile'].includes(key)) {\n                params.push(argKey.concat('=').concat(argValue));\n            } else if (key === 'selectedTags') {\n                params.push.apply(params, allParams[key]);\n            } else {\n                params.push(allParams[key]);\n            }\n        }\n    });\n\n    return '?'.concat(params.join('&'));\n};\n\nexport const encodeApiParams = parameters => {\n    return encodeParams(parameters, true);\n};\n\nexport const encodeURLParams = parameters => {\n    delete parameters.id;\n    let urlParams = { ...parameters };\n    delete urlParams.systemProfile;\n    delete urlParams.selectedTags;\n    return encodeParams(urlParams, false);\n};\n\nexport const decomposeFilterValue = filterValue => {\n    if (filterValue.startsWith('in:')) {\n        const values = filterValue.slice(3);\n        return values.split(',');\n    }\n\n    return filterValue;\n};\n\nexport const decodeQueryparams = queryString => {\n    const parsed = qs.parse(queryString);\n    const res = {};\n    Object.keys(parsed).forEach(key => {\n        if (!key.startsWith('filter[system_profile]')) {\n            const value = parsed[key];\n            const bracketIndex = key.search(/\\[.*\\]/);\n            if (bracketIndex > 0) {\n                const objParent = key.slice(0, bracketIndex);\n                const objKey = key.slice(bracketIndex + 1, -1);\n                res[objParent] = {\n                    ...res[objParent],\n                    [objKey]: decomposeFilterValue(value)\n                };\n            } else {\n                res[key] = value;\n            }\n        }\n    });\n    return res;\n};\n\nexport const buildFilterChips = (filters, search) => {\n\n    let filterConfig = [];\n    const processFilters = () => {\n        let categories = Object.keys(filters).filter(\n            item =>\n                filters[item] !== '' && [].concat(filters[item]).length !== 0\n        );\n        filterConfig = filterConfig.concat(\n            categories.map(category => {\n                const { label, values } = filterCategories[category];\n                return {\n                    category: label,\n                    id: category,\n                    chips: [].concat(filters[category]).map(filterValue => {\n                        const match = values.find(\n                            item =>\n                                item.value.toString() === filterValue.toString()\n                        );\n                        return {\n                            name: match.label,\n                            value: filterValue,\n                            id: match.value\n                        };\n                    })\n                };\n            })\n        );\n    };\n\n    const processSearch = () => {\n        filterConfig = filterConfig.concat([\n            {\n                category: 'Search',\n                id: 'search',\n                chips: [\n                    {\n                        name: search,\n                        value: search\n                    }\n                ]\n            }\n        ]);\n    };\n\n    filters && processFilters();\n    search && processSearch();\n\n    return filterConfig;\n};\n\nexport const changeListParams = (oldParams, newParams) => {\n    const newState = { ...oldParams, ...newParams };\n    const offsetResetParams = ['filter', 'search', 'limit', 'selectedTags'];\n    if (offsetResetParams.some(item => newParams.hasOwnProperty(item))) {\n        newState.offset = 0;\n    }\n\n    if (newParams.hasOwnProperty('filter')) {\n        newState.filter = { ...oldParams.filter, ...newParams.filter };\n    }\n\n    if (newState.hasOwnProperty('tags')) {\n        newState && delete newState.tags;\n    }\n\n    return newState;\n};\n\nexport function subtractDate(days) {\n    const date = new Date();\n    date.setDate(date.getDate() - days);\n    return date.toISOString();\n}\n\nexport function preserveNewlines(input) {\n    return input && input.replace(\n        new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n        ''\n    );\n}\n\nexport function sortCves(cves, index, direction) {\n\n    const sortedCves = cves.sort(\n        ({ cells: aCells }, { cells: bCells }) => {\n            const aCell = aCells[index].value && aCells[index].value || aCells[index].title;\n            const bCell = bCells[index].value && bCells[index].value || bCells[index].title;\n\n            const stringA = aCell.toString().toUpperCase();\n            const stringB = bCell.toString().toUpperCase();\n\n            return stringA.localeCompare(stringB);\n        }\n    );\n\n    return {\n        sortBy: { index, direction },\n        sortedCves: direction === SortByDirection.asc ? sortedCves : sortedCves.reverse()\n    };\n\n}\n","import { SortByDirection } from '@patternfly/react-table/dist/js';\nimport isDeepEqualReact from 'fast-deep-equal/react';\nimport React from 'react';\nimport { compoundSortValues } from './constants';\nimport { convertLimitOffset, getLimitFromPageSize, getOffsetFromPageLimit } from './Helpers';\n\nexport const useSetPage = (limit, callback) => {\n    const onSetPage = React.useCallback((_, page) =>\n        callback({ offset: getOffsetFromPageLimit(page, limit) })\n    );\n    return onSetPage;\n};\n\nexport const useHandleRefresh = (metadata, callback) => {\n    const handleRefresh = React.useCallback(({ page, per_page: perPage }) => {\n        const offset = getOffsetFromPageLimit(page, perPage);\n        const limit = getLimitFromPageSize(perPage);\n        (metadata.offset !== offset || metadata.limit !== limit) &&\n            callback({\n                ...(metadata.offset !== offset && { offset }),\n                ...(metadata.limit !== limit && { limit })\n            });\n    });\n    return handleRefresh;\n};\n\nexport const usePagePerPage = (limit, offset) => {\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(limit, offset),\n        [limit, offset]\n    );\n    return [page, perPage];\n};\n\nexport const usePerPageSelect = callback => {\n    const onPerPageSelect = React.useCallback((_, perPage) =>\n        callback({ limit: getLimitFromPageSize(perPage), offset: 0 })\n    );\n    return onPerPageSelect;\n};\n\nexport const useSortColumn = (columns, callback, offset = 0) => {\n    const onSort = React.useCallback((_, index, direction) => {\n        let columnName = columns[index - offset].key;\n        const compoundKey = compoundSortValues[columnName];\n        if (compoundKey) {\n            columnName = compoundKey[direction];\n        }\n        else if (direction === SortByDirection.desc) {\n            columnName = '-' + columnName;\n        }\n\n        callback({ sort: columnName });\n    });\n    return onSort;\n};\n\nexport const useRemoveFilter = (filters, callback) => {\n    const removeFilter = React.useCallback((event, selected) => {\n        let newParams = { filter: {} };\n        selected.forEach(selectedItem => {\n            let { id: categoryId, chips } = selectedItem;\n            if (categoryId !== 'search') {\n                let activeFilter = filters[categoryId];\n                const toRemove = chips.map(item => item.id.toString());\n                if (Array.isArray(activeFilter)) {\n                    newParams.filter[categoryId] = activeFilter.filter(\n                        item => !toRemove.includes(item.toString())\n                    );\n                } else {\n                    newParams.filter[categoryId] = '';\n                }\n            } else {\n                newParams.search = '';\n            }\n        });\n        callback({ ...newParams });\n    });\n    return removeFilter;\n};\n\nexport const useOnSelect = (rawData, selectedRows, fetchAllData, selectRows,\n    constructFilename = undefined, transformKey = undefined) =>{\n    const constructKey = (row) => {\n        if (transformKey) {\n            return transformKey(row);\n        }\n        else {\n            return row.id && row.id || row.name;\n        }\n    };\n\n    const onSelect =  React.useCallback((event, selected, rowId) => {\n        const createSelectedRow = (rawData, toSelect = []) => {\n            rawData.forEach((row)=>{\n                toSelect.push(\n                    {\n                        id: constructKey(row),\n                        selected: constructFilename && constructFilename(row) || row.id\n                    }\n                );});\n\n            return toSelect;\n        };\n\n        switch (event) {\n            case 'none': {\n                const toSelect = [];\n                Object.keys(selectedRows).forEach(id=>{\n                    toSelect.push(\n                        {\n                            id,\n                            selected: false\n                        }\n                    );\n                });\n                selectRows(toSelect);\n                break;\n            }\n\n            case 'page': {\n                selectRows(createSelectedRow(rawData));\n                break;\n            }\n\n            case 'all': {\n                const fetchCallback = ({ data }) => {\n                    selectRows(createSelectedRow(data));\n                };\n\n                fetchAllData().then(fetchCallback);\n\n                break;\n            }\n\n            default: {\n                selectRows([{\n                    id: constructKey(rawData[rowId]),\n                    selected: selected && (constructFilename && constructFilename(rawData[rowId]) || true)\n                }]);\n            }\n\n        }}\n    );\n\n    return onSelect;\n};\n\nexport const setPageTitle = (title) => {\n    React.useEffect(() => {\n        if (title) {\n            document.title = `${title} - Patch | Red Hat Insights`;\n        }\n    }, [title]);\n};\n\nexport const useDeepCompareEffect = (effect, deps) => {\n    const ref = React.useRef(undefined);\n\n    if (!ref.current || !isDeepEqualReact(deps, ref.current)) {\n        ref.current = deps;\n    }\n\n    React.useEffect(effect, ref.current);\n};\n","import { createIntl, createIntlCache } from 'react-intl';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\n\nexport const intl = createIntl({\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    locale\n}, cache);\n\nexport const intlSettings = { locale };\n","import {\n    authInterceptor,\n    responseDataInterceptor\n} from '@redhat-cloud-services/frontend-components-utilities/files/interceptors';\nimport axios from 'axios';\nimport { ReadOnlyNotification } from './constants';\nconst axiosInstance = axios.create();\n\nexport async function  accessCheckInterceptor (config)  {\n\n    const userPermissions = await insights.chrome.getUserPermissions();\n    const inventoryPermissionList = ['inventory:*:*', 'inventory:*:read', 'inventory:hosts:read'];\n\n    const hasInventoryAccess = userPermissions.some((access) => inventoryPermissionList.includes(access?.permission));\n\n    if (!hasInventoryAccess) {\n        throw new axios.Cancel('Operation canceled. User does not have access to Inventory');\n    }\n\n    return config;\n}\n\nexport function errorInterceptor(err) {\n\n    if (!axios.isCancel(err)) {\n\n        const { response, isAxiosError } = { ...err };\n\n        if (response && isAxiosError) {\n            const { status, statusText, data } = response;\n\n            if (!status) {\n                throw err;\n            } else {\n                const genericError = {\n                    title:\n                            'There was an error getting data'\n                };\n\n                const result = { ...genericError, detail: data.error && data.error || statusText, status };\n\n                throw result;\n            }\n        }\n\n        throw err;\n    }\n}\n\nexport function readOnlyInterceptor(error) {\n    if (error.response && error.response.status === 503) {\n        const data = ReadOnlyNotification;\n        throw data;\n    }\n\n    throw error;\n}\n\naxiosInstance.interceptors.request.use(accessCheckInterceptor);\naxiosInstance.interceptors.request.use(authInterceptor);\naxiosInstance.interceptors.response.use(responseDataInterceptor);\naxiosInstance.interceptors.response.use(null, readOnlyInterceptor);\naxiosInstance.interceptors.response.use(null, errorInterceptor);\n\nexport default axiosInstance;\n","import { encodeApiParams } from './Helpers';\nimport axios from './axiosInterceptors';\n\nexport function createApiCall(\n    endpoint,\n    method,\n    parameters = undefined,\n    data = undefined\n) {\n    if (parameters && method === 'get') {\n        endpoint = endpoint.concat(encodeApiParams(parameters));\n    }\n\n    let result = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        axios({\n            method,\n            url: '/api/patch/v1' + endpoint,\n            withCredentials: true,\n            data\n        })\n    );\n\n    return result;\n}\n\nexport const fetchApplicableAdvisoriesApi = params => {\n    return createApiCall('/advisories', 'get', params);\n};\n\nexport const fetchApplicableSystemAdvisoriesApi = params => {\n    let { id, ...allParams } = params;\n    return createApiCall(`/systems/${id}/advisories`, 'get', allParams);\n};\n\nexport const fetchSystems = params => {\n    return createApiCall('/systems', 'get', params);\n};\n\nexport const fetchAdvisoryDetailsApi = params => {\n    return createApiCall(`/advisories/${params.advisoryName}`, 'get');\n};\n\nexport const fetchPackageDetailsApi = params => {\n    return createApiCall(`/packages/${params.packageName}`, 'get');\n};\n\nexport const fetchApplicablePackagesApi = params => {\n    let { id, ...allParams } = params;\n    return createApiCall(`/systems/${id}/packages`, 'get', allParams);\n};\n\nexport const fetchAdvisorySystems = params => {\n    const { id, ...args } = params;\n    return createApiCall(`/advisories/${id}/systems`, 'get', args);\n};\n\nexport const fetchPackageSystems = params => {\n    const { id, ...args } = params;\n    return createApiCall(`/packages/${id}/systems`, 'get', args);\n};\n\nexport const fetchPackagesList = params => {\n    return createApiCall('/packages', 'get', params);\n};\n\nexport const fetchCvesInfo = async ({ cveIds }) => {\n\n    const result = await fetch(`/api/vulnerability/v1/vulnerabilities/cves?limit=${cveIds && cveIds.length}`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ cve_list: cveIds })\n    }).then(res => res.json()).then(data => data);\n\n    return result;\n};\n\nexport const exportAdvisoriesCSV = params => {\n    let endpoint = '/export/advisories';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'text/csv' })\n    }).then(res => res.text());\n};\n\nexport const exportAdvisoriesJSON = params => {\n    let endpoint = '/export/advisories';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'application/json' })\n    }).then(res => res.json());\n};\n\nexport const exportSystemsCSV = params => {\n    let endpoint = '/export/systems';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'text/csv' })\n    }).then(res => res.text());\n};\n\nexport const exportSystemsJSON = params => {\n    let endpoint = '/export/systems';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'application/json' })\n    }).then(res => res.json());\n};\n\nexport const exportPackagesCSV = params => {\n    let endpoint = '/export/packages';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'text/csv' })\n    }).then(res => res.text());\n};\n\nexport const exportPackagesJSON = params => {\n    let endpoint = '/export/packages';\n    endpoint = endpoint.concat(encodeApiParams(params));\n    return fetch('/api/patch/v1' + endpoint, {\n        method: 'get',\n        credentials: 'include',\n        headers: new Headers({ accept: 'application/json' })\n    }).then(res => res.json());\n};\n","import BugIcon from '@patternfly/react-icons/dist/js/icons/bug-icon';\nimport EnhancementIcon from '@patternfly/react-icons/dist/js/icons/enhancement-icon';\nimport SecurityIcon from '@patternfly/react-icons/dist/js/icons/security-icon';\nimport React from 'react';\nimport { subtractDate } from './Helpers';\n\nexport const STATUS_REJECTED = 'rejected';\nexport const STATUS_LOADING = 'loading';\nexport const STATUS_RESOLVED = 'resolved';\n\nexport const compoundSortValues = {\n    operating_system: {\n        asc: 'os_name,os_major,os_minor',\n        desc: '-os_name,-os_major,-os_minor'\n    },\n    applicable_advisories: {\n        asc: 'rhsa_count,rhba_count,rhea_count',\n        desc: '-rhsa_count,-rhba_count,-rhea_count'\n    }\n};\n\n// messy check because of frontend-components tests\nexport const ENABLE_PACKAGES = window?.insights?.chrome?.isBeta && insights?.chrome?.isBeta();\nexport const storeListDefaults = {\n    rows: [],\n    metadata: {\n        limit: 25,\n        offset: 0,\n        total_items: 0\n    },\n    expandedRows: {},\n    selectedRows: {},\n    queryParams: {},\n    error: {}\n};\n\nexport const publicDateOptions = [\n    { apiValue: '', label: 'All', value: 'all' },\n    {\n        apiValue: `gt:${subtractDate(7)}`,\n        label: 'Last 7 days',\n        value: 'last7'\n    },\n    {\n        apiValue: `gt:${subtractDate(30)}`,\n        label: 'Last 30 days',\n        value: 'last30'\n    },\n    {\n        apiValue: `gt:${subtractDate(90)}`,\n        label: 'Last 90 days',\n        value: 'last90'\n    },\n    {\n        apiValue: `gt:${subtractDate(365)}`,\n        label: 'Last year',\n        value: 'lastYear'\n    },\n    {\n        apiValue: `lt:${subtractDate(365)}`,\n        label: 'More than 1 year ago',\n        value: 'moreThanYear'\n    }\n];\n\nexport const advisorySeverities = [\n    {\n        value: 0,\n        label: 'N/A',\n        color: 'var(--pf-global--Color--200)'\n    },\n    {\n        value: 1,\n        label: 'Low',\n        color: 'var(--pf-global--Color--200)',\n        text:\n            'This rating is given to all other issues that have a security impact. These are the types of vulnerabilities' +\n            ' that are believed to require unlikely circumstances to be able to be exploited, or where a successful exploit' +\n            ' would give minimal consequences.'\n    },\n    {\n        value: 2,\n        label: 'Moderate',\n        color: 'var(--pf-global--warning-color--100)',\n        text:\n            'This rating is given to flaws that may be more difficult to exploit but could still lead to some' +\n            ' compromise of the confidentiality, integrity, or availability of resources, under certain circumstances.' +\n            ' These are the types of vulnerabilities that could have had a Critical impact or Important impact' +\n            ' but are less easily exploited based on a technical evaluation of the flaw, or affect unlikely' +\n            ' configurations.'\n    },\n    {\n        value: 3,\n        label: 'Important',\n        color: '#ec7a08',\n        text:\n            'This rating is given to flaws that can easily compromise the confidentiality, integrity, or availability' +\n            ' of resources. These are the types of vulnerabilities that allow local users to gain privileges, allow' +\n            ' unauthenticated remote users to view resources that should otherwise be protected by authentication,' +\n            ' allow authenticated remote users to execute arbitrary code, or allow remote users to cause a denial' +\n            ' of service.'\n    },\n    {\n        value: 4,\n        label: 'Critical',\n        color: 'var(--pf-global--danger-color--100)',\n        text:\n            'This rating is given to flaws that could be easily exploited by a remote unauthenticated attacker' +\n            ' and lead to system compromise (arbitrary code execution) without requiring user interaction.' +\n            ' These are the types of vulnerabilities that can be exploited by worms. Flaws that require an authenticated' +\n            ' remote user, a local user, or an unlikely configuration are not classed as Critical impact.'\n    }\n];\n\nexport const advisoryTypes = [\n    {\n        value: 3,\n        label: 'Security',\n        icon: <SecurityIcon />\n    },\n    {\n        value: 2,\n        label: 'Bugfix',\n        icon: <BugIcon />\n    },\n    {\n        value: 1,\n        label: 'Enhancement',\n        icon: <EnhancementIcon />\n    }\n];\n\nexport const updatableTypes = [\n    {\n        value: '',\n        label: 'All'\n    },\n    {\n        value: true,\n        label: 'Upgradable'\n    }\n];\n\nexport const packagesListUpdatableTypes = [\n    {\n        value: '',\n        label: 'All'\n    },\n    {\n        value: 'gt:0',\n        label: 'Upgradable'\n    }\n];\n\nexport const filterCategories = {\n    advisory_type: {\n        label: 'Advisory type',\n        values: advisoryTypes\n    },\n    public_date: {\n        label: 'Public date',\n        values: publicDateOptions\n    },\n    updatable: {\n        label: 'Status',\n        values: updatableTypes\n    },\n    systems_updatable: {\n        label: 'Status',\n        values: packagesListUpdatableTypes\n    }\n};\n\nexport const entityTypes = {\n    advisories: 'advisories',\n    packages: 'packages'\n};\n\nexport const ReadOnlyNotification = {\n    title: 'title',\n    detail: 'message'\n};\n\nexport const remediationIdentifiers = {\n    package: 'patch-package',\n    advisory: 'patch-advisory'\n};\n","function getBaseName(pathname) {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}/${pathName[1] || ''}`;\n}\n\nexport default getBaseName;\n","export const FETCH_APPLICABLE_ADVISORIES = 'FETCH_APPLICABLE_ADVISORIES';\nexport const EXPAND_ADVISORY_ROW = 'EXPAND_ADVISORY_ROW';\nexport const SELECT_ADVISORY_ROW = 'SELECT_ADVISORY_ROW';\nexport const CHANGE_ADVISORY_LIST_PARAMS = 'CHANGE_ADVISORY_LIST_PARAMS';\nexport const FETCH_SYSTEMS = 'FETCH_SYSTEMS';\nexport const CHANGE_SYSTEMS_LIST_PARAMS = 'CHANGE_SYSTEMS_LIST_PARAMS';\nexport const CHANGE_SYSTEM_ADVISORY_LIST_PARAMS =\n    'CHANGE_SYSTEM_SYSTEMS_LIST_PARAMS';\nexport const EXPAND_SYSTEM_ADVISORY_ROW = 'EXPAND_SYSTEM_ADVISORY_ROW';\nexport const FETCH_APPLICABLE_SYSTEM_ADVISORIES =\n    'FETCH_APPLICABLE_SYSTEM_ADVISORIES';\nexport const SELECT_SYSTEM_ADVISORY_ROW = 'SELECT_SYSTEM_ADVISORY_ROW';\nexport const CLEAR_SYSTEM_ADVISORIES = 'CLEAR_SYSTEM_ADVISORIES';\nexport const FETCH_ADVISORY_DETAILS = 'FETCH_ADVISORY_DETAILS';\nexport const FETCH_AFFECTED_SYSTEMS = 'FETCH_AFFECTED_SYSTEMS';\nexport const CHANGE_AFFECTED_SYSTEMS_PARAMS = 'CHANGE_AFFECTED_SYSTEMS_PARAMS';\nexport const CLEAR_AFFECTED_SYSTEMS = 'CLEAR_AFFECTED_SYSTEMS';\nexport const CLEAR_ADVISORY_DETAILS = 'CLEAR_ADVISORY_DETAILS';\nexport const CHANGE_SYSTEM_PACKAGES_LIST_PARAMS =\n    'CHANGE_SYSTEM_PACKAGES_LIST_PARAMS';\nexport const FETCH_APPLICABLE_SYSTEM_PACKAGES =\n    'FETCH_APPLICABLE_SYSTEM_PACKAGES';\nexport const SELECT_SYSTEM_PACKAGES_ROW = 'SELECT_SYSTEM_PACKAGES_ROW';\nexport const CLEAR_SYSTEM_PACKAGES = 'CLEAR_SYSTEM_PACKAGES';\nexport const TRIGGER_GLOBAL_FILTER = 'TRIGGER_GLOBAL_FILTER';\nexport const FETCH_PACKAGES_LIST = 'FETCH_PACKAGES_LIST';\nexport const FETCH_PACKAGE_DETAILS = 'FETCH_PACKAGE_DETAILS';\nexport const CLEAR_PACKAGE_DETAILS = 'CLEAR_PACKAGE_DETAILS';\nexport const CHANGE_PACKAGES_LIST_PARAMS = 'CHANGE_PACKAGES_LIST_PARAMS';\nexport const FETCH_PACKAGE_SYSTEMS = 'FETCH_PACKAGE_SYSTEMS';\nexport const CLEAR_PACKAGE_SYSTEMS = 'CLEAR_PACKAGE_SYSTEMS';\nexport const CHANGE_PACKAGE_SYSTEMS_PARAMS = 'CHANGE_PACKAGE_SYSTEMS_PARAMS';\nexport const FETCH_CVES_INFO = 'FETCH_CVES_INFO';\nexport const CHANGE_CVES_STORE_PARAMS = 'CHANGE_CVES_STORE_PARAMS';\n","import { fetchAdvisoryDetailsApi, fetchAdvisorySystems, fetchApplicableAdvisoriesApi,\n    fetchApplicablePackagesApi, fetchApplicableSystemAdvisoriesApi, fetchPackageDetailsApi,\n    fetchPackagesList, fetchPackageSystems, fetchSystems, fetchCvesInfo } from '../../Utilities/api';\nimport * as ActionTypes from '../ActionTypes';\n\nexport const fetchApplicableAdvisories = params => ({\n    type: ActionTypes.FETCH_APPLICABLE_ADVISORIES,\n    payload: new Promise(resolve => {\n        resolve(fetchApplicableAdvisoriesApi(params));\n    }).then(result => result)\n});\n\nexport const fetchApplicableSystemAdvisories = params => ({\n    type: ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES,\n    payload: new Promise(resolve => {\n        resolve(fetchApplicableSystemAdvisoriesApi(params));\n    }).then(result => result),\n    meta: {\n        noError: true // Handle errors manually!\n    }\n});\n\nexport const fetchAvisoryDetails = params => ({\n    type: ActionTypes.FETCH_ADVISORY_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(fetchAdvisoryDetailsApi(params));\n    }).then(result => result)\n});\n\nexport const fetchPackageDetails = params => ({\n    type: ActionTypes.FETCH_PACKAGE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(fetchPackageDetailsApi(params));\n    }).then(result => result)\n});\n\nexport const fetchSystemsAction = params => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(fetchSystems(params));\n    }).then(result => result)\n});\n\nexport const changeAdvisoryListParams = params => ({\n    type: ActionTypes.CHANGE_ADVISORY_LIST_PARAMS,\n    payload: params\n});\n\nexport const changeSystemAdvisoryListParams = params => ({\n    type: ActionTypes.CHANGE_SYSTEM_ADVISORY_LIST_PARAMS,\n    payload: params\n});\n\nexport const changeSystemsListParams = params => ({\n    type: ActionTypes.CHANGE_SYSTEMS_LIST_PARAMS,\n    payload: params\n});\n\nexport const changeAdvisorySystemsParams = params => ({\n    type: ActionTypes.CHANGE_AFFECTED_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const expandAdvisoryRow = rowState => ({\n    type: ActionTypes.EXPAND_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const expandSystemAdvisoryRow = rowState => ({\n    type: ActionTypes.EXPAND_SYSTEM_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const selectAdvisoryRow = rowState => ({\n    type: ActionTypes.SELECT_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const selectSystemAdvisoryRow = rowState => ({\n    type: ActionTypes.SELECT_SYSTEM_ADVISORY_ROW,\n    payload: rowState\n});\n\nexport const clearSystemAdvisoriesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_ADVISORIES,\n    payload: []\n});\n\nexport const clearSystemPackagesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_PACKAGES,\n    payload: []\n});\n\nexport const clearAdvisorySystemsStore = () => ({\n    type: ActionTypes.CLEAR_AFFECTED_SYSTEMS,\n    payload: []\n});\n\nexport const clearAdvisoryDetailStore = () => ({\n    type: ActionTypes.CLEAR_ADVISORY_DETAILS,\n    payload: []\n});\n\nexport const clearPackageDetailStore = () => ({\n    type: ActionTypes.CLEAR_ADVISORY_DETAILS,\n    payload: []\n});\n\nexport const fetchAdvisorySystemsAction = params => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(fetchAdvisorySystems(params));\n    }).then(result => result)\n});\n\nexport const fetchPackageSystemsAction = params => ({\n    type: ActionTypes.FETCH_PACKAGE_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(fetchPackageSystems(params));\n    }).then(result => result)\n});\n\nexport const clearPackageSystemsStore = () => ({\n    type: ActionTypes.CLEAR_PACKAGE_SYSTEMS,\n    payload: []\n});\n\nexport const fetchApplicableSystemPackages = params => ({\n    type: ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES,\n    payload: new Promise(resolve => {\n        resolve(fetchApplicablePackagesApi(params));\n    }).then(result => result)\n});\n\nexport const selectSystemPackagesRow = rowState => ({\n    type: ActionTypes.SELECT_SYSTEM_PACKAGES_ROW,\n    payload: rowState\n});\n\nexport const changeSystemPackagesParams = params => ({\n    type: ActionTypes.CHANGE_SYSTEM_PACKAGES_LIST_PARAMS,\n    payload: params\n});\n\nexport const globalFilter = params => ({\n    type: ActionTypes.TRIGGER_GLOBAL_FILTER,\n    payload: params\n});\n\nexport const fetchPackagesAction = params => ({\n    type: ActionTypes.FETCH_PACKAGES_LIST,\n    payload: new Promise(resolve => {\n        resolve(fetchPackagesList(params));\n    }).then(result => result)\n});\n\nexport const changePackagesListParams = params => ({\n    type: ActionTypes.CHANGE_PACKAGES_LIST_PARAMS,\n    payload: params\n});\n\nexport const changePackageSystemsParams = params => ({\n    type: ActionTypes.CHANGE_PACKAGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const fetchCves = (params) => ({\n    type: ActionTypes.FETCH_CVES_INFO,\n    payload: new Promise(resolve => {\n        resolve(fetchCvesInfo(params));\n    }).then(result => result)\n});\n\nexport const changeCvesListParams = params => ({\n    type: ActionTypes.CHANGE_CVES_STORE_PARAMS,\n    payload: params\n});\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemAdvisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changeSystemAdvisoryListParams, clearSystemAdvisoriesStore, expandSystemAdvisoryRow,\n    fetchApplicableSystemAdvisories, selectSystemAdvisoryRow } from '../../store/Actions/Actions';\nimport { fetchApplicableSystemAdvisoriesApi } from '../../Utilities/api';\nimport { STATUS_REJECTED, remediationIdentifiers } from '../../Utilities/constants';\nimport { createSystemAdvisoriesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, decodeQueryparams, encodeURLParams,\n    getRowIdByIndexExpandable, remediationProvider } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn, useOnSelect } from '../../Utilities/Hooks';\n\nconst SystemAdvisories = ({ history, handleNoSystemData }) => {\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const advisories = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.rows\n    );\n\n    const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n\n    const expandedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.status\n    );\n    const error = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.error\n    );\n    const rows = React.useMemo(\n        () =>\n            createSystemAdvisoriesRows(advisories, expandedRows, selectedRows, metadata),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        return () => dispatch(clearSystemAdvisoriesStore());\n    }, []);\n\n    React.useEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(\n                fetchApplicableSystemAdvisories({ id: entity.id, ...queryParams })\n            );\n        }\n    }, [queryParams]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandSystemAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            selectSystemAdvisoryRow(toSelect)\n        );\n    };\n\n    const fetchAllData = () =>\n        fetchApplicableSystemAdvisoriesApi({ id: entity.id, ...queryParams, limit: -1 });\n\n    const onSelect = useOnSelect(rows, selectedRows, fetchAllData, selectRows, (advisory) => advisory.id);\n\n    const onSort = useSortColumn(systemAdvisoriesColumns, apply, 2);\n    const sortBy = React.useMemo(\n        () => createSortBy(systemAdvisoriesColumns, metadata.sort, 2),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeSystemAdvisoryListParams({ id: entity.id, ...params }));\n    }\n\n    const errorState = error.status === 404 ? handleNoSystemData() : <Unavailable/>;\n\n    if (status === STATUS_REJECTED && error.status !== 404) {\n        dispatch(addNotification({\n            variant: 'danger',\n            title: error.title,\n            description: error.detail\n        }));}\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemAdvisoriesColumns}\n                compact\n                onCollapse={onCollapse}\n                onSelect={(advisories.length && onSelect) || undefined}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                onSort={onSort}\n                sortBy={sortBy}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        entity.id,\n                        remediationIdentifiers.advisory\n                    )\n                }\n                selectedRows={selectedRows}\n                systemId={entity.id}\n                apply={apply}\n                store={{ rows, metadata, status, queryParams }}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-advisories-table'}\n                paginationOUIA={'system-advisories-pagination'}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search),\n                        typeFilter(apply, queryParams.filter),\n                        publishDateFilter(apply, queryParams.filter)\n                    ]\n                }}\n                errorState={errorState}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemAdvisories.propTypes = {\n    history: propTypes.object,\n    handleNoSystemData: propTypes.func\n};\nexport default withRouter(SystemAdvisories);\n","import { Unavailable } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport { SystemUpToDate } from '../../PresentationalComponents/Snippets/SystemUpToDate';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemPackagesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport {\n    changeSystemPackagesParams, clearSystemPackagesStore,\n    fetchApplicableSystemPackages, selectSystemPackagesRow\n} from '../../store/Actions/Actions';\nimport { fetchApplicablePackagesApi } from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED, remediationIdentifiers } from '../../Utilities/constants';\nimport { createSystemPackagesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, remediationProvider } from '../../Utilities/Helpers';\nimport { useOnSelect, usePerPageSelect, useSetPage, useSortColumn } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst SystemPackages = ({ handleNoSystemData }) => {\n    const dispatch = useDispatch();\n    const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n    const packages = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.rows\n    );\n    const queryParams = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.status\n    );\n    const error = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.error\n    );\n    const rows = React.useMemo(\n        () =>\n            createSystemPackagesRows(packages, selectedRows),\n        [packages,  selectedRows]\n    );\n\n    React.useEffect(() => {\n        return () => dispatch(clearSystemPackagesStore());\n    }, []);\n\n    React.useEffect(()=> {\n        dispatch(fetchApplicableSystemPackages({ id: entity.id, ...queryParams }));\n    }, [queryParams]);\n\n    const constructFilename = (pkg) => {\n        const pkgUpdates = pkg.updates || [];\n        const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n        return latestUpdate && `${pkg.name}-${latestUpdate.evra}`;\n    };\n\n    const transformKey = (row) => {\n        return `${row.name}-${row.evra}`;\n    };\n\n    const fetchAllData = () =>\n        fetchApplicablePackagesApi({ id: entity.id, ...queryParams, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        dispatch(selectSystemPackagesRow(toSelect));\n    };\n\n    const onSelect = useOnSelect(packages, selectedRows, fetchAllData, selectRows, constructFilename, transformKey);\n\n    function apply(params) {\n        dispatch(changeSystemPackagesParams({ id: entity.id, ...params }));\n    }\n\n    const onSort = useSortColumn(systemPackagesColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(systemPackagesColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const errorState = error.status === 404 ?  handleNoSystemData() : <Unavailable/>;\n    const emptyState = (status === STATUS_RESOLVED && metadata.total_items === 0\n                            && Object.keys(queryParams).length === 0) && <SystemUpToDate/>;\n\n    if (status === STATUS_REJECTED && error.status !== 404) {\n        dispatch(addNotification({\n            variant: 'danger',\n            title: error.title,\n            description: error.detail\n        }));}\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemPackagesColumns}\n                store={{ rows, metadata, status, queryParams }}\n                onSelect={(packages.length && onSelect) || undefined}\n                selectedRows={selectedRows}\n                compact\n                onSort={onSort}\n                sortBy={sortBy}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        entity.id,\n                        remediationIdentifiers.package\n                    )\n                }\n                apply={apply}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search, intl.formatMessage(messages.labelsFiltersPackagesSearch)),\n                        statusFilter(apply, queryParams.filter)\n                    ]\n                }}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-packages-table'}\n                paginationOUIA={'system-packages-pagination'}\n                errorState={errorState}\n                emptyState={emptyState}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemPackages.propTypes = {\n    handleNoSystemData: propTypes.func\n};\nexport default SystemPackages;\n\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport React from 'react';\nimport SystemAdvisories from '../SystemAdvisories/SystemAdvisories';\nimport { useSelector } from 'react-redux';\nimport SystemPackages from '../SystemPackages/SystemPackages';\nimport './SystemDetail.scss';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { NoSystemData } from '../../PresentationalComponents/Snippets/NoSystemData';\nimport propTypes from 'prop-types';\n\nconst SystemDetail = ({ isInventoryApp }) => {\n    const [activeTabKey, setActiveTabKey] = React.useState(0);\n    const [areTabsHidden, setTabsHidden] = React.useState(false);\n\n    const entity = useSelector(({ entityDetails }) => entityDetails.entity && entityDetails.entity || {});\n    const onTabSelect = (event, id) => {\n        setActiveTabKey(id);\n    };\n\n    const handleNoSystemData = () => {\n        isInventoryApp && setTabsHidden(prevTabsHidden => !prevTabsHidden);\n        return isInventoryApp && null || <NoSystemData />;\n    };\n\n    return !entity.id ? null : (!areTabsHidden && (\n        <Tabs activeKey={activeTabKey} onSelect={onTabSelect} className={'patchTabSelect'} isHidden>\n            <Tab eventKey={0} title={<TabTitleText>{intl.formatMessage(messages.titlesAdvisories)}</TabTitleText>}\n                data-ouia-component-type={`system-advisories-tab`}\n                data-ouia-component-id={`system-advisories-tab`}\n            >\n                <SystemAdvisories handleNoSystemData={handleNoSystemData}/>\n            </Tab>\n            <Tab\n                eventKey={1}\n                title={<TabTitleText>{intl.formatMessage(messages.titlesPackages)}</TabTitleText>}\n                data-ouia-component-type={`system-packages-tab`}\n                data-ouia-component-id={`system-packages-tab`}\n            >\n                <SystemPackages handleNoSystemData={handleNoSystemData}/>\n            </Tab>\n        </Tabs>\n    )  || <NoSystemData/>);\n};\n\nSystemDetail.propTypes = {\n    isInventoryApp: propTypes.bool\n};\nexport default SystemDetail;\n","import React from 'react';\nimport SystemDetail from '../../SmartComponents/SystemDetail/SystemDetail';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const SystemDetailStore = (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITY_FULFILLED':\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Patch',\n                        name: 'patch',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        case 'LOAD_ENTITY_REJECTED':\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Patch',\n                        name: 'patch',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import { addOrRemoveItemFromSet, changeListParams, getNewSelectedItems } from '../../Utilities/Helpers';\nimport { STATUS_LOADING, STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\n\nexport const changeFilters = (state, action) => {\n    state.queryParams = changeListParams(\n        state.queryParams,\n        action.payload\n    );\n\n    return state;\n};\n\nexport const selectRows = (state, action) => {\n    const selectedUpdated = getNewSelectedItems(action.payload, state.selectedRows);\n    state = { ...state, selectedRows: selectedUpdated };\n    return state;\n};\n\nexport const expandRows = (state, action) => {\n    const expandedUpdated = addOrRemoveItemFromSet(\n        state.expandedRows,\n        [].concat(action.payload)\n    );\n    state = { ...state, expandedRows: expandedUpdated };\n    return state;\n};\n\nexport const fetchPending = (state) => {\n    state.error = {};\n    state.status = STATUS_LOADING;\n    return state;\n};\n\nexport const fetchRejected = (state, action) => {\n    state.status = STATUS_REJECTED;\n    state.error = action.payload;\n    return state;\n};\n\nexport const fetchFulfilled = (state, action) => {\n    state.rows = action.payload.data;\n    state.metadata = action.payload.meta;\n    state.error = {};\n    state.status = STATUS_RESOLVED;\n    return state;\n};\n","import { STATUS_LOADING, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { CLEAR_ADVISORY_DETAILS, FETCH_ADVISORY_DETAILS } from '../ActionTypes';\nimport {\n\n    fetchPending,\n    fetchRejected\n} from './HelperReducers';\n\nexport let initialState = {\n    data: { attributes: {} },\n    status: STATUS_LOADING\n};\n\n// Reducer\nexport const AdvisoryDetailStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case FETCH_ADVISORY_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                status: STATUS_RESOLVED,\n                data: action.payload.data,\n                error: {}\n            };\n\n        case FETCH_ADVISORY_DETAILS + '_PENDING':\n            return fetchPending(newState);\n\n        case FETCH_ADVISORY_DETAILS + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case CLEAR_ADVISORY_DETAILS:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    selectRows,\n    expandRows,\n    fetchPending,\n    fetchRejected,\n    fetchFulfilled\n} from './HelperReducers';\n\nexport const AdvisoryListStore = (state = storeListDefaults, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_APPLICABLE_ADVISORIES + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_APPLICABLE_ADVISORIES + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_APPLICABLE_ADVISORIES + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_ADVISORY_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.EXPAND_ADVISORY_ROW:\n            return expandRows(newState, action);\n\n        case ActionTypes.SELECT_ADVISORY_ROW:\n            return selectRows(newState, action);\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    selectRows,\n    fetchPending,\n    fetchRejected,\n    fetchFulfilled\n} from './HelperReducers';\n\nexport const AdvisorySystemsStore = (state = storeListDefaults, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY':\n            return selectRows(newState, action);\n\n        case ActionTypes.CHANGE_AFFECTED_SYSTEMS_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.CLEAR_AFFECTED_SYSTEMS:\n            return storeListDefaults;\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import { STATUS_LOADING, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { CLEAR_PACKAGE_DETAILS, FETCH_PACKAGE_DETAILS } from '../ActionTypes';\nimport { fetchPending, fetchRejected } from './HelperReducers';\n\nexport let initialState = {\n    data: { attributes: {} },\n    status: STATUS_LOADING\n};\n\n// Reducer\nexport const PackageDetailStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case FETCH_PACKAGE_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                status: STATUS_RESOLVED,\n                data: action.payload.data,\n                error: {}\n            };\n\n        case FETCH_PACKAGE_DETAILS + '_PENDING':\n            return fetchPending(newState);\n\n        case FETCH_PACKAGE_DETAILS + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case CLEAR_PACKAGE_DETAILS:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport { changeFilters, fetchFulfilled, fetchPending, fetchRejected } from './HelperReducers';\n\nconst initialStore = { ...storeListDefaults,  queryParams: { filter: { systems_updatable: 'gt:0'  } } };\n\nexport const PackagesListStore = (state = initialStore, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_PACKAGES_LIST + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_PACKAGES_LIST + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_PACKAGES_LIST + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_PACKAGES_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport { changeFilters, fetchFulfilled, fetchPending, fetchRejected, selectRows } from './HelperReducers';\n\nexport const PackageSystemsStore = (state = storeListDefaults, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_PACKAGE_SYSTEMS + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_PACKAGE_SYSTEMS + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case 'SELECT_ENTITY':\n            return selectRows(newState, action);\n\n        case ActionTypes.CHANGE_PACKAGE_SYSTEMS_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.FETCH_PACKAGE_SYSTEMS + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.CLEAR_PACKAGE_SYSTEMS:\n            return storeListDefaults;\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    selectRows,\n    fetchPending,\n    fetchRejected,\n    fetchFulfilled,\n    expandRows\n} from './HelperReducers';\n\nexport const SystemAdvisoryListStore = (state = storeListDefaults, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_ADVISORIES + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_SYSTEM_ADVISORY_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.EXPAND_SYSTEM_ADVISORY_ROW:\n            return expandRows(newState, action);\n\n        case ActionTypes.SELECT_SYSTEM_ADVISORY_ROW:\n            return selectRows(newState, action);\n\n        case ActionTypes.CLEAR_SYSTEM_ADVISORIES:\n            return storeListDefaults;\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport { changeFilters, fetchFulfilled, fetchPending, fetchRejected, selectRows } from './HelperReducers';\n\nlet initializeState = { queryParams: { filter: { updatable: 'true' } } };\n\nexport const SystemPackageListStore = (state = { ...storeListDefaults, ...initializeState }, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_APPLICABLE_SYSTEM_PACKAGES + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_SYSTEM_PACKAGES_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.SELECT_SYSTEM_PACKAGES_ROW:\n            return selectRows(newState, action);\n\n        case ActionTypes.CLEAR_SYSTEM_PACKAGES:\n            return { ...storeListDefaults, ...initializeState };\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    fetchPending,\n    fetchRejected,\n    fetchFulfilled\n} from './HelperReducers';\n\nexport const SystemsListStore = (state = storeListDefaults, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_SYSTEMS + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_SYSTEMS + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_SYSTEMS + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_SYSTEMS_LIST_PARAMS:\n            return changeFilters(newState, action);\n\n        case ActionTypes.TRIGGER_GLOBAL_FILTER:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","import { storeListDefaults } from '../../Utilities/constants';\nimport * as ActionTypes from '../ActionTypes';\nimport {\n    changeFilters,\n    fetchPending,\n    fetchRejected,\n    fetchFulfilled\n} from './HelperReducers';\n\nexport const CvesListStore = (state = storeListDefaults, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_CVES_INFO + '_FULFILLED':\n            return fetchFulfilled(newState, action);\n\n        case ActionTypes.FETCH_CVES_INFO + '_PENDING':\n            return fetchPending(newState);\n\n        case ActionTypes.FETCH_CVES_INFO + '_REJECTED':\n            return fetchRejected(newState, action);\n\n        case ActionTypes.CHANGE_CVES_STORE_PARAMS:\n            return changeFilters(newState, action);\n\n        default:\n            return state;\n    }\n};\n","/* eslint new-cap: 0 */\nimport { notifications, notificationsMiddleware } from '@redhat-cloud-services/frontend-components-notifications';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { AdvisoryDetailStore } from './Reducers/AdvisoryDetailStore';\nimport { AdvisoryListStore } from './Reducers/AdvisoryListStore';\nimport { AdvisorySystemsStore } from './Reducers/AdvisorySystemsStore';\nimport { PackageDetailStore } from './Reducers/PackageDetailStore';\nimport { PackagesListStore } from './Reducers/PackagesListStore';\nimport { PackageSystemsStore } from './Reducers/PackageSystemsStore';\nimport { SystemAdvisoryListStore } from './Reducers/SystemAdvisoryListStore';\nimport { SystemDetailStore } from './Reducers/SystemDetailStore';\nimport { SystemPackageListStore } from './Reducers/SystemPackageListStore';\nimport { SystemsListStore } from './Reducers/SystemsListStore';\nimport { CvesListStore } from './Reducers/CvesListStore';\n\nconst persistenceMiddleware = store => next => action => {\n    const storeContent = store.getState();\n    if (action.type === 'LOAD_ENTITIES_FULFILLED') {\n        action = { ...action, store };\n    }\n\n    next(action);\n    if (!action.type.endsWith('_REJECTED')) {\n        sessionStorage.setItem('PatchStore', JSON.stringify(storeContent));\n    }\n};\n\nconst storage = JSON.parse(sessionStorage.getItem('PatchStore')) || {};\n\nconst registry = getRegistry({}, [promiseMiddleware, notificationsMiddleware(), persistenceMiddleware]);\nregistry.register({\n    AdvisoryListStore: (state = storage.AdvisoryListStore, action) => AdvisoryListStore(state, action),\n    SystemsListStore: (state = storage.SystemsListStore, action) => SystemsListStore(state, action),\n    SystemDetailStore: (state = storage.SystemDetailStore, action) => SystemDetailStore(state, action),\n    SystemAdvisoryListStore: (state = storage.SystemAdvisoryListStore, action) => SystemAdvisoryListStore(state, action),\n    AdvisoryDetailStore: (state = storage.AdvisoryDetailStore, action) => AdvisoryDetailStore(state, action),\n    AdvisorySystemsStore: (state = storage.AdvisorySystemsStore, action) => AdvisorySystemsStore(state, action),\n    SystemPackageListStore: (state = storage.SystemPackageListStore, action) => SystemPackageListStore(state, action),\n    PackagesListStore: (state = storage.PackagesListStore, action) => PackagesListStore(state, action),\n    PackageDetailStore: (state = storage.PackageDetailStore, action) => PackageDetailStore(state, action),\n    PackageSystemsStore: (state = storage.PackageSystemsStore, action) => PackageSystemsStore(state, action),\n    CvesListStore: (state = storage.CvesListStore, action) => CvesListStore(state, action),\n    notifications\n});\n\nexport const getStore = () => registry.getStore();\nexport const register = newReducers => {\n    registry.register(newReducers);\n};\n","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../node_modules/sass-loader/dist/cjs.js!./App.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../node_modules/sass-loader/dist/cjs.js!./App.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./Label.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./Label.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./SystemDetail.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./SystemDetail.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}