{"version":3,"sources":["webpack:///./src/SmartComponents/Systems/Systems.js"],"names":["Systems","dispatch","useDispatch","React","useState","InventoryCmp","setInventoryCmp","RemediationModalCmp","setRemediationModalCmp","rawSystems","useSelector","SystemsListStore","rows","hosts","useMemo","createSystemsRows","error","status","metadata","queryParams","inventoryColumns","entities","columns","filter","search","handleRefresh","useHandleRefresh","apply","useEffect","fetchSystemsAction","fetchInventory","a","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","Table","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","TableVariant","sortable","expandable","SortByDirection","inventoryConnector","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","getStore","InventoryTable","usePagePerPage","limit","offset","page","perPage","params","changeSystemsListParams","removeFilter","useRemoveFilter","filterConfig","items","searchFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","getMangledColumns","updated","key","onSort","useSortColumn","sortBy","createSortBy","sort","Fragment","title","showTabs","STATUS_REJECTED","message","detail","total","total_items","isLoaded","STATUS_RESOLVED","onRefresh","exportConfig","onSelect","_","format","date","Date","toISOString","replace","split","filename","exportSystemsCSV","then","data","downloadFile","exportSystemsJSON","JSON","stringify","hasCheckbox","actions","systemsRowActions","tableProps","areActionsDisabled","rowData","applicable_advisories","every","typeSum"],"mappings":"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","file":"js/Systems.js","sourcesContent":["import {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table/dist/js';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport { reactCore, reactIcons } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/inventoryDependencies';\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport Error from '../../PresentationalComponents/Snippets/Error';\nimport { getStore, register } from '../../store';\nimport { changeSystemsListParams, fetchSystemsAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { exportSystemsCSV, exportSystemsJSON } from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport { buildFilterChips, createSortBy } from '../../Utilities/Helpers';\nimport { useHandleRefresh, usePagePerPage, useRemoveFilter, useSortColumn } from '../../Utilities/Hooks';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\n\nconst Systems = () => {\n    const dispatch = useDispatch();\n    const [InventoryCmp, setInventoryCmp] = React.useState();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawSystems = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.rows\n    );\n    const hosts = React.useMemo(() => createSystemsRows(rawSystems), [\n        rawSystems\n    ]);\n    const error = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.error\n    );\n    const status = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.status\n    );\n    const metadata = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.queryParams\n    );\n\n    const inventoryColumns = useSelector(\n        ({ entities }) => entities && entities.columns\n    );\n\n    const { filter, search } = queryParams;\n\n    const handleRefresh = useHandleRefresh(metadata, apply);\n\n    React.useEffect(() => {\n        dispatch(fetchSystemsAction(queryParams));\n    }, [queryParams]);\n\n    const fetchInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities\n        } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            }\n        });\n\n        register({\n            ...mergeWithEntities(inventoryEntitiesReducer(systemsListColumns))\n        });\n        const { InventoryTable } = inventoryConnector(getStore());\n        setInventoryCmp(() => InventoryTable);\n    };\n\n    React.useEffect(() => {\n        fetchInventory();\n    }, []);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    function apply(params) {\n        dispatch(changeSystemsListParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search, 'Search systems')\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    // This is used ONLY for sorting purposes\n    const getMangledColumns = () => {\n        let updated = inventoryColumns && inventoryColumns.filter(({ key }) => key === 'updated')[0];\n        updated = { ...updated, key: 'last_upload' };\n        return [...systemsListColumns, updated];\n    };\n\n    const onSort = useSortColumn(getMangledColumns(), apply);\n    const sortBy = React.useMemo(\n        () => createSortBy(getMangledColumns(), metadata.sort, 0),\n        [metadata.sort]\n    );\n\n    const onExport = (_, format) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const filename = `systems-${date}`;\n        if (format === 'csv') {\n            exportSystemsCSV(queryParams).then(data => downloadFile(data, filename, 'csv'));\n        }\n        else {\n            exportSystemsJSON(queryParams).then(data => downloadFile(JSON.stringify(data), filename, 'json'));\n        }\n    };\n\n    const areActionsDisabled = (rowData) => {\n        // eslint-disable-next-line camelcase\n        const { applicable_advisories } = rowData;\n        return applicable_advisories.every(typeSum => typeSum === 0);\n    };\n\n    return (\n        <React.Fragment>\n\n            <Header title={'Patch'} showTabs />\n            <RemediationModalCmp />\n            <Main>\n                {status === STATUS_REJECTED ? <Error message={error.detail}/> :\n                    InventoryCmp && (\n                        <InventoryCmp\n                            items={hosts}\n                            page={page}\n                            total={metadata.total_items}\n                            perPage={perPage}\n                            isLoaded={status === STATUS_RESOLVED}\n                            onRefresh={handleRefresh}\n                            exportConfig={{ onSelect: onExport }}\n                            hasCheckbox={false}\n                            actions={systemsRowActions(showRemediationModal)}\n                            filterConfig={filterConfig}\n                            activeFiltersConfig = {activeFiltersConfig}\n                            tableProps = {{ areActionsDisabled, onSort, sortBy }}\n\n                        />\n                    )\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n"],"sourceRoot":""}