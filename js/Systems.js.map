{"version":3,"sources":["webpack:///./src/SmartComponents/Systems/SystemsListAssets.scss","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.scss?7555","webpack:///./src/SmartComponents/Systems/Systems.js"],"names":["module","exports","push","i","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","arr","arrayLikeToArray","Array","isArray","iter","Symbol","iterator","Object","from","TypeError","init","columns","rows","entities","modifyInventory","state","loaded","lastSeenColumn","filter","key","transforms","sortable","inventoryEntitiesReducer","action","type","systemsListColumns","title","composed","classNames","renderFunc","value","createAdvisoriesIcons","systemsRowActions","showRemediationModal","onClick","event","rowId","rowData","fetchApplicableSystemAdvisoriesApi","id","limit","then","res","remediationProvider","data","map","item","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","idx","Error","dispose","Systems","dispatch","useDispatch","React","useState","InventoryCmp","setInventoryCmp","RemediationModalCmp","setRemediationModalCmp","rawSystems","useSelector","SystemsListStore","hosts","useMemo","createSystemsRows","error","status","metadata","queryParams","inventoryColumns","search","handleRefresh","useHandleRefresh","apply","useEffect","fetchSystemsAction","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","register","getStore","InventoryTable","usePagePerPage","offset","page","perPage","params","changeSystemsListParams","removeFilter","useRemoveFilter","filterConfig","items","searchFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","getMangledColumns","updated","onSort","useSortColumn","sortBy","createSortBy","sort","Fragment","showTabs","STATUS_REJECTED","message","detail","total","total_items","isLoaded","STATUS_RESOLVED","onRefresh","exportConfig","onSelect","_","format","date","Date","toISOString","replace","split","filename","exportSystemsCSV","downloadFile","exportSystemsJSON","JSON","stringify","hasCheckbox","actions","tableProps","areActionsDisabled","applicable_advisories","every","typeSum"],"mappings":"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","file":"js/Systems.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".col-width-30{width:30%}.col-width-40{width:40%}\\n\", \"\"]);\n\n","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","import { sortable } from '@patternfly/react-table';\n\n// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: []\n};\n// Reducer\n\nfunction modifyInventory(columns, state) {\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], transforms: [sortable] }];\n        return {\n            ...state,\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = columns => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n\n        default:\n            return state;\n    }\n};\n","import { classNames, sortable } from '@patternfly/react-table';\nimport { fetchApplicableSystemAdvisoriesApi } from '../../Utilities/api';\nimport { createAdvisoriesIcons, remediationProvider } from '../../Utilities/Helpers';\nimport './SystemsListAssets.scss';\n\nexport const systemsListColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        transforms: [classNames('col-width-40'), sortable]\n    },\n    {\n        key: 'applicable_advisories',\n        title: 'Applicable advisories',\n        transforms: [classNames('col-width-30')],\n        renderFunc: value => createAdvisoriesIcons(value)\n    }\n];\n\nexport const systemsRowActions = showRemediationModal => {\n    return [\n        {\n            title: 'Apply all applicable advisories',\n            onClick: (event, rowId, rowData) => {\n                fetchApplicableSystemAdvisoriesApi({\n                    id: rowData.id,\n                    limit: 10000\n                }).then(res =>\n                    showRemediationModal(\n                        remediationProvider(\n                            res.data.map(item => item.id),\n                            rowData.id\n                        )\n                    )\n                );\n            }\n        }\n    ];\n};\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as reactCore from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport * as pfReactTable from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport Error from '../../PresentationalComponents/Snippets/Error';\nimport { getStore, register } from '../../store';\nimport { changeSystemsListParams, fetchSystemsAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { exportSystemsCSV, exportSystemsJSON } from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport { buildFilterChips, createSortBy } from '../../Utilities/Helpers';\nimport { useHandleRefresh, usePagePerPage, useRemoveFilter, useSortColumn } from '../../Utilities/Hooks';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\n\nconst Systems = () => {\n    const dispatch = useDispatch();\n    const [InventoryCmp, setInventoryCmp] = React.useState();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawSystems = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.rows\n    );\n    const hosts = React.useMemo(() => createSystemsRows(rawSystems), [\n        rawSystems\n    ]);\n    const error = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.error\n    );\n    const status = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.status\n    );\n    const metadata = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.queryParams\n    );\n\n    const inventoryColumns = useSelector(\n        ({ entities }) => entities && entities.columns\n    );\n\n    const { filter, search } = queryParams;\n\n    const handleRefresh = useHandleRefresh(metadata, apply);\n\n    React.useEffect(() => {\n        dispatch(fetchSystemsAction(queryParams));\n    }, [queryParams]);\n\n    const fetchInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities\n        } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        register({\n            ...mergeWithEntities(inventoryEntitiesReducer(systemsListColumns))\n        });\n        const { InventoryTable } = inventoryConnector(getStore());\n        setInventoryCmp(() => InventoryTable);\n    };\n\n    React.useEffect(() => {\n        fetchInventory();\n    }, []);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    function apply(params) {\n        dispatch(changeSystemsListParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search, 'Search systems')\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    // This is used ONLY for sorting purposes\n    const getMangledColumns = () => {\n        let updated = inventoryColumns && inventoryColumns.filter(({ key }) => key === 'updated')[0];\n        updated = { ...updated, key: 'last_upload' };\n        return [...systemsListColumns, updated];\n    };\n\n    const onSort = useSortColumn(getMangledColumns(), apply);\n    const sortBy = React.useMemo(\n        () => createSortBy(getMangledColumns(), metadata.sort, 0),\n        [metadata.sort]\n    );\n\n    const onExport = (_, format) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const filename = `systems-${date}`;\n        if (format === 'csv') {\n            exportSystemsCSV(queryParams).then(data => downloadFile(data, filename, 'csv'));\n        }\n        else {\n            exportSystemsJSON(queryParams).then(data => downloadFile(JSON.stringify(data), filename, 'json'));\n        }\n    };\n\n    const areActionsDisabled = (rowData) => {\n        // eslint-disable-next-line camelcase\n        const { applicable_advisories } = rowData;\n        return applicable_advisories.every(typeSum => typeSum === 0);\n    };\n\n    return (\n        <React.Fragment>\n\n            <Header title={'Patch'} showTabs />\n            <RemediationModalCmp />\n            <Main>\n                {status === STATUS_REJECTED ? <Error message={error.detail}/> :\n                    InventoryCmp && (\n                        <InventoryCmp\n                            items={hosts}\n                            page={page}\n                            total={metadata.total_items}\n                            perPage={perPage}\n                            isLoaded={status === STATUS_RESOLVED}\n                            onRefresh={handleRefresh}\n                            exportConfig={{ onSelect: onExport }}\n                            hasCheckbox={false}\n                            actions={systemsRowActions(showRemediationModal)}\n                            filterConfig={filterConfig}\n                            activeFiltersConfig = {activeFiltersConfig}\n                            tableProps = {{ areActionsDisabled, onSort, sortBy }}\n\n                        />\n                    )\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n"],"sourceRoot":""}