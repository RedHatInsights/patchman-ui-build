{"version":3,"sources":["webpack:///./src/SmartComponents/Systems/SystemsListAssets.scss","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.scss?7555","webpack:///./src/SmartComponents/Systems/Systems.js"],"names":["module","exports","push","i","init","columns","rows","entities","modifyInventory","state","loaded","lastSeenColumn","filter","key","inventoryEntitiesReducer","action","type","arrayWithoutHoles","iterableToArray","nonIterableSpread","arr","Array","isArray","arr2","length","iter","Symbol","iterator","Object","prototype","toString","call","from","TypeError","systemsListColumns","title","composed","transforms","classNames","renderFunc","value","createAdvisoriesIcons","systemsRowActions","showRemediationModal","onClick","event","rowId","rowData","fetchApplicableSystemAdvisoriesApi","id","limit","then","res","remediationProvider","data","map","item","isDisabled","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","idx","Error","dispose","Systems","dispatch","useDispatch","React","useState","InventoryCmp","setInventoryCmp","RemediationModalCmp","setRemediationModalCmp","rawSystems","useSelector","SystemsListStore","hosts","useMemo","createSystemsRows","error","status","metadata","queryParams","search","handleRefresh","useHandleRefresh","apply","useEffect","fetchSystemsAction","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","register","getStore","InventoryTable","usePagePerPage","offset","page","perPage","params","changeSystemsListParams","removeFilter","useRemoveFilter","filterConfig","items","searchFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","Fragment","showTabs","STATUS_REJECTED","message","detail","total","total_items","onRefresh","hasCheckbox","actions","tableProps","areActionsDisabled","applicable_advisories","every","typeSum"],"mappings":"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","file":"js/Systems.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".col-width-30{width:30%}.col-width-40{width:40%}\\n\", \"\"]);\n\n","// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: []\n};\n// Reducer\n\nfunction modifyInventory(columns, state) {\n    if (state.loaded) {\n        const lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        return {\n            ...state,\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = columns => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n\n        default:\n            return state;\n    }\n};\n","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","import { classNames } from '@patternfly/react-table';\nimport { fetchApplicableSystemAdvisoriesApi } from '../../Utilities/api';\nimport { createAdvisoriesIcons, remediationProvider } from '../../Utilities/Helpers';\nimport './SystemsListAssets.scss';\n\nexport const systemsListColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        transforms: [classNames('col-width-40')]\n    },\n    {\n        key: 'applicable_advisories',\n        title: 'Applicable advisories',\n        transforms: [classNames('col-width-30')],\n        renderFunc: value => createAdvisoriesIcons(value)\n    }\n];\n\nexport const systemsRowActions = showRemediationModal => {\n    return [\n        {\n            title: 'Apply all applicable advisories',\n            onClick: (event, rowId, rowData) => {\n                fetchApplicableSystemAdvisoriesApi({\n                    id: rowData.id,\n                    limit: 10000\n                }).then(res =>\n                    showRemediationModal(\n                        remediationProvider(\n                            res.data.map(item => item.id),\n                            rowData.id\n                        )\n                    )\n                );\n            },\n            isDisabled: true\n        }\n    ];\n};\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as reactCore from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport * as pfReactTable from '@patternfly/react-table';\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport Error from '../../PresentationalComponents/Snippets/Error';\nimport { getStore, register } from '../../store';\nimport { changeSystemsListParams, fetchSystemsAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { STATUS_REJECTED } from '../../Utilities/constants';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport { buildFilterChips } from '../../Utilities/Helpers';\nimport { useHandleRefresh, usePagePerPage, useRemoveFilter } from '../../Utilities/Hooks';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\n\nconst Systems = () => {\n    const dispatch = useDispatch();\n    const [InventoryCmp, setInventoryCmp] = React.useState();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawSystems = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.rows\n    );\n    const hosts = React.useMemo(() => createSystemsRows(rawSystems), [\n        rawSystems\n    ]);\n    const error = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.error\n    );\n    const status = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.status\n    );\n    const metadata = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.queryParams\n    );\n\n    const { filter, search } = queryParams;\n\n    const handleRefresh = useHandleRefresh(metadata, apply);\n\n    React.useEffect(() => {\n        dispatch(fetchSystemsAction(queryParams));\n    }, [queryParams]);\n\n    const fetchInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities\n        } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        register({\n            ...mergeWithEntities(inventoryEntitiesReducer(systemsListColumns))\n        });\n        const { InventoryTable } = inventoryConnector(getStore());\n        setInventoryCmp(() => InventoryTable);\n    };\n\n    React.useEffect(() => {\n        fetchInventory();\n    }, []);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    function apply(params) {\n        dispatch(changeSystemsListParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search, 'Search systems')\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    const areActionsDisabled = (rowData) => {\n        // eslint-disable-next-line camelcase\n        const { applicable_advisories } = rowData;\n        return applicable_advisories.every(typeSum => typeSum === 0);\n    };\n\n    return (\n        <React.Fragment>\n\n            <Header title={'Patch'} showTabs />\n            <RemediationModalCmp />\n            <Main>\n                {status === STATUS_REJECTED ? <Error message={error.detail}/> :\n                    InventoryCmp && (\n                        <InventoryCmp\n                            items={hosts}\n                            page={page}\n                            total={metadata.total_items}\n                            perPage={perPage}\n                            onRefresh={handleRefresh}\n                            hasCheckbox={false}\n                            actions={systemsRowActions(showRemediationModal)}\n                            filterConfig={filterConfig}\n                            activeFiltersConfig = {activeFiltersConfig}\n                            tableProps = {{ areActionsDisabled }}\n\n                        />\n                    )\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n"],"sourceRoot":""}