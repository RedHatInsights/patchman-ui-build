{"version":3,"sources":["webpack:///./src/PresentationalComponents/Header/Header.scss","webpack:///./src/PresentationalComponents/Header/Header.scss?f238","webpack:///./src/PresentationalComponents/Header/HeaderBreadcrumbs.js","webpack:///./src/PresentationalComponents/Header/HeaderTabs.js","webpack:///./src/PresentationalComponents/Header/Header.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.js","webpack:///./src/SmartComponents/Systems/Systems.js"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","HeaderBreadcrumbs","items","Breadcrumb","filter","Boolean","map","item","BreadcrumbItem","title","isActive","to","Link","propTypes","PropTypes","arrayOf","shape","bool","string","HeaderTabs","history","Tabs","onSelect","event","tabString","activeKey","location","pathname","className","Tab","eventKey","paths","advisories","systems","object","withRouter","Header","showTabs","breadcrumbs","children","Fragment","array","any","init","columns","rows","entities","modifyInventory","state","loaded","inventoryEntitiesReducer","action","type","systemsListColumns","composed","props","width","renderFunc","value","createAdvisoriesIcons","date","systemsRowActions","showRemediationModal","onClick","rowId","rowData","fetchApplicableSystemAdvisoriesApi","id","limit","then","res","remediationProvider","data","Systems","dispatch","useDispatch","React","useState","InventoryCmp","setInventoryCmp","RemediationModalCmp","setRemediationModalCmp","rawSystems","useSelector","SystemsListStore","hosts","useMemo","createSystemsRows","metadata","queryParams","useEffect","fetchSystemsAction","async","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","register","getStore","InventoryTable","usePagePerPage","offset","page","perPage","handleRefresh","useCallback","params","per_page","page_size","getOffsetFromPageLimit","getLimitFromPageSize","changeSystemsListParams","total","total_items","onRefresh","hasCheckbox","actions"],"mappings":"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","file":"js/Systems.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".pf-c-tabs.patchman-tabs{background-color:var(--pf-global--BackgroundColor--100);padding-left:var(--pf-c-page__main-section--md--PaddingLeft);display:block}\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Header.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Header.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Header.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBreadcrumbs = ({ items }) => {\n    return (\n        <Breadcrumb>\n            {items.filter(Boolean).map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {(item.to && <Link to={item.to}>{item.title}</Link>) ||\n                        item.title}\n                </BreadcrumbItem>\n            ))}\n        </Breadcrumb>\n    );\n};\n\nHeaderBreadcrumbs.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            isActive: PropTypes.bool,\n            to: PropTypes.string,\n            title: PropTypes.string\n        })\n    )\n};\n\nexport default HeaderBreadcrumbs;\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { paths } from '../../Routes';\nimport './Header.scss';\n\nconst HeaderTabs = ({ history }) => {\n    const handleRedirect = (event, tabString) => {\n        history.push(tabString);\n    };\n\n    return (\n        <Tabs\n            onSelect={handleRedirect}\n            activeKey={history.location.pathname}\n            className={'patchman-tabs'}\n        >\n            <Tab\n                eventKey={paths.advisories.to}\n                title={paths.advisories.title}\n            />\n            <Tab eventKey={paths.systems.to} title={paths.systems.title} />\n        </Tabs>\n    );\n};\n\nHeaderTabs.propTypes = {\n    history: propTypes.object\n};\n\nexport default withRouter(HeaderTabs);\n","import {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport HeaderBreadcrumbs from './HeaderBreadcrumbs';\nimport HeaderTabs from './HeaderTabs';\n\nconst Header = ({ title, showTabs, breadcrumbs, children }) => {\n    return (\n        <React.Fragment>\n            <PageHeader>\n                {breadcrumbs && <HeaderBreadcrumbs items={breadcrumbs} />}\n                <PageHeaderTitle title={title} />\n                {children}\n            </PageHeader>\n            {showTabs && <HeaderTabs />}\n        </React.Fragment>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    showTabs: PropTypes.bool,\n    breadcrumbs: PropTypes.array,\n    children: PropTypes.any\n};\n\nexport default Header;\n","// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: []\n};\n// Reducer\n\nfunction modifyInventory(columns, state) {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = columns => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n\n        default:\n            return state;\n    }\n};\n","import { DateFormat } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport { fetchApplicableSystemAdvisoriesApi } from '../../Utilities/api';\nimport {\n    createAdvisoriesIcons,\n    remediationProvider\n} from '../../Utilities/Helpers';\n\nexport const systemsListColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        props: {\n            width: 40\n        }\n    },\n    {\n        key: 'applicable_advisories',\n        title: 'Applicable advisories',\n        props: {\n            width: 30\n        },\n        renderFunc: value => createAdvisoriesIcons(value)\n    },\n    {\n        key: 'updated',\n        title: 'Last seen',\n        props: {\n            width: 30\n        },\n        renderFunc: value => (\n            <React.Fragment>\n                <DateFormat date={value} />\n            </React.Fragment>\n        )\n    }\n];\n\nexport const systemsRowActions = showRemediationModal => {\n    return [\n        {\n            title: 'Apply all applicable advisories',\n            onClick: (event, rowId, rowData) => {\n                fetchApplicableSystemAdvisoriesApi({\n                    id: rowData.id,\n                    limit: 10000\n                }).then(res =>\n                    showRemediationModal(\n                        remediationProvider(\n                            res.data.map(item => item.id),\n                            rowData.id\n                        )\n                    )\n                );\n            }\n        }\n    ];\n};\n","import * as reactCore from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport * as pfReactTable from '@patternfly/react-table';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { getStore, register } from '../../store';\nimport {\n    changeSystemsListParams,\n    fetchSystemsAction\n} from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport {\n    getLimitFromPageSize,\n    getOffsetFromPageLimit\n} from '../../Utilities/Helpers';\nimport { usePagePerPage } from '../../Utilities/Hooks';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\n\nconst Systems = () => {\n    const dispatch = useDispatch();\n    const [InventoryCmp, setInventoryCmp] = React.useState();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawSystems = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.rows\n    );\n    const hosts = React.useMemo(() => createSystemsRows(rawSystems), [\n        rawSystems\n    ]);\n    const metadata = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.queryParams\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchSystemsAction(queryParams));\n    }, [queryParams]);\n\n    const fetchInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities\n        } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        register({\n            ...mergeWithEntities(inventoryEntitiesReducer(systemsListColumns))\n        });\n        const { InventoryTable } = inventoryConnector(getStore());\n        setInventoryCmp(() => InventoryTable);\n    };\n\n    React.useEffect(() => {\n        fetchInventory();\n    }, []);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    function apply(params) {\n        dispatch(changeSystemsListParams(params));\n    }\n\n    const handleRefresh = React.useCallback(({ page, per_page: perPage }) => {\n        if (metadata.page !== page || metadata.page_size !== perPage) {\n            apply({\n                offset:\n                    metadata.limit !== perPage\n                        ? 0\n                        : getOffsetFromPageLimit(page, perPage),\n                limit: getLimitFromPageSize(perPage)\n            });\n        }\n    });\n    return (\n        <React.Fragment>\n            <Header title={'System Patching'} showTabs />\n            <RemediationModalCmp />\n            <Main>\n                {InventoryCmp && (\n                    <InventoryCmp\n                        items={hosts}\n                        page={page}\n                        total={metadata.total_items}\n                        perPage={perPage}\n                        onRefresh={handleRefresh}\n                        hasCheckbox={false}\n                        actions={systemsRowActions(showRemediationModal)}\n                    />\n                )}\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n"],"sourceRoot":""}