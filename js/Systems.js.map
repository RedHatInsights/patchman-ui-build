{"version":3,"sources":["webpack:///./src/SmartComponents/Systems/Systems.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.scss","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.scss?7555"],"names":["Systems","dispatch","useDispatch","React","useState","InventoryCmp","setInventoryCmp","RemediationModalCmp","setRemediationModalCmp","rawSystems","useSelector","SystemsListStore","rows","hosts","useMemo","createSystemsRows","error","status","metadata","queryParams","inventoryColumns","entities","columns","filter","search","handleRefresh","useHandleRefresh","apply","useEffect","fetchSystemsAction","fetchInventory","a","insights","loadInventory","ReactRedux","reactRouterDom","pfReactTable","Table","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","TableVariant","sortable","expandable","SortByDirection","pfReact","reactCore","inventoryConnector","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","getStore","InventoryTable","usePagePerPage","limit","offset","page","perPage","params","changeSystemsListParams","removeFilter","useRemoveFilter","filterConfig","items","searchFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","getMangledColumns","updated","key","onSort","useSortColumn","sortBy","createSortBy","sort","Fragment","title","STATUS_REJECTED","message","detail","isFullView","total","total_items","isLoaded","STATUS_RESOLVED","onRefresh","exportConfig","onSelect","_","format","date","Date","toISOString","replace","split","filename","exportSystemsCSV","then","data","downloadFile","exportSystemsJSON","JSON","stringify","hasCheckbox","actions","systemsRowActions","tableProps","areActionsDisabled","rowData","applicable_advisories","every","typeSum","module","exports","push","i","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","arr","arrayLikeToArray","Array","isArray","iter","Symbol","iterator","Object","from","TypeError","init","modifyInventory","state","loaded","lastSeenColumn","transforms","InventoryHosts","PatchHosts","map","InventoryRow","patchLastSeen","find","patchRow","id","attributes","last_upload","modifyPackageSystems","currentPage","action","store","getState","PatchStore","AdvisorySystemsStore","type","packagesSystemsInventoryReducer","PackageSystemsStore","composed","props","width","renderFunc","value","createAdvisoriesIcons","packageSystemsColumns","createUpgradableColumn","showRemediationModal","onClick","event","rowId","fetchApplicableSystemAdvisoriesApi","res","remediationProvider","item","content","options","transform","undefined","update","locals","hot","accept","newContent","b","idx","Error","dispose"],"mappings":"k7BA2LeA,UA3JC,WACZ,IAAMC,EAAWC,wBADC,EAEsBC,IAAMC,WAF5B,WAEXC,EAFW,KAEGC,EAFH,OAMdH,IAAMC,UAAS,kBAAM,kBAAM,SANb,WAIdG,EAJc,KAKdC,EALc,KAOZC,EAAaC,uBACf,qBAAGC,iBAAwCC,QAEzCC,EAAQV,IAAMW,SAAQ,kBAAMC,YAAkBN,KAAa,CAC7DA,IAEEO,EAAQN,uBACV,qBAAGC,iBAAwCK,SAEzCC,EAASP,uBACX,qBAAGC,iBAAwCM,UAEzCC,EAAWR,uBACb,qBAAGC,iBAAwCO,YAEzCC,EAAcT,uBAChB,qBAAGC,iBAAwCQ,eAGzCC,EAAmBV,uBACrB,gBAAGW,EAAH,EAAGA,SAAH,OAAkBA,GAAYA,EAASC,WAGnCC,EAAmBJ,EAAnBI,OAAQC,EAAWL,EAAXK,OAEVC,EAAgBC,YAAiBR,EAAUS,GAEjDxB,IAAMyB,WAAU,WACZ3B,EAAS4B,YAAmBV,MAC7B,CAACA,IAEJ,IAAMW,EAAc,+BAAG,oCAAAC,EAAA,sEAITC,SAASC,cAAc,CAC7BC,aACA/B,UACAgC,iBACAC,aAAc,CACVC,MAAOC,QACPC,sBACAC,0BACAC,0CACAC,sBACAC,4BACAC,oBACAC,wBACAC,mCAEJC,QAASC,cAnBM,gBAEfC,EAFe,EAEfA,mBACAC,EAHe,EAGfA,kBAmBJC,YAAS,EAAD,GACDD,EAAkBE,YAAyBC,IAAoB,mBAvBnD,EAyBQJ,EAAmBK,eAAtCC,EAzBW,EAyBXA,eACRjD,GAAgB,kBAAMiD,KA1BH,2CAAH,qDA6BpBpD,IAAMyB,WAAU,WACZE,MACD,IArEe,MAuEM0B,YAAetC,EAASuC,MAAOvC,EAASwC,QAvE9C,WAuEXC,EAvEW,KAuELC,EAvEK,KA6ElB,SAASjC,EAAMkC,GACX5D,EAAS6D,YAAwBD,IAGrC,IAAME,EAAeC,YAAgBzC,EAAQI,GAEvCsC,EAAe,CACjBC,MAAO,CACHC,YAAaxC,EAAOH,EAAQ,oBAI9B4C,EAAsB,CACxBC,QAASC,YAAiB/C,EAAQC,GAClC+C,SAAUR,GAIRS,EAAoB,WACtB,IAAIC,EAAUrD,GAAoBA,EAAiBG,QAAO,kBAAqB,YAArB,EAAGmD,OAA6B,GAE1F,OADAD,EAAU,EAAH,KAAQA,GAAR,IAAiBC,IAAK,gBAC7B,cAAWrB,KAAX,CAA+BoB,KAG7BE,GAASC,YAAcJ,IAAqB7C,GAC5CkD,GAAS1E,IAAMW,SACjB,kBAAMgE,YAAaN,IAAqBtD,EAAS6D,KAAM,KACvD,CAAC7D,EAAS6D,OAoBd,OACI,kBAAC,IAAMC,SAAP,KAEI,kBAAC,IAAD,CAAQC,MAAO,YACf,kBAAC1E,EAAD,MACA,kBAAC,OAAD,KACKU,IAAWiE,IAAkB,kBAAC,IAAD,CAAOC,QAASnE,EAAMoE,SAChD/E,GACI,kBAACA,EAAD,CACIgF,YAAU,EACVnB,MAAOrD,EACP8C,KAAMA,EACN2B,MAAOpE,EAASqE,YAChB3B,QAASA,EACT4B,SAAUvE,IAAWwE,IACrBC,UAAWjE,EACXkE,aAAc,CAAEC,SAjCvB,SAACC,EAAGC,GACjB,IAAMC,GAAO,IAAIC,MAAOC,cAAcC,QAAQ,QAAS,KAAKC,MAAM,KAAK,GAAK,OACtEC,EAAW,WAAH,OAAcL,GACb,QAAXD,EACAO,YAAiBlF,GAAamF,MAAK,SAAAC,GAAI,OAAIC,uBAAaD,EAAMH,EAAU,UAGxEK,YAAkBtF,GAAamF,MAAK,SAAAC,GAAI,OAAIC,uBAAaE,KAAKC,UAAUJ,GAAOH,EAAU,aA2BzEQ,aAAa,EACbC,QAASC,aArEJ,SAAAP,GACzB/F,GAAuB,kBAAM,kBAAM,kBAAC,IAAD,CAAkB+F,KAAMA,WAqEvCtC,aAAcA,EACdG,oBAAuBA,EACvB2C,WAAc,CAAEC,mBA3Bb,SAACC,GAGxB,OADkCA,EAA1BC,sBACqBC,OAAM,SAAAC,GAAO,OAAgB,IAAZA,MAwBUzC,UAAQE,iB,qBCjL9DwC,EAAOC,QAAU,EAAQ,EAAR,EAAgE,IAEnFC,KAAK,CAACF,EAAOG,EAAI,qDAAsD,M,oBCF/E,IAAIC,EAAoB,EAAQ,KAE5BC,EAAkB,EAAQ,KAE1BC,EAA6B,EAAQ,KAErCC,EAAoB,EAAQ,KAMhCP,EAAOC,QAJP,SAA4BO,GAC1B,OAAOJ,EAAkBI,IAAQH,EAAgBG,IAAQF,EAA2BE,IAAQD,M,oBCT9F,IAAIE,EAAmB,EAAQ,KAM/BT,EAAOC,QAJP,SAA4BO,GAC1B,GAAIE,MAAMC,QAAQH,GAAM,OAAOC,EAAiBD,K,kBCClDR,EAAOC,QAJP,SAA0BW,GACxB,GAAsB,oBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOF,MAAMM,KAAKJ,K,kBCG1FZ,EAAOC,QAJP,WACE,MAAM,IAAIgB,UAAU,0I,qtBCEf,IAAMC,EAAO,CAChBjH,QAAS,GACTV,KAAM,GACNS,SAAU,IAcd,SAASmH,EAAgBlH,EAAST,EAAO4H,GACrC,GAAIA,EAAMC,OAAQ,CACd,IAAIC,EAAiBF,EAAMnH,QAAQC,QAAO,kBAAqB,YAArB,EAAGmD,OAE7C,OADAiE,EAAiB,CAAC,EAAD,KAAMA,EAAe,IAArB,IAAyBC,WAAY,CAAChG,eACvD,OACO6F,GADP,IAEInH,QAAS,GAAF,WACAA,GAAW,IADX,IAEAqH,GAAkB,KAEzB/H,MApBiBiI,EAoBQJ,EAAM7H,KApBEkI,EAoBIjI,EAnBtCgI,EAAeE,KAAI,SAACC,GACvB,IAAMC,EAAgBH,GAAcA,EAAWI,MAAK,SAAAC,GAAQ,OAAGA,EAASC,KAAOJ,EAAaI,MAC5F,cACOJ,GADP,IAEIvE,QAASwE,GAAiBA,EAAcI,WAAWC,aAAeN,EAAavE,gBAL3F,IAA6BoE,EAAgBC,EAwBzC,OAAOL,EAGX,SAASc,EAAqBjI,EAAST,EAAO4H,GAC1C,OAAIA,EAAMC,OACN,OACOD,GADP,IAEInH,YAIDmH,EAGJ,IAAMrF,EAA2B,SAAC9B,EAASkI,GAAV,OAA0B,WAA0B,IAAzBf,EAAyB,uDAAjBF,EAAMkB,EAAW,uCAClFC,EAAQD,EAAOC,OAASD,EAAOC,MAAMC,WAGrCC,EAAcF,IAA0B,iBAAhBF,EAAiCE,EAAM/I,iBAAmB+I,EAAMG,sBAE9F,OAAQJ,EAAOK,MACX,IAAK,0BACD,OAAOtB,EAAgBlH,EAASsI,EAAWhJ,KAAM6H,GAErD,QACI,OAAOA,KAINsB,EAAkC,SAACzI,GAAD,OAAa,WAA0B,MAAzBmH,EAAyB,uDAAjBF,EAAMkB,EAAW,uCAC5EC,EAAQD,EAAOC,OAASD,EAAOC,MAAMC,WAC3C,OAAQF,EAAOK,MACX,IAAK,0BACD,OAAOP,EAAqBjI,EAAD,UAAUoI,EAAMM,2BAAhB,OAAU,EAA2BpJ,KAAM6H,GAE1E,QACI,OAAOA,M,iCCtEnB,kIAKapF,GALb,OAKkC,CAC9B,CACIqB,IAAK,eACLO,MAAO,OACPgF,SAAU,CAAC,mBAAoB,gBAC/BrB,WAAY,CAAChG,YACbsH,MAAO,CACHC,MAAO,KAGf,CACIzF,IAAK,qBACLO,MAAO,WACP2D,WAAY,CAAChG,YACbsH,MAAO,CACHC,MAAO,KAGf,CACIzF,IAAK,wBACLO,MAAO,wBACP2D,WAAY,CAAChG,YACbsH,MAAO,CACHC,MAAO,IAEXC,WAAY,SAAAC,GAAK,OAAIC,YAAsBD,OAItCE,EAAwB,CACjC,CACI7F,IAAK,eACLO,MAAO,OACPgF,SAAU,CAAC,mBAAoB,gBAC/BrB,WAAY,CAAChG,YACbsH,MAAO,CACHC,MAAO,KAGf,CACIzF,IAAK,oBACLO,MAAO,oBACP2D,WAAY,CAAChG,YACbsH,MAAO,CACHC,MAAO,KAGf,CACIzF,IAAK,iBACLO,MAAO,iBACP2D,WAAY,CAAChG,YACbsH,MAAO,CACHC,MAAO,KAGf,CACIzF,IAAK,aACLO,MAAO,SACPiF,MAAO,CACHC,MAAO,IAEXC,WAAY,SAAAC,GAAK,OAAIG,YAAuBH,MAIvCvD,EAAoB,SAAA2D,GAC7B,MAAO,CACH,CACIxF,MAAO,kCACPyF,QAAS,SAACC,EAAOC,EAAO3D,GACpB4D,YAAmC,CAC/BzB,GAAInC,EAAQmC,GACZ3F,MAAO,MACR6C,MAAK,SAAAwE,GAAG,OACPL,EACIM,YACID,EAAIvE,KAAKwC,KAAI,SAAAiC,GAAI,OAAIA,EAAK5B,MAC1BnC,EAAQmC,a,oBCjFpC,IAAI6B,EAAU,EAAQ,KAEA,iBAAZA,IAAsBA,EAAU,CAAC,CAAC5D,EAAOG,EAAIyD,EAAS,MAOhE,IAAIC,EAAU,CAAC,KAAM,EAErB,eAPIC,EAQJ,gBAAqBC,GAEjBC,EAAS,EAAQ,EAAR,CAAgEJ,EAASC,GAEnFD,EAAQK,SAAQjE,EAAOC,QAAU2D,EAAQK,QAG3CjE,EAAOkE,IAAIC,OAAO,KAAyH,WAC1I,IAAIC,EAAa,EAAQ,KAiBzB,GAfyB,iBAAfA,IAAyBA,EAAa,CAAC,CAACpE,EAAOG,EAAIiE,EAAY,OAE3D,SAAS1J,EAAG2J,GACzB,IAAIhH,EAAKiH,EAAM,EAEf,IAAIjH,KAAO3C,EAAG,CACb,IAAI2J,GAAK3J,EAAE2C,KAASgH,EAAEhH,GAAM,OAAO,EACnCiH,IAGD,IAAIjH,KAAOgH,EAAGC,IAEd,OAAe,IAARA,EAVK,CAWXV,EAAQK,OAAQG,EAAWH,QAEjB,MAAM,IAAIM,MAAM,uDAE5BP,EAAOI,MAGRpE,EAAOkE,IAAIM,SAAQ,WAAaR","file":"js/Systems.js","sourcesContent":["import {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table/dist/js';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport * as ReactRedux from 'react-redux';\nimport { reactCore } from '@redhat-cloud-services/frontend-components-utilities/files/inventoryDependencies';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport Error from '../../PresentationalComponents/Snippets/Error';\nimport { getStore, register } from '../../store';\nimport { changeSystemsListParams, fetchSystemsAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { exportSystemsCSV, exportSystemsJSON } from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport { buildFilterChips, createSortBy } from '../../Utilities/Helpers';\nimport { useHandleRefresh, usePagePerPage, useRemoveFilter, useSortColumn } from '../../Utilities/Hooks';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\n\nconst Systems = () => {\n    const dispatch = useDispatch();\n    const [InventoryCmp, setInventoryCmp] = React.useState();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawSystems = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.rows\n    );\n    const hosts = React.useMemo(() => createSystemsRows(rawSystems), [\n        rawSystems\n    ]);\n    const error = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.error\n    );\n    const status = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.status\n    );\n    const metadata = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.queryParams\n    );\n\n    const inventoryColumns = useSelector(\n        ({ entities }) => entities && entities.columns\n    );\n\n    const { filter, search } = queryParams;\n\n    const handleRefresh = useHandleRefresh(metadata, apply);\n\n    React.useEffect(() => {\n        dispatch(fetchSystemsAction(queryParams));\n    }, [queryParams]);\n\n    const fetchInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities\n        } = await insights.loadInventory({\n            ReactRedux,\n            React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            },\n            pfReact: reactCore\n        });\n\n        register({\n            ...mergeWithEntities(inventoryEntitiesReducer(systemsListColumns, 'SYSTEMS_PAGE'))\n        });\n        const { InventoryTable } = inventoryConnector(getStore());\n        setInventoryCmp(() => InventoryTable);\n    };\n\n    React.useEffect(() => {\n        fetchInventory();\n    }, []);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    function apply(params) {\n        dispatch(changeSystemsListParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search, 'Search systems')\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    // This is used ONLY for sorting purposes\n    const getMangledColumns = () => {\n        let updated = inventoryColumns && inventoryColumns.filter(({ key }) => key === 'updated')[0];\n        updated = { ...updated, key: 'last_upload' };\n        return [...systemsListColumns, updated];\n    };\n\n    const onSort = useSortColumn(getMangledColumns(), apply);\n    const sortBy = React.useMemo(\n        () => createSortBy(getMangledColumns(), metadata.sort, 0),\n        [metadata.sort]\n    );\n\n    const onExport = (_, format) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const filename = `systems-${date}`;\n        if (format === 'csv') {\n            exportSystemsCSV(queryParams).then(data => downloadFile(data, filename, 'csv'));\n        }\n        else {\n            exportSystemsJSON(queryParams).then(data => downloadFile(JSON.stringify(data), filename, 'json'));\n        }\n    };\n\n    const areActionsDisabled = (rowData) => {\n        // eslint-disable-next-line camelcase\n        const { applicable_advisories } = rowData;\n        return applicable_advisories.every(typeSum => typeSum === 0);\n    };\n\n    return (\n        <React.Fragment>\n\n            <Header title={'Systems'} />\n            <RemediationModalCmp />\n            <Main>\n                {status === STATUS_REJECTED ? <Error message={error.detail}/> :\n                    InventoryCmp && (\n                        <InventoryCmp\n                            isFullView\n                            items={hosts}\n                            page={page}\n                            total={metadata.total_items}\n                            perPage={perPage}\n                            isLoaded={status === STATUS_RESOLVED}\n                            onRefresh={handleRefresh}\n                            exportConfig={{ onSelect: onExport }}\n                            hasCheckbox={false}\n                            actions={systemsRowActions(showRemediationModal)}\n                            filterConfig={filterConfig}\n                            activeFiltersConfig = {activeFiltersConfig}\n                            tableProps = {{ areActionsDisabled, onSort, sortBy }}\n\n                        />\n                    )\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".col-width-30{width:30%}.col-width-40{width:40%}\\n\", \"\"]);\n\n","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","import { sortable } from '@patternfly/react-table/dist/js';\n\n// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: []\n};\n// Reducer\n\nfunction replaceLastUpdated (InventoryHosts, PatchHosts) {\n    return InventoryHosts.map((InventoryRow) => {\n        const patchLastSeen = PatchHosts && PatchHosts.find(patchRow=> patchRow.id === InventoryRow.id);\n        return {\n            ...InventoryRow,\n            updated: patchLastSeen && patchLastSeen.attributes.last_upload || InventoryRow.updated\n        };\n    });\n}\n\nfunction modifyInventory(columns, hosts, state) {\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], transforms: [sortable] }];\n        return {\n            ...state,\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ],\n            rows: replaceLastUpdated(state.rows, hosts)\n        };\n    }\n\n    return state;\n}\n\nfunction modifyPackageSystems(columns, hosts, state) {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns, currentPage) => (state = init, action) => {\n    const store = action.store && action.store.getState();\n\n    //display patch 'last_upload' instead of Inventory 'updated' column\n    const PatchStore  = store && (currentPage === 'SYSTEMS_PAGE' ? store.SystemsListStore : store.AdvisorySystemsStore);\n\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, PatchStore.rows, state);\n\n        default:\n            return state;\n    }\n};\n\nexport const packagesSystemsInventoryReducer = (columns) => (state = init, action) => {\n    const store = action.store && action.store.getState();\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyPackageSystems(columns, store.PackageSystemsStore?.rows, state);\n\n        default:\n            return state;\n    }\n};\n","import { sortable } from '@patternfly/react-table/dist/js';\nimport { fetchApplicableSystemAdvisoriesApi } from '../../Utilities/api';\nimport { createAdvisoriesIcons, createUpgradableColumn, remediationProvider } from '../../Utilities/Helpers';\nimport './SystemsListAssets.scss';\n\nexport const systemsListColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        transforms: [sortable],\n        props: {\n            width: 50\n        }\n    },\n    {\n        key: 'packages_installed',\n        title: 'Packages',\n        transforms: [sortable],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'applicable_advisories',\n        title: 'Applicable advisories',\n        transforms: [sortable],\n        props: {\n            width: 20\n        },\n        renderFunc: value => createAdvisoriesIcons(value)\n    }\n];\n\nexport const packageSystemsColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        transforms: [sortable],\n        props: {\n            width: 50\n        }\n    },\n    {\n        key: 'installed_version',\n        title: 'Installed version',\n        transforms: [sortable],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'latest_version',\n        title: 'Latest version',\n        transforms: [sortable],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'upgradable',\n        title: 'Status',\n        props: {\n            width: 20\n        },\n        renderFunc: value => createUpgradableColumn(value)\n    }\n];\n\nexport const systemsRowActions = showRemediationModal => {\n    return [\n        {\n            title: 'Apply all applicable advisories',\n            onClick: (event, rowId, rowData) => {\n                fetchApplicableSystemAdvisoriesApi({\n                    id: rowData.id,\n                    limit: 10000\n                }).then(res =>\n                    showRemediationModal(\n                        remediationProvider(\n                            res.data.map(item => item.id),\n                            rowData.id\n                        )\n                    )\n                );\n            }\n        }\n    ];\n};\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}