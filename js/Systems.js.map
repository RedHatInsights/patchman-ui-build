{"version":3,"sources":["webpack:///./node_modules/@patternfly/react-table/dist/esm/index.js","webpack:///./src/SmartComponents/Systems/Systems.scss","webpack:///./node_modules/@patternfly/react-table/dist/esm/components/Table/utils/index.js","webpack:///./src/SmartComponents/Systems/Systems.scss?5f80","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.js","webpack:///./src/SmartComponents/Systems/Systems.js"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","init","columns","rows","entities","modifyInventory","state","loaded","inventoryEntitiesReducer","action","type","systemsListColumns","title","composed","props","width","renderFunc","value","createAdvisoriesIcons","Systems","dispatch","useDispatch","React","useState","InventoryCmp","setInventoryCmp","rawSystems","useSelector","SystemsListStore","hosts","useMemo","createSystemsRows","metadata","queryParams","useEffect","fetchSystemsAction","async","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","register","getStore","InventoryTable","convertLimitOffset","limit","offset","page","perPage","handleRefresh","useCallback","params","per_page","page_size","getOffsetFromPageLimit","getLimitFromPageSize","changeSystemsListParams","Fragment","Header","showTabs","items","total","total_items","onRefresh"],"mappings":"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","file":"js/Systems.js","sourcesContent":["export * from './components';\n//# sourceMappingURL=index.js.map","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".advisories-icons-wrapper>span{margin-right:var(--pf-global--spacer--sm)}.advisories-icons-wrapper>span>svg{margin-right:var(--pf-global--spacer--xs)}\\n\", \"\"]);\n\n","export * from './transformers';\nexport * from './headerUtils';\nexport * from './formatters';\nexport * from './utils';\n//# sourceMappingURL=index.js.map","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Systems.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Systems.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Systems.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: []\n};\n// Reducer\n\nfunction modifyInventory(columns, state) {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = columns => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n\n        default:\n            return state;\n    }\n};\n","import { createAdvisoriesIcons } from '../../Utilities/Helpers';\n\nexport const systemsListColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        props: {\n            width: 40\n        }\n    },\n    {\n        key: 'applicable_advisories',\n        title: 'Applicable advisories',\n        props: {\n            width: 30\n        },\n        renderFunc: value => createAdvisoriesIcons(value)\n    },\n    {\n        key: 'status',\n        title: 'Status',\n        props: {\n            width: 30\n        }\n    }\n];\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-console */\nimport * as reactCore from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport * as pfReactTable from '@patternfly/react-table';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { getStore, register } from '../../store';\nimport {\n    changeSystemsListParams,\n    fetchSystemsAction\n} from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport {\n    convertLimitOffset,\n    getLimitFromPageSize,\n    getOffsetFromPageLimit\n} from '../../Utilities/Helpers';\nimport { systemsListColumns } from './SystemsListAssets';\nimport './Systems.scss';\n\nconst Systems = () => {\n    const dispatch = useDispatch();\n    const [InventoryCmp, setInventoryCmp] = React.useState();\n    const rawSystems = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.rows\n    );\n    const hosts = React.useMemo(() => createSystemsRows(rawSystems), [\n        rawSystems\n    ]);\n    const metadata = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.queryParams\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchSystemsAction(queryParams));\n    }, [queryParams]);\n\n    const fetchInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities\n        } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        register({\n            ...mergeWithEntities(inventoryEntitiesReducer(systemsListColumns))\n        });\n        const { InventoryTable } = inventoryConnector(getStore());\n        setInventoryCmp(() => InventoryTable);\n    };\n\n    React.useEffect(() => {\n        fetchInventory();\n    }, []);\n\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n\n    function apply(params) {\n        dispatch(changeSystemsListParams(params));\n    }\n\n    const handleRefresh = React.useCallback(({ page, per_page: perPage }) => {\n        if (metadata.page !== page || metadata.page_size !== perPage) {\n            apply({\n                offset:\n                    metadata.limit !== perPage\n                        ? 0\n                        : getOffsetFromPageLimit(page, perPage),\n                limit: getLimitFromPageSize(perPage)\n            });\n        }\n    });\n    return (\n        <React.Fragment>\n            <Header title={'System Patching'} showTabs />\n            <Main>\n                {InventoryCmp && (\n                    <InventoryCmp\n                        items={hosts}\n                        page={page}\n                        total={metadata.total_items}\n                        perPage={perPage}\n                        onRefresh={handleRefresh}\n                    />\n                )}\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n"],"sourceRoot":""}