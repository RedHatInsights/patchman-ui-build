{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/InfoBox/InfoBox.scss","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/InfoBox/InfoBox.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/AdvisorySystems/AdvisorySystems.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/InfoBox/InfoBox.scss?de77"],"names":["___CSS_LOADER_EXPORT___","push","module","id","InfoBox","title","text","isLoading","content","color","Split","className","hasGutter","WithLoader","variant","WithLoaderVariants","loading","size","SplitItem","style","backgroundColor","Bullseye","isFilled","TextContent","Text","component","TextVariants","propTypes","AdvisorySeverityInfo","severity","Popover","position","enableFlip","headerContent","label","bodyContent","footerContent","href","target","rel","Flex","FlexItem","spacer","default","intl","messages","AdvisoryHeader","attributes","severityObject","getSeverityById","Grid","minHeight","GridItem","md","sm","centered","Stack","StackItem","whiteSpace","preserveNewlines","description","public_date","date","processDate","modified_date","ExternalLink","link","value","AdvisorySystems","advisoryName","dispatch","useDispatch","React","RemediationModalCmp","setRemediationModalCmp","rawAdvisorySystems","useSelector","AdvisorySystemsStore","rows","status","selectedRows","hosts","createSystemsRows","metadata","queryParams","inventoryColumns","entities","columns","handleRefresh","useHandleRefresh","apply","filter","search","clearAdvisorySystemsStore","useDeepCompareEffect","fetchAdvisorySystemsAction","usePagePerPage","limit","offset","page","perPage","params","changeAdvisorySystemsParams","removeFilter","useRemoveFilter","filterConfig","items","searchFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","showRemediationModal","data","RemediationModal","onSelect","useOnSelect","fetchAdvisorySystems","toSelect","type","payload","getMangledColumns","updated","key","systemsListColumns","onSort","useSortColumn","sortBy","createSortBy","sort","selectedCount","arrayFromObj","length","STATUS_REJECTED","Unavailable","Inventory","onLoad","mergeWithEntities","store","getStore","register","inventoryEntitiesReducer","getState","total","total_items","onRefresh","isLoaded","STATUS_RESOLVED","actions","systemsRowActions","tableProps","canSelectAll","TableVariant","bulkSelect","count","onClick","toggleProps","checked","ToolbarGroup","ToolbarItem","Button","isDisabled","remediationProvider","Object","keys","ouiaId","AdvisoryDetail","match","advisoryId","pageTitle","setPageTitle","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearAdvisoryDetailStore","Header","headerOUIA","breadcrumbs","to","paths","isActive","STATUS_LOADING","Main","withRouter","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"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","file":"js/AdvisoryyPage.3bafbbf59735302f82cb.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".patch .infobox{background-color:var(--pf-global--BackgroundColor--150);border:var(--pf-global--BorderColor--300) var(--pf-global--BorderWidth--sm) solid;height:65px}.infobox>.pf-l-split__item:first-child{width:65px;color:black;background-color:var(--pf-global--warning-color--100)}.infobox>.pf-l-split__item:first-child>div.pf-l-bullseye svg{color:white}.infobox .pf-c-content h6{margin:0}.infobox>.pf-l-split__item:nth-child(2){display:flex;justify-content:flex-start;align-items:center}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/PresentationalComponents/InfoBox/InfoBox.scss\"],\"names\":[],\"mappings\":\"AAAA,gBAAgB,uDAAuD,CAAC,iFAAiF,CAAC,WAAW,CAAC,uCAAuC,UAAU,CAAC,WAAW,CAAC,qDAAqD,CAAC,6DAA6D,WAAW,CAAC,0BAA0B,QAAQ,CAAC,wCAAwC,YAAY,CAAC,0BAA0B,CAAC,kBAAkB\",\"sourcesContent\":[\".patch .infobox{background-color:var(--pf-global--BackgroundColor--150);border:var(--pf-global--BorderColor--300) var(--pf-global--BorderWidth--sm) solid;height:65px}.infobox>.pf-l-split__item:first-child{width:65px;color:black;background-color:var(--pf-global--warning-color--100)}.infobox>.pf-l-split__item:first-child>div.pf-l-bullseye svg{color:white}.infobox .pf-c-content h6{margin:0}.infobox>.pf-l-split__item:nth-child(2){display:flex;justify-content:flex-start;align-items:center}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { Text, TextContent, TextVariants, Bullseye, Split, SplitItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\nimport './InfoBox.scss';\n\nconst InfoBox = ({ title, text, isLoading, content, color }) => {\n    return (\n        <Split className=\"infobox\" hasGutter>\n            <WithLoader\n                variant={WithLoaderVariants.skeleton}\n                loading={isLoading}\n                size=\"lg\"\n            >\n                <SplitItem style={{ backgroundColor: color }}>\n                    <Bullseye>{content}</Bullseye>\n                </SplitItem>\n                <SplitItem isFilled>\n                    <TextContent>\n                        <Text component={TextVariants.h6}>{title}</Text>\n                        <Text component={TextVariants.p}>{text}</Text>\n                    </TextContent>\n                </SplitItem>\n            </WithLoader>\n        </Split>\n    );\n};\n\nInfoBox.propTypes = {\n    title: propTypes.string,\n    text: propTypes.any,\n    isLoading: propTypes.bool,\n    content: propTypes.any,\n    color: propTypes.string\n};\n\nexport default InfoBox;\n","import { Text, TextContent, TextVariants, Popover } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Popover\n            position=\"bottom\"\n            enableFlip\n            headerContent={<div>{severity.label + ' severity'}</div>}\n            bodyContent={\n                <TextContent>\n                    <Text component={TextVariants.p}>{severity.text}</Text>\n                </TextContent>\n            }\n            footerContent={\n                <a\n                    href=\"https://access.redhat.com/security/updates/classification/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <Flex>\n                        <FlexItem spacer={{ default: 'spacerSm' }}>\n                            <ExternalLinkSquareAltIcon />\n                        </FlexItem>\n                        <FlexItem spacer={{ default: 'spacerSm' }}>\n                            {intl.formatMessage(messages.linksSearchSecurityRatings)}\n                        </FlexItem>\n                    </Flex>\n                </a>\n            }\n        >\n            <a>{intl.formatMessage(messages.linksLearnMore)}</a>\n        </Popover>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { getSeverityById, preserveNewlines } from '../../Utilities/Helpers';\nimport InfoBox from '../InfoBox/InfoBox';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\nimport ExternalLink from '../Snippets/ExternalLink';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const severityObject = getSeverityById(attributes.severity);\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                preserveNewlines(attributes.description)\n                            }\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsPublicDate, { date: processDate(\n                                        attributes.public_date\n                                    )\n                                    })}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsModifiedDate, { date: processDate(\n                                        attributes.modified_date\n                                    )\n                                    })}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        <StackItem>\n                            <ExternalLink link={`https://access.redhat.com/errata/${attributes.id}`}\n                                text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n                        </StackItem>\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                {severityObject.value !== 0 && (\n                    <InfoBox\n                        isLoading={isLoading}\n                        title={severityObject.label}\n                        color={severityObject.color}\n                        text={\n                            <AdvisorySeverityInfo severity={severityObject} />\n                        }\n                        content={<SecurityIcon size=\"lg\" />}\n                    />\n                )}\n            </GridItem>\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { Button, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { AnsibeTowerIcon } from '@patternfly/react-icons';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/components/cjs/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport { getStore, register } from '../../store';\nimport { changeAdvisorySystemsParams, clearAdvisorySystemsStore, fetchAdvisorySystemsAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { fetchAdvisorySystems } from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, buildFilterChips, createSortBy, remediationProvider } from '../../Utilities/Helpers';\nimport {\n    useDeepCompareEffect, useHandleRefresh, useOnSelect, usePagePerPage, useRemoveFilter,\n    useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from '../Systems/SystemsListAssets';\n\nconst AdvisorySystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawAdvisorySystems = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.rows\n    );\n    const status = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.status\n    );\n\n    const selectedRows = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.selectedRows\n    );\n    const hosts = React.useMemo(\n        () => createSystemsRows(rawAdvisorySystems, selectedRows),\n        [rawAdvisorySystems]\n    );\n    const metadata = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.queryParams\n    );\n\n    const inventoryColumns = useSelector(\n        ({ entities }) => entities && entities.columns\n    );\n\n    const handleRefresh = useHandleRefresh(metadata, apply);\n    const { filter, search } = queryParams;\n\n    React.useEffect(() => {\n        return () => dispatch(clearAdvisorySystemsStore());\n    }, []);\n\n    useDeepCompareEffect(() => {\n        dispatch(\n            fetchAdvisorySystemsAction({ id: advisoryName, ...queryParams })\n        );\n    }, [queryParams]);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    function apply(params) {\n        dispatch(changeAdvisorySystemsParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search, intl.formatMessage(messages.labelsFiltersSystemsSearch))\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const fetchAllData = () =>\n        fetchAdvisorySystems({ ...queryParams, id: advisoryName, limit: -1 });\n\n    const onSelect = useOnSelect(rawAdvisorySystems,  selectedRows, fetchAllData, selectRows);\n\n    // This is used ONLY for sorting purposes\n    const getMangledColumns = () => {\n        let updated = inventoryColumns && inventoryColumns.filter(({ key }) => key === 'updated')[0];\n        updated = { ...updated, key: 'last_upload' };\n        return [...systemsListColumns, updated];\n    };\n\n    const onSort = useSortColumn(getMangledColumns(), apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(getMangledColumns(), metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    return (\n        <React.Fragment>\n            {status === STATUS_REJECTED ? <Unavailable/> : (\n                <InventoryTable\n                    onLoad={({ mergeWithEntities }) => {\n                        const store = getStore();\n                        register({\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(systemsListColumns, store.getState().AdvisorySystemsStore)\n                            )\n                        });\n                    }}\n                    items={hosts}\n                    page={page}\n                    total={metadata.total_items}\n                    perPage={perPage}\n                    onRefresh={handleRefresh}\n                    isLoaded={status === STATUS_RESOLVED}\n                    actions={systemsRowActions(showRemediationModal)}\n                    tableProps = {{ canSelectAll: false, onSort, sortBy,\n                        variant: TableVariant.compact, className: 'patchCompactInventory' }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig = {activeFiltersConfig}\n                    bulkSelect={onSelect && {\n                        count: selectedCount,\n                        items: [{\n                            title: `Select none (0)`,\n                            onClick: () => {\n                                onSelect('none');\n                            }\n                        }, {\n                            title: `Select page (${hosts.length})`,\n                            onClick: () => {\n                                onSelect('page');\n                            }\n                        },\n                        {\n                            title: `Select all (${metadata.total_items})`,\n                            onClick: () => {\n                                onSelect('all');\n                            }\n                        }],\n                        onSelect: (value) => {\n                            value ? onSelect('all') : onSelect('none');\n                        },\n                        toggleProps: {\n                            'data-ouia-component-type': 'bulk-select-toggle-button'\n                        },\n                        checked: selectedCount === metadata.total_items ? true : selectedCount === 0 ? false : null\n                    }}\n                >\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <Button\n                                className={'remediationButtonPatch'}\n                                isDisabled={\n                                    arrayFromObj(selectedRows).length === 0\n                                }\n                                onClick={() =>\n                                    showRemediationModal(\n                                        remediationProvider(\n                                            advisoryName,\n                                            Object.keys(selectedRows)\n                                        )\n                                    )\n                                }\n                                ouiaId={'toolbar-remediation-button'}\n                            >\n                                <AnsibeTowerIcon/>&nbsp;{intl.formatMessage(messages.labelsRemediate)}\n                            </Button>\n                            <RemediationModalCmp />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </InventoryTable>\n            )}\n        </React.Fragment>\n    );\n};\n\nAdvisorySystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AdvisorySystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components';\nimport { paths } from '../../Routes';\nimport { clearAdvisoryDetailStore, clearAdvisorySystemsStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { STATUS_LOADING, STATUS_REJECTED } from '../../Utilities/constants';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport AdvisorySystems from '../AdvisorySystems/AdvisorySystems';\n\nconst AdvisoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [advisoryName] = React.useState(match.params.advisoryId);\n\n    const pageTitle = `${advisoryName} - ${intl.formatMessage(messages.titlesAdvisories)}`;\n    setPageTitle(pageTitle);\n\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearAdvisorySystemsStore());\n            dispatch(clearAdvisoryDetailStore());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                headerOUIA={'advisory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchAdvisories),\n                        to: paths.advisories.to,\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status === STATUS_REJECTED ? <Unavailable /> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status === STATUS_LOADING}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        <AdvisorySystems advisoryName={advisoryName} />\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisoryDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(AdvisoryDetail);\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/@redhat-cloud-services/frontend-components-config/src/css-prefix-loader.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./InfoBox.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/@redhat-cloud-services/frontend-components-config/src/css-prefix-loader.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./InfoBox.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}