{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/Packages/Packages.js"],"names":["dispatch","useDispatch","setPageTitle","packageRows","useSelector","PackagesListStore","rows","React","createPackagesRows","error","status","metadata","queryParams","filter","search","apply","params","changePackagesListParams","fetchPackagesAction","useRemoveFilter","buildFilterChips","onSort","useSortColumn","packagesColumns","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","errorState","STATUS_REJECTED","addNotification","variant","title","description","detail","intl","messages","headerOUIA","columns","store","onExport","_","format","date","Date","toISOString","replace","split","filename","exportPackagesCSV","then","data","downloadFile","exportPackagesJSON","JSON","stringify","compact","filterConfig","items","searchFilter","remediationButtonOUIA","tableOUIA","paginationOUIA"],"mappings":"0cAqHA,QAhGiB,WACb,IAAMA,GAAWC,oBAEjBC,QADkB,YAElB,IAAMC,GAAcC,kBAChB,qBAAGC,kBAA0CC,QAE3CA,EAAOC,aAAc,kBAAMC,QAAmBL,KAAc,CAACA,IAE7DM,GAAQL,kBACV,qBAAGC,kBAA0CI,SAE3CC,GAASN,kBACX,qBAAGC,kBAA0CK,UAE3CC,GAAWP,kBACb,qBAAGC,kBAA0CM,YAE3CC,GAAcR,kBAChB,qBAAGC,kBAA0CO,eAGzCC,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,OAMhB,SAASC,EAAMC,GACXhB,GAASiB,QAAyBD,IALtCT,eAAgB,WACZP,GAASkB,QAAoBN,MAC9B,CAACA,KAMiBO,QAAgBN,EAAQE,IAGhCK,QAAiBP,EAAQC,GAHtC,IAkBMO,GAASC,QAAcC,KAAiBR,GACxCS,EAASjB,aACX,kBAAMkB,QAAaF,KAAiBZ,EAASe,KAAM,KACnD,CAACf,EAASe,OAERC,GAAYC,QAAWjB,EAASkB,MAAOd,GACvCe,GAAkBC,QAAiBhB,GAEnCiB,EAA8B,MAAjBvB,EAAMC,OAAkB,kBAAC,IAAD,MAAkB,kBAAC,IAAD,MAS7D,OAPIA,IAAWuB,MAAoC,MAAjBxB,EAAMC,QACpCV,GAASkC,qBAAgB,CACrBC,QAAS,SACTC,MAAO3B,EAAM2B,MACbC,YAAa5B,EAAM6B,UAIvB,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAQF,MAAOG,kBAAmBC,yBAA+BC,WAAY,aAC7E,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,QAASnB,KACToB,MAAO,CAAErC,OAAMK,WAAUD,SAAQE,eACjCS,OAAQA,EACRuB,SApCC,SAACC,EAAGC,GACjB,IAAMC,GAAO,IAAIC,MAAOC,cAAcC,QAAQ,QAAS,KAAKC,MAAM,KAAK,GAAK,OACtEC,EAAW,YAAH,OAAeL,GACd,QAAXD,GACAO,QAAkBzC,GAAa0C,MAAK,SAAAC,GAAI,OAAIC,QAAaD,EAAMH,EAAU,WAGzEK,QAAmB7C,GAAa0C,MAAK,SAAAC,GAAI,OAAIC,QAAaE,KAAKC,UAAUJ,GAAOH,EAAU,YA8BlF5B,OAAQA,EACRG,UAAWA,EACXG,gBAAiBA,EACjB8B,SAAO,EACP7C,MAAOA,EACP8C,aAAc,CACVC,MAAO,EACHC,OAAahD,EAAOH,EAAYE,OAAQyB,kBAAmBC,oCAGnEwB,sBAAuB,6BACvBC,UAAW,wBACXC,eAAgB,6BAChBlC,WAAYA","file":"js/Packages.394f4dfcb4632f610388.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components';\nimport { NoSystemData } from '../../PresentationalComponents/Snippets/NoSystemData';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { packagesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changePackagesListParams, fetchPackagesAction } from '../../store/Actions/Actions';\nimport { STATUS_REJECTED } from '../../Utilities/constants';\nimport { createPackagesRows } from '../../Utilities/DataMappers';\nimport { buildFilterChips, createSortBy } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useRemoveFilter, useSetPage, useSortColumn, setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport { exportPackagesCSV, exportPackagesJSON } from '../../Utilities/api';\n\nconst Packages = () => {\n    const dispatch = useDispatch();\n    const pageTitle = 'Packages';\n    setPageTitle(pageTitle);\n    const packageRows = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.rows\n    );\n    const rows = React.useMemo(() => createPackagesRows(packageRows), [packageRows]);\n\n    const error = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.error\n    );\n    const status = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.status\n    );\n    const metadata = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ PackagesListStore }) => PackagesListStore.queryParams\n    );\n\n    const { filter, search } = queryParams;\n\n    React.useEffect(() => {\n        dispatch(fetchPackagesAction(queryParams));\n    }, [queryParams]);\n\n    function apply(params) {\n        dispatch(changePackagesListParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    const onExport = (_, format) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const filename = `packages-${date}`;\n        if (format === 'csv') {\n            exportPackagesCSV(queryParams).then(data => downloadFile(data, filename, 'csv'));\n        }\n        else {\n            exportPackagesJSON(queryParams).then(data => downloadFile(JSON.stringify(data), filename, 'json'));\n        }\n    };\n\n    const onSort = useSortColumn(packagesColumns, apply);\n    const sortBy = React.useMemo(\n        () => createSortBy(packagesColumns, metadata.sort, 0),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const errorState = error.status === 404 ?  <NoSystemData/> : <Unavailable />;\n\n    if (status === STATUS_REJECTED && error.status !== 404) {\n        dispatch(addNotification({\n            variant: 'danger',\n            title: error.title,\n            description: error.detail\n        }));}\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchPackages)} headerOUIA={'packages'}/>\n            <Main>\n                <TableView\n                    columns={packagesColumns}\n                    store={{ rows, metadata, status, queryParams }}\n                    onSort={onSort}\n                    onExport={onExport}\n                    sortBy={sortBy}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    compact\n                    apply={apply}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search, intl.formatMessage(messages.labelsFiltersPackagesSearch))\n                        ]\n                    }}\n                    remediationButtonOUIA={'toolbar-remediation-button'}\n                    tableOUIA={'package-details-table'}\n                    paginationOUIA={'package-details-pagination'}\n                    errorState={errorState}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Packages;\n"],"sourceRoot":""}