{"version":3,"sources":["webpack:///./src/SmartComponents/Advisories/Advisories.js"],"names":["Advisories","dispatch","useDispatch","advisories","useSelector","AdvisoryListStore","rows","expandedRows","queryParams","selectedRows","metadata","isLoading","React","useMemo","createAdvisoriesRows","useEffect","fetchApplicableAdvisories","onCollapse","useCallback","_","rowId","value","expandAdvisoryRow","getRowIdByIndexExpandable","onSort","useSortColumn","advisoriesColumns","apply","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","params","changeAdvisoryListParams","Fragment","title","showTabs","columns","filters","filter"],"mappings":"0FAAA,0GA+FeA,UAzEI,WACf,IAAMC,EAAWC,wBACXC,EAAaC,uBACf,qBAAGC,kBAA0CC,QAE3CC,EAAeH,uBACjB,qBAAGC,kBAA0CE,gBAE3CC,EAAcJ,uBAChB,qBAAGC,kBAA0CG,eAE3CC,EAAeL,uBACjB,qBAAGC,kBAA0CI,gBAE3CC,EAAWN,uBACb,qBAAGC,kBAA0CK,YAE3CC,EAAYP,uBACd,qBAAGC,kBAA0CM,aAE3CL,EAAOM,IAAMC,SACf,kBAAMC,YAAqBX,EAAYI,EAAcE,KACrD,CAACN,EAAYI,EAAcE,IAG/BG,IAAMG,WAAU,WACZd,EAASe,YAA0BR,MACpC,CAACA,IAEJ,IAAMS,EAAaL,IAAMM,aAAY,SAACC,EAAGC,EAAOC,GAAX,OACjCpB,EACIqB,YAAkB,CACdF,MAAOG,YAA0BpB,EAAYiB,GAC7CC,cAKNG,EAASC,YAAcC,IAAmBC,EAAO,GACjDC,EAAShB,IAAMC,SACjB,kBAAMgB,YAAaH,IAAmBhB,EAASoB,KAAM,KACrD,CAACpB,EAASoB,OAGRC,EAAYC,YAAWtB,EAASuB,MAAON,GACvCO,EAAkBC,YAAiBR,GAEzC,SAASA,EAAMS,GACXnC,EAASoC,YAAyBD,IAGtC,OACI,kBAAC,IAAME,SAAP,KACI,kBAAC,IAAD,CAAQC,MAAO,kBAAmBC,UAAQ,IAC1C,kBAAC,OAAD,KACI,kBAAC,IAAD,CACIC,QAASf,IACTpB,KAAMA,EACNI,SAAUA,EACVO,WAAYA,EACZc,UAAWA,EACXG,gBAAiBA,EACjBV,OAAQA,EACRI,OAAQA,EACRjB,UAAWA,EACXgB,MAAOA,EACPe,QAASlC,EAAYmC","file":"js/Advisories.js","sourcesContent":["import { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AdvisoriesTable from '../../PresentationalComponents/AdvisoriesTable/AdvisoriesTable';\nimport { advisoriesColumns } from '../../PresentationalComponents/AdvisoriesTable/AdvisoriesTableAssets';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport {\n    changeAdvisoryListParams,\n    expandAdvisoryRow,\n    fetchApplicableAdvisories\n} from '../../store/Actions/Actions';\nimport { createAdvisoriesRows } from '../../Utilities/DataMappers';\nimport {\n    createSortBy,\n    getRowIdByIndexExpandable\n} from '../../Utilities/Helpers';\nimport {\n    usePerPageSelect,\n    useSetPage,\n    useSortColumn\n} from '../../Utilities/Hooks';\n\nconst Advisories = () => {\n    const dispatch = useDispatch();\n    const advisories = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.rows\n    );\n    const expandedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.metadata\n    );\n    const isLoading = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.isLoading\n    );\n    const rows = React.useMemo(\n        () => createAdvisoriesRows(advisories, expandedRows, selectedRows),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchApplicableAdvisories(queryParams));\n    }, [queryParams]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const onSort = useSortColumn(advisoriesColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(advisoriesColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeAdvisoryListParams(params));\n    }\n\n    return (\n        <React.Fragment>\n            <Header title={'System Patching'} showTabs />\n            <Main>\n                <AdvisoriesTable\n                    columns={advisoriesColumns}\n                    rows={rows}\n                    metadata={metadata}\n                    onCollapse={onCollapse}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    sortBy={sortBy}\n                    isLoading={isLoading}\n                    apply={apply}\n                    filters={queryParams.filter}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Advisories;\n"],"sourceRoot":""}