{"version":3,"sources":["webpack:///./node_modules/lodash/flatMap.js","webpack:///./node_modules/lodash/_baseFlatten.js","webpack:///./node_modules/lodash/_arrayPush.js","webpack:///./node_modules/lodash/_isFlattenable.js","webpack:///./node_modules/lodash/_Symbol.js","webpack:///./node_modules/lodash/_root.js","webpack:///./node_modules/lodash/_freeGlobal.js","webpack:///./node_modules/lodash/map.js","webpack:///./src/PresentationalComponents/AdvisoriesTable/AdvisoriesTable.js","webpack:///./src/PresentationalComponents/AdvisoriesTable/AdvisoriesTableAssets.js","webpack:///./src/SmartComponents/Advisories/Advisories.js","webpack:///./src/Utilities/DataMappers.js","webpack:///./src/Utilities/Hooks.js"],"names":["baseFlatten","__webpack_require__","map","module","exports","collection","iteratee","arrayPush","isFlattenable","array","depth","predicate","isStrict","result","index","length","value","values","offset","Symbol","isArguments","isArray","spreadableSymbol","isConcatSpreadable","undefined","freeGlobal","freeSelf","self","Object","root","Function","global","Array","AdvisoriesTable_AdvisoriesTable","_ref","columns","rows","onCollapse","onSelect","onSetPage","onPerPageSelect","onSort","metadata","isLoading","_React$useMemo","react_default","a","useMemo","Helpers","limit","_React$useMemo2","slicedToArray_default","page","perPage","sortBy","sort","createElement","Fragment","frontend_components","pagination","itemCount","total_items","isCompact","filterConfig","items","colSize","rowSize","Table","aria-label","cells","Header","Body","propTypes","prop_types_default","func","object","bool","PresentationalComponents_AdvisoriesTable_AdvisoriesTable","advisoriesColumns","title","cellFormatters","collapsible","transforms","sortable","classNames","key","__webpack_exports__","dispatch","es","advisories","AdvisoryListStore","expandedRows","_ref2","queryParams","_ref3","selectedRows","_ref4","_ref5","_ref6","flatMap_default","row","id","isOpen","selected","attributes","public_date","advisory_type","applicable_systems","synopsis","parent","DataMappers_createAdvisoriesRows","useEffect","Actions","useCallback","_","rowId","callback","arguments","direction","columnName","desc","Hooks_useSortColumn","apply","Hooks_useSetPage","Hooks_usePerPageSelect","params","Header_Header","showTabs"],"mappings":"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","file":"js/Advisories.js","sourcesContent":["var baseFlatten = require('./_baseFlatten'),\n    map = require('./map');\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nmodule.exports = flatMap;\n","var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n","var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport {\n    PrimaryToolbar,\n    SkeletonTable\n} from '@redhat-cloud-services/frontend-components';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { convertLimitOffset, createSortBy } from '../../Utilities/Helpers';\n\nconst AdvisoriesTable = ({\n    columns,\n    rows,\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    metadata,\n    isLoading\n}) => {\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n    const sortBy = React.useMemo(\n        () => createSortBy(columns, metadata.sort, 2),\n        [metadata.sort]\n    );\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: metadata.total_items,\n                    page,\n                    perPage,\n                    isCompact: false,\n                    onSetPage,\n                    onPerPageSelect\n                }}\n                filterConfig={{ items: [] }}\n            />\n            {isLoading ? (\n                <SkeletonTable colSize={5} rowSize={20} />\n            ) : (\n                <Table\n                    aria-label=\"Advisories table\"\n                    cells={columns}\n                    onSelect={onSelect}\n                    rows={rows}\n                    onCollapse={onCollapse}\n                    onSort={onSort}\n                    sortBy={sortBy}\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n            )}\n        </React.Fragment>\n    );\n};\n\nAdvisoriesTable.propTypes = {\n    columns: PropTypes.array,\n    rows: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    metadata: PropTypes.object,\n    isLoading: PropTypes.bool\n};\n\nexport default AdvisoriesTable;\n","import { classNames, expandable, sortable } from '@patternfly/react-table';\n\nexport const advisoriesColumns = [\n    {\n        title: 'Name',\n        cellFormatters: [expandable],\n        transforms: [sortable, classNames('col-width-10')],\n        key: 'name'\n    },\n    {\n        title: 'Publish date',\n        transforms: [sortable, classNames('col-width-10')],\n        key: 'public_date'\n    },\n    {\n        title: 'Type',\n        transforms: [sortable, classNames('col-width-10')],\n        key: 'type'\n    },\n    {\n        title: 'Applicable Systems',\n        transforms: [sortable, classNames('col-width-10')],\n        key: 'applicable_systems'\n    },\n    {\n        title: 'Synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        key: 'synopsis'\n    }\n];\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AdvisoriesTable from '../../PresentationalComponents/AdvisoriesTable/AdvisoriesTable';\nimport { advisoriesColumns } from '../../PresentationalComponents/AdvisoriesTable/AdvisoriesTableAssets';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport {\n    changeAdvisoryListParams,\n    expandAdvisoryRow,\n    fetchApplicableAdvisories,\n    selectAdvisoryRow\n} from '../../store/Actions/Actions';\nimport { createAdvisoriesRows } from '../../Utilities/DataMappers';\nimport { getRowIdByIndexExpandable } from '../../Utilities/Helpers';\nimport {\n    usePerPageSelect,\n    useSetPage,\n    useSortColumn\n} from '../../Utilities/Hooks';\n\nconst Advisories = () => {\n    const dispatch = useDispatch();\n    const advisories = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.rows\n    );\n    const expandedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.metadata\n    );\n    const isLoading = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.isLoading\n    );\n    const rows = React.useMemo(\n        () => createAdvisoriesRows(advisories, expandedRows, selectedRows),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchApplicableAdvisories(queryParams));\n    }, [queryParams]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const onSelect = React.useCallback((_, value, rowId) =>\n        dispatch(\n            selectAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const onSort = useSortColumn(advisoriesColumns, apply, 2);\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeAdvisoryListParams(params));\n    }\n\n    return (\n        <React.Fragment>\n            <Header title={'System Patching'} showTabs />\n            <Main>\n                <AdvisoriesTable\n                    columns={advisoriesColumns}\n                    rows={rows}\n                    metadata={metadata}\n                    onCollapse={onCollapse}\n                    onSelect={onSelect}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    isLoading={isLoading}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Advisories;\n","/* eslint-disable no-console */\nimport { flatMap } from 'lodash';\n\nexport const createAdvisoriesRows = (rows, expandedRows, selectedRows) => {\n    return flatMap(rows, (row, index) => {\n        return [\n            {\n                id: row.id,\n                isOpen: expandedRows[row.id] === true,\n                selected: selectedRows[row.id] === true,\n                cells: [\n                    row.id,\n                    row.attributes.public_date,\n                    row.attributes.advisory_type,\n                    row.attributes.applicable_systems,\n                    row.attributes.synopsis\n                ]\n            },\n            {\n                cells: [\n                    {\n                        title: 'asd'\n                    }\n                ],\n                parent: index * 2\n            }\n        ];\n    });\n};\n","import { SortByDirection } from '@patternfly/react-table';\nimport React from 'react';\nimport { getLimitFromPageSize, getOffsetFromPageLimit } from './Helpers';\n\nexport const useSetPage = (limit, callback) => {\n    const onSetPage = React.useCallback((_, page) =>\n        callback({ offset: getOffsetFromPageLimit(page, limit) })\n    );\n    return onSetPage;\n};\n\nexport const usePerPageSelect = callback => {\n    const onPerPageSelect = React.useCallback((_, perPage) =>\n        callback({ limit: getLimitFromPageSize(perPage), offset: 0 })\n    );\n    return onPerPageSelect;\n};\n\nexport const useSortColumn = (columns, callback, offset = 0) => {\n    const onSort = React.useCallback((_, index, direction) => {\n        let columnName = columns[index - offset].key;\n        if (direction === SortByDirection.desc) {\n            columnName = '-' + columnName;\n        }\n\n        callback({ sort: columnName });\n    });\n    return onSort;\n};\n"],"sourceRoot":""}