{"version":3,"sources":["webpack:///./src/SmartComponents/Advisories/Advisories.js"],"names":["Advisories","history","dispatch","useDispatch","React","useState","firstMount","setFirstMount","advisories","useSelector","AdvisoryListStore","rows","error","expandedRows","queryParams","selectedRows","metadata","status","useMemo","createAdvisoriesRows","useEffect","apply","decodeQueryparams","location","search","push","encodeURLParams","fetchApplicableAdvisories","onCollapse","useCallback","_","rowId","value","expandAdvisoryRow","getRowIdByIndexExpandable","onSort","useSortColumn","advisoriesColumns","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","params","changeAdvisoryListParams","Fragment","title","STATUS_REJECTED","message","detail","columns","onExport","format","date","Date","toISOString","replace","split","filename","exportAdvisoriesCSV","then","data","downloadFile","exportAdvisoriesJSON","JSON","stringify","store","filterConfig","items","searchFilter","typeFilter","filter","publishDateFilter","propTypes","object","withRouter"],"mappings":"ySAoBMA,EAAa,SAAC,GAAgB,IAAdC,EAAc,EAAdA,QACZC,EAAWC,wBADe,EAEIC,IAAMC,UAAS,GAFnB,WAEzBC,EAFyB,KAEbC,EAFa,KAG1BC,EAAaC,uBACf,qBAAGC,kBAA0CC,QAE3CC,EAAQH,uBACV,qBAAGC,kBAA0CE,SAE3CC,EAAeJ,uBACjB,qBAAGC,kBAA0CG,gBAE3CC,EAAcL,uBAChB,qBAAGC,kBAA0CI,eAE3CC,EAAeN,uBACjB,qBAAGC,kBAA0CK,gBAE3CC,EAAWP,uBACb,qBAAGC,kBAA0CM,YAE3CC,EAASR,uBACX,qBAAGC,kBAA0CO,UAE3CN,EAAOP,IAAMc,SACf,kBAAMC,YAAqBX,EAAYK,EAAcE,KACrD,CAACP,EAAYK,EAAcE,IAG/BX,IAAMgB,WAAU,WACRd,GACAe,EAAMC,YAAkBrB,EAAQsB,SAASC,SACzCjB,GAAc,KAEdN,EAAQwB,KAAKC,YAAgBZ,IAC7BZ,EAASyB,YAA0Bb,OAExC,CAACA,IAEJ,IAAMc,EAAaxB,IAAMyB,aAAY,SAACC,EAAGC,EAAOC,GAAX,OACjC9B,EACI+B,YAAkB,CACdF,MAAOG,YAA0B1B,EAAYuB,GAC7CC,cAKNG,EAASC,YAAcC,IAAmBhB,EAAO,GACjDiB,EAASlC,IAAMc,SACjB,kBAAMqB,YAAaF,IAAmBrB,EAASwB,KAAM,KACrD,CAACxB,EAASwB,OAcRC,EAAYC,YAAW1B,EAAS2B,MAAOtB,GACvCuB,EAAkBC,YAAiBxB,GAEzC,SAASA,EAAMyB,GACX5C,EAAS6C,YAAyBD,IAGtC,OACI,kBAAC,IAAME,SAAP,KACI,kBAAC,IAAD,CAAQC,MAAO,eACf,kBAAC,OAAD,KACKhC,IAAWiC,IAAkB,kBAAC,IAAD,CAAOC,QAASvC,EAAMwC,SAChD,kBAAC,IAAD,CACIC,QAAShB,IACTT,WAAYA,EACZa,UAAWA,EACXG,gBAAiBA,EACjBT,OAAQA,EACRmB,SA7BH,SAACxB,EAAGyB,GACjB,IAAMC,GAAO,IAAIC,MAAOC,cAAcC,QAAQ,QAAS,KAAKC,MAAM,KAAK,GAAK,OACtEC,EAAW,yBAAH,OAA4BL,GAC3B,QAAXD,EACAO,YAAoBhD,GAAaiD,MAAK,SAAAC,GAAI,OAAIC,uBAAaD,EAAMH,EAAU,UAG3EK,YAAqBpD,GAAaiD,MAAK,SAAAC,GAAI,OAAIC,uBAAaE,KAAKC,UAAUJ,GAAOH,EAAU,YAuBhFvB,OAAQA,EACRjB,MAAOA,EACPgD,MAAO,CAAE1D,OAAMK,WAAUC,SAAQH,eACjCwD,aAAc,CACVC,MAAO,CACHC,YAAanD,EAAOP,EAAYU,QAChCiD,YAAWpD,EAAOP,EAAY4D,QAC9BC,YAAkBtD,EAAOP,EAAY4D,eASrE1E,EAAW4E,UAAY,CACnB3E,QAAS2E,IAAUC,QAGRC,sBAAW9E","file":"js/Advisories.js","sourcesContent":["import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport Error from '../../PresentationalComponents/Snippets/Error';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { advisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changeAdvisoryListParams, expandAdvisoryRow, fetchApplicableAdvisories } from '../../store/Actions/Actions';\nimport { exportAdvisoriesCSV, exportAdvisoriesJSON } from '../../Utilities/api';\nimport { STATUS_REJECTED } from '../../Utilities/constants';\nimport { createAdvisoriesRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams, getRowIdByIndexExpandable } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn } from '../../Utilities/Hooks';\n\nconst Advisories = ({ history }) => {\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const advisories = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.rows\n    );\n    const error = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.error\n    );\n    const expandedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.status\n    );\n    const rows = React.useMemo(\n        () => createAdvisoriesRows(advisories, expandedRows, selectedRows),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchApplicableAdvisories(queryParams));\n        }\n    }, [queryParams]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const onSort = useSortColumn(advisoriesColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(advisoriesColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const onExport = (_, format) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const filename = `applicable-advisories-${date}`;\n        if (format === 'csv') {\n            exportAdvisoriesCSV(queryParams).then(data => downloadFile(data, filename, 'csv'));\n        }\n        else {\n            exportAdvisoriesJSON(queryParams).then(data => downloadFile(JSON.stringify(data), filename, 'json'));\n        }\n    };\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeAdvisoryListParams(params));\n    }\n\n    return (\n        <React.Fragment>\n            <Header title={'Advisories'} />\n            <Main>\n                {status === STATUS_REJECTED ? <Error message={error.detail}/> :\n                    <TableView\n                        columns={advisoriesColumns}\n                        onCollapse={onCollapse}\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        onSort={onSort}\n                        onExport={onExport}\n                        sortBy={sortBy}\n                        apply={apply}\n                        store={{ rows, metadata, status, queryParams }}\n                        filterConfig={{\n                            items: [\n                                searchFilter(apply, queryParams.search),\n                                typeFilter(apply, queryParams.filter),\n                                publishDateFilter(apply, queryParams.filter)\n                            ]\n                        }}\n                    />}\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisories.propTypes = {\n    history: propTypes.object\n};\n\nexport default withRouter(Advisories);\n"],"sourceRoot":""}