{"version":3,"sources":["webpack:///./src/SmartComponents/Advisories/Advisories.js"],"names":["Advisories","history","dispatch","useDispatch","React","useState","firstMount","setFirstMount","advisories","useSelector","AdvisoryListStore","rows","expandedRows","queryParams","selectedRows","metadata","isLoading","useMemo","createAdvisoriesRows","useEffect","apply","decodeQueryparams","location","search","push","encodeURLParams","fetchApplicableAdvisories","onCollapse","useCallback","_","rowId","value","expandAdvisoryRow","getRowIdByIndexExpandable","onSort","useSortColumn","advisoriesColumns","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","params","changeAdvisoryListParams","Fragment","title","showTabs","columns","store","propTypes","object","withRouter"],"mappings":"8OAaMA,EAAa,SAAC,GAAgB,IAAdC,EAAc,EAAdA,QACZC,EAAWC,wBADe,EAEIC,IAAMC,UAAS,GAFnB,WAEzBC,EAFyB,KAEbC,EAFa,KAG1BC,EAAaC,uBACf,qBAAGC,kBAA0CC,QAE3CC,EAAeH,uBACjB,qBAAGC,kBAA0CE,gBAE3CC,EAAcJ,uBAChB,qBAAGC,kBAA0CG,eAE3CC,EAAeL,uBACjB,qBAAGC,kBAA0CI,gBAE3CC,EAAWN,uBACb,qBAAGC,kBAA0CK,YAE3CC,EAAYP,uBACd,qBAAGC,kBAA0CM,aAE3CL,EAAOP,IAAMa,SACf,kBAAMC,YAAqBV,EAAYI,EAAcE,KACrD,CAACN,EAAYI,EAAcE,IAG/BV,IAAMe,WAAU,WACRb,GACAc,EAAMC,YAAkBpB,EAAQqB,SAASC,SACzChB,GAAc,KAEdN,EAAQuB,KAAKC,YAAgBZ,IAC7BX,EAASwB,YAA0Bb,OAExC,CAACA,IAEJ,IAAMc,EAAavB,IAAMwB,aAAY,SAACC,EAAGC,EAAOC,GAAX,OACjC7B,EACI8B,YAAkB,CACdF,MAAOG,YAA0BzB,EAAYsB,GAC7CC,cAKNG,EAASC,YAAcC,IAAmBhB,EAAO,GACjDiB,EAASjC,IAAMa,SACjB,kBAAMqB,YAAaF,IAAmBrB,EAASwB,KAAM,KACrD,CAACxB,EAASwB,OAGRC,EAAYC,YAAW1B,EAAS2B,MAAOtB,GACvCuB,EAAkBC,YAAiBxB,GAEzC,SAASA,EAAMyB,GACX3C,EAAS4C,YAAyBD,IAGtC,OACI,kBAAC,IAAME,SAAP,KACI,kBAAC,IAAD,CAAQC,MAAO,kBAAmBC,UAAQ,IAC1C,kBAAC,OAAD,KACI,kBAAC,IAAD,CACIC,QAASd,IACTT,WAAYA,EACZa,UAAWA,EACXG,gBAAiBA,EACjBT,OAAQA,EACRG,OAAQA,EACRjB,MAAOA,EACP+B,MAAO,CAAExC,OAAMI,WAAUC,YAAWH,oBAOxDb,EAAWoD,UAAY,CACnBnD,QAASmD,IAAUC,QAGRC,sBAAWtD","file":"js/Advisories.js","sourcesContent":["import { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport AdvisoriesTable from '../../PresentationalComponents/AdvisoriesTable/AdvisoriesTable';\nimport { advisoriesColumns } from '../../PresentationalComponents/AdvisoriesTable/AdvisoriesTableAssets';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { changeAdvisoryListParams, expandAdvisoryRow, fetchApplicableAdvisories } from '../../store/Actions/Actions';\nimport { createAdvisoriesRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams, getRowIdByIndexExpandable } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn } from '../../Utilities/Hooks';\n\nconst Advisories = ({ history }) => {\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const advisories = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.rows\n    );\n    const expandedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.metadata\n    );\n    const isLoading = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.isLoading\n    );\n    const rows = React.useMemo(\n        () => createAdvisoriesRows(advisories, expandedRows, selectedRows),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchApplicableAdvisories(queryParams));\n        }\n    }, [queryParams]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const onSort = useSortColumn(advisoriesColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(advisoriesColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeAdvisoryListParams(params));\n    }\n\n    return (\n        <React.Fragment>\n            <Header title={'System Patching'} showTabs />\n            <Main>\n                <AdvisoriesTable\n                    columns={advisoriesColumns}\n                    onCollapse={onCollapse}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    sortBy={sortBy}\n                    apply={apply}\n                    store={{ rows, metadata, isLoading, queryParams }}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisories.propTypes = {\n    history: propTypes.object\n};\n\nexport default withRouter(Advisories);\n"],"sourceRoot":""}