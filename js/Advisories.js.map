{"version":3,"sources":["webpack:///./src/PresentationalComponents/AdvisoriesTable/AdvisoriesTable.js","webpack:///./src/PresentationalComponents/AdvisoriesTable/AdvisoriesTableAssets.js","webpack:///./src/SmartComponents/Advisories/Advisories.js","webpack:///./src/Utilities/Hooks.js"],"names":["AdvisoriesTable","columns","rows","onCollapse","onSelect","onSetPage","onPerPageSelect","onSort","metadata","isLoading","React","useMemo","convertLimitOffset","limit","offset","page","perPage","sortBy","createSortBy","sort","Fragment","pagination","itemCount","total_items","isCompact","filterConfig","items","colSize","rowSize","Table","aria-label","cells","propTypes","PropTypes","array","func","object","bool","advisoriesColumns","title","cellFormatters","expandable","transforms","sortable","classNames","key","Advisories","dispatch","useDispatch","advisories","useSelector","AdvisoryListStore","expandedRows","queryParams","selectedRows","createAdvisoriesRows","useEffect","fetchApplicableAdvisories","callback","useCallback","_","rowId","value","expandAdvisoryRow","getRowIdByIndexExpandable","selectAdvisoryRow","index","direction","columnName","SortByDirection","desc","useSortColumn","apply","getOffsetFromPageLimit","getLimitFromPageSize","usePerPageSelect","params","changeAdvisoryListParams","showTabs"],"mappings":"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","file":"js/Advisories.js","sourcesContent":["import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport {\n    PrimaryToolbar,\n    SkeletonTable\n} from '@redhat-cloud-services/frontend-components';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { convertLimitOffset, createSortBy } from '../../Utilities/Helpers';\n\nconst AdvisoriesTable = ({\n    columns,\n    rows,\n    onCollapse,\n    onSelect,\n    onSetPage,\n    onPerPageSelect,\n    onSort,\n    metadata,\n    isLoading\n}) => {\n    const [page, perPage] = React.useMemo(\n        () => convertLimitOffset(metadata.limit, metadata.offset),\n        [metadata.limit, metadata.offset]\n    );\n    const sortBy = React.useMemo(\n        () => createSortBy(columns, metadata.sort, 2),\n        [metadata.sort]\n    );\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: metadata.total_items,\n                    page,\n                    perPage,\n                    isCompact: false,\n                    onSetPage,\n                    onPerPageSelect\n                }}\n                filterConfig={{ items: [] }}\n            />\n            {isLoading ? (\n                <SkeletonTable colSize={5} rowSize={20} />\n            ) : (\n                <Table\n                    aria-label=\"Advisories table\"\n                    cells={columns}\n                    onSelect={onSelect}\n                    rows={rows}\n                    onCollapse={onCollapse}\n                    onSort={onSort}\n                    sortBy={sortBy}\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n            )}\n        </React.Fragment>\n    );\n};\n\nAdvisoriesTable.propTypes = {\n    columns: PropTypes.array,\n    rows: PropTypes.array,\n    onCollapse: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSetPage: PropTypes.func,\n    onPerPageSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    metadata: PropTypes.object,\n    isLoading: PropTypes.bool\n};\n\nexport default AdvisoriesTable;\n","import { classNames, expandable, sortable } from '@patternfly/react-table';\n\nexport const advisoriesColumns = [\n    {\n        title: 'Name',\n        cellFormatters: [expandable],\n        transforms: [sortable, classNames('col-width-10')],\n        key: 'name'\n    },\n    {\n        title: 'Publish date',\n        transforms: [sortable, classNames('col-width-10')],\n        key: 'public_date'\n    },\n    {\n        title: 'Type',\n        transforms: [sortable, classNames('col-width-10')],\n        key: 'type'\n    },\n    {\n        title: 'Applicable Systems',\n        transforms: [sortable, classNames('col-width-10')],\n        key: 'applicable_systems'\n    },\n    {\n        title: 'Synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        key: 'synopsis'\n    }\n];\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AdvisoriesTable from '../../PresentationalComponents/AdvisoriesTable/AdvisoriesTable';\nimport { advisoriesColumns } from '../../PresentationalComponents/AdvisoriesTable/AdvisoriesTableAssets';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport {\n    changeAdvisoryListParams,\n    expandAdvisoryRow,\n    fetchApplicableAdvisories,\n    selectAdvisoryRow\n} from '../../store/Actions/Actions';\nimport { createAdvisoriesRows } from '../../Utilities/DataMappers';\nimport { getRowIdByIndexExpandable } from '../../Utilities/Helpers';\nimport {\n    usePerPageSelect,\n    useSetPage,\n    useSortColumn\n} from '../../Utilities/Hooks';\n\nconst Advisories = () => {\n    const dispatch = useDispatch();\n    const advisories = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.rows\n    );\n    const expandedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.metadata\n    );\n    const isLoading = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.isLoading\n    );\n    const rows = React.useMemo(\n        () => createAdvisoriesRows(advisories, expandedRows, selectedRows),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchApplicableAdvisories(queryParams));\n    }, [queryParams]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const onSelect = React.useCallback((_, value, rowId) =>\n        dispatch(\n            selectAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const onSort = useSortColumn(advisoriesColumns, apply, 2);\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeAdvisoryListParams(params));\n    }\n\n    return (\n        <React.Fragment>\n            <Header title={'System Patching'} showTabs />\n            <Main>\n                <AdvisoriesTable\n                    columns={advisoriesColumns}\n                    rows={rows}\n                    metadata={metadata}\n                    onCollapse={onCollapse}\n                    onSelect={onSelect}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    isLoading={isLoading}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Advisories;\n","import { SortByDirection } from '@patternfly/react-table';\nimport React from 'react';\nimport { getLimitFromPageSize, getOffsetFromPageLimit } from './Helpers';\n\nexport const useSetPage = (limit, callback) => {\n    const onSetPage = React.useCallback((_, page) =>\n        callback({ offset: getOffsetFromPageLimit(page, limit) })\n    );\n    return onSetPage;\n};\n\nexport const usePerPageSelect = callback => {\n    const onPerPageSelect = React.useCallback((_, perPage) =>\n        callback({ limit: getLimitFromPageSize(perPage), offset: 0 })\n    );\n    return onPerPageSelect;\n};\n\nexport const useSortColumn = (columns, callback, offset = 0) => {\n    const onSort = React.useCallback((_, index, direction) => {\n        let columnName = columns[index - offset].key;\n        if (direction === SortByDirection.desc) {\n            columnName = '-' + columnName;\n        }\n\n        callback({ sort: columnName });\n    });\n    return onSort;\n};\n"],"sourceRoot":""}