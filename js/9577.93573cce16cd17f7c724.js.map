{"version":3,"file":"js/9577.93573cce16cd17f7c724.js","mappings":"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","sources":["webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Filters/AdvisoryStatusFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Filters/PublishDateFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Filters/RebootFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Filters/StatusFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Filters/TypeFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/TableView/TableViewAssets.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/SystemAdvisories/SystemAdvisories.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/SystemPackages/SystemPackages.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/SystemDetail/SystemDetail.js"],"sourcesContent":["import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { advisoryStatuses } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst advisoryStatusFilter = (apply, currentFilter = {}) => {\n    const filterByStatus = value => {\n        value.length === 0\n            ? apply({ filter: { status: undefined } })\n            : apply({ filter: { status: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStatus),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: advisoryStatuses,\n            value: !currentFilter.status || Array.isArray(currentFilter.status)\n                ? currentFilter.status\n                : [currentFilter.status],\n            placeholder: intl.formatMessage(messages.labelsColumnsStatusPlaceholder)\n        }\n    };\n};\n\nexport default advisoryStatusFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { publicDateOptions } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { public_date: currentValue } = currentFilter;\n\n    const filterByPublicDate = value => {\n        apply({ filter: { public_date: (value !== 'all' && value) || '' } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersPublishDate),\n        type: conditionalFilterType.radio,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublicDate(value);\n            },\n            items: publicDateOptions,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsFiltersPublishDatePlaceholder)\n        }\n    };\n};\n\nexport default publishDateFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { rebootRequired } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst rebootFilter = (apply, currentFilter = {}) => {\n    let { reboot_required: currentValue } = currentFilter;\n\n    const rebootMap = React.useMemo(\n        () =>\n            rebootRequired.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n\n    const currentValueStringType = (\n        currentValue\n        && (\n            Array.isArray(currentValue)\n            && currentValue.map(value => value.toString())\n            || [currentValue.toString()]\n        )\n    );\n\n    const filterByReboot = value => {\n        apply({ filter: { reboot_required: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersReboot),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByReboot(value);\n            },\n            items: rebootMap,\n            value: currentValueStringType,\n            placeholder: intl.formatMessage(messages.labelsFiltersRebootPlaceholder)\n        }\n    };\n};\n\nexport default rebootFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { updatableTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { updatable: currentValue } = currentFilter;\n\n    const updatableTypesMap = React.useMemo(\n        () =>\n            updatableTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { updatable: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersStatus),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: updatableTypesMap,\n            value: currentValue,\n            placeholder: intl.formatMessage(messages.labelsColumnsStatusPlaceholder)\n        }\n    };\n};\n\nexport default statusFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport React from 'react';\nimport { advisoryTypes } from '../../Utilities/constants';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst typeFilter = (apply, currentFilter = {}) => {\n    const advisoryTypesMap = React.useMemo(\n        () =>\n            advisoryTypes.map(({ value, label }) => ({\n                label,\n                value: value.toString()\n            })),\n        []\n    );\n    const filterByType = value => {\n        apply({ filter: { advisory_type_name: value } });\n    };\n\n    return {\n        label: intl.formatMessage(messages.labelsFiltersType),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByType(value);\n            },\n            items: advisoryTypesMap,\n            value: currentFilter.advisory_type_name,\n            placeholder: intl.formatMessage(messages.labelsFiltersTypePlaceholder)\n        }\n    };\n};\n\nexport default typeFilter;\n","import { cellWidth, expandable, sortable } from '@patternfly/react-table';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\n\nexport const advisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSynopsis),\n        transforms: [sortable],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsAffectedSystems),\n        transforms: [sortable, cellWidth(15)],\n        key: 'applicable_systems'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(15)],\n        key: 'public_date'\n    }\n];\n\nexport const systemAdvisoriesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        cellFormatters: [expandable],\n        transforms: [sortable, cellWidth(15)],\n        key: 'id'\n    },\n    {\n        title: 'Synopsis',\n        transforms: [sortable, cellWidth(35)],\n        key: 'synopsis'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [sortable, cellWidth(10)],\n        key: 'status'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsType),\n        transforms: [sortable, cellWidth(10)],\n        key: 'advisory_type_name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsReboot),\n        transforms: [sortable, cellWidth(10)],\n        key: 'reboot_required'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsPublishDate),\n        transforms: [sortable, cellWidth(10)],\n        key: 'public_date'\n    }\n];\n\nexport const systemPackagesColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(20)],\n        key: 'name'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsInstalledVersion),\n        transforms: [sortable, cellWidth(15)],\n        key: 'evra'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsLatestVersion),\n        transforms: [cellWidth(15)],\n        key: 'latest_update'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsStatus),\n        transforms: [cellWidth(10)],\n        key: 'updatable'\n    },\n    {\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        key: 'summary'\n    }\n];\n\nexport const packagesColumns = [\n    {\n        key: 'name',\n        title: intl.formatMessage(messages.labelsColumnsName),\n        transforms: [sortable, cellWidth(25)]\n    },\n    {\n        key: 'systems_installed',\n        title: intl.formatMessage(messages.labelsColumnsApplicableSystems),\n        transforms: [sortable, cellWidth(15)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'systems_updatable',\n        title: intl.formatMessage(messages.labelsColumnsUpgradable),\n        transforms: [sortable, cellWidth(10)],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'summary',\n        title: intl.formatMessage(messages.labelsColumnsSummary),\n        transforms: [sortable, cellWidth(40)],\n        props: {\n            width: 30\n        }\n    }\n];\n\nexport const cvesTableColumns = [\n    {\n        title: intl.formatMessage(messages.labelsColumnsCveID),\n        transforms: [sortable, cellWidth(40)],\n        key: 'synopsis'\n    },\n    {\n        key: 'impact',\n        title: intl.formatMessage(messages.labelsColumnsSeverity),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    },\n    {\n        key: 'cvss',\n        title: intl.formatMessage(messages.labelsColumnsCVSS),\n        transforms: [sortable, cellWidth(30)],\n        props: {\n            width: 30\n        }\n    }\n];\n","import propTypes from 'prop-types';\nimport React, { useMemo, useCallback, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport rebootFilter from '../../PresentationalComponents/Filters/RebootFilter';\nimport advisoryStatusFilter from '../../PresentationalComponents/Filters/AdvisoryStatusFilter';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemAdvisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changeSystemAdvisoryListParams, clearSystemAdvisoriesStore, expandSystemAdvisoryRow,\n    fetchApplicableSystemAdvisories, selectSystemAdvisoryRow } from '../../store/Actions/Actions';\nimport { exportSystemAdvisoriesCSV, exportSystemAdvisoriesJSON } from '../../Utilities/api';\nimport { remediationIdentifiers } from '../../Utilities/constants';\nimport { createSystemAdvisoriesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, decodeQueryparams,\n    getRowIdByIndexExpandable, remediationProvider } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn, useOnExport, usePushUrlParams } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\n\nconst SystemAdvisories = ({ history, handleNoSystemData, inventoryId }) => {\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = useState(true);\n    const advisories = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.rows\n    );\n\n    const expandedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemAdvisoryListStore }) => SystemAdvisoryListStore.status\n    );\n    const rows = useMemo(\n        () =>\n            createSystemAdvisoriesRows(advisories, expandedRows, selectedRows, metadata),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    const historyPusher = usePushUrlParams(queryParams);\n\n    useEffect(() => {\n        return () => dispatch(clearSystemAdvisoriesStore());\n    }, []);\n\n    useEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            historyPusher();\n            dispatch(\n                fetchApplicableSystemAdvisories({ id: inventoryId, ...queryParams })\n            );\n        }\n    }, [queryParams]);\n\n    const onCollapse = useCallback((_, rowId, value) =>\n        dispatch(\n            expandSystemAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        ), [JSON.stringify(advisories)]\n    );\n\n    const constructFilename = (advisory) => advisory?.id || advisory;\n    const onSelect = useOnSelect(\n        rows,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systemAdvisories(inventoryId),\n            queryParams,\n            selectionDispatcher: selectSystemAdvisoryRow,\n            constructFilename\n        }\n    );\n\n    const onSort = useSortColumn(systemAdvisoriesColumns, apply, 2);\n    const sortBy = React.useMemo(\n        () => createSortBy(systemAdvisoriesColumns, metadata.sort, 2),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeSystemAdvisoryListParams({ id: inventoryId, ...params }));\n    }\n\n    const errorState = status.code === 404 ? handleNoSystemData() : <Unavailable/>;\n\n    const onExport = useOnExport(inventoryId, queryParams, {\n        csv: exportSystemAdvisoriesCSV,\n        json: exportSystemAdvisoriesJSON\n    }, dispatch);\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemAdvisoriesColumns}\n                compact\n                onCollapse={onCollapse}\n                onSelect={onSelect}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                onSort={onSort}\n                onExport={onExport}\n                sortBy={sortBy}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        inventoryId,\n                        remediationIdentifiers.advisory\n                    )\n                }\n                selectedRows={selectedRows}\n                systemId={inventoryId}\n                apply={apply}\n                store={{ rows, metadata, status, queryParams }}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-advisories-table'}\n                paginationOUIA={'system-advisories-pagination'}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search,\n                            intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle),\n                            intl.formatMessage(messages.labelsFiltersSearchAdvisoriesPlaceholder)\n                        ),\n                        typeFilter(apply, queryParams.filter),\n                        publishDateFilter(apply, queryParams.filter),\n                        rebootFilter(apply, queryParams.filter),\n                        advisoryStatusFilter(apply, queryParams.filter)\n                    ]\n                }}\n                errorState={errorState}\n                searchChipLabel={intl.formatMessage(messages.labelsFiltersSearchAdvisoriesTitle)}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemAdvisories.propTypes = {\n    history: propTypes.object,\n    handleNoSystemData: propTypes.func,\n    inventoryId: propTypes.string.isRequired\n};\nexport default withRouter(SystemAdvisories);\n","import React, { useMemo, useEffect } from 'react';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport propTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/StatusFilter';\nimport { SystemUpToDate } from '../../PresentationalComponents/Snippets/SystemUpToDate';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { systemPackagesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport {\n    changeSystemPackagesParams, clearSystemPackagesStore,\n    fetchApplicableSystemPackages, selectSystemPackagesRow\n} from '../../store/Actions/Actions';\nimport { exportSystemPackagesCSV, exportSystemPackagesJSON } from '../../Utilities/api';\nimport { remediationIdentifiers, systemPackagesDefaultFilters } from '../../Utilities/constants';\nimport { createSystemPackagesRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, createSortBy, remediationProvider } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn, useOnExport } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport { useOnSelect, ID_API_ENDPOINTS } from '../../Utilities/useOnSelect';\n\nconst SystemPackages = ({ handleNoSystemData, inventoryId }) => {\n    const dispatch = useDispatch();\n    const packages = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.rows\n    );\n    const queryParams = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.metadata\n    );\n    const status = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.status\n    );\n    const error = useSelector(\n        ({ SystemPackageListStore }) => SystemPackageListStore.error\n    );\n    const rows = useMemo(\n        () =>\n            createSystemPackagesRows(packages, selectedRows),\n        [packages,  selectedRows]\n    );\n\n    useEffect(() => {\n        return () => dispatch(clearSystemPackagesStore());\n    }, []);\n\n    useEffect(()=> {\n        dispatch(fetchApplicableSystemPackages({ id: inventoryId, ...queryParams }));\n    }, [queryParams]);\n\n    const constructFilename = (pkg) => {\n        const pkgUpdates = pkg.updates || [];\n        const latestUpdate = pkgUpdates[pkgUpdates.length - 1];\n        return latestUpdate && `${pkg.name}-${latestUpdate.evra}`;\n    };\n\n    const transformKey = (row) => {\n        return `${row.name}-${row.evra}`;\n    };\n\n    const onSelect = useOnSelect(\n        packages,\n        selectedRows,\n        {\n            endpoint: ID_API_ENDPOINTS.systemPackages(inventoryId),\n            queryParams,\n            selectionDispatcher: selectSystemPackagesRow,\n            constructFilename,\n            transformKey\n        }\n    );\n\n    function apply(params) {\n        dispatch(changeSystemPackagesParams({ id: inventoryId, ...params }));\n    }\n\n    const onSort = useSortColumn(systemPackagesColumns, apply, 1);\n    const sortBy = useMemo(\n        () => createSortBy(systemPackagesColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    const errorState = error.status === 404 ?  handleNoSystemData() : <Unavailable/>;\n    const emptyState = (!status.isLoading && !status.hasError && metadata.total_items === 0\n                            && Object.keys(queryParams).length === 0) && <SystemUpToDate/>;\n    const onExport = useOnExport(inventoryId, queryParams, {\n        csv: exportSystemPackagesCSV,\n        json: exportSystemPackagesJSON\n    }, dispatch);\n\n    return (\n        <React.Fragment>\n            <TableView\n                columns={systemPackagesColumns}\n                store={{ rows, metadata, status, queryParams }}\n                onSelect={onSelect}\n                selectedRows={selectedRows}\n                compact\n                onSort={onSort}\n                sortBy={sortBy}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                onExport={onExport}\n                remediationProvider={() =>\n                    remediationProvider(\n                        arrayFromObj(selectedRows),\n                        inventoryId,\n                        remediationIdentifiers.package\n                    )\n                }\n                apply={apply}\n                filterConfig={{\n                    items: [\n                        searchFilter(apply, queryParams.search,\n                            intl.formatMessage(messages.labelsFiltersPackagesSearchTitle),\n                            intl.formatMessage(messages.labelsFiltersPackagesSearchPlaceHolder)\n                        ),\n                        statusFilter(apply, queryParams.filter)\n                    ]\n                }}\n                defaultFilters = {systemPackagesDefaultFilters}\n                remediationButtonOUIA={'toolbar-remediation-button'}\n                tableOUIA={'system-packages-table'}\n                paginationOUIA={'system-packages-pagination'}\n                errorState={errorState}\n                emptyState={emptyState}\n                searchChipLabel={intl.formatMessage(messages.labelsFiltersPackagesSearchTitle)}\n            />\n        </React.Fragment>\n    );\n};\n\nSystemPackages.propTypes = {\n    handleNoSystemData: propTypes.func,\n    inventoryId: propTypes.string.isRequired\n};\nexport default SystemPackages;\n\n","import React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport SystemAdvisories from '../SystemAdvisories/SystemAdvisories';\nimport SystemPackages from '../SystemPackages/SystemPackages';\nimport './SystemDetail.scss';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport propTypes from 'prop-types';\n\nconst SystemDetail = ({ isInventoryApp, inventoryId }) => {\n    const { state } = useLocation();\n\n    const [activeTabKey, setActiveTabKey] = useState(\n        (state?.tab === 'packages') ? 1 : 0\n    );\n    const [areTabsHidden, setTabsHidden] = useState(false);\n\n    const onTabSelect = (event, id) => {\n        setActiveTabKey(id);\n    };\n\n    const handleNoSystemData = () => {\n        isInventoryApp && setTabsHidden(prevTabsHidden => !prevTabsHidden);\n        return isInventoryApp && null || <NotConnected />;\n    };\n\n    return (!areTabsHidden && (\n        <Tabs activeKey={activeTabKey} onSelect={onTabSelect} className={'patchTabSelect'} isHidden>\n            <Tab eventKey={0} title={<TabTitleText>{intl.formatMessage(messages.titlesAdvisories)}</TabTitleText>}\n                data-ouia-component-type={`system-advisories-tab`}\n                data-ouia-component-id={`system-advisories-tab`}\n            >\n                <SystemAdvisories\n                    handleNoSystemData={handleNoSystemData}\n                    inventoryId={inventoryId}\n                />\n            </Tab>\n            <Tab\n                eventKey={1}\n                title={<TabTitleText>{intl.formatMessage(messages.titlesPackages)}</TabTitleText>}\n                data-ouia-component-type={`system-packages-tab`}\n                data-ouia-component-id={`system-packages-tab`}\n            >\n                <SystemPackages\n                    handleNoSystemData={handleNoSystemData}\n                    inventoryId={inventoryId}\n                />\n            </Tab>\n        </Tabs>\n    ) || <NotConnected/>);\n};\n\nSystemDetail.propTypes = {\n    isInventoryApp: propTypes.bool,\n    inventoryId: propTypes.string.isRequired\n};\nexport default SystemDetail;\n"],"names":["apply","currentFilter","arguments","length","undefined","label","intl","messages","type","conditionalFilterType","filterValues","onChange","event","value","filter","status","filterByStatus","items","advisoryStatuses","Array","isArray","placeholder","currentValue","public_date","filterByPublicDate","publicDateOptions","reboot_required","rebootMap","React","rebootRequired","_ref","toString","currentValueStringType","map","filterByReboot","updatable","updatableTypesMap","updatableTypes","filterByType","advisoryTypesMap","advisoryTypes","advisory_type_name","advisoriesColumns","title","cellFormatters","expandable","transforms","sortable","cellWidth","key","systemAdvisoriesColumns","systemPackagesColumns","packagesColumns","props","width","cvesTableColumns","SystemAdvisories","history","handleNoSystemData","inventoryId","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","firstMount","setFirstMount","advisories","useSelector","_ref2","SystemAdvisoryListStore","rows","expandedRows","_ref3","queryParams","_ref4","selectedRows","_ref5","metadata","_ref6","_ref7","useMemo","createSystemAdvisoriesRows","historyPusher","usePushUrlParams","useEffect","clearSystemAdvisoriesStore","decodeQueryparams","location","search","fetchApplicableSystemAdvisories","_objectSpread","id","onCollapse","useCallback","_","rowId","expandSystemAdvisoryRow","getRowIdByIndexExpandable","JSON","stringify","onSelect","useOnSelect","endpoint","ID_API_ENDPOINTS","selectionDispatcher","selectSystemAdvisoryRow","constructFilename","advisory","onSort","useSortColumn","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","params","changeSystemAdvisoryListParams","errorState","code","Unavailable","onExport","useOnExport","csv","exportSystemAdvisoriesCSV","json","exportSystemAdvisoriesJSON","TableView","columns","compact","remediationProvider","arrayFromObj","remediationIdentifiers","systemId","store","remediationButtonOUIA","tableOUIA","paginationOUIA","filterConfig","searchFilter","typeFilter","publishDateFilter","rebootFilter","advisoryStatusFilter","searchChipLabel","propTypes","withRouter","SystemPackages","packages","SystemPackageListStore","error","createSystemPackagesRows","clearSystemPackagesStore","fetchApplicableSystemPackages","selectSystemPackagesRow","pkg","pkgUpdates","updates","latestUpdate","concat","name","evra","transformKey","row","changeSystemPackagesParams","emptyState","isLoading","hasError","total_items","Object","keys","SystemUpToDate","exportSystemPackagesCSV","exportSystemPackagesJSON","statusFilter","defaultFilters","systemPackagesDefaultFilters","SystemDetail","isInventoryApp","state","useLocation","tab","activeTabKey","setActiveTabKey","_useState3","_useState4","areTabsHidden","setTabsHidden","prevTabsHidden","NotConnected","Tabs","activeKey","className","isHidden","Tab","eventKey","TabTitleText"],"sourceRoot":""}