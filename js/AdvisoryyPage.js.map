{"version":3,"sources":["webpack:///./src/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/PresentationalComponents/InfoBox/InfoBox.js","webpack:///./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack:///./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack:///./src/SmartComponents/AffectedSystems/AffectedSystems.js","webpack:///./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js","webpack:///./src/PresentationalComponents/InfoBox/InfoBox.scss","webpack:///./src/PresentationalComponents/InfoBox/InfoBox.scss?011f"],"names":["WithLoaderVariants","loaderMap","size","isDark","Skeleton","centered","Spinner","WithLoader","loading","variant","children","props","propTypes","bool","string","any","InfoBox","title","text","isLoading","content","color","Split","className","hasGutter","style","backgroundColor","Bullseye","isFilled","Text","component","TextVariants","h6","p","AdvisorySeverityInfo","severity","Popover","position","enableFlip","headerContent","label","bodyContent","TextContent","footerContent","href","target","rel","object","AdvisoryHeader","attributes","React","useState","isModalOpen","setModalOpen","severityObject","getSeverityById","cveCount","cves","length","cvesLink","Grid","minHeight","GridItem","md","sm","Stack","StackItem","whiteSpace","description","replace","RegExp","public_date","Fragment","processDate","modified_date","PortalAdvisoryLink","advisory","id","h2","onClick","Modal","ModalVariant","small","isOpen","onClose","List","map","cve","key","document","baseURI","value","AffectedSystems","advisoryName","dispatch","useDispatch","InventoryCmp","setInventoryCmp","RemediationModalCmp","setRemediationModalCmp","rawAffectedSystems","useSelector","AffectedSystemsStore","rows","status","error","selectedRows","hosts","useMemo","createSystemsRows","metadata","queryParams","inventoryColumns","entities","columns","handleRefresh","useHandleRefresh","apply","filter","search","useEffect","clearAffectedSystemsStore","fetchAffectedSystemsAction","fetchInventory","a","insights","loadInventory","ReactRedux","reactRouterDom","pfReactTable","Table","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","TableVariant","sortable","expandable","SortByDirection","inventoryConnector","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","getStore","InventoryTable","usePagePerPage","limit","offset","page","perPage","params","changeAffectedSystemsParams","removeFilter","useRemoveFilter","filterConfig","items","searchFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","showRemediationModal","data","RemediationModal","onSelect","useCallback","event","toSelect","Object","keys","forEach","push","selected","type","payload","fetchAffectedSystems","then","getMangledColumns","updated","onSort","useSortColumn","sortBy","createSortBy","sort","selectedCount","arrayFromObj","STATUS_REJECTED","Error","message","detail","total","total_items","onRefresh","isLoaded","STATUS_RESOLVED","actions","systemsRowActions","tableProps","canSelectAll","bulkSelect","count","checked","ToolbarGroup","ToolbarItem","Button","isDisabled","remediationProvider","AdvisoryDetail","match","advisoryId","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearAdvisoryDetailStore","Header","breadcrumbs","to","paths","advisories","isActive","STATUS_LOADING","Main","withRouter","module","exports","i","options","transform","undefined","update","locals","hot","accept","newContent","b","idx","dispose"],"mappings":"yUAMaA,EACA,UADAA,EAEC,WAGRC,GAAS,WACVD,GAA8B,gBAAGE,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OAC3B,kBAACC,EAAA,SAAD,CAAUF,KAAMA,EAAMC,OAAQA,OAFvB,MAIVH,GAA6B,gBAAGK,EAAH,EAAGA,SAAH,OAC1B,kBAACC,EAAA,QAAD,CAASD,SAAUA,OALZ,GASFE,EAAa,SAAC,GAA6C,IAA3CC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,SAAaC,EAAY,wCACpE,OAAgB,IAAZH,EACOP,EAAUQ,GAASE,GAGvBD,GAGXH,EAAWK,UAAY,CACnBJ,QAASI,IAAUC,KACnBJ,QAASG,IAAUE,OACnBJ,SAAUE,IAAUG,KAGTR,Q,0BC1BTS,G,OAAU,SAAC,GAA+C,IAA7CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAChD,OACI,kBAACC,EAAA,MAAD,CAAOC,UAAU,UAAUC,WAAS,GAChC,kBAAC,EAAD,CACIf,QAAST,EACTQ,QAASW,EACTjB,KAAK,MAEL,kBAACoB,EAAA,UAAD,CAAWG,MAAO,CAAEC,gBAAiBL,IACjC,kBAACM,EAAA,SAAD,KAAWP,IAEf,kBAACE,EAAA,UAAD,CAAWM,UAAQ,GACf,kBAACC,EAAA,YAAD,KACI,kBAACA,EAAA,KAAD,CAAMC,UAAWC,eAAaC,IAAKf,GACnC,kBAACY,EAAA,KAAD,CAAMC,UAAWC,eAAaE,GAAIf,SAQ1DF,EAAQJ,UAAY,CAChBK,MAAOL,IAAUE,OACjBI,KAAMN,IAAUG,IAChBI,UAAWP,IAAUC,KACrBO,QAASR,IAAUG,IACnBM,MAAOT,IAAUE,QAGNE,Q,6CChCTkB,EAAuB,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SAC5B,OACI,kBAACC,EAAA,QAAD,CACIC,SAAS,SACTC,YAAU,EACVC,cAAe,6BAAMJ,EAASK,MAAQ,aACtCC,YACI,kBAACC,EAAA,YAAD,KACI,kBAAC,OAAD,CAAMZ,UAAWC,eAAaE,GAAIE,EAASjB,OAGnDyB,cACI,uBACIC,KAAK,6DACLC,OAAO,SACPC,IAAI,uBAEJ,0BAAMvB,UAAW,mBACb,kBAAC,IAAD,MADJ,uCAOR,2CAKZW,EAAqBtB,UAAY,CAC7BuB,SAAUvB,IAAUmC,QAGTb,QCtBTc,EAAiB,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,WAAY9B,EAAgB,EAAhBA,UAAgB,EACd+B,IAAMC,UAAS,GADD,WAC3CC,EAD2C,KAC9BC,EAD8B,KAE5CC,EAAiBC,YAAgBN,EAAWd,UAC5CqB,EAAWP,EAAWQ,MAAQR,EAAWQ,KAAKC,OAC9CC,EAAW,GAAH,OAAMH,EAAN,eAAkC,IAAbA,EAAkB,IAAO,GAA9C,kCACd,OACI,kBAACI,EAAA,KAAD,CAAMpC,WAAS,EAACC,MAAO,CAAEoC,UAAW,MAChC,kBAACC,EAAA,SAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAAC,EAAD,CACIxD,QAASW,EACTV,QAAST,EACTK,UAAQ,GAER,kBAAC4D,EAAA,MAAD,CAAOzC,WAAS,GACZ,kBAAC0C,EAAA,UAAD,MACA,kBAACA,EAAA,UAAD,CAAWzC,MAAO,CAAE0C,WAAY,aAC3BlB,EAAWmB,aACRnB,EAAWmB,YAAYC,QACnB,IAAIC,OAAO,gBAAiB,KAC5B,KAGZ,kBAACJ,EAAA,UAAD,KACKjB,EAAWsB,aACR,kBAAC,IAAMC,SAAP,uBACgBC,sBACRxB,EAAWsB,cAEf,8BAGPtB,EAAWyB,eACR,kBAAC,IAAMF,SAAP,yBACkBC,sBACVxB,EAAWyB,kBAK3B,kBAACR,EAAA,UAAD,KACI,kBAACS,EAAA,EAAD,CAAoBC,SAAU3B,EAAW4B,MAE7C,kBAACX,EAAA,UAAD,KACI,kBAACrC,EAAA,YAAD,KACI,kBAACA,EAAA,KAAD,CAAMC,UAAWC,eAAa+C,IAA9B,QACc,IAAbtB,EAAiBG,EACd,uBAAGoB,QAAS,kBAAI1B,GAAcD,KACzBO,MAMrB,kBAACqB,EAAA,MAAD,CACIvE,QAASwE,eAAaC,MACtBjE,MAAM,OACNkE,OAAQ/B,EACRgC,QAAS,kBAAI/B,GAAa,KAC7B,kBAACgC,EAAA,KAAD,KACQpC,EAAWQ,MAAQR,EAAWQ,KAAK6B,KAAI,SAAAC,GAAG,OACvC,kBAACF,EAAA,SAAD,CAAUG,IAAKD,GAAK,uBAAG3C,KAAI,UAAK6C,SAASC,QAAd,uCAAoDH,IAC1EA,WAQzB,kBAACzB,EAAA,SAAD,CAAUC,GAAI,EAAGC,GAAI,IACS,IAAzBV,EAAeqC,OACZ,kBAAC,EAAD,CACIxE,UAAWA,EACXF,MAAOqC,EAAed,MACtBnB,MAAOiC,EAAejC,MACtBH,KACI,kBAAC,EAAD,CAAsBiB,SAAUmB,IAEpClC,QAAS,kBAAC,IAAD,CAAclB,KAAK,YAQpD8C,EAAepC,UAAY,CACvBqC,WAAYrC,IAAUmC,OACtB5B,UAAWP,IAAUC,MAGVmC,Q,m0BCtFf,IAAM4C,GAAkB,SAAC,GAAqB,IAAnBC,EAAmB,EAAnBA,aACjBC,EAAWC,wBADyB,EAEF7C,IAAMC,WAFJ,WAEnC6C,EAFmC,KAErBC,EAFqB,OAMtC/C,IAAMC,UAAS,kBAAM,kBAAM,SANW,WAItC+C,EAJsC,KAKtCC,EALsC,KAOpCC,EAAqBC,uBACvB,qBAAGC,qBAAgDC,QAEjDC,EAASH,uBACX,qBAAGC,qBAAgDE,UAEjDC,EAAQJ,uBACV,qBAAGC,qBAAgDG,SAEjDC,EAAeL,uBACjB,qBAAGC,qBAAgDI,gBAEjDC,EAAQzD,IAAM0D,SAChB,kBAAMC,aAAkBT,EAAoBM,KAC5C,CAACN,IAECU,EAAWT,uBACb,qBAAGC,qBAAgDQ,YAEjDC,EAAcV,uBAChB,qBAAGC,qBAAgDS,eAGjDC,EAAmBX,uBACrB,gBAAGY,EAAH,EAAGA,SAAH,OAAkBA,GAAYA,EAASC,WAGrCC,EAAgBC,aAAiBN,EAAUO,GACzCC,EAAmBP,EAAnBO,OAAQC,EAAWR,EAAXQ,OAEhBrE,IAAMsE,WAAU,WACZ,OAAO,kBAAM1B,EAAS2B,kBACvB,IAEHvE,IAAMsE,WAAU,WACZ1B,EACI4B,YAA2B,GAAD,CAAG7C,GAAIgB,GAAiBkB,OAEvD,CAACA,IAEJ,IAAMY,EAAc,iCAAG,qCAAAC,EAAA,sEAITC,SAASC,cAAc,CAC7BC,aACA7E,UACA8E,kBACAC,aAAc,CACVC,MAAOC,SACPC,uBACAC,2BACAC,2CACAC,uBACAC,6BACAC,qBACAC,yBACAC,sCAjBW,gBAEfC,EAFe,EAEfA,mBACAC,EAHe,EAGfA,kBAkBJC,aAAS,GAAD,GACDD,EAAkBE,aAAyBC,SAtB/B,EAwBQJ,EAAmBK,gBAAtCC,EAxBW,EAwBXA,eACRjD,GAAgB,kBAAMiD,KAzBH,2CAAH,qDA4BpBhG,IAAMsE,WAAU,WACZG,MACD,IA7EuC,MA+ElBwB,aAAerC,EAASsC,MAAOtC,EAASuC,QA/EtB,WA+EnCC,EA/EmC,KA+E7BC,EA/E6B,KAiF1C,SAASlC,EAAMmC,GACX1D,EAAS2D,YAA4BD,IAGzC,IAAME,EAAeC,aAAgBrC,EAAQD,GAEvCuC,EAAe,CACjBC,MAAO,CACHC,aAAazC,EAAOE,EAAQ,oBAI9BwC,EAAsB,CACxBC,QAASC,YAAiB3C,EAAQC,GAClC2C,SAAUR,GAGRS,EAAuB,SAAAC,GACzBjE,GAAuB,kBAAM,kBAAM,kBAACkE,GAAA,EAAD,CAAkBD,KAAMA,SAGzDE,EAAWpH,IAAMqH,aAAY,SAACC,GAChC,IAAMC,EAAW,GACjB,OAAQD,GACJ,IAAK,OACDE,OAAOC,KAAKjE,GAAckE,SAAQ,SAAA/F,GAC9B4F,EAASI,KACL,CACIhG,KACAiG,UAAU,OAItBhF,EACI,CAAEiF,KAAM,gBAAiBC,QAASP,IAEtC,MAGJ,IAAK,OACDrE,EAAmBwE,SAAQ,YAAU,IAAP/F,EAAO,EAAPA,GAC1B4F,EAASI,KACL,CACIhG,KACAiG,UAAU,OAGtBhF,EACI,CAAEiF,KAAM,gBAAiBC,QAASP,IAEtC,MAGJ,IAAK,MAcDQ,aAAqB,CAAEpG,GAAIgB,EAAcuD,MAAO,SAAU8B,MAbpC,SAAC,GAAa,EAAXd,KAChBQ,SAAQ,YAAU,IAAP/F,EAAO,EAAPA,GACZ4F,EAASI,KACL,CACIhG,KACAiG,UAAU,OAGtBhF,EACI,CAAEiF,KAAM,gBAAiBC,QAASP,WAYhDU,EAAoB,WACtB,IAAIC,EAAUpE,GAAoBA,EAAiBM,QAAO,kBAAqB,YAArB,EAAG9B,OAA6B,GAE1F,OADA4F,EAAU,GAAH,MAAQA,GAAR,IAAiB5F,IAAK,gBAC7B,eAAWwD,MAAX,CAA+BoC,KAG7BC,EAASC,aAAcH,IAAqB9D,EAAO,GACnDkE,EAASrI,IAAM0D,SACjB,kBAAM4E,YAAaL,IAAqBrE,EAAS2E,KAAM,KACvD,CAAC3E,EAAS2E,OAGRC,EAAgBhF,GAAgBiF,YAAajF,GAAchD,OAEjE,OACI,kBAAC,IAAMc,SAAP,KACKgC,IAAWoF,IAAkB,kBAACC,EAAA,EAAD,CAAOC,QAASrF,EAAMsF,SAAY/F,GAC5D,kBAACA,EAAD,CACI6D,MAAOlD,EACP2C,KAAMA,EACN0C,MAAOlF,EAASmF,YAChB1C,QAASA,EACT2C,UAAW/E,EACXgF,SAAU3F,IAAW4F,IACrBC,QAASC,aAAkBnC,GAC3BoC,WAAc,CAAEC,cAAc,EAAOnB,SAAQE,UAC7C3B,aAAcA,EACdG,oBAAuBA,EACvB0C,WAAYnC,GAAY,CACpBoC,MAAOhB,EACP7B,MAAO,CAAC,CACJ5I,MAAO,kBACP8D,QAAS,WACLuF,EAAS,UAEd,CACCrJ,MAAO,gBAAF,OAAkB0F,EAAMjD,OAAxB,KACLqB,QAAS,WACLuF,EAAS,UAGjB,CACIrJ,MAAO,eAAF,OAAiB6F,EAASmF,YAA1B,KACLlH,QAAS,WACLuF,EAAS,UAGjBA,SAAU,SAAC3E,GACC2E,EAAR3E,EAAiB,MAAkB,SAEvCgH,QAASjB,IAAkB5E,EAASmF,aAAuC,IAAlBP,GAA8B,OAG3F,kBAACkB,GAAA,aAAD,KACI,kBAACC,GAAA,YAAD,KACI,kBAACC,GAAA,OAAD,CACIvL,UAAW,yBACXwL,WAC0C,IAAtCpB,YAAajF,GAAchD,OAE/BqB,QAAS,kBACLoF,EACI6C,YACInH,EACA8F,YAAajF,OAKzB,kBAAC,KAAD,MAdJ,cAgBA,kBAACR,EAAD,WAS5BN,GAAgBhF,UAAY,CACxBiF,aAAcjF,IAAUE,QAGb8E,U,qkBCxPf,IAAMqH,GAAiB,SAAC,GAAc,IAAZC,EAAY,EAAZA,MAChBpH,EAAWC,wBADiB,EAEX7C,IAAMC,SAAS+J,EAAM1D,OAAO2D,YAA5CtH,EAF2B,YAG5BuH,EAAkB/G,uBACpB,qBAAGgH,uBAED7G,EAASH,uBACX,qBAAGgH,oBAA8C7G,UAE/CC,EAAQJ,uBACV,qBAAGgH,oBAA8C5G,SAErDvD,IAAMsE,WAAU,WACZ1B,EAASwH,YAAoB,CAAEzH,oBAChC,IAEH3C,IAAMsE,WAAU,WACZ,OAAO,WACH1B,EAAS2B,eACT3B,EAASyH,kBAEd,IArB+B,IAuB1BtK,EAAemK,EAAgBhD,KAA/BnH,WACR,OACI,kBAAC,IAAMuB,SAAP,KACI,kBAACgJ,EAAA,EAAD,CACIvM,MAAO4E,EACP4H,YAAa,CACT,CACIxM,MAAO,QACPyM,GAAIC,IAAMC,WAAWF,GACrBG,UAAU,GAEd,CACI5M,MAAO,aACPyM,GAAIC,IAAMC,WAAWF,GACrBG,UAAU,GAEd,CACI5M,MAAO4E,EACPgI,UAAU,KAGpBrH,IAAWoF,IAAkB,kBAACC,EAAA,EAAD,CAAOC,QAASrF,EAAMsF,SAC7C,kBAAC,EAAD,CACI9I,WAAU,SAAOA,GAAP,IAAmB4B,GAAIgB,IACjC1E,UAAWqF,IAAWsH,OAGlC,kBAACC,EAAA,KAAD,KACI,kBAAClM,EAAA,YAAD,KACI,kBAACA,EAAA,KAAD,CAAMC,UAAWC,eAAa+C,IAA9B,qBAEJ,kBAAC,GAAD,CAAiBe,aAAcA,OAM/CoH,GAAerM,UAAY,CACvBsM,MAAOtM,IAAUG,KAGNiN,sBAAWf,K,qBC9EhBgB,EAAOC,QAAU,EAAQ,EAAR,EAAgE,IAEnFrD,KAAK,CAACoD,EAAOE,EAAI,ueAAwe,M,oBCDjgB,IAAI/M,EAAU,EAAQ,KAEA,iBAAZA,IAAsBA,EAAU,CAAC,CAAC6M,EAAOE,EAAI/M,EAAS,MAOhE,IAAIgN,EAAU,CAAC,KAAM,EAErB,eAPIC,EAQJ,gBAAqBC,GAEjBC,EAAS,EAAQ,EAAR,CAAgEnN,EAASgN,GAEnFhN,EAAQoN,SAAQP,EAAOC,QAAU9M,EAAQoN,QAG3CP,EAAOQ,IAAIC,OAAO,KAA+G,WAChI,IAAIC,EAAa,EAAQ,KAiBzB,GAfyB,iBAAfA,IAAyBA,EAAa,CAAC,CAACV,EAAOE,EAAIQ,EAAY,OAE3D,SAAS/G,EAAGgH,GACzB,IAAIpJ,EAAKqJ,EAAM,EAEf,IAAIrJ,KAAOoC,EAAG,CACb,IAAIgH,GAAKhH,EAAEpC,KAASoJ,EAAEpJ,GAAM,OAAO,EACnCqJ,IAGD,IAAIrJ,KAAOoJ,EAAGC,IAEd,OAAe,IAARA,EAVK,CAWXzN,EAAQoN,OAAQG,EAAWH,QAEjB,MAAM,IAAI3C,MAAM,uDAE5B0C,EAAOI,MAGRV,EAAOQ,IAAIK,SAAQ,WAAaP","file":"js/AdvisoryyPage.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nexport const WithLoaderVariants = {\n    spinner: 'spinner',\n    skeleton: 'skeleton'\n};\n\nconst loaderMap = {\n    [WithLoaderVariants.skeleton]: ({ size, isDark }) => (\n        <Skeleton size={size} isDark={isDark} />\n    ),\n    [WithLoaderVariants.spinner]: ({ centered }) => (\n        <Spinner centered={centered} />\n    )\n};\n\nexport const WithLoader = ({ loading, variant, children, ...props }) => {\n    if (loading !== false) {\n        return loaderMap[variant](props);\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    loading: propTypes.bool,\n    variant: propTypes.string,\n    children: propTypes.any\n};\n\nexport default WithLoader;\n","import { Text, TextContent, TextVariants } from '@patternfly/react-core/dist/js/components/Text/';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/';\nimport { Split, SplitItem } from '@patternfly/react-core/dist/js/layouts/Split/';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\nimport './InfoBox.scss';\n\nconst InfoBox = ({ title, text, isLoading, content, color }) => {\n    return (\n        <Split className=\"infobox\" hasGutter>\n            <WithLoader\n                variant={WithLoaderVariants.skeleton}\n                loading={isLoading}\n                size=\"lg\"\n            >\n                <SplitItem style={{ backgroundColor: color }}>\n                    <Bullseye>{content}</Bullseye>\n                </SplitItem>\n                <SplitItem isFilled>\n                    <TextContent>\n                        <Text component={TextVariants.h6}>{title}</Text>\n                        <Text component={TextVariants.p}>{text}</Text>\n                    </TextContent>\n                </SplitItem>\n            </WithLoader>\n        </Split>\n    );\n};\n\nInfoBox.propTypes = {\n    title: propTypes.string,\n    text: propTypes.any,\n    isLoading: propTypes.bool,\n    content: propTypes.any,\n    color: propTypes.string\n};\n\nexport default InfoBox;\n","import { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Popover } from '@patternfly/react-core/dist/js/components/Popover/Popover';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Popover\n            position=\"bottom\"\n            enableFlip\n            headerContent={<div>{severity.label + ' severity'}</div>}\n            bodyContent={\n                <TextContent>\n                    <Text component={TextVariants.p}>{severity.text}</Text>\n                </TextContent>\n            }\n            footerContent={\n                <a\n                    href=\"https://access.redhat.com/security/updates/classification/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <span className={'icon-with-label'}>\n                        <ExternalLinkSquareAltIcon />\n                        Learn more about security ratings\n                    </span>\n                </a>\n            }\n        >\n            <a>Learn more</a>\n        </Popover>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import { List, ListItem } from '@patternfly/react-core/dist/js/components/List';\nimport { Modal, ModalVariant } from '@patternfly/react-core/dist/js/components/Modal';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core/dist/js/components/Text/';\nimport { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\nimport { Stack } from '@patternfly/react-core/dist/js/layouts/Stack/Stack';\nimport { StackItem } from '@patternfly/react-core/dist/js/layouts/Stack/StackItem';\nimport SecurityIcon from '@patternfly/react-icons/dist/js/icons/security-icon';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport PortalAdvisoryLink from '../../PresentationalComponents/Snippets/PortalAdvisoryLink';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { getSeverityById } from '../../Utilities/Helpers';\nimport InfoBox from '../InfoBox/InfoBox';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const [isModalOpen, setModalOpen] = React.useState(false);\n    const severityObject = getSeverityById(attributes.severity);\n    const cveCount = attributes.cves && attributes.cves.length;\n    const cvesLink = `${cveCount} CVE${cveCount !== 1 && 's' || ''} associated with this advisory`;\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {attributes.description &&\n                                attributes.description.replace(\n                                    new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n                                    ''\n                                )}\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {`Issued: ${processDate(\n                                        attributes.public_date\n                                    )}`}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {`Modified: ${processDate(\n                                        attributes.modified_date\n                                    )}`}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        <StackItem>\n                            <PortalAdvisoryLink advisory={attributes.id} />\n                        </StackItem>\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>CVEs</Text>\n                                {cveCount === 0 ? cvesLink :\n                                    <a onClick={()=>setModalOpen(!isModalOpen)}>\n                                        {cvesLink}\n                                    </a>}\n                            </TextContent>\n\n                        </StackItem>\n                    </Stack>\n                    <Modal\n                        variant={ModalVariant.small}\n                        title=\"CVEs\"\n                        isOpen={isModalOpen}\n                        onClose={()=>setModalOpen(false)}\n                    ><List>\n                            {attributes.cves && attributes.cves.map(cve =>\n                                <ListItem key={cve}><a href={`${document.baseURI}insights/vulnerability/cves/${cve}`}>\n                                    {cve}\n                                </a>\n                                </ListItem>\n                            )}\n                        </List>\n                    </Modal>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                {severityObject.value !== 0 && (\n                    <InfoBox\n                        isLoading={isLoading}\n                        title={severityObject.label}\n                        color={severityObject.color}\n                        text={\n                            <AdvisorySeverityInfo severity={severityObject} />\n                        }\n                        content={<SecurityIcon size=\"lg\" />}\n                    />\n                )}\n            </GridItem>\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { Button, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { AnsibeTowerIcon } from '@patternfly/react-icons';\nimport { cellWidth, expandable, sortable, SortByDirection, Table as PfTable, TableBody, TableGridBreakpoint,\n    TableHeader, TableVariant } from '@patternfly/react-table/dist/js';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport * as ReactRedux from 'react-redux';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Error from '../../PresentationalComponents/Snippets/Error';\nimport { getStore, register } from '../../store';\nimport { changeAffectedSystemsParams, clearAffectedSystemsStore, fetchAffectedSystemsAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { fetchAffectedSystems } from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, buildFilterChips, createSortBy, remediationProvider } from '../../Utilities/Helpers';\nimport { useHandleRefresh, usePagePerPage, useRemoveFilter, useSortColumn } from '../../Utilities/Hooks';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from '../Systems/SystemsListAssets';\n\nconst AffectedSystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const [InventoryCmp, setInventoryCmp] = React.useState();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawAffectedSystems = useSelector(\n        ({ AffectedSystemsStore }) => AffectedSystemsStore.rows\n    );\n    const status = useSelector(\n        ({ AffectedSystemsStore }) => AffectedSystemsStore.status\n    );\n    const error = useSelector(\n        ({ AffectedSystemsStore }) => AffectedSystemsStore.error\n    );\n    const selectedRows = useSelector(\n        ({ AffectedSystemsStore }) => AffectedSystemsStore.selectedRows\n    );\n    const hosts = React.useMemo(\n        () => createSystemsRows(rawAffectedSystems, selectedRows),\n        [rawAffectedSystems]\n    );\n    const metadata = useSelector(\n        ({ AffectedSystemsStore }) => AffectedSystemsStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ AffectedSystemsStore }) => AffectedSystemsStore.queryParams\n    );\n\n    const inventoryColumns = useSelector(\n        ({ entities }) => entities && entities.columns\n    );\n\n    const handleRefresh = useHandleRefresh(metadata, apply);\n    const { filter, search } = queryParams;\n\n    React.useEffect(() => {\n        return () => dispatch(clearAffectedSystemsStore());\n    }, []);\n\n    React.useEffect(() => {\n        dispatch(\n            fetchAffectedSystemsAction({ id: advisoryName, ...queryParams })\n        );\n    }, [queryParams]);\n\n    const fetchInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities\n        } = await insights.loadInventory({\n            ReactRedux,\n            React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            }\n        });\n\n        register({\n            ...mergeWithEntities(inventoryEntitiesReducer(systemsListColumns))\n        });\n        const { InventoryTable } = inventoryConnector(getStore());\n        setInventoryCmp(() => InventoryTable);\n    };\n\n    React.useEffect(() => {\n        fetchInventory();\n    }, []);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    function apply(params) {\n        dispatch(changeAffectedSystemsParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search, 'Search systems')\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    const onSelect = React.useCallback((event) => {\n        const toSelect = [];\n        switch (event) {\n            case 'none': {\n                Object.keys(selectedRows).forEach(id=>{\n                    toSelect.push(\n                        {\n                            id,\n                            selected: false\n                        }\n                    );\n                });\n                dispatch(\n                    { type: 'SELECT_ENTITY', payload: toSelect }\n                );\n                break;\n            }\n\n            case 'page': {\n                rawAffectedSystems.forEach(({ id })=>{\n                    toSelect.push(\n                        {\n                            id,\n                            selected: true\n                        }\n                    );});\n                dispatch(\n                    { type: 'SELECT_ENTITY', payload: toSelect }\n                );\n                break;\n            }\n\n            case 'all': {\n                const fetchCallback = ({ data }) => {\n                    data.forEach(({ id })=>{\n                        toSelect.push(\n                            {\n                                id,\n                                selected: true\n                            }\n                        );});\n                    dispatch(\n                        { type: 'SELECT_ENTITY', payload: toSelect }\n                    );\n                };\n\n                fetchAffectedSystems({ id: advisoryName, limit: 999999 }).then(fetchCallback);\n\n                break;\n            }\n        }}\n    );\n\n    // This is used ONLY for sorting purposes\n    const getMangledColumns = () => {\n        let updated = inventoryColumns && inventoryColumns.filter(({ key }) => key === 'updated')[0];\n        updated = { ...updated, key: 'last_upload' };\n        return [...systemsListColumns, updated];\n    };\n\n    const onSort = useSortColumn(getMangledColumns(), apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(getMangledColumns(), metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    return (\n        <React.Fragment>\n            {status === STATUS_REJECTED ? <Error message={error.detail}/> : InventoryCmp && (\n                <InventoryCmp\n                    items={hosts}\n                    page={page}\n                    total={metadata.total_items}\n                    perPage={perPage}\n                    onRefresh={handleRefresh}\n                    isLoaded={status === STATUS_RESOLVED}\n                    actions={systemsRowActions(showRemediationModal)}\n                    tableProps = {{ canSelectAll: false, onSort, sortBy }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig = {activeFiltersConfig}\n                    bulkSelect={onSelect && {\n                        count: selectedCount,\n                        items: [{\n                            title: `Select none (0)`,\n                            onClick: () => {\n                                onSelect('none');\n                            }\n                        }, {\n                            title: `Select page (${hosts.length})`,\n                            onClick: () => {\n                                onSelect('page');\n                            }\n                        },\n                        {\n                            title: `Select all (${metadata.total_items})`,\n                            onClick: () => {\n                                onSelect('all');\n                            }\n                        }],\n                        onSelect: (value) => {\n                            value ? onSelect('all') : onSelect('none');\n                        },\n                        checked: selectedCount === metadata.total_items ? true : selectedCount === 0 ? false : null\n                    }}\n                >\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <Button\n                                className={'remediationButtonPatch'}\n                                isDisabled={\n                                    arrayFromObj(selectedRows).length === 0\n                                }\n                                onClick={() =>\n                                    showRemediationModal(\n                                        remediationProvider(\n                                            advisoryName,\n                                            arrayFromObj(selectedRows)\n                                        )\n                                    )\n                                }\n                            >\n                                <AnsibeTowerIcon/>&nbsp;Remediate\n                            </Button>\n                            <RemediationModalCmp />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </InventoryCmp>\n            )}\n        </React.Fragment>\n    );\n};\n\nAffectedSystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AffectedSystems;\n","import { Text, TextContent, TextVariants } from '@patternfly/react-core/dist/js/components/Text';\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport Error from '../../PresentationalComponents/Snippets/Error';\nimport { paths } from '../../Routes';\nimport { clearAdvisoryDetailStore, clearAffectedSystemsStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { STATUS_LOADING, STATUS_REJECTED } from '../../Utilities/constants';\nimport AffectedSystems from '../AffectedSystems/AffectedSystems';\n\nconst AdvisoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [advisoryName] = React.useState(match.params.advisoryId);\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n    const error = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.error\n    );\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearAffectedSystemsStore());\n            dispatch(clearAdvisoryDetailStore());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                breadcrumbs={[\n                    {\n                        title: 'Patch',\n                        to: paths.advisories.to,\n                        isActive: false\n                    },\n                    {\n                        title: 'Advisories',\n                        to: paths.advisories.to,\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status === STATUS_REJECTED ? <Error message={error.detail}/> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status === STATUS_LOADING}\n                    />}\n            </Header>\n            <Main>\n                <TextContent>\n                    <Text component={TextVariants.h2}>Affected systems</Text>\n                </TextContent>\n                <AffectedSystems advisoryName={advisoryName} />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisoryDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(AdvisoryDetail);\n","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".infobox{background-color:var(--pf-global--BackgroundColor--150);border:var(--pf-global--BorderColor--300) var(--pf-global--BorderWidth--sm) solid;height:65px}.infobox>.pf-l-split__item:first-child{width:65px;color:black;background-color:var(--pf-global--warning-color--100)}.infobox>.pf-l-split__item:first-child>div.pf-l-bullseye svg{color:white}.infobox .pf-c-content h6{margin:0}.infobox>.pf-l-split__item:nth-child(2){display:flex;justify-content:flex-start;align-items:center}\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./InfoBox.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./InfoBox.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./InfoBox.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}