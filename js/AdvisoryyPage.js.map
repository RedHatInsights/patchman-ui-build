{"version":3,"sources":["webpack:///./src/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/PresentationalComponents/InfoBox/InfoBox.js","webpack:///./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack:///./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack:///./src/SmartComponents/AffectedSystems/AffectedSystems.js","webpack:///./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.scss","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.scss?7555","webpack:///./src/PresentationalComponents/InfoBox/InfoBox.scss","webpack:///./src/PresentationalComponents/InfoBox/InfoBox.scss?011f"],"names":["WithLoaderVariants","loaderMap","size","isDark","Skeleton","centered","Spinner","WithLoader","loading","variant","children","props","propTypes","bool","string","any","InfoBox","title","text","isLoading","content","color","Split","className","hasGutter","style","backgroundColor","Bullseye","isFilled","Text","component","TextVariants","h6","p","AdvisorySeverityInfo","severity","Popover","position","enableFlip","headerContent","label","bodyContent","TextContent","footerContent","href","target","rel","object","AdvisoryHeader","attributes","severityObject","getSeverityById","Grid","minHeight","GridItem","md","sm","Stack","StackItem","whiteSpace","description","replace","RegExp","public_date","Fragment","processDate","modified_date","PortalAdvisoryLink","advisory","id","value","AffectedSystems","advisoryName","dispatch","useDispatch","React","useState","InventoryCmp","setInventoryCmp","RemediationModalCmp","setRemediationModalCmp","rawAffectedSystems","useSelector","AffectedSystemsStore","rows","status","error","selectedRows","hosts","useMemo","createSystemsRows","metadata","queryParams","inventoryColumns","entities","columns","handleRefresh","useHandleRefresh","apply","filter","search","useEffect","clearAffectedSystemsStore","fetchAffectedSystemsAction","fetchInventory","a","insights","loadInventory","ReactRedux","reactRouterDom","pfReactTable","Table","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","TableVariant","sortable","expandable","SortByDirection","pfReact","reactCore","inventoryConnector","mergeWithEntities","register","inventoryEntitiesReducer","systemsListColumns","getStore","InventoryTable","usePagePerPage","limit","offset","page","perPage","params","changeAffectedSystemsParams","removeFilter","useRemoveFilter","filterConfig","items","searchFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","showRemediationModal","data","RemediationModal","onSelect","useCallback","event","toSelect","Object","keys","forEach","push","selected","type","payload","fetchAffectedSystems","then","getMangledColumns","updated","key","onSort","useSortColumn","sortBy","createSortBy","sort","selectedCount","arrayFromObj","length","STATUS_REJECTED","Error","message","detail","total","total_items","onRefresh","isLoaded","STATUS_RESOLVED","actions","systemsRowActions","tableProps","canSelectAll","bulkSelect","count","onClick","checked","ToolbarGroup","ToolbarItem","Button","isDisabled","remediationProvider","AdvisoryDetail","match","advisoryId","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearAdvisoryDetailStore","Header","breadcrumbs","to","paths","advisories","isActive","STATUS_LOADING","Main","h2","withRouter","module","exports","i","init","modifyInventory","state","loaded","lastSeenColumn","transforms","action","composed","classNames","renderFunc","createAdvisoriesIcons","rowId","rowData","fetchApplicableSystemAdvisoriesApi","res","map","item","options","transform","undefined","update","locals","hot","accept","newContent","b","idx","dispose"],"mappings":"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","file":"js/AdvisoryyPage.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nexport const WithLoaderVariants = {\n    spinner: 'spinner',\n    skeleton: 'skeleton'\n};\n\nconst loaderMap = {\n    [WithLoaderVariants.skeleton]: ({ size, isDark }) => (\n        <Skeleton size={size} isDark={isDark} />\n    ),\n    [WithLoaderVariants.spinner]: ({ centered }) => (\n        <Spinner centered={centered} />\n    )\n};\n\nexport const WithLoader = ({ loading, variant, children, ...props }) => {\n    if (loading !== false) {\n        return loaderMap[variant](props);\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    loading: propTypes.bool,\n    variant: propTypes.string,\n    children: propTypes.any\n};\n\nexport default WithLoader;\n","import { Text, TextContent, TextVariants } from '@patternfly/react-core/dist/js/components/Text/';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/';\nimport { Split, SplitItem } from '@patternfly/react-core/dist/js/layouts/Split/';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\nimport './InfoBox.scss';\n\nconst InfoBox = ({ title, text, isLoading, content, color }) => {\n    return (\n        <Split className=\"infobox\" hasGutter>\n            <WithLoader\n                variant={WithLoaderVariants.skeleton}\n                loading={isLoading}\n                size=\"lg\"\n            >\n                <SplitItem style={{ backgroundColor: color }}>\n                    <Bullseye>{content}</Bullseye>\n                </SplitItem>\n                <SplitItem isFilled>\n                    <TextContent>\n                        <Text component={TextVariants.h6}>{title}</Text>\n                        <Text component={TextVariants.p}>{text}</Text>\n                    </TextContent>\n                </SplitItem>\n            </WithLoader>\n        </Split>\n    );\n};\n\nInfoBox.propTypes = {\n    title: propTypes.string,\n    text: propTypes.any,\n    isLoading: propTypes.bool,\n    content: propTypes.any,\n    color: propTypes.string\n};\n\nexport default InfoBox;\n","import { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Popover } from '@patternfly/react-core/dist/js/components/Popover/Popover';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Popover\n            position=\"bottom\"\n            enableFlip\n            headerContent={<div>{severity.label + ' severity'}</div>}\n            bodyContent={\n                <TextContent>\n                    <Text component={TextVariants.p}>{severity.text}</Text>\n                </TextContent>\n            }\n            footerContent={\n                <a\n                    href=\"https://access.redhat.com/security/updates/classification/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <span className={'icon-with-label'}>\n                        <ExternalLinkSquareAltIcon />\n                        Learn more about security ratings\n                    </span>\n                </a>\n            }\n        >\n            <a>Learn more</a>\n        </Popover>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\nimport { Stack } from '@patternfly/react-core/dist/js/layouts/Stack/Stack';\nimport { StackItem } from '@patternfly/react-core/dist/js/layouts/Stack/StackItem';\nimport SecurityIcon from '@patternfly/react-icons/dist/js/icons/security-icon';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport PortalAdvisoryLink from '../../PresentationalComponents/Snippets/PortalAdvisoryLink';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { getSeverityById } from '../../Utilities/Helpers';\nimport InfoBox from '../InfoBox/InfoBox';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const severityObject = getSeverityById(attributes.severity);\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {attributes.description &&\n                                attributes.description.replace(\n                                    new RegExp('\\\\n(?=[^\\\\n])', 'g'),\n                                    ''\n                                )}\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {`Issued: ${processDate(\n                                        attributes.public_date\n                                    )}`}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {`Modified: ${processDate(\n                                        attributes.modified_date\n                                    )}`}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        <StackItem>\n                            <PortalAdvisoryLink advisory={attributes.id} />\n                        </StackItem>\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                {severityObject.value !== 0 && (\n                    <InfoBox\n                        isLoading={isLoading}\n                        title={severityObject.label}\n                        color={severityObject.color}\n                        text={\n                            <AdvisorySeverityInfo severity={severityObject} />\n                        }\n                        content={<SecurityIcon size=\"lg\" />}\n                    />\n                )}\n            </GridItem>\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { Button, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { AnsibeTowerIcon } from '@patternfly/react-icons';\nimport { cellWidth, expandable, sortable, SortByDirection, Table as PfTable, TableBody, TableGridBreakpoint,\n    TableHeader, TableVariant } from '@patternfly/react-table/dist/js';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport * as ReactRedux from 'react-redux';\nimport { reactCore } from '@redhat-cloud-services/frontend-components-utilities/files/inventoryDependencies';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Error from '../../PresentationalComponents/Snippets/Error';\nimport { getStore, register } from '../../store';\nimport { changeAffectedSystemsParams, clearAffectedSystemsStore, fetchAffectedSystemsAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { fetchAffectedSystems } from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, buildFilterChips, createSortBy, remediationProvider } from '../../Utilities/Helpers';\nimport { useHandleRefresh, usePagePerPage, useRemoveFilter, useSortColumn } from '../../Utilities/Hooks';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from '../Systems/SystemsListAssets';\n\nconst AffectedSystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const [InventoryCmp, setInventoryCmp] = React.useState();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawAffectedSystems = useSelector(\n        ({ AffectedSystemsStore }) => AffectedSystemsStore.rows\n    );\n    const status = useSelector(\n        ({ AffectedSystemsStore }) => AffectedSystemsStore.status\n    );\n    const error = useSelector(\n        ({ AffectedSystemsStore }) => AffectedSystemsStore.error\n    );\n    const selectedRows = useSelector(\n        ({ AffectedSystemsStore }) => AffectedSystemsStore.selectedRows\n    );\n    const hosts = React.useMemo(\n        () => createSystemsRows(rawAffectedSystems, selectedRows),\n        [rawAffectedSystems]\n    );\n    const metadata = useSelector(\n        ({ AffectedSystemsStore }) => AffectedSystemsStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ AffectedSystemsStore }) => AffectedSystemsStore.queryParams\n    );\n\n    const inventoryColumns = useSelector(\n        ({ entities }) => entities && entities.columns\n    );\n\n    const handleRefresh = useHandleRefresh(metadata, apply);\n    const { filter, search } = queryParams;\n\n    React.useEffect(() => {\n        return () => dispatch(clearAffectedSystemsStore());\n    }, []);\n\n    React.useEffect(() => {\n        dispatch(\n            fetchAffectedSystemsAction({ id: advisoryName, ...queryParams })\n        );\n    }, [queryParams]);\n\n    const fetchInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities\n        } = await insights.loadInventory({\n            ReactRedux,\n            React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            },\n            pfReact: reactCore\n        });\n\n        register({\n            ...mergeWithEntities(inventoryEntitiesReducer(systemsListColumns))\n        });\n        const { InventoryTable } = inventoryConnector(getStore());\n        setInventoryCmp(() => InventoryTable);\n    };\n\n    React.useEffect(() => {\n        fetchInventory();\n    }, []);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    function apply(params) {\n        dispatch(changeAffectedSystemsParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search, 'Search systems')\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    const onSelect = React.useCallback((event) => {\n        const toSelect = [];\n        switch (event) {\n            case 'none': {\n                Object.keys(selectedRows).forEach(id=>{\n                    toSelect.push(\n                        {\n                            id,\n                            selected: false\n                        }\n                    );\n                });\n                dispatch(\n                    { type: 'SELECT_ENTITY', payload: toSelect }\n                );\n                break;\n            }\n\n            case 'page': {\n                rawAffectedSystems.forEach(({ id })=>{\n                    toSelect.push(\n                        {\n                            id,\n                            selected: true\n                        }\n                    );});\n                dispatch(\n                    { type: 'SELECT_ENTITY', payload: toSelect }\n                );\n                break;\n            }\n\n            case 'all': {\n                const fetchCallback = ({ data }) => {\n                    data.forEach(({ id })=>{\n                        toSelect.push(\n                            {\n                                id,\n                                selected: true\n                            }\n                        );});\n                    dispatch(\n                        { type: 'SELECT_ENTITY', payload: toSelect }\n                    );\n                };\n\n                fetchAffectedSystems({ id: advisoryName, limit: 999999 }).then(fetchCallback);\n\n                break;\n            }\n        }}\n    );\n\n    // This is used ONLY for sorting purposes\n    const getMangledColumns = () => {\n        let updated = inventoryColumns && inventoryColumns.filter(({ key }) => key === 'updated')[0];\n        updated = { ...updated, key: 'last_upload' };\n        return [...systemsListColumns, updated];\n    };\n\n    const onSort = useSortColumn(getMangledColumns(), apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(getMangledColumns(), metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    return (\n        <React.Fragment>\n            {status === STATUS_REJECTED ? <Error message={error.detail}/> : InventoryCmp && (\n                <InventoryCmp\n                    items={hosts}\n                    page={page}\n                    total={metadata.total_items}\n                    perPage={perPage}\n                    onRefresh={handleRefresh}\n                    isLoaded={status === STATUS_RESOLVED}\n                    actions={systemsRowActions(showRemediationModal)}\n                    tableProps = {{ canSelectAll: false, onSort, sortBy }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig = {activeFiltersConfig}\n                    bulkSelect={onSelect && {\n                        count: selectedCount,\n                        items: [{\n                            title: `Select none (0)`,\n                            onClick: () => {\n                                onSelect('none');\n                            }\n                        }, {\n                            title: `Select page (${hosts.length})`,\n                            onClick: () => {\n                                onSelect('page');\n                            }\n                        },\n                        {\n                            title: `Select all (${metadata.total_items})`,\n                            onClick: () => {\n                                onSelect('all');\n                            }\n                        }],\n                        onSelect: (value) => {\n                            value ? onSelect('all') : onSelect('none');\n                        },\n                        checked: selectedCount === metadata.total_items ? true : selectedCount === 0 ? false : null\n                    }}\n                >\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <Button\n                                className={'remediationButtonPatch'}\n                                isDisabled={\n                                    arrayFromObj(selectedRows).length === 0\n                                }\n                                onClick={() =>\n                                    showRemediationModal(\n                                        remediationProvider(\n                                            advisoryName,\n                                            arrayFromObj(selectedRows)\n                                        )\n                                    )\n                                }\n                            >\n                                <AnsibeTowerIcon/>&nbsp;Remediate\n                            </Button>\n                            <RemediationModalCmp />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </InventoryCmp>\n            )}\n        </React.Fragment>\n    );\n};\n\nAffectedSystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AffectedSystems;\n","import { Text, TextContent, TextVariants } from '@patternfly/react-core/dist/js/components/Text';\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport Error from '../../PresentationalComponents/Snippets/Error';\nimport { paths } from '../../Routes';\nimport { clearAdvisoryDetailStore, clearAffectedSystemsStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { STATUS_LOADING, STATUS_REJECTED } from '../../Utilities/constants';\nimport AffectedSystems from '../AffectedSystems/AffectedSystems';\n\nconst AdvisoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [advisoryName] = React.useState(match.params.advisoryId);\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n    const error = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.error\n    );\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearAffectedSystemsStore());\n            dispatch(clearAdvisoryDetailStore());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                breadcrumbs={[\n                    {\n                        title: 'Patch',\n                        to: paths.advisories.to,\n                        isActive: false\n                    },\n                    {\n                        title: 'Advisories',\n                        to: paths.advisories.to,\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status === STATUS_REJECTED ? <Error message={error.detail}/> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status === STATUS_LOADING}\n                    />}\n            </Header>\n            <Main>\n                <TextContent>\n                    <Text component={TextVariants.h2}>Affected systems</Text>\n                </TextContent>\n                <AffectedSystems advisoryName={advisoryName} />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisoryDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(AdvisoryDetail);\n","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".col-width-30{width:30%}.col-width-40{width:40%}\\n\", \"\"]);\n\n","import { sortable } from '@patternfly/react-table/dist/js';\n\n// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: []\n};\n// Reducer\n\nfunction modifyInventory(columns, state) {\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], transforms: [sortable] }];\n        return {\n            ...state,\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = columns => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n\n        default:\n            return state;\n    }\n};\n","import { classNames, sortable } from '@patternfly/react-table/dist/js';\nimport { fetchApplicableSystemAdvisoriesApi } from '../../Utilities/api';\nimport { createAdvisoriesIcons, remediationProvider } from '../../Utilities/Helpers';\nimport './SystemsListAssets.scss';\n\nexport const systemsListColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        transforms: [classNames('col-width-40'), sortable]\n    },\n    {\n        key: 'applicable_advisories',\n        title: 'Applicable advisories',\n        transforms: [classNames('col-width-30'), sortable],\n        renderFunc: value => createAdvisoriesIcons(value)\n    }\n];\n\nexport const systemsRowActions = showRemediationModal => {\n    return [\n        {\n            title: 'Apply all applicable advisories',\n            onClick: (event, rowId, rowData) => {\n                fetchApplicableSystemAdvisoriesApi({\n                    id: rowData.id,\n                    limit: 10000\n                }).then(res =>\n                    showRemediationModal(\n                        remediationProvider(\n                            res.data.map(item => item.id),\n                            rowData.id\n                        )\n                    )\n                );\n            }\n        }\n    ];\n};\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".infobox{background-color:var(--pf-global--BackgroundColor--150);border:var(--pf-global--BorderColor--300) var(--pf-global--BorderWidth--sm) solid;height:65px}.infobox>.pf-l-split__item:first-child{width:65px;color:black;background-color:var(--pf-global--warning-color--100)}.infobox>.pf-l-split__item:first-child>div.pf-l-bullseye svg{color:white}.infobox .pf-c-content h6{margin:0}.infobox>.pf-l-split__item:nth-child(2){display:flex;justify-content:flex-start;align-items:center}\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./InfoBox.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./InfoBox.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./InfoBox.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}