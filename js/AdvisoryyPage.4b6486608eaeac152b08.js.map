{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/InfoBox/InfoBox.scss","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/InfoBox/InfoBox.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/AdvisoryDetail/CvesModal.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/AdvisorySystems/AdvisorySystems.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js","webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/PresentationalComponents/InfoBox/InfoBox.scss?de77"],"names":["___CSS_LOADER_EXPORT___","push","module","id","InfoBox","title","text","isLoading","content","color","Split","className","hasGutter","WithLoader","variant","WithLoaderVariants","loading","size","SplitItem","style","backgroundColor","Bullseye","isFilled","TextContent","Text","component","TextVariants","propTypes","AdvisorySeverityInfo","severity","Popover","position","enableFlip","headerContent","label","bodyContent","footerContent","href","target","rel","Flex","FlexItem","spacer","default","intl","messages","CvesModal","cveIds","dispatch","useDispatch","useState","cves","setCves","rows","setRows","page","setPage","perPage","setPerPage","undefined","search","setSearch","direction","SortByDirection","index","sortBy","setSortBy","data","useSelector","CvesListStore","status","React","fetchCves","slice","useMemo","sortedCves","filter","cve","attributes","synopsis","impact","cvss_score","some","string","toLowerCase","includes","createCvesRows","length","handleFilter","errorState","STATUS_REJECTED","Unavailable","Modal","isOpen","Boolean","onClose","TableView","columns","cvesTableColumns","onSetPage","_","onPerPageSelect","apply","tableOUIA","paginationOUIA","onSort","sortCves","store","metadata","limit","offset","total_items","queryParams","filterConfig","items","searchFilter","AdvisoryHeader","CvesInfoModal","setCvesModal","severityObject","getSeverityById","Grid","minHeight","GridItem","md","sm","centered","Stack","StackItem","whiteSpace","preserveNewlines","description","public_date","date","processDate","modified_date","ExternalLink","link","value","Button","padding","onClick","cvesCount","AdvisorySystems","advisoryName","RemediationModalCmp","setRemediationModalCmp","rawAdvisorySystems","AdvisorySystemsStore","selectedRows","hosts","createSystemsRows","inventoryColumns","entities","handleRefresh","useHandleRefresh","clearAdvisorySystemsStore","useDeepCompareEffect","fetchAdvisorySystemsAction","usePagePerPage","params","changeAdvisorySystemsParams","removeFilter","useRemoveFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","showRemediationModal","RemediationModal","onSelect","useOnSelect","fetchAdvisorySystems","toSelect","type","payload","getMangledColumns","updated","key","systemsListColumns","useSortColumn","createSortBy","sort","selectedCount","arrayFromObj","Inventory","onLoad","mergeWithEntities","getStore","register","inventoryEntitiesReducer","getState","total","onRefresh","isLoaded","STATUS_RESOLVED","actions","systemsRowActions","tableProps","canSelectAll","TableVariant","bulkSelect","count","toggleProps","checked","ToolbarGroup","ToolbarItem","isDisabled","remediationProvider","Object","keys","ouiaId","AdvisoryDetail","match","advisoryId","pageTitle","setPageTitle","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearAdvisoryDetailStore","Header","headerOUIA","breadcrumbs","to","paths","isActive","STATUS_LOADING","Main","withRouter","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"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","file":"js/AdvisoryyPage.4b6486608eaeac152b08.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".patch .infobox{background-color:var(--pf-global--BackgroundColor--150);border:var(--pf-global--BorderColor--300) var(--pf-global--BorderWidth--sm) solid;height:65px}.infobox>.pf-l-split__item:first-child{width:65px;color:black;background-color:var(--pf-global--warning-color--100)}.infobox>.pf-l-split__item:first-child>div.pf-l-bullseye svg{color:white}.infobox .pf-c-content h6{margin:0}.infobox>.pf-l-split__item:nth-child(2){display:flex;justify-content:flex-start;align-items:center}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/PresentationalComponents/InfoBox/InfoBox.scss\"],\"names\":[],\"mappings\":\"AAAA,gBAAgB,uDAAuD,CAAC,iFAAiF,CAAC,WAAW,CAAC,uCAAuC,UAAU,CAAC,WAAW,CAAC,qDAAqD,CAAC,6DAA6D,WAAW,CAAC,0BAA0B,QAAQ,CAAC,wCAAwC,YAAY,CAAC,0BAA0B,CAAC,kBAAkB\",\"sourcesContent\":[\".patch .infobox{background-color:var(--pf-global--BackgroundColor--150);border:var(--pf-global--BorderColor--300) var(--pf-global--BorderWidth--sm) solid;height:65px}.infobox>.pf-l-split__item:first-child{width:65px;color:black;background-color:var(--pf-global--warning-color--100)}.infobox>.pf-l-split__item:first-child>div.pf-l-bullseye svg{color:white}.infobox .pf-c-content h6{margin:0}.infobox>.pf-l-split__item:nth-child(2){display:flex;justify-content:flex-start;align-items:center}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { Text, TextContent, TextVariants, Bullseye, Split, SplitItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\nimport './InfoBox.scss';\n\nconst InfoBox = ({ title, text, isLoading, content, color }) => {\n    return (\n        <Split className=\"infobox\" hasGutter>\n            <WithLoader\n                variant={WithLoaderVariants.skeleton}\n                loading={isLoading}\n                size=\"lg\"\n            >\n                <SplitItem style={{ backgroundColor: color }}>\n                    <Bullseye>{content}</Bullseye>\n                </SplitItem>\n                <SplitItem isFilled>\n                    <TextContent>\n                        <Text component={TextVariants.h6}>{title}</Text>\n                        <Text component={TextVariants.p}>{text}</Text>\n                    </TextContent>\n                </SplitItem>\n            </WithLoader>\n        </Split>\n    );\n};\n\nInfoBox.propTypes = {\n    title: propTypes.string,\n    text: propTypes.any,\n    isLoading: propTypes.bool,\n    content: propTypes.any,\n    color: propTypes.string\n};\n\nexport default InfoBox;\n","import { Text, TextContent, TextVariants, Popover } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Popover\n            position=\"bottom\"\n            enableFlip\n            headerContent={<div>{severity.label + ' severity'}</div>}\n            bodyContent={\n                <TextContent>\n                    <Text component={TextVariants.p}>{severity.text}</Text>\n                </TextContent>\n            }\n            footerContent={\n                <a\n                    href=\"https://access.redhat.com/security/updates/classification/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <Flex>\n                        <FlexItem spacer={{ default: 'spacerSm' }}>\n                            <ExternalLinkSquareAltIcon />\n                        </FlexItem>\n                        <FlexItem spacer={{ default: 'spacerSm' }}>\n                            {intl.formatMessage(messages.linksSearchSecurityRatings)}\n                        </FlexItem>\n                    </Flex>\n                </a>\n            }\n        >\n            <a>{intl.formatMessage(messages.linksLearnMore)}</a>\n        </Popover>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import React, { useState, useMemo } from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport { cvesTableColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCves } from '../../store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport { createCvesRows } from '../../Utilities/DataMappers';\nimport { sortCves } from '..//../Utilities/Helpers';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components';\nimport { STATUS_REJECTED } from '../../Utilities/constants';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst CvesModal = ({ cveIds }) =>{\n    const dispatch = useDispatch();\n    const [cves, setCves] = useState([]);\n    const [rows, setRows] = useState([]);\n    const [page, setPage] = useState(1);\n    const [perPage, setPerPage] = useState(10);\n    const [search, setSearch] = useState(undefined);\n    const [sortBy, setSortBy] = useState({\n        direction: SortByDirection.asc,\n        index: 0\n    });\n\n    const data = useSelector(({ CvesListStore }) => CvesListStore.rows);\n\n    const status = useSelector(\n        ({ CvesListStore }) => CvesListStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchCves({ cveIds }));\n    }, []);\n\n    React.useMemo(() => {\n        setRows(cves.slice((page - 1) * perPage, page * perPage));\n    }, [cves, page, perPage, sortBy]);\n\n    useMemo(() => {\n        const sortedCves = (search !== undefined && search !== '')\n            && data.filter(\n                cve => {\n                    const { attributes: { synopsis, impact, cvss_score: cvssScore } } = cve;\n                    return [synopsis, impact, cvssScore].some(string => string.toLowerCase().includes(search));\n                }\n            ) || data;\n\n        setCves(createCvesRows((sortedCves.length !== 0 || search) && sortedCves || data));\n    }, [search, data]);\n\n    const handleClose = () => {\n        setRows(undefined);\n    };\n\n    const handleFilter = ({ search }) =>{\n        setPage(page);\n        setSearch(search);\n    };\n\n    const handlePageChange = (_, page) => {\n        setPage(page);\n    };\n\n    const handlePerPageChange = (_, perPage) => {\n        setPage(1);\n        setPerPage(perPage);\n    };\n\n    const handleSort = (_, index, direction) => {\n        const { sortBy, sortedCves } = sortCves(cves, index, direction);\n\n        setSortBy(sortBy);\n        setCves(sortedCves);\n    };\n\n    const errorState = status === STATUS_REJECTED && <Unavailable />;\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant='small'\n                title={intl.formatMessage(messages.labelsCves)}\n                isOpen={Boolean(rows)}\n                onClose={handleClose}\n            >\n                <TableView\n                    columns={cvesTableColumns}\n                    onSetPage={handlePageChange}\n                    onPerPageSelect={handlePerPageChange}\n                    apply={handleFilter}\n                    tableOUIA={'cves-table'}\n                    paginationOUIA={'cves-pagination'}\n                    onSort={handleSort}\n                    sortBy={sortBy}\n                    store={{\n                        rows,\n                        metadata: { limit: perPage, offset: (page - 1) * perPage, total_items: cves && cves.length },\n                        status, queryParams: { filter: {}, search }\n                    }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(handleFilter, search)\n                        ]\n                    }}\n                    errorState={errorState}\n                />\n            </Modal>\n        </React.Fragment>\n    );\n\n};\n\nCvesModal.propTypes = {\n    cveIds: propTypes.array\n};\n\nexport default CvesModal;\n","import { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { getSeverityById, preserveNewlines } from '../../Utilities/Helpers';\nimport InfoBox from '../InfoBox/InfoBox';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\nimport ExternalLink from '../Snippets/ExternalLink';\nimport messages from '../../Messages';\nimport { intl } from '../../Utilities/IntlProvider';\nimport {\n    TextContent,\n    Text,\n    TextVariants,\n    Button\n} from '@patternfly/react-core';\nimport CvesModal from '../../SmartComponents/AdvisoryDetail/CvesModal';\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const [CvesInfoModal, setCvesModal] = useState(() => () => null);\n    const severityObject = getSeverityById(attributes.severity);\n    const cves = attributes.cves;\n\n    const showCvesModal = () => {\n        setCvesModal(() => () => <CvesModal cveIds={cves} />);\n    };\n\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                preserveNewlines(attributes.description)\n                            }\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsPublicDate, { date: processDate(\n                                        attributes.public_date\n                                    )\n                                    })}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {intl.formatMessage(messages.labelsModifiedDate, { date: processDate(\n                                        attributes.modified_date\n                                    )\n                                    })}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        <StackItem>\n                            <ExternalLink link={`https://access.redhat.com/errata/${attributes.id}`}\n                                text={intl.formatMessage(messages.linksViewPackagesAndErrata)} />\n                        </StackItem>\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                {severityObject.value !== 0 && (\n                    <InfoBox\n                        isLoading={isLoading}\n                        title={severityObject.label}\n                        color={severityObject.color}\n                        text={\n                            <AdvisorySeverityInfo severity={severityObject} />\n                        }\n                        content={<SecurityIcon size=\"lg\" />}\n                    />\n                )}\n            </GridItem>\n            {cves && cves.length !== 0 && (\n                <GridItem md={4} sm={12}>\n                    <TextContent>\n                        <Text component={TextVariants.h3}>\n                            {intl.formatMessage(messages.labelsCves)}\n                        </Text>\n                        <Button variant='link' style={{ padding: 0 }} onClick = {showCvesModal} >\n                            {intl.formatMessage(messages.labelsCvesButton, { cvesCount: cves.length })}\n                        </Button>\n                    </TextContent>\n                </GridItem>\n            )}\n            <CvesInfoModal/>\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { Button, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { AnsibeTowerIcon } from '@patternfly/react-icons';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/components/cjs/Inventory';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport { getStore, register } from '../../store';\nimport { changeAdvisorySystemsParams, clearAdvisorySystemsStore, fetchAdvisorySystemsAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { fetchAdvisorySystems } from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, buildFilterChips, createSortBy, remediationProvider } from '../../Utilities/Helpers';\nimport {\n    useDeepCompareEffect, useHandleRefresh, useOnSelect, usePagePerPage, useRemoveFilter,\n    useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from '../Systems/SystemsListAssets';\n\nconst AdvisorySystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawAdvisorySystems = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.rows\n    );\n    const status = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.status\n    );\n\n    const selectedRows = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.selectedRows\n    );\n    const hosts = React.useMemo(\n        () => createSystemsRows(rawAdvisorySystems, selectedRows),\n        [rawAdvisorySystems]\n    );\n    const metadata = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.queryParams\n    );\n\n    const inventoryColumns = useSelector(\n        ({ entities }) => entities && entities.columns\n    );\n\n    const handleRefresh = useHandleRefresh(metadata, apply);\n    const { filter, search } = queryParams;\n\n    React.useEffect(() => {\n        return () => dispatch(clearAdvisorySystemsStore());\n    }, []);\n\n    useDeepCompareEffect(() => {\n        dispatch(\n            fetchAdvisorySystemsAction({ id: advisoryName, ...queryParams })\n        );\n    }, [queryParams]);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    function apply(params) {\n        dispatch(changeAdvisorySystemsParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search, intl.formatMessage(messages.labelsFiltersSystemsSearch))\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const fetchAllData = () =>\n        fetchAdvisorySystems({ ...queryParams, id: advisoryName, limit: -1 });\n\n    const onSelect = useOnSelect(rawAdvisorySystems,  selectedRows, fetchAllData, selectRows);\n\n    // This is used ONLY for sorting purposes\n    const getMangledColumns = () => {\n        let updated = inventoryColumns && inventoryColumns.filter(({ key }) => key === 'updated')[0];\n        updated = { ...updated, key: 'last_upload' };\n        return [...systemsListColumns, updated];\n    };\n\n    const onSort = useSortColumn(getMangledColumns(), apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(getMangledColumns(), metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    return (\n        <React.Fragment>\n            {status === STATUS_REJECTED ? <Unavailable/> : (\n                <InventoryTable\n                    onLoad={({ mergeWithEntities }) => {\n                        const store = getStore();\n                        register({\n                            ...mergeWithEntities(\n                                inventoryEntitiesReducer(systemsListColumns, store.getState().AdvisorySystemsStore)\n                            )\n                        });\n                    }}\n                    items={hosts}\n                    page={page}\n                    total={metadata.total_items}\n                    perPage={perPage}\n                    onRefresh={handleRefresh}\n                    isLoaded={status === STATUS_RESOLVED}\n                    actions={systemsRowActions(showRemediationModal)}\n                    tableProps = {{ canSelectAll: false, onSort, sortBy,\n                        variant: TableVariant.compact, className: 'patchCompactInventory' }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig = {activeFiltersConfig}\n                    bulkSelect={onSelect && {\n                        count: selectedCount,\n                        items: [{\n                            title: `Select none (0)`,\n                            onClick: () => {\n                                onSelect('none');\n                            }\n                        }, {\n                            title: `Select page (${hosts.length})`,\n                            onClick: () => {\n                                onSelect('page');\n                            }\n                        },\n                        {\n                            title: `Select all (${metadata.total_items})`,\n                            onClick: () => {\n                                onSelect('all');\n                            }\n                        }],\n                        onSelect: (value) => {\n                            value ? onSelect('all') : onSelect('none');\n                        },\n                        toggleProps: {\n                            'data-ouia-component-type': 'bulk-select-toggle-button'\n                        },\n                        checked: selectedCount === metadata.total_items ? true : selectedCount === 0 ? false : null\n                    }}\n                >\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <Button\n                                className={'remediationButtonPatch'}\n                                isDisabled={\n                                    arrayFromObj(selectedRows).length === 0\n                                }\n                                onClick={() =>\n                                    showRemediationModal(\n                                        remediationProvider(\n                                            advisoryName,\n                                            Object.keys(selectedRows)\n                                        )\n                                    )\n                                }\n                                ouiaId={'toolbar-remediation-button'}\n                            >\n                                <AnsibeTowerIcon/>&nbsp;{intl.formatMessage(messages.labelsRemediate)}\n                            </Button>\n                            <RemediationModalCmp />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </InventoryTable>\n            )}\n        </React.Fragment>\n    );\n};\n\nAdvisorySystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AdvisorySystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport messages from '../../Messages';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components';\nimport { paths } from '../../Routes';\nimport { clearAdvisoryDetailStore, clearAdvisorySystemsStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { STATUS_LOADING, STATUS_REJECTED } from '../../Utilities/constants';\nimport { setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport AdvisorySystems from '../AdvisorySystems/AdvisorySystems';\n\nconst AdvisoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [advisoryName] = React.useState(match.params.advisoryId);\n\n    const pageTitle = `${advisoryName} - ${intl.formatMessage(messages.titlesAdvisories)}`;\n    setPageTitle(pageTitle);\n\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearAdvisorySystemsStore());\n            dispatch(clearAdvisoryDetailStore());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                headerOUIA={'advisory-details'}\n                breadcrumbs={[\n                    {\n                        title: intl.formatMessage(messages.titlesPatchAdvisories),\n                        to: paths.advisories.to,\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status === STATUS_REJECTED ? <Unavailable /> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status === STATUS_LOADING}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>{intl.formatMessage(messages.titlesAffectedSystems)}</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        <AdvisorySystems advisoryName={advisoryName} />\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisoryDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(AdvisoryDetail);\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/@redhat-cloud-services/frontend-components-config/src/css-prefix-loader.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./InfoBox.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/@redhat-cloud-services/frontend-components-config/src/css-prefix-loader.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./InfoBox.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}