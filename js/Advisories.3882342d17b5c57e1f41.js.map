{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/Advisories/Advisories.js"],"names":["Advisories","history","pageTitle","intl","messages","setPageTitle","dispatch","useDispatch","React","firstMount","setFirstMount","advisories","useSelector","AdvisoryListStore","rows","expandedRows","queryParams","selectedRows","metadata","status","createAdvisoriesRows","apply","decodeQueryparams","location","search","push","encodeURLParams","fetchApplicableAdvisories","onCollapse","_","rowId","value","expandAdvisoryRow","getRowIdByIndexExpandable","onSort","useSortColumn","advisoriesColumns","sortBy","createSortBy","sort","onSetPage","useSetPage","limit","onPerPageSelect","usePerPageSelect","params","changeAdvisoryListParams","errorState","STATUS_REJECTED","title","headerOUIA","columns","compact","onExport","format","date","Date","toISOString","replace","split","filename","exportAdvisoriesCSV","then","data","downloadFile","exportAdvisoriesJSON","JSON","stringify","remediationButtonOUIA","tableOUIA","paginationOUIA","store","filterConfig","items","searchFilter","typeFilter","filter","publishDateFilter","propTypes","withRouter"],"mappings":"4fAsBMA,EAAa,SAAC,GAAgB,IAAdC,EAAc,EAAdA,QACZC,EAAYC,kBAAmBC,uBAErCC,QAAaH,GAEb,IAAMI,GAAWC,mBALe,EAMIC,cAAe,GANnB,WAMzBC,EANyB,KAMbC,EANa,KAO1BC,GAAaC,kBACf,qBAAGC,kBAA0CC,QAG3CC,GAAeH,kBACjB,qBAAGC,kBAA0CE,gBAE3CC,GAAcJ,kBAChB,qBAAGC,kBAA0CG,eAE3CC,GAAeL,kBACjB,qBAAGC,kBAA0CI,gBAE3CC,GAAWN,kBACb,qBAAGC,kBAA0CK,YAE3CC,GAASP,kBACX,qBAAGC,kBAA0CM,UAG3CL,EAAON,aACT,kBAAMY,QAAqBT,EAAYI,EAAcE,KACrD,CAACN,EAAYI,EAAcE,IAG/BT,eAAgB,WACRC,GACAY,GAAMC,QAAkBrB,EAAQsB,SAASC,SACzCd,GAAc,KAEdT,EAAQwB,MAAKC,QAAgBV,IAC7BV,GAASqB,QAA0BX,OAExC,CAACA,IAEJ,IAAMY,EAAapB,iBAAkB,SAACqB,EAAGC,EAAOC,GAAX,OACjCzB,GACI0B,QAAkB,CACdF,OAAOG,QAA0BtB,EAAYmB,GAC7CC,cAKNG,GAASC,QAAcC,KAAmBf,EAAO,GACjDgB,EAAS7B,aACX,kBAAM8B,QAAaF,KAAmBlB,EAASqB,KAAM,KACrD,CAACrB,EAASqB,OAcRC,GAAYC,QAAWvB,EAASwB,MAAOrB,GACvCsB,GAAkBC,QAAiBvB,GAEzC,SAASA,EAAMwB,GACXvC,GAASwC,QAAyBD,IAGtC,IAAME,EAAc5B,IAAW6B,MAAmB,kBAAC,IAAD,MAElD,OACI,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAQC,MAAO9C,kBAAmBC,2BAAiC8C,WAAY,eAC/E,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,QAASf,KACTgB,SAAO,EACPxB,WAAYA,EACZY,UAAWA,EACXG,gBAAiBA,EACjBT,OAAQA,EACRmB,SA/BC,SAACxB,EAAGyB,GACjB,IAAMC,GAAO,IAAIC,MAAOC,cAAcC,QAAQ,QAAS,KAAKC,MAAM,KAAK,GAAK,OACtEC,EAAW,yBAAH,OAA4BL,GAC3B,QAAXD,GACAO,QAAoB7C,GAAa8C,MAAK,SAAAC,GAAI,OAAIC,QAAaD,EAAMH,EAAU,WAG3EK,QAAqBjD,GAAa8C,MAAK,SAAAC,GAAI,OAAIC,QAAaE,KAAKC,UAAUJ,GAAOH,EAAU,YAyBpFvB,OAAQA,EACRhB,MAAOA,EACP+C,sBAAuB,6BACvBC,UAAW,mBACXC,eAAgB,wBAChBC,MAAO,CAAEzD,OAAMI,WAAUC,SAAQH,eACjCwD,aAAc,CACVC,MAAO,EACHC,OAAarD,EAAOL,EAAYQ,SAChCmD,OAAWtD,EAAOL,EAAY4D,SAC9BC,OAAkBxD,EAAOL,EAAY4D,UAG7C7B,WAAYA,OAOhC/C,EAAW8E,UAAY,CACnB7E,QAAS6E,YAGb,SAAeC,gBAAW/E","file":"js/Advisories.3882342d17b5c57e1f41.js","sourcesContent":["import { Main } from '@redhat-cloud-services/frontend-components';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport typeFilter from '../../PresentationalComponents/Filters/TypeFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components';\nimport TableView from '../../PresentationalComponents/TableView/TableView';\nimport { advisoriesColumns } from '../../PresentationalComponents/TableView/TableViewAssets';\nimport { changeAdvisoryListParams, expandAdvisoryRow, fetchApplicableAdvisories } from '../../store/Actions/Actions';\nimport { exportAdvisoriesCSV, exportAdvisoriesJSON } from '../../Utilities/api';\nimport { STATUS_REJECTED } from '../../Utilities/constants';\nimport { createAdvisoriesRows } from '../../Utilities/DataMappers';\nimport { createSortBy, decodeQueryparams, encodeURLParams, getRowIdByIndexExpandable } from '../../Utilities/Helpers';\nimport { usePerPageSelect, useSetPage, useSortColumn, setPageTitle } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport messages from '../../Messages';\n\nconst Advisories = ({ history }) => {\n    const pageTitle = intl.formatMessage(messages.titlesAdvisories);\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const [firstMount, setFirstMount] = React.useState(true);\n    const advisories = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.rows\n    );\n\n    const expandedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.expandedRows\n    );\n    const queryParams = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.queryParams\n    );\n    const selectedRows = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.selectedRows\n    );\n    const metadata = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.metadata\n    );\n    const status = useSelector(\n        ({ AdvisoryListStore }) => AdvisoryListStore.status\n    );\n\n    const rows = React.useMemo(\n        () => createAdvisoriesRows(advisories, expandedRows, selectedRows),\n        [advisories, expandedRows, selectedRows]\n    );\n\n    React.useEffect(() => {\n        if (firstMount) {\n            apply(decodeQueryparams(history.location.search));\n            setFirstMount(false);\n        } else {\n            history.push(encodeURLParams(queryParams));\n            dispatch(fetchApplicableAdvisories(queryParams));\n        }\n    }, [queryParams]);\n\n    const onCollapse = React.useCallback((_, rowId, value) =>\n        dispatch(\n            expandAdvisoryRow({\n                rowId: getRowIdByIndexExpandable(advisories, rowId),\n                value\n            })\n        )\n    );\n\n    const onSort = useSortColumn(advisoriesColumns, apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(advisoriesColumns, metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const onExport = (_, format) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const filename = `applicable-advisories-${date}`;\n        if (format === 'csv') {\n            exportAdvisoriesCSV(queryParams).then(data => downloadFile(data, filename, 'csv'));\n        }\n        else {\n            exportAdvisoriesJSON(queryParams).then(data => downloadFile(JSON.stringify(data), filename, 'json'));\n        }\n    };\n\n    const onSetPage = useSetPage(metadata.limit, apply);\n    const onPerPageSelect = usePerPageSelect(apply);\n\n    function apply(params) {\n        dispatch(changeAdvisoryListParams(params));\n    }\n\n    const errorState  = status === STATUS_REJECTED && <Unavailable />;\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchAdvisories)} headerOUIA={'advisories'}/>\n            <Main>\n                <TableView\n                    columns={advisoriesColumns}\n                    compact\n                    onCollapse={onCollapse}\n                    onSetPage={onSetPage}\n                    onPerPageSelect={onPerPageSelect}\n                    onSort={onSort}\n                    onExport={onExport}\n                    sortBy={sortBy}\n                    apply={apply}\n                    remediationButtonOUIA={'toolbar-remediation-button'}\n                    tableOUIA={'advisories-table'}\n                    paginationOUIA={'advisories-pagination'}\n                    store={{ rows, metadata, status, queryParams }}\n                    filterConfig={{\n                        items: [\n                            searchFilter(apply, queryParams.search),\n                            typeFilter(apply, queryParams.filter),\n                            publishDateFilter(apply, queryParams.filter)\n                        ]\n                    }}\n                    errorState={errorState}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisories.propTypes = {\n    history: propTypes.object\n};\n\nexport default withRouter(Advisories);\n"],"sourceRoot":""}