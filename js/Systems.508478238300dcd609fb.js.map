{"version":3,"sources":["webpack:///./src/SmartComponents/Systems/SystemsListAssets.scss","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.scss?7555","webpack:///./src/SmartComponents/Systems/Systems.js"],"names":["module","exports","push","i","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","arr","arrayLikeToArray","Array","isArray","iter","Symbol","iterator","Object","from","TypeError","init","columns","rows","entities","modifyInventory","hosts","state","loaded","lastSeenColumn","filter","key","transforms","sortable","InventoryHosts","PatchHosts","map","InventoryRow","patchLastSeen","find","patchRow","id","updated","attributes","last_upload","modifyPackageSystems","inventoryEntitiesReducer","store","action","type","packagesSystemsInventoryReducer","systemsListColumns","title","composed","props","width","renderFunc","value","createAdvisoriesIcons","packageSystemsColumns","createUpgradableColumn","systemsRowActions","showRemediationModal","onClick","event","rowId","rowData","fetchApplicableSystemAdvisoriesApi","limit","then","res","remediationProvider","data","item","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","idx","Error","dispose","Systems","pageTitle","intl","formatMessage","messages","titlesSystems","setPageTitle","dispatch","useDispatch","React","useState","InventoryCmp","setInventoryCmp","RemediationModalCmp","setRemediationModalCmp","rawSystems","useSelector","SystemsListStore","useMemo","createSystemsRows","status","metadata","queryParams","inventoryColumns","search","handleRefresh","useHandleRefresh","apply","useEffect","fetchSystemsAction","fetchInventory","getStore","insights","loadInventory","ReactRedux","reactRouterDom","pfReactTable","Table","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","TableVariant","expandable","SortByDirection","pfReact","reactCore","inventoryConnector","mergeWithEntities","register","getState","InventoryTable","usePagePerPage","offset","page","perPage","params","changeSystemsListParams","removeFilter","useRemoveFilter","filterConfig","items","searchFilter","labelsFiltersSystemsSearch","activeFiltersConfig","filters","buildFilterChips","onDelete","getMangledColumns","onSort","useSortColumn","sortBy","createSortBy","sort","Fragment","titlesPatchSystems","headerOUIA","STATUS_REJECTED","isFullView","total","total_items","isLoaded","STATUS_RESOLVED","onRefresh","exportConfig","onSelect","_","format","date","Date","toISOString","replace","split","filename","exportSystemsCSV","downloadFile","exportSystemsJSON","JSON","stringify","hasCheckbox","actions","tableProps","areActionsDisabled","applicable_advisories","every","typeSum"],"mappings":"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","file":"js/Systems.508478238300dcd609fb.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".col-width-30{width:30%}.col-width-40{width:40%}\\n\", \"\"]);\n\n","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","import { sortable } from '@patternfly/react-table/dist/js';\n\n// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: []\n};\n// Reducer\n\nfunction replaceLastUpdated (InventoryHosts, PatchHosts) {\n    return InventoryHosts.map((InventoryRow) => {\n        const patchLastSeen = PatchHosts && PatchHosts.find(patchRow=> patchRow.id === InventoryRow.id);\n        return {\n            ...InventoryRow,\n            updated: patchLastSeen && patchLastSeen.attributes.last_upload || InventoryRow.updated\n        };\n    });\n}\n\nfunction modifyInventory(columns, hosts, state) {\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], transforms: [sortable] }];\n        return {\n            ...state,\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ],\n            rows: replaceLastUpdated(state.rows, hosts)\n        };\n    }\n\n    return state;\n}\n\nfunction modifyPackageSystems(columns, hosts, state) {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns, store) => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, store?.rows, state);\n\n        default:\n            return state;\n    }\n};\n\nexport const packagesSystemsInventoryReducer = (columns, store) => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyPackageSystems(columns, store?.rows, state);\n\n        default:\n            return state;\n    }\n};\n","import { sortable } from '@patternfly/react-table/dist/js';\nimport { fetchApplicableSystemAdvisoriesApi } from '../../Utilities/api';\nimport { createAdvisoriesIcons, createUpgradableColumn, remediationProvider } from '../../Utilities/Helpers';\nimport './SystemsListAssets.scss';\n\nexport const systemsListColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        transforms: [sortable],\n        props: {\n            width: 50\n        }\n    },\n    {\n        key: 'packages_installed',\n        title: 'Packages',\n        transforms: [sortable],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'applicable_advisories',\n        title: 'Applicable advisories',\n        transforms: [sortable],\n        props: {\n            width: 20\n        },\n        renderFunc: value => createAdvisoriesIcons(value)\n    }\n];\n\nexport const packageSystemsColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        props: {\n            width: 50\n        }\n    },\n    {\n        key: 'installed_evra',\n        title: 'Installed version',\n        transforms: [sortable],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'available_evra',\n        title: 'Latest version',\n        transforms: [sortable],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'upgradable',\n        title: 'Status',\n        props: {\n            width: 20\n        },\n        renderFunc: value => createUpgradableColumn(value)\n    }\n];\n\nexport const systemsRowActions = showRemediationModal => {\n    return [\n        {\n            title: 'Apply all applicable advisories',\n            onClick: (event, rowId, rowData) => {\n                fetchApplicableSystemAdvisoriesApi({\n                    id: rowData.id,\n                    limit: 10000\n                }).then(res =>\n                    showRemediationModal(\n                        remediationProvider(\n                            res.data.map(item => item.id),\n                            rowData.id\n                        )\n                    )\n                );\n            }\n        }\n    ];\n};\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import {\n    cellWidth, expandable, sortable, SortByDirection, Table as PfTable,\n    TableBody, TableGridBreakpoint, TableHeader, TableVariant\n} from '@patternfly/react-table';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport { reactCore } from '@redhat-cloud-services/frontend-components-utilities/files/inventoryDependencies';\nimport React from 'react';\nimport * as ReactRedux from 'react-redux';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components';\nimport { getStore, register } from '../../store';\nimport { changeSystemsListParams, fetchSystemsAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { exportSystemsCSV, exportSystemsJSON } from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport { buildFilterChips, createSortBy } from '../../Utilities/Helpers';\nimport { setPageTitle, useHandleRefresh, usePagePerPage, useRemoveFilter, useSortColumn } from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\n\nconst Systems = () => {\n    const pageTitle = intl.formatMessage(messages.titlesSystems);\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n\n    const [InventoryCmp, setInventoryCmp] = React.useState();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawSystems = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.rows\n    );\n    const hosts = React.useMemo(() => createSystemsRows(rawSystems), [\n        rawSystems\n    ]);\n    const status = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.status\n    );\n    const metadata = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.queryParams\n    );\n\n    const inventoryColumns = useSelector(\n        ({ entities }) => entities && entities.columns\n    );\n\n    const { filter, search } = queryParams;\n\n    const handleRefresh = useHandleRefresh(metadata, apply);\n\n    React.useEffect(() => {\n        dispatch(fetchSystemsAction(queryParams));\n    }, [queryParams]);\n\n    const fetchInventory = async () => {\n        const store = getStore();\n        const {\n            inventoryConnector,\n            mergeWithEntities\n        } = await insights.loadInventory({\n            ReactRedux,\n            React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            },\n            pfReact: reactCore\n        });\n\n        register({\n            ...mergeWithEntities(inventoryEntitiesReducer(systemsListColumns, store.getState().SystemsListStore))\n        });\n        const { InventoryTable } = inventoryConnector(store);\n        setInventoryCmp(() => InventoryTable);\n    };\n\n    React.useEffect(() => {\n        fetchInventory();\n    }, []);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    function apply(params) {\n        dispatch(changeSystemsListParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search, intl.formatMessage(messages.labelsFiltersSystemsSearch))\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    // This is used ONLY for sorting purposes\n    const getMangledColumns = () => {\n        let updated = inventoryColumns && inventoryColumns.filter(({ key }) => key === 'updated')[0];\n        updated = { ...updated, key: 'last_upload' };\n        return [...systemsListColumns, updated];\n    };\n\n    const onSort = useSortColumn(getMangledColumns(), apply);\n    const sortBy = React.useMemo(\n        () => createSortBy(getMangledColumns(), metadata.sort, 0),\n        [metadata.sort]\n    );\n\n    const onExport = (_, format) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const filename = `systems-${date}`;\n        if (format === 'csv') {\n            exportSystemsCSV(queryParams).then(data => downloadFile(data, filename, 'csv'));\n        }\n        else {\n            exportSystemsJSON(queryParams).then(data => downloadFile(JSON.stringify(data), filename, 'json'));\n        }\n    };\n\n    const areActionsDisabled = (rowData) => {\n        // eslint-disable-next-line camelcase\n        const { applicable_advisories } = rowData;\n        return applicable_advisories.every(typeSum => typeSum === 0);\n    };\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'}/>\n            <RemediationModalCmp />\n            <Main>\n                {status === STATUS_REJECTED ? <Unavailable/> :\n                    InventoryCmp && (\n                        <InventoryCmp\n                            isFullView\n                            items={hosts}\n                            page={page}\n                            total={metadata.total_items}\n                            perPage={perPage}\n                            isLoaded={status === STATUS_RESOLVED}\n                            onRefresh={handleRefresh}\n                            exportConfig={{ onSelect: onExport }}\n                            hasCheckbox={false}\n                            actions={systemsRowActions(showRemediationModal)}\n                            filterConfig={filterConfig}\n                            activeFiltersConfig = {activeFiltersConfig}\n                            tableProps = {{ areActionsDisabled, onSort, sortBy }}\n\n                        />\n                    )\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n"],"sourceRoot":""}