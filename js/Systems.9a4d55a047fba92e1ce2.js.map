{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-patchman/./src/SmartComponents/Systems/Systems.js"],"names":["pageTitle","intl","messages","setPageTitle","dispatch","useDispatch","React","isRemediationLoading","setRemediationLoading","RemediationModalCmp","setRemediationModalCmp","rawSystems","useSelector","SystemsListStore","rows","selectedRows","hosts","createSystemsRows","status","metadata","queryParams","inventoryColumns","entities","columns","filter","search","handleRefresh","useHandleRefresh","apply","useDeepCompareEffect","fetchSystemsAction","usePagePerPage","limit","offset","page","perPage","showRemediationModal","data","resolvedData","params","changeSystemsListParams","removeFilter","useRemoveFilter","filterConfig","items","searchFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","getMangledColumns","updated","key","systemsListColumns","onSelect","useOnSelect","fetchSystems","toSelect","type","payload","onSort","useSortColumn","sortBy","createSortBy","sort","selectedCount","arrayFromObj","length","prepareRemediationPairs","systems","fetchApplicableAdvisoriesApi","then","fetchViewAdvisoriesSystems","advisories","map","advisory","id","title","headerOUIA","STATUS_REJECTED","onLoad","mergeWithEntities","store","getStore","register","inventoryEntitiesReducer","getState","isFullView","total","total_items","isLoaded","STATUS_RESOLVED","onRefresh","exportConfig","_","format","date","Date","toISOString","replace","split","filename","exportSystemsCSV","downloadFile","exportSystemsJSON","JSON","stringify","bulkSelect","count","onClick","value","toggleProps","checked","actions","systemsRowActions","tableProps","areActionsDisabled","rowData","applicable_advisories","every","typeSum","canSelectAll","variant","TableVariant","className","remediationProviderWithPairs","Object","keys","row","transformPairs","isDisabled","isLoading","ouia"],"mappings":"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","file":"js/Systems.9a4d55a047fba92e1ce2.js","sourcesContent":["import { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from '../../Messages';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { getStore, register } from '../../store';\nimport { changeSystemsListParams, fetchSystemsAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport {\n    exportSystemsCSV, exportSystemsJSON, fetchApplicableAdvisoriesApi,\n    fetchSystems, fetchViewAdvisoriesSystems\n} from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport {\n    arrayFromObj, buildFilterChips, createSortBy,\n    remediationProviderWithPairs, transformPairs\n} from '../../Utilities/Helpers';\nimport {\n    setPageTitle,\n    useDeepCompareEffect, useHandleRefresh, useOnSelect, usePagePerPage,\n    useRemoveFilter, useSortColumn\n} from '../../Utilities/Hooks';\nimport { intl } from '../../Utilities/IntlProvider';\nimport PatchRemediationButton from '../Remediation/PatchRemediationButton';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from './SystemsListAssets';\n\nconst Systems = () => {\n    const pageTitle = intl.formatMessage(messages.titlesSystems);\n\n    setPageTitle(pageTitle);\n\n    const dispatch = useDispatch();\n    const [isRemediationLoading, setRemediationLoading] = React.useState(false);\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawSystems = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.rows\n    );\n    const selectedRows = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.selectedRows\n    );\n    const hosts = React.useMemo(() => createSystemsRows(rawSystems, selectedRows), [\n        rawSystems\n    ]);\n    const status = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.status\n    );\n    const metadata = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ SystemsListStore }) => SystemsListStore.queryParams\n    );\n\n    const inventoryColumns = useSelector(\n        ({ entities }) => entities && entities.columns\n    );\n\n    const { filter, search } = queryParams;\n\n    const handleRefresh = useHandleRefresh(metadata, apply);\n\n    useDeepCompareEffect(() => {\n        dispatch(fetchSystemsAction(queryParams));\n    }, [queryParams]);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    async function showRemediationModal(data) {\n        setRemediationLoading(true);\n        const resolvedData = await data;\n        setRemediationModalCmp(() => () => <RemediationModal data={resolvedData} />);\n        setRemediationLoading(false);\n    }\n\n    function apply(params) {\n        dispatch(changeSystemsListParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search,\n                intl.formatMessage(messages.labelsFiltersSystemsSearchTitle),\n                intl.formatMessage(messages.labelsFiltersSystemsSearchPlaceholder)\n            )\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    // This is used ONLY for sorting purposes\n    const getMangledColumns = () => {\n        let updated = inventoryColumns && inventoryColumns.filter(({ key }) => key === 'updated')[0];\n        updated = { ...updated, key: 'last_upload' };\n        return [...systemsListColumns, updated];\n    };\n\n    const fetchAllData = () =>\n        fetchSystems({ ...queryParams, limit: -1 });\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const onSelect = useOnSelect(hosts,  selectedRows, fetchAllData, selectRows);\n\n    const onSort = useSortColumn(getMangledColumns(), apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(getMangledColumns(), metadata.sort, 1),\n        [metadata.sort]\n    );\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    const onExport = (_, format) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const filename = `systems-${date}`;\n        if (format === 'csv') {\n            exportSystemsCSV(queryParams).then(data => downloadFile(data, filename, 'csv'));\n        }\n        else {\n            exportSystemsJSON(queryParams).then(data => downloadFile(JSON.stringify(data), filename, 'json'));\n        }\n    };\n\n    const areActionsDisabled = (rowData) => {\n        // eslint-disable-next-line camelcase\n        const { applicable_advisories } = rowData;\n        return applicable_advisories.every(typeSum => typeSum === 0);\n    };\n\n    const prepareRemediationPairs = (systems) => {\n        return fetchApplicableAdvisoriesApi({ limit: -1 }).then(\n            ({ data }) => fetchViewAdvisoriesSystems(\n                {\n                    advisories: data.map(advisory=> advisory.id),\n                    systems\n                }\n            ));\n    };\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.titlesPatchSystems)} headerOUIA={'systems'}/>\n            <RemediationModalCmp />\n            <Main>\n                {status === STATUS_REJECTED ? <Unavailable/> :\n                    (\n                        <InventoryTable\n                            onLoad={({ mergeWithEntities }) => {\n                                const store = getStore();\n                                register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(systemsListColumns, store.getState().SystemsListStore)\n                                    )\n                                });\n                            }}\n                            isFullView\n                            items={hosts}\n                            page={page}\n                            total={metadata.total_items}\n                            perPage={perPage}\n                            isLoaded={status === STATUS_RESOLVED}\n                            onRefresh={handleRefresh}\n                            exportConfig={{ onSelect: onExport }}\n                            bulkSelect={onSelect && {\n                                count: selectedCount,\n                                items: [{\n                                    title: `Select none (0)`,\n                                    onClick: () => {\n                                        onSelect('none');\n                                    }\n                                }, {\n                                    title: `Select page (${hosts.length})`,\n                                    onClick: () => {\n                                        onSelect('page');\n                                    }\n                                },\n                                {\n                                    title: `Select all (${metadata.total_items})`,\n                                    onClick: () => {\n                                        onSelect('all');\n                                    }\n                                }],\n                                onSelect: (value) => {\n                                    value ? onSelect('all') : onSelect('none');\n                                },\n                                toggleProps: {\n                                    'data-ouia-component-type': 'bulk-select-toggle-button'\n                                },\n                                checked: selectedCount === metadata.total_items ? true : selectedCount === 0 ? false : null\n                            }}\n                            actions={systemsRowActions(showRemediationModal)}\n                            filterConfig={filterConfig}\n                            activeFiltersConfig = {activeFiltersConfig}\n                            tableProps = {{ areActionsDisabled, onSort, sortBy, canSelectAll: false,\n                                variant: TableVariant.compact, className: 'patchCompactInventory' }}\n\n                        >\n                            <ToolbarGroup>\n                                <ToolbarItem>\n                                    <PatchRemediationButton\n                                        onClick={() =>\n                                            showRemediationModal(\n                                                remediationProviderWithPairs(\n                                                    Object.keys(selectedRows).filter(row=>selectedRows[row]),\n                                                    prepareRemediationPairs, transformPairs)\n                                            )}\n                                        isDisabled={arrayFromObj(selectedRows).length === 0 || isRemediationLoading}\n                                        isLoading={isRemediationLoading}\n                                        ouia={'toolbar-remediation-button'}\n                                    />\n                                    <RemediationModalCmp />\n                                </ToolbarItem>\n                            </ToolbarGroup>\n                        </InventoryTable>\n                    )\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default Systems;\n"],"sourceRoot":""}