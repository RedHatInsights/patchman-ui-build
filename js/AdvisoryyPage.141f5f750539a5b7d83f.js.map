{"version":3,"sources":["webpack:///./src/SmartComponents/Systems/SystemsListAssets.scss","webpack:///./src/store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.js","webpack:///./src/SmartComponents/Systems/SystemsListAssets.scss?7555","webpack:///./src/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/PresentationalComponents/InfoBox/InfoBox.scss","webpack:///./src/PresentationalComponents/InfoBox/InfoBox.scss?011f","webpack:///./src/PresentationalComponents/InfoBox/InfoBox.js","webpack:///./src/PresentationalComponents/Snippets/AdvisorySeverityInfo.js","webpack:///./src/PresentationalComponents/AdvisoryHeader/AdvisoryHeader.js","webpack:///./src/SmartComponents/AdvisorySystems/AdvisorySystems.js","webpack:///./src/SmartComponents/AdvisoryDetail/AdvisoryDetail.js"],"names":["module","exports","push","i","init","columns","rows","entities","modifyInventory","hosts","state","loaded","lastSeenColumn","filter","key","transforms","sortable","InventoryHosts","PatchHosts","map","InventoryRow","patchLastSeen","find","patchRow","id","updated","attributes","last_upload","modifyPackageSystems","inventoryEntitiesReducer","currentPage","action","store","getState","PatchStore","SystemsListStore","AdvisorySystemsStore","type","packagesSystemsInventoryReducer","PackageSystemsStore","systemsListColumns","title","composed","props","width","renderFunc","value","createAdvisoriesIcons","packageSystemsColumns","createUpgradableColumn","systemsRowActions","showRemediationModal","onClick","event","rowId","rowData","fetchApplicableSystemAdvisoriesApi","limit","then","res","remediationProvider","data","item","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","idx","Error","dispose","WithLoaderVariants","spinner","skeleton","loaderMap","size","isDark","centered","WithLoader","loading","variant","children","propTypes","bool","string","any","InfoBox","text","isLoading","color","Split","className","hasGutter","style","backgroundColor","Bullseye","isFilled","component","TextVariants","h6","p","AdvisorySeverityInfo","severity","Popover","position","enableFlip","headerContent","label","bodyContent","TextContent","Text","footerContent","href","target","rel","Flex","FlexItem","spacer","default","object","AdvisoryHeader","severityObject","getSeverityById","Grid","minHeight","GridItem","md","sm","Stack","StackItem","whiteSpace","preserveNewlines","description","public_date","Fragment","processDate","modified_date","ExternalLink","link","AdvisorySystems","advisoryName","dispatch","useDispatch","React","useState","InventoryCmp","setInventoryCmp","RemediationModalCmp","setRemediationModalCmp","rawAdvisorySystems","useSelector","status","error","selectedRows","useMemo","createSystemsRows","metadata","queryParams","inventoryColumns","handleRefresh","useHandleRefresh","apply","search","useEffect","clearAdvisorySystemsStore","fetchAdvisorySystemsAction","fetchInventory","insights","loadInventory","ReactRedux","reactRouterDom","pfReactTable","Table","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","TableVariant","expandable","SortByDirection","pfReact","reactCore","inventoryConnector","mergeWithEntities","register","getStore","InventoryTable","usePagePerPage","offset","page","perPage","params","changeAdvisorySystemsParams","removeFilter","useRemoveFilter","filterConfig","items","searchFilter","activeFiltersConfig","filters","buildFilterChips","onDelete","RemediationModal","onSelect","useOnSelect","fetchAdvisorySystems","toSelect","payload","getMangledColumns","onSort","useSortColumn","sortBy","createSortBy","sort","selectedCount","arrayFromObj","length","STATUS_REJECTED","message","detail","total","total_items","onRefresh","isLoaded","STATUS_RESOLVED","actions","tableProps","canSelectAll","bulkSelect","count","toggleProps","checked","ToolbarGroup","ToolbarItem","Button","isDisabled","Object","keys","ouiaId","AdvisoryDetail","match","advisoryId","advisoryDetails","AdvisoryDetailStore","fetchAvisoryDetails","clearAdvisoryDetailStore","Header","headerOUIA","breadcrumbs","to","paths","advisories","isActive","STATUS_LOADING","Main","h2","withRouter"],"mappings":"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","file":"js/AdvisoryyPage.141f5f750539a5b7d83f.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".col-width-30{width:30%}.col-width-40{width:40%}\\n\", \"\"]);\n\n","import { sortable } from '@patternfly/react-table/dist/js';\n\n// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: []\n};\n// Reducer\n\nfunction replaceLastUpdated (InventoryHosts, PatchHosts) {\n    return InventoryHosts.map((InventoryRow) => {\n        const patchLastSeen = PatchHosts && PatchHosts.find(patchRow=> patchRow.id === InventoryRow.id);\n        return {\n            ...InventoryRow,\n            updated: patchLastSeen && patchLastSeen.attributes.last_upload || InventoryRow.updated\n        };\n    });\n}\n\nfunction modifyInventory(columns, hosts, state) {\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], transforms: [sortable] }];\n        return {\n            ...state,\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ],\n            rows: replaceLastUpdated(state.rows, hosts)\n        };\n    }\n\n    return state;\n}\n\nfunction modifyPackageSystems(columns, hosts, state) {\n    if (state.loaded) {\n        return {\n            ...state,\n            columns\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns, currentPage) => (state = init, action) => {\n    const store = action.store && action.store.getState();\n\n    //display patch 'last_upload' instead of Inventory 'updated' column\n    const PatchStore  = store && (currentPage === 'SYSTEMS_PAGE' ? store.SystemsListStore : store.AdvisorySystemsStore);\n\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, PatchStore.rows, state);\n\n        default:\n            return state;\n    }\n};\n\nexport const packagesSystemsInventoryReducer = (columns) => (state = init, action) => {\n    const store = action.store && action.store.getState();\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyPackageSystems(columns, store.PackageSystemsStore?.rows, state);\n\n        default:\n            return state;\n    }\n};\n","import { sortable } from '@patternfly/react-table/dist/js';\nimport { fetchApplicableSystemAdvisoriesApi } from '../../Utilities/api';\nimport { createAdvisoriesIcons, createUpgradableColumn, remediationProvider } from '../../Utilities/Helpers';\nimport './SystemsListAssets.scss';\n\nexport const systemsListColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        transforms: [sortable],\n        props: {\n            width: 50\n        }\n    },\n    {\n        key: 'packages_installed',\n        title: 'Packages',\n        transforms: [sortable],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'applicable_advisories',\n        title: 'Applicable advisories',\n        transforms: [sortable],\n        props: {\n            width: 20\n        },\n        renderFunc: value => createAdvisoriesIcons(value)\n    }\n];\n\nexport const packageSystemsColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        composed: ['facts.os_release', 'display_name'],\n        props: {\n            width: 50\n        }\n    },\n    {\n        key: 'installed_evra',\n        title: 'Installed version',\n        transforms: [sortable],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'available_evra',\n        title: 'Latest version',\n        transforms: [sortable],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'upgradable',\n        title: 'Status',\n        props: {\n            width: 20\n        },\n        renderFunc: value => createUpgradableColumn(value)\n    }\n];\n\nexport const systemsRowActions = showRemediationModal => {\n    return [\n        {\n            title: 'Apply all applicable advisories',\n            onClick: (event, rowId, rowData) => {\n                fetchApplicableSystemAdvisoriesApi({\n                    id: rowData.id,\n                    limit: 10000\n                }).then(res =>\n                    showRemediationModal(\n                        remediationProvider(\n                            res.data.map(item => item.id),\n                            rowData.id\n                        )\n                    )\n                );\n            }\n        }\n    ];\n};\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsListAssets.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","/* eslint-disable react/prop-types */\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nexport const WithLoaderVariants = {\n    spinner: 'spinner',\n    skeleton: 'skeleton'\n};\n\nconst loaderMap = {\n    [WithLoaderVariants.skeleton]: ({ size, isDark }) => (\n        <Skeleton size={size} isDark={isDark} />\n    ),\n    [WithLoaderVariants.spinner]: ({ centered }) => (\n        <Spinner centered={centered} />\n    )\n};\n\nexport const WithLoader = ({ loading, variant, children, ...props }) => {\n    if (loading !== false) {\n        return loaderMap[variant](props);\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    loading: propTypes.bool,\n    variant: propTypes.string,\n    children: propTypes.any\n};\n\nexport default WithLoader;\n","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".infobox{background-color:var(--pf-global--BackgroundColor--150);border:var(--pf-global--BorderColor--300) var(--pf-global--BorderWidth--sm) solid;height:65px}.infobox>.pf-l-split__item:first-child{width:65px;color:black;background-color:var(--pf-global--warning-color--100)}.infobox>.pf-l-split__item:first-child>div.pf-l-bullseye svg{color:white}.infobox .pf-c-content h6{margin:0}.infobox>.pf-l-split__item:nth-child(2){display:flex;justify-content:flex-start;align-items:center}\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./InfoBox.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./InfoBox.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./InfoBox.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import { Text, TextContent, TextVariants } from '@patternfly/react-core/dist/js/components/Text/';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/';\nimport { Split, SplitItem } from '@patternfly/react-core/dist/js/layouts/Split/';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport WithLoader, { WithLoaderVariants } from '../WithLoader/WithLoader';\nimport './InfoBox.scss';\n\nconst InfoBox = ({ title, text, isLoading, content, color }) => {\n    return (\n        <Split className=\"infobox\" hasGutter>\n            <WithLoader\n                variant={WithLoaderVariants.skeleton}\n                loading={isLoading}\n                size=\"lg\"\n            >\n                <SplitItem style={{ backgroundColor: color }}>\n                    <Bullseye>{content}</Bullseye>\n                </SplitItem>\n                <SplitItem isFilled>\n                    <TextContent>\n                        <Text component={TextVariants.h6}>{title}</Text>\n                        <Text component={TextVariants.p}>{text}</Text>\n                    </TextContent>\n                </SplitItem>\n            </WithLoader>\n        </Split>\n    );\n};\n\nInfoBox.propTypes = {\n    title: propTypes.string,\n    text: propTypes.any,\n    isLoading: propTypes.bool,\n    content: propTypes.any,\n    color: propTypes.string\n};\n\nexport default InfoBox;\n","import { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Popover } from '@patternfly/react-core/dist/js/components/Popover/Popover';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\n\nconst AdvisorySeverityInfo = ({ severity }) => {\n    return (\n        <Popover\n            position=\"bottom\"\n            enableFlip\n            headerContent={<div>{severity.label + ' severity'}</div>}\n            bodyContent={\n                <TextContent>\n                    <Text component={TextVariants.p}>{severity.text}</Text>\n                </TextContent>\n            }\n            footerContent={\n                <a\n                    href=\"https://access.redhat.com/security/updates/classification/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <Flex>\n                        <FlexItem spacer={{ default: 'spacerSm' }}>\n                            <ExternalLinkSquareAltIcon />\n                        </FlexItem>\n                        <FlexItem spacer={{ default: 'spacerSm' }}>\n                            Learn more about security ratings\n                        </FlexItem>\n                    </Flex>\n                </a>\n            }\n        >\n            <a>Learn more</a>\n        </Popover>\n    );\n};\n\nAdvisorySeverityInfo.propTypes = {\n    severity: propTypes.object\n};\n\nexport default AdvisorySeverityInfo;\n","import { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\nimport { Stack } from '@patternfly/react-core/dist/js/layouts/Stack/Stack';\nimport { StackItem } from '@patternfly/react-core/dist/js/layouts/Stack/StackItem';\nimport SecurityIcon from '@patternfly/react-icons/dist/js/icons/security-icon';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport WithLoader, { WithLoaderVariants } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { getSeverityById, preserveNewlines } from '../../Utilities/Helpers';\nimport InfoBox from '../InfoBox/InfoBox';\nimport AdvisorySeverityInfo from '../Snippets/AdvisorySeverityInfo';\nimport ExternalLink from '../Snippets/ExternalLink';\n\nconst AdvisoryHeader = ({ attributes, isLoading }) => {\n    const severityObject = getSeverityById(attributes.severity);\n    return (\n        <Grid hasGutter style={{ minHeight: 150 }}>\n            <GridItem md={8} sm={12}>\n                <WithLoader\n                    loading={isLoading}\n                    variant={WithLoaderVariants.spinner}\n                    centered\n                >\n                    <Stack hasGutter>\n                        <StackItem />\n                        <StackItem style={{ whiteSpace: 'pre-line' }}>\n                            {\n                                preserveNewlines(attributes.description)\n                            }\n                        </StackItem>\n                        <StackItem>\n                            {attributes.public_date && (\n                                <React.Fragment>\n                                    {`Issued: ${processDate(\n                                        attributes.public_date\n                                    )}`}\n                                    <br />\n                                </React.Fragment>\n                            )}\n                            {attributes.modified_date && (\n                                <React.Fragment>\n                                    {`Modified: ${processDate(\n                                        attributes.modified_date\n                                    )}`}\n                                </React.Fragment>\n                            )}\n                        </StackItem>\n                        <StackItem>\n                            <ExternalLink link={`https://access.redhat.com/errata/${attributes.id}`}\n                                text={'View packages and errata at access.redhat.com'} />\n                        </StackItem>\n                    </Stack>\n                </WithLoader>\n            </GridItem>\n            <GridItem md={4} sm={12}>\n                {severityObject.value !== 0 && (\n                    <InfoBox\n                        isLoading={isLoading}\n                        title={severityObject.label}\n                        color={severityObject.color}\n                        text={\n                            <AdvisorySeverityInfo severity={severityObject} />\n                        }\n                        content={<SecurityIcon size=\"lg\" />}\n                    />\n                )}\n            </GridItem>\n        </Grid>\n    );\n};\n\nAdvisoryHeader.propTypes = {\n    attributes: propTypes.object,\n    isLoading: propTypes.bool\n};\n\nexport default AdvisoryHeader;\n","import { Button, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { AnsibeTowerIcon } from '@patternfly/react-icons';\nimport { cellWidth, expandable, sortable, SortByDirection, Table as PfTable, TableBody, TableGridBreakpoint,\n    TableHeader, TableVariant } from '@patternfly/react-table/dist/js';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport * as ReactRedux from 'react-redux';\nimport { reactCore } from '@redhat-cloud-services/frontend-components-utilities/files/inventoryDependencies';\nimport searchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport Error from '../../PresentationalComponents/Snippets/Error';\nimport { getStore, register } from '../../store';\nimport { changeAdvisorySystemsParams, clearAdvisorySystemsStore, fetchAdvisorySystemsAction } from '../../store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../store/Reducers/InventoryEntitiesReducer';\nimport { fetchAdvisorySystems } from '../../Utilities/api';\nimport { STATUS_REJECTED, STATUS_RESOLVED } from '../../Utilities/constants';\nimport { createSystemsRows } from '../../Utilities/DataMappers';\nimport { arrayFromObj, buildFilterChips, createSortBy, remediationProvider } from '../../Utilities/Helpers';\nimport { useHandleRefresh, usePagePerPage, useRemoveFilter, useSortColumn, useOnSelect } from '../../Utilities/Hooks';\nimport RemediationModal from '../Remediation/RemediationModal';\nimport { systemsListColumns, systemsRowActions } from '../Systems/SystemsListAssets';\n\nconst AdvisorySystems = ({ advisoryName }) => {\n    const dispatch = useDispatch();\n    const [InventoryCmp, setInventoryCmp] = React.useState();\n    const [\n        RemediationModalCmp,\n        setRemediationModalCmp\n    ] = React.useState(() => () => null);\n    const rawAdvisorySystems = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.rows\n    );\n    const status = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.status\n    );\n    const error = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.error\n    );\n    const selectedRows = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.selectedRows\n    );\n    const hosts = React.useMemo(\n        () => createSystemsRows(rawAdvisorySystems, selectedRows),\n        [rawAdvisorySystems]\n    );\n    const metadata = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.metadata\n    );\n    const queryParams = useSelector(\n        ({ AdvisorySystemsStore }) => AdvisorySystemsStore.queryParams\n    );\n\n    const inventoryColumns = useSelector(\n        ({ entities }) => entities && entities.columns\n    );\n\n    const handleRefresh = useHandleRefresh(metadata, apply);\n    const { filter, search } = queryParams;\n\n    React.useEffect(() => {\n        return () => dispatch(clearAdvisorySystemsStore());\n    }, []);\n\n    React.useEffect(() => {\n        dispatch(\n            fetchAdvisorySystemsAction({ id: advisoryName, ...queryParams })\n        );\n    }, [queryParams]);\n\n    const fetchInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities\n        } = await insights.loadInventory({\n            ReactRedux,\n            React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            },\n            pfReact: reactCore\n        });\n\n        register({\n            ...mergeWithEntities(inventoryEntitiesReducer(systemsListColumns, 'AFFECTED_SYSTEMS'))\n        });\n        const { InventoryTable } = inventoryConnector(getStore());\n        setInventoryCmp(() => InventoryTable);\n    };\n\n    React.useEffect(() => {\n        fetchInventory();\n    }, []);\n\n    const [page, perPage] = usePagePerPage(metadata.limit, metadata.offset);\n\n    function apply(params) {\n        dispatch(changeAdvisorySystemsParams(params));\n    }\n\n    const removeFilter = useRemoveFilter(filter, apply);\n\n    const filterConfig = {\n        items: [\n            searchFilter(apply, search, 'Search systems')\n        ]\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(filter, search),\n        onDelete: removeFilter\n    };\n\n    const showRemediationModal = data => {\n        setRemediationModalCmp(() => () => <RemediationModal data={data} />);\n    };\n\n    const selectRows = (toSelect) => {\n        dispatch(\n            { type: 'SELECT_ENTITY', payload: toSelect }\n        );\n    };\n\n    const fetchAllData = () =>\n        fetchAdvisorySystems({ ...queryParams, id: advisoryName, limit: -1 });\n\n    const onSelect = useOnSelect(rawAdvisorySystems,  selectedRows, fetchAllData, selectRows);\n\n    // This is used ONLY for sorting purposes\n    const getMangledColumns = () => {\n        let updated = inventoryColumns && inventoryColumns.filter(({ key }) => key === 'updated')[0];\n        updated = { ...updated, key: 'last_upload' };\n        return [...systemsListColumns, updated];\n    };\n\n    const onSort = useSortColumn(getMangledColumns(), apply, 1);\n    const sortBy = React.useMemo(\n        () => createSortBy(getMangledColumns(), metadata.sort, 1),\n        [metadata.sort]\n    );\n\n    const selectedCount = selectedRows && arrayFromObj(selectedRows).length;\n\n    return (\n        <React.Fragment>\n            {status === STATUS_REJECTED ? <Error message={error.detail}/> : InventoryCmp && (\n                <InventoryCmp\n                    items={hosts}\n                    page={page}\n                    total={metadata.total_items}\n                    perPage={perPage}\n                    onRefresh={handleRefresh}\n                    isLoaded={status === STATUS_RESOLVED}\n                    actions={systemsRowActions(showRemediationModal)}\n                    tableProps = {{ canSelectAll: false, onSort, sortBy }}\n                    filterConfig={filterConfig}\n                    activeFiltersConfig = {activeFiltersConfig}\n                    bulkSelect={onSelect && {\n                        count: selectedCount,\n                        items: [{\n                            title: `Select none (0)`,\n                            onClick: () => {\n                                onSelect('none');\n                            }\n                        }, {\n                            title: `Select page (${hosts.length})`,\n                            onClick: () => {\n                                onSelect('page');\n                            }\n                        },\n                        {\n                            title: `Select all (${metadata.total_items})`,\n                            onClick: () => {\n                                onSelect('all');\n                            }\n                        }],\n                        onSelect: (value) => {\n                            value ? onSelect('all') : onSelect('none');\n                        },\n                        toggleProps: {\n                            'data-ouia-component-type': 'bulk-select-toggle-button'\n                        },\n                        checked: selectedCount === metadata.total_items ? true : selectedCount === 0 ? false : null\n                    }}\n                >\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <Button\n                                className={'remediationButtonPatch'}\n                                isDisabled={\n                                    arrayFromObj(selectedRows).length === 0\n                                }\n                                onClick={() =>\n                                    showRemediationModal(\n                                        remediationProvider(\n                                            advisoryName,\n                                            Object.keys(selectedRows)\n                                        )\n                                    )\n                                }\n                                ouiaId={'toolbar-remediation-button'}\n                            >\n                                <AnsibeTowerIcon/>&nbsp;Remediate\n                            </Button>\n                            <RemediationModalCmp />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </InventoryCmp>\n            )}\n        </React.Fragment>\n    );\n};\n\nAdvisorySystems.propTypes = {\n    advisoryName: propTypes.string\n};\n\nexport default AdvisorySystems;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport AdvisoryHeader from '../../PresentationalComponents/AdvisoryHeader/AdvisoryHeader';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport Error from '../../PresentationalComponents/Snippets/Error';\nimport { paths } from '../../Routes';\nimport { clearAdvisoryDetailStore, clearAdvisorySystemsStore, fetchAvisoryDetails } from '../../store/Actions/Actions';\nimport { STATUS_LOADING, STATUS_REJECTED } from '../../Utilities/constants';\nimport AdvisorySystems from '../AdvisorySystems/AdvisorySystems';\n\nconst AdvisoryDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const [advisoryName] = React.useState(match.params.advisoryId);\n    const advisoryDetails = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore\n    );\n    const status = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.status\n    );\n    const error = useSelector(\n        ({ AdvisoryDetailStore }) => AdvisoryDetailStore.error\n    );\n    React.useEffect(() => {\n        dispatch(fetchAvisoryDetails({ advisoryName }));\n    }, []);\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(clearAdvisorySystemsStore());\n            dispatch(clearAdvisoryDetailStore());\n        };\n    }, []);\n\n    const { attributes } = advisoryDetails.data;\n    return (\n        <React.Fragment>\n            <Header\n                title={advisoryName}\n                headerOUIA={'advisory-details'}\n                breadcrumbs={[\n                    {\n                        title: 'Patch',\n                        to: paths.advisories.to,\n                        isActive: false\n                    },\n                    {\n                        title: 'Advisories',\n                        to: paths.advisories.to,\n                        isActive: false\n                    },\n                    {\n                        title: advisoryName,\n                        isActive: true\n                    }\n                ]}\n            >{status === STATUS_REJECTED ? <Error message={error.detail}/> :\n                    <AdvisoryHeader\n                        attributes={{ ...attributes, id: advisoryName }}\n                        isLoading={status === STATUS_LOADING}\n                    />}\n            </Header>\n            <Main>\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>Affected systems</Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        <AdvisorySystems advisoryName={advisoryName} />\n                    </StackItem>\n                </Stack>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nAdvisoryDetail.propTypes = {\n    match: propTypes.any\n};\n\nexport default withRouter(AdvisoryDetail);\n"],"sourceRoot":""}